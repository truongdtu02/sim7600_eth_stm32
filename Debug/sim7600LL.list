
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000226f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ec8  08022880  08022880  00032880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027748  08027748  000403d4  2**0
                  CONTENTS
  4 .ARM          00000008  08027748  08027748  00037748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027750  08027750  000403d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027750  08027750  00037750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027754  08027754  00037754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  08027758  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403d4  2**0
                  CONTENTS
 10 .bss          000168d8  200003d8  200003d8  000403d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016cb0  20016cb0  000403d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005e782  00000000  00000000  00040404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b217  00000000  00000000  0009eb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003070  00000000  00000000  000a9da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e90  00000000  00000000  000ace10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186ef  00000000  00000000  000afca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004841d  00000000  00000000  000c838f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103107  00000000  00000000  001107ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002138b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d538  00000000  00000000  00213908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00220e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00220e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d8 	.word	0x200003d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08022868 	.word	0x08022868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003dc 	.word	0x200003dc
 80001cc:	08022868 	.word	0x08022868

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <__NVIC_EnableIRQ+0x38>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000732:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000736:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d013      	beq.n	800076a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000746:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800074a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00b      	beq.n	800076a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000752:	e000      	b.n	8000756 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000754:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000756:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LL_DMA_SetDataTransferDirection+0x44>)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000798:	4908      	ldr	r1, [pc, #32]	; (80007bc <LL_DMA_SetDataTransferDirection+0x44>)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	440b      	add	r3, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	440b      	add	r3, r1
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	600b      	str	r3, [r1, #0]
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	08027178 	.word	0x08027178

080007c0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LL_DMA_SetMode+0x44>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80007e0:	4908      	ldr	r1, [pc, #32]	; (8000804 <LL_DMA_SetMode+0x44>)
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	440b      	add	r3, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	440b      	add	r3, r1
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	600b      	str	r3, [r1, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	08027178 	.word	0x08027178

08000808 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LL_DMA_SetPeriphIncMode+0x44>)
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000828:	4908      	ldr	r1, [pc, #32]	; (800084c <LL_DMA_SetPeriphIncMode+0x44>)
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	440b      	add	r3, r1
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	440b      	add	r3, r1
 8000836:	4619      	mov	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	600b      	str	r3, [r1, #0]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	08027178 	.word	0x08027178

08000850 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <LL_DMA_SetMemoryIncMode+0x44>)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000870:	4908      	ldr	r1, [pc, #32]	; (8000894 <LL_DMA_SetMemoryIncMode+0x44>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	440b      	add	r3, r1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	440b      	add	r3, r1
 800087e:	4619      	mov	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	600b      	str	r3, [r1, #0]
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	08027178 	.word	0x08027178

08000898 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LL_DMA_SetPeriphSize+0x44>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <LL_DMA_SetPeriphSize+0x44>)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	440b      	add	r3, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	440b      	add	r3, r1
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08027178 	.word	0x08027178

080008e0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LL_DMA_SetMemorySize+0x44>)
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4413      	add	r3, r2
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000900:	4908      	ldr	r1, [pc, #32]	; (8000924 <LL_DMA_SetMemorySize+0x44>)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	440b      	add	r3, r1
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4313      	orrs	r3, r2
 8000914:	600b      	str	r3, [r1, #0]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	08027178 	.word	0x08027178

08000928 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000948:	4908      	ldr	r1, [pc, #32]	; (800096c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	440b      	add	r3, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	440b      	add	r3, r1
 8000956:	4619      	mov	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	600b      	str	r3, [r1, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	08027178 	.word	0x08027178

08000970 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LL_DMA_SetChannelSelection+0x44>)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000990:	4908      	ldr	r1, [pc, #32]	; (80009b4 <LL_DMA_SetChannelSelection+0x44>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	440b      	add	r3, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	440b      	add	r3, r1
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	600b      	str	r3, [r1, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	08027178 	.word	0x08027178

080009b8 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <LL_DMA_DisableFifoMode+0x3c>)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <LL_DMA_DisableFifoMode+0x3c>)
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	440a      	add	r2, r1
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	4611      	mov	r1, r2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	440a      	add	r2, r1
 80009e0:	f023 0304 	bic.w	r3, r3, #4
 80009e4:	6153      	str	r3, [r2, #20]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	08027178 	.word	0x08027178

080009f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <LL_RCC_HSE_Enable+0x1c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <LL_RCC_HSE_Enable+0x1c>)
 8000a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <LL_RCC_HSE_IsReady+0x24>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a28:	bf0c      	ite	eq
 8000a2a:	2301      	moveq	r3, #1
 8000a2c:	2300      	movne	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <LL_RCC_SetSysClkSource+0x24>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0203 	bic.w	r2, r3, #3
 8000a50:	4904      	ldr	r1, [pc, #16]	; (8000a64 <LL_RCC_SetSysClkSource+0x24>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800

08000a68 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <LL_RCC_GetSysClkSource+0x18>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a94:	4904      	ldr	r1, [pc, #16]	; (8000aa8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	608b      	str	r3, [r1, #8]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40023800 	.word	0x40023800

08000aac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000abc:	4904      	ldr	r1, [pc, #16]	; (8000ad0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	608b      	str	r3, [r1, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LL_RCC_PLL_Enable+0x1c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <LL_RCC_PLL_Enable+0x1c>)
 8000b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LL_RCC_PLL_IsReady+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	68f9      	ldr	r1, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	0192      	lsls	r2, r2, #6
 8000b64:	430a      	orrs	r2, r1
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b74:	4904      	ldr	r1, [pc, #16]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	ffbf8000 	.word	0xffbf8000

08000b90 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40023800 	.word	0x40023800

08000bf0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <LL_FLASH_SetLatency+0x24>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f023 0207 	bic.w	r2, r3, #7
 8000c00:	4904      	ldr	r1, [pc, #16]	; (8000c14 <LL_FLASH_SetLatency+0x24>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	600b      	str	r3, [r1, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <LL_FLASH_GetLatency+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0307 	and.w	r3, r3, #7
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c44:	4904      	ldr	r1, [pc, #16]	; (8000c58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40007000 	.word	0x40007000

08000c5c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	619a      	str	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SimStt_Timer_Callback>:
//debug
osTimerId_t SttCheckTimerID; //timer for check sim status
#define STT_CHECK_TIMER_INTERVAL 10 //ms
int oldSimStt = -1;
void SimStt_Timer_Callback(void *argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(Sim_STT != oldSimStt)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <SimStt_Timer_Callback+0x40>)
 8000ce6:	f7ff ffdf 	bl	8000ca8 <LL_GPIO_ReadInputPort>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <SimStt_Timer_Callback+0x44>)
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <SimStt_Timer_Callback+0x38>
  {
    oldSimStt = Sim_STT;
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <SimStt_Timer_Callback+0x40>)
 8000cfa:	f7ff ffd5 	bl	8000ca8 <LL_GPIO_ReadInputPort>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <SimStt_Timer_Callback+0x44>)
 8000d06:	6013      	str	r3, [r2, #0]
    LOG_WRITE("sim status %d\n", oldSimStt);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SimStt_Timer_Callback+0x44>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <SimStt_Timer_Callback+0x48>)
 8000d10:	f020 fbcc 	bl	80214ac <iprintf>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	20000000 	.word	0x20000000
 8000d24:	080229bc 	.word	0x080229bc

08000d28 <_write>:
/* USER CODE BEGIN PFP */
char* DeviceID = "123456781234567812345678";

// #if DEBUG_LOG
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e009      	b.n	8000d4e <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcf1 	bl	800072a <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dbf1      	blt.n	8000d3a <_write+0x12>
    }
    return len;
 8000d56:	687b      	ldr	r3, [r7, #4]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <configureTimerForRunTimeStats>:
// #endif

volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  ulHighFrequencyTimerTicks = 0;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <configureTimerForRunTimeStats+0x14>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim8);
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <configureTimerForRunTimeStats+0x18>)
 8000d6c:	f003 f9ec 	bl	8004148 <HAL_TIM_Base_Start_IT>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20005790 	.word	0x20005790
 8000d78:	2000573c 	.word	0x2000573c

08000d7c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ulHighFrequencyTimerTicks;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <getRunTimeCounterValue+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20005790 	.word	0x20005790

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 fe4e 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f89c 	bl	8000ed8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(30000); //wait for debug
 8000da0:	f247 5030 	movw	r0, #30000	; 0x7530
 8000da4:	f000 fe8a 	bl	8001abc <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 fa50 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dac:	f000 fa36 	bl	800121c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000db0:	f000 f9b0 	bl	8001114 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000db4:	f000 f910 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000db8:	f000 f95c 	bl	8001074 <MX_TIM8_Init>
  MX_SPI2_Init();
 8000dbc:	f000 f8d6 	bl	8000f6c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <main+0xe4>)
 8000dc2:	f003 f959 	bl	8004078 <HAL_TIM_Base_Start>
  configureTimerForRunTimeStats();
 8000dc6:	f7ff ffcb 	bl	8000d60 <configureTimerForRunTimeStats>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dca:	f00a fd7f 	bl	800b8cc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of InitBinSem */
  InitBinSemHandle = osSemaphoreNew(1, 1, &InitBinSem_attributes);
 8000dce:	4a2b      	ldr	r2, [pc, #172]	; (8000e7c <main+0xe8>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f00b f9c7 	bl	800c166 <osSemaphoreNew>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <main+0xec>)
 8000ddc:	6013      	str	r3, [r2, #0]

  /* creation of InitCountSem */
  InitCountSemHandle = osSemaphoreNew(2, 2, &InitCountSem_attributes);
 8000dde:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <main+0xf0>)
 8000de0:	2102      	movs	r1, #2
 8000de2:	2002      	movs	r0, #2
 8000de4:	f00b f9bf 	bl	800c166 <osSemaphoreNew>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <main+0xf4>)
 8000dec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  SimATBinSem = osSemaphoreNew(1, 1, &SimATBinSem_attributes);
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <main+0xf8>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	2001      	movs	r0, #1
 8000df4:	f00b f9b7 	bl	800c166 <osSemaphoreNew>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <main+0xfc>)
 8000dfc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of InitTimerPeriodic */
  InitTimerPeriodicHandle = osTimerNew(CallbackTimerPeriodic, osTimerPeriodic, NULL, &InitTimerPeriodic_attributes);
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <main+0x100>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4824      	ldr	r0, [pc, #144]	; (8000e98 <main+0x104>)
 8000e06:	f00a fe83 	bl	800bb10 <osTimerNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <main+0x108>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of InitTimerOnce */
  InitTimerOnceHandle = osTimerNew(CallbackTimerOnce, osTimerOnce, NULL, &InitTimerOnce_attributes);
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <main+0x10c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <main+0x110>)
 8000e18:	f00a fe7a 	bl	800bb10 <osTimerNew>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <main+0x114>)
 8000e20:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  TCPTimerOnceID = osTimerNew(TCP_Timer_Callback, osTimerOnce, NULL, NULL);
 8000e22:	2300      	movs	r3, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	4820      	ldr	r0, [pc, #128]	; (8000eac <main+0x118>)
 8000e2a:	f00a fe71 	bl	800bb10 <osTimerNew>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <main+0x11c>)
 8000e32:	6013      	str	r3, [r2, #0]
  SttCheckTimerID = osTimerNew(SimStt_Timer_Callback, osTimerPeriodic, NULL, NULL);
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2101      	movs	r1, #1
 8000e3a:	481e      	ldr	r0, [pc, #120]	; (8000eb4 <main+0x120>)
 8000e3c:	f00a fe68 	bl	800bb10 <osTimerNew>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <main+0x124>)
 8000e44:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of InitQueue */
  InitQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &InitQueue_attributes);
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <main+0x128>)
 8000e48:	2102      	movs	r1, #2
 8000e4a:	2010      	movs	r0, #16
 8000e4c:	f00b face 	bl	800c3ec <osMessageQueueNew>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <main+0x12c>)
 8000e54:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <main+0x130>)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <main+0x134>)
 8000e5c:	f00a fd95 	bl	800b98a <osThreadNew>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <main+0x138>)
 8000e64:	6013      	str	r3, [r2, #0]
  
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of InitEvent */
  InitEventHandle = osEventFlagsNew(&InitEvent_attributes);
 8000e66:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <main+0x13c>)
 8000e68:	f00a ff33 	bl	800bcd2 <osEventFlagsNew>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <main+0x140>)
 8000e70:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e72:	f00a fd4f 	bl	800b914 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  VS1063_Init();
//  VS1063_SoftReset();
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <main+0xe2>
 8000e78:	200057cc 	.word	0x200057cc
 8000e7c:	080271dc 	.word	0x080271dc
 8000e80:	200057b8 	.word	0x200057b8
 8000e84:	080271ec 	.word	0x080271ec
 8000e88:	200057b4 	.word	0x200057b4
 8000e8c:	08027348 	.word	0x08027348
 8000e90:	20005794 	.word	0x20005794
 8000e94:	080271bc 	.word	0x080271bc
 8000e98:	08001535 	.word	0x08001535
 8000e9c:	20005798 	.word	0x20005798
 8000ea0:	080271cc 	.word	0x080271cc
 8000ea4:	08001549 	.word	0x08001549
 8000ea8:	200057a0 	.word	0x200057a0
 8000eac:	0800a299 	.word	0x0800a299
 8000eb0:	20005784 	.word	0x20005784
 8000eb4:	08000cdd 	.word	0x08000cdd
 8000eb8:	20005818 	.word	0x20005818
 8000ebc:	080271a4 	.word	0x080271a4
 8000ec0:	20005788 	.word	0x20005788
 8000ec4:	08027180 	.word	0x08027180
 8000ec8:	08001395 	.word	0x08001395
 8000ecc:	200056e0 	.word	0x200056e0
 8000ed0:	080271fc 	.word	0x080271fc
 8000ed4:	200056d8 	.word	0x200056d8

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000edc:	2005      	movs	r0, #5
 8000ede:	f7ff fe87 	bl	8000bf0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff fe98 	bl	8000c18 <LL_FLASH_GetLatency>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d1fa      	bne.n	8000ee4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000eee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ef2:	f7ff fe9f 	bl	8000c34 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000ef6:	f7ff fd7f 	bl	80009f8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000efa:	bf00      	nop
 8000efc:	f7ff fd8c 	bl	8000a18 <LL_RCC_HSE_IsReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d1fa      	bne.n	8000efc <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000f06:	2300      	movs	r3, #0
 8000f08:	22a8      	movs	r2, #168	; 0xa8
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f10:	f7ff fe18 	bl	8000b44 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f14:	f7ff fdf2 	bl	8000afc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f18:	bf00      	nop
 8000f1a:	f7ff fdff 	bl	8000b1c <LL_RCC_PLL_IsReady>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d1fa      	bne.n	8000f1a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fdad 	bl	8000a84 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f2a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f2e:	f7ff fdbd 	bl	8000aac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f36:	f7ff fdcd 	bl	8000ad4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f7ff fd80 	bl	8000a40 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f40:	bf00      	nop
 8000f42:	f7ff fd91 	bl	8000a68 <LL_RCC_GetSysClkSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d1fa      	bne.n	8000f42 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <SystemClock_Config+0x90>)
 8000f4e:	f004 fa29 	bl	80053a4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	200f      	movs	r0, #15
 8000f54:	f000 fbea 	bl	800172c <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f5e:	f000 fb0f 	bl	8001580 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	0a037a00 	.word	0x0a037a00

08000f6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <MX_SPI2_Init+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fa0:	2230      	movs	r2, #48	; 0x30
 8000fa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fb8:	220a      	movs	r2, #10
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fbe:	f002 fa63 	bl	8003488 <HAL_SPI_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fc8:	f000 fada 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200056e4 	.word	0x200056e4
 8000fd4:	40003800 	.word	0x40003800

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM2_Init+0x98>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM2_Init+0x98>)
 8000ffe:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM2_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM2_Init+0x98>)
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_TIM2_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_TIM2_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <MX_TIM2_Init+0x98>)
 8001020:	f002 ffda 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800102a:	f000 faa9 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM2_Init+0x98>)
 800103c:	f003 f9fc 	bl	8004438 <HAL_TIM_ConfigClockSource>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001046:	f000 fa9b 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_TIM2_Init+0x98>)
 8001058:	f003 fc18 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001062:	f000 fa8d 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200057cc 	.word	0x200057cc

08001074 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM8_Init+0x98>)
 8001092:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <MX_TIM8_Init+0x9c>)
 8001094:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_TIM8_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM8_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM8_Init+0x98>)
 80010a4:	f240 628f 	movw	r2, #1679	; 0x68f
 80010a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM8_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_TIM8_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_TIM8_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <MX_TIM8_Init+0x98>)
 80010be:	f002 ff8b 	bl	8003fd8 <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80010c8:	f000 fa5a 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM8_Init+0x98>)
 80010da:	f003 f9ad 	bl	8004438 <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80010e4:	f000 fa4c 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM8_Init+0x98>)
 80010f6:	f003 fbc9 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001100:	f000 fa3e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000573c 	.word	0x2000573c
 8001110:	40010400 	.word	0x40010400

08001114 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	; 0x38
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800113e:	2010      	movs	r0, #16
 8001140:	f7ff fd3e 	bl	8000bc0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff fd23 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA11   ------> USART1_CTS
  PA12   ------> USART1_RTS
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800114a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800114e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001160:	2307      	movs	r3, #7
 8001162:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4829      	ldr	r0, [pc, #164]	; (8001210 <MX_USART1_UART_Init+0xfc>)
 800116a:	f003 fd24 	bl	8004bb6 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	2102      	movs	r1, #2
 8001174:	4827      	ldr	r0, [pc, #156]	; (8001214 <MX_USART1_UART_Init+0x100>)
 8001176:	f7ff fbfb 	bl	8000970 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4825      	ldr	r0, [pc, #148]	; (8001214 <MX_USART1_UART_Init+0x100>)
 8001180:	f7ff fafa 	bl	8000778 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_VERYHIGH);
 8001184:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001188:	2102      	movs	r1, #2
 800118a:	4822      	ldr	r0, [pc, #136]	; (8001214 <MX_USART1_UART_Init+0x100>)
 800118c:	f7ff fbcc 	bl	8000928 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	2102      	movs	r1, #2
 8001196:	481f      	ldr	r0, [pc, #124]	; (8001214 <MX_USART1_UART_Init+0x100>)
 8001198:	f7ff fb12 	bl	80007c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011a2:	f7ff fb31 	bl	8000808 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 80011a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011aa:	2102      	movs	r1, #2
 80011ac:	4819      	ldr	r0, [pc, #100]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011ae:	f7ff fb4f 	bl	8000850 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4817      	ldr	r0, [pc, #92]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011b8:	f7ff fb6e 	bl	8000898 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011c2:	f7ff fb8d 	bl	80008e0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 80011c6:	2102      	movs	r1, #2
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011ca:	f7ff fbf5 	bl	80009b8 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011d2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011e2:	230c      	movs	r3, #12
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_RTS_CTS;
 80011e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <MX_USART1_UART_Init+0x104>)
 80011f8:	f004 f854 	bl	80052a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_USART1_UART_Init+0x104>)
 80011fe:	f7ff fd3d 	bl	8000c7c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART1_UART_Init+0x104>)
 8001204:	f7ff fd2a 	bl	8000c5c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020000 	.word	0x40020000
 8001214:	40026400 	.word	0x40026400
 8001218:	40011000 	.word	0x40011000

0800121c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001220:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001224:	f7ff fcb4 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001228:	f7ff f9f6 	bl	8000618 <__NVIC_GetPriorityGrouping>
 800122c:	4603      	mov	r3, r0
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fa46 	bl	80006c4 <NVIC_EncodePriority>
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	203a      	movs	r0, #58	; 0x3a
 800123e:	f7ff fa17 	bl	8000670 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001242:	203a      	movs	r0, #58	; 0x3a
 8001244:	f7ff f9f6 	bl	8000634 <__NVIC_EnableIRQ>

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001262:	2010      	movs	r0, #16
 8001264:	f7ff fc94 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001268:	2080      	movs	r0, #128	; 0x80
 800126a:	f7ff fc91 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800126e:	2004      	movs	r0, #4
 8001270:	f7ff fc8e 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fc8b 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fc88 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	481b      	ldr	r0, [pc, #108]	; (80012f0 <MX_GPIO_Init+0xa4>)
 8001284:	f7ff fd1c 	bl	8000cc0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13);
 8001288:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 800128c:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_GPIO_Init+0xa8>)
 800128e:	f7ff fd17 	bl	8000cc0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_9;
 8001292:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_GPIO_Init+0xa8>)
 80012a6:	f003 fc86 	bl	8004bb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ae:	2301      	movs	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <MX_GPIO_Init+0xa4>)
 80012c4:	f003 fc77 	bl	8004bb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13;
 80012c8:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80012cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ce:	2301      	movs	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0xa8>)
 80012e4:	f003 fc67 	bl	8004bb6 <LL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40021000 	.word	0x40021000

080012f8 <StartConfigSimTask>:

/* USER CODE BEGIN 4 */

void StartConfigSimTask(void *argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	(void*) argument;
  //debug
  osTimerStart(SttCheckTimerID, STT_CHECK_TIMER_INTERVAL);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <StartConfigSimTask+0x20>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	210a      	movs	r1, #10
 8001306:	4618      	mov	r0, r3
 8001308:	f00a fc7e 	bl	800bc08 <osTimerStart>

  sim7600_fullConfigTask();
 800130c:	f007 fb6c 	bl	80089e8 <sim7600_fullConfigTask>
//    RSA2048_Pubkey_Encrypt(NULL, 0, input, strlen(input), output);
//    AES_Encrypt_Packet(output, 250);
//    AES_Decrypt_Packet(output, 256);
//    osDelay(1000);
//  }
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20005818 	.word	0x20005818

0800131c <StartConnectSimTask>:

void StartConnectSimTask(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	(void*) argument;
  sim7600_connectTask();
 8001324:	f007 fc4e 	bl	8008bc4 <sim7600_connectTask>
//	for(;;) {
//		osDelay(100);
//	}
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <StartSendSimTask>:

void StartSendSimTask(void *argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  sim7600_sendTask();
 8001338:	f007 fdf2 	bl	8008f20 <sim7600_sendTask>
//	for(;;) {
//			osDelay(100);
//		}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <StartRecvSimTask>:
void StartRecvSimTask(void *argument)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  sim7600_recvTask();
 800134c:	f007 fe34 	bl	8008fb8 <sim7600_recvTask>
//	for(;;) {
//			osDelay(100);
//		}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <StartConnectEthTask>:

void StartConnectEthTask(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  (void*) argument;
  ethConnectTask();
 8001360:	f005 fbd4 	bl	8006b0c <ethConnectTask>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <StartSendEthTask>:

void StartSendEthTask(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  (void*) argument;
  ethSendTask();
 8001374:	f005 fa7e 	bl	8006874 <ethSendTask>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <StartVs1063Task>:
  (void*) argument;
  ethRecvTask();
}

void StartVs1063Task(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	(void*) argument;
	VS1063_PlayMP3_Task();
 8001388:	f009 fda6 	bl	800aed8 <VS1063_PlayMP3_Task>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800139c:	f009 fdd2 	bl	800af44 <MX_LWIP_Init>
//	while(true)
//	{
//		VS1063_PlayBeep();
//		osDelay(500);
//	}
  if (netif_is_link_up(&gnetif) == 0)
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <StartDefaultTask+0x10c>)
 80013a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d145      	bne.n	800143c <StartDefaultTask+0xa8>
  {
    //start with sim7600
    LOG_WRITE("sim7600 mode\n");
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <StartDefaultTask+0x110>)
 80013b2:	f020 f917 	bl	80215e4 <puts>

    ConfigSimEventID = osEventFlagsNew(&ConfigSimEvent_attributes);
 80013b6:	483c      	ldr	r0, [pc, #240]	; (80014a8 <StartDefaultTask+0x114>)
 80013b8:	f00a fc8b 	bl	800bcd2 <osEventFlagsNew>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <StartDefaultTask+0x118>)
 80013c0:	6013      	str	r3, [r2, #0]
    ConnectSimEventID = osEventFlagsNew(&ConnectSimEvent_attributes);
 80013c2:	483b      	ldr	r0, [pc, #236]	; (80014b0 <StartDefaultTask+0x11c>)
 80013c4:	f00a fc85 	bl	800bcd2 <osEventFlagsNew>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a3a      	ldr	r2, [pc, #232]	; (80014b4 <StartDefaultTask+0x120>)
 80013cc:	6013      	str	r3, [r2, #0]
    SendSimEventID = osEventFlagsNew(&SendSimEvent_attributes);
 80013ce:	483a      	ldr	r0, [pc, #232]	; (80014b8 <StartDefaultTask+0x124>)
 80013d0:	f00a fc7f 	bl	800bcd2 <osEventFlagsNew>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a39      	ldr	r2, [pc, #228]	; (80014bc <StartDefaultTask+0x128>)
 80013d8:	6013      	str	r3, [r2, #0]

    SendSimQueueID = osMessageQueueNew(5, sizeof(sendSimPack), &SendSimQueue_attributes);
 80013da:	4a39      	ldr	r2, [pc, #228]	; (80014c0 <StartDefaultTask+0x12c>)
 80013dc:	211c      	movs	r1, #28
 80013de:	2005      	movs	r0, #5
 80013e0:	f00b f804 	bl	800c3ec <osMessageQueueNew>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <StartDefaultTask+0x130>)
 80013e8:	6013      	str	r3, [r2, #0]

    configSimTaskHandle = osThreadNew(StartConfigSimTask, NULL, &configSimTask_attributes);
 80013ea:	4a37      	ldr	r2, [pc, #220]	; (80014c8 <StartDefaultTask+0x134>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	4837      	ldr	r0, [pc, #220]	; (80014cc <StartDefaultTask+0x138>)
 80013f0:	f00a facb 	bl	800b98a <osThreadNew>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a36      	ldr	r2, [pc, #216]	; (80014d0 <StartDefaultTask+0x13c>)
 80013f8:	6013      	str	r3, [r2, #0]
    connectSimTaskHandle = osThreadNew(StartConnectSimTask, NULL, &connectSimTask_attributes);
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <StartDefaultTask+0x140>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4836      	ldr	r0, [pc, #216]	; (80014d8 <StartDefaultTask+0x144>)
 8001400:	f00a fac3 	bl	800b98a <osThreadNew>
 8001404:	4603      	mov	r3, r0
 8001406:	4a35      	ldr	r2, [pc, #212]	; (80014dc <StartDefaultTask+0x148>)
 8001408:	6013      	str	r3, [r2, #0]
    sendSimTaskHandle = osThreadNew(StartSendSimTask, NULL, &sendSimTask_attributes);
 800140a:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <StartDefaultTask+0x14c>)
 800140c:	2100      	movs	r1, #0
 800140e:	4835      	ldr	r0, [pc, #212]	; (80014e4 <StartDefaultTask+0x150>)
 8001410:	f00a fabb 	bl	800b98a <osThreadNew>
 8001414:	4603      	mov	r3, r0
 8001416:	4a34      	ldr	r2, [pc, #208]	; (80014e8 <StartDefaultTask+0x154>)
 8001418:	6013      	str	r3, [r2, #0]
    recvSimTaskHandle = osThreadNew(StartRecvSimTask, NULL, &recvSimTask_attributes);
 800141a:	4a34      	ldr	r2, [pc, #208]	; (80014ec <StartDefaultTask+0x158>)
 800141c:	2100      	movs	r1, #0
 800141e:	4834      	ldr	r0, [pc, #208]	; (80014f0 <StartDefaultTask+0x15c>)
 8001420:	f00a fab3 	bl	800b98a <osThreadNew>
 8001424:	4603      	mov	r3, r0
 8001426:	4a33      	ldr	r2, [pc, #204]	; (80014f4 <StartDefaultTask+0x160>)
 8001428:	6013      	str	r3, [r2, #0]
    vs1063TaskId = osThreadNew(StartVs1063Task, NULL, &vs1063Task_attributes);
 800142a:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <StartDefaultTask+0x164>)
 800142c:	2100      	movs	r1, #0
 800142e:	4833      	ldr	r0, [pc, #204]	; (80014fc <StartDefaultTask+0x168>)
 8001430:	f00a faab 	bl	800b98a <osThreadNew>
 8001434:	4603      	mov	r3, r0
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <StartDefaultTask+0x16c>)
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e028      	b.n	800148e <StartDefaultTask+0xfa>
  }
  else
  {
    //start with ETH
    LOG_WRITE("eth mode\n");
 800143c:	4831      	ldr	r0, [pc, #196]	; (8001504 <StartDefaultTask+0x170>)
 800143e:	f020 f8d1 	bl	80215e4 <puts>
//    while(MX_LWIP_checkIsystem_ip_addr() == 0)
//        {
//        	osDelay(1000);
//        }

    ConnectEthEventID = osEventFlagsNew(&ConnectEthEvent_attributes);
 8001442:	4831      	ldr	r0, [pc, #196]	; (8001508 <StartDefaultTask+0x174>)
 8001444:	f00a fc45 	bl	800bcd2 <osEventFlagsNew>
 8001448:	4603      	mov	r3, r0
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <StartDefaultTask+0x178>)
 800144c:	6013      	str	r3, [r2, #0]

    SendEthQueueID = osMessageQueueNew(5, sizeof(sendEthPack), &SendEthQueue_attributes);
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <StartDefaultTask+0x17c>)
 8001450:	2114      	movs	r1, #20
 8001452:	2005      	movs	r0, #5
 8001454:	f00a ffca 	bl	800c3ec <osMessageQueueNew>
 8001458:	4603      	mov	r3, r0
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <StartDefaultTask+0x180>)
 800145c:	6013      	str	r3, [r2, #0]

    connectEthTaskId = osThreadNew(StartConnectEthTask, NULL, &connectEthTask_attributes);
 800145e:	4a2e      	ldr	r2, [pc, #184]	; (8001518 <StartDefaultTask+0x184>)
 8001460:	2100      	movs	r1, #0
 8001462:	482e      	ldr	r0, [pc, #184]	; (800151c <StartDefaultTask+0x188>)
 8001464:	f00a fa91 	bl	800b98a <osThreadNew>
 8001468:	4603      	mov	r3, r0
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <StartDefaultTask+0x18c>)
 800146c:	6013      	str	r3, [r2, #0]
    sendEthTaskId = osThreadNew(StartSendEthTask, NULL, &sendEthTask_attributes);
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <StartDefaultTask+0x190>)
 8001470:	2100      	movs	r1, #0
 8001472:	482d      	ldr	r0, [pc, #180]	; (8001528 <StartDefaultTask+0x194>)
 8001474:	f00a fa89 	bl	800b98a <osThreadNew>
 8001478:	4603      	mov	r3, r0
 800147a:	4a2c      	ldr	r2, [pc, #176]	; (800152c <StartDefaultTask+0x198>)
 800147c:	6013      	str	r3, [r2, #0]
    // recvEthTaskId = osThreadNew(StartRecvEthTask, NULL, &recvEthTask_attributes);
    vs1063TaskId = osThreadNew(StartVs1063Task, NULL, &vs1063Task_attributes);
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <StartDefaultTask+0x164>)
 8001480:	2100      	movs	r1, #0
 8001482:	481e      	ldr	r0, [pc, #120]	; (80014fc <StartDefaultTask+0x168>)
 8001484:	f00a fa81 	bl	800b98a <osThreadNew>
 8001488:	4603      	mov	r3, r0
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <StartDefaultTask+0x16c>)
 800148c:	6013      	str	r3, [r2, #0]
  }

  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 800148e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001492:	f00a fb0c 	bl	800baae <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <StartDefaultTask+0x19c>)
 800149a:	f001 ff88 	bl	80033ae <HAL_GPIO_TogglePin>
    osDelay(1000);
 800149e:	e7f6      	b.n	800148e <StartDefaultTask+0xfa>
 80014a0:	200102fc 	.word	0x200102fc
 80014a4:	080229e8 	.word	0x080229e8
 80014a8:	08027308 	.word	0x08027308
 80014ac:	200057bc 	.word	0x200057bc
 80014b0:	08027318 	.word	0x08027318
 80014b4:	200057c0 	.word	0x200057c0
 80014b8:	08027328 	.word	0x08027328
 80014bc:	200057a4 	.word	0x200057a4
 80014c0:	08027358 	.word	0x08027358
 80014c4:	200057c8 	.word	0x200057c8
 80014c8:	0802720c 	.word	0x0802720c
 80014cc:	080012f9 	.word	0x080012f9
 80014d0:	2000578c 	.word	0x2000578c
 80014d4:	08027230 	.word	0x08027230
 80014d8:	0800131d 	.word	0x0800131d
 80014dc:	200057a8 	.word	0x200057a8
 80014e0:	08027254 	.word	0x08027254
 80014e4:	08001331 	.word	0x08001331
 80014e8:	2000581c 	.word	0x2000581c
 80014ec:	08027278 	.word	0x08027278
 80014f0:	08001345 	.word	0x08001345
 80014f4:	200057b0 	.word	0x200057b0
 80014f8:	080272e4 	.word	0x080272e4
 80014fc:	08001381 	.word	0x08001381
 8001500:	2000579c 	.word	0x2000579c
 8001504:	080229f8 	.word	0x080229f8
 8001508:	08027338 	.word	0x08027338
 800150c:	20005820 	.word	0x20005820
 8001510:	08027370 	.word	0x08027370
 8001514:	200056dc 	.word	0x200056dc
 8001518:	0802729c 	.word	0x0802729c
 800151c:	08001359 	.word	0x08001359
 8001520:	20005814 	.word	0x20005814
 8001524:	080272c0 	.word	0x080272c0
 8001528:	0800136d 	.word	0x0800136d
 800152c:	200057ac 	.word	0x200057ac
 8001530:	40020000 	.word	0x40020000

08001534 <CallbackTimerPeriodic>:
  /* USER CODE END 5 */
}

/* CallbackTimerPeriodic function */
void CallbackTimerPeriodic(void *argument)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerPeriodic */

  /* USER CODE END CallbackTimerPeriodic */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <CallbackTimerOnce>:

/* CallbackTimerOnce function */
void CallbackTimerOnce(void *argument)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerOnce */

  /* USER CODE END CallbackTimerOnce */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156e:	f000 fa85 	bl	8001a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_MspInit+0x54>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_MspInit+0x54>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x54>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_MspInit+0x54>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_MspInit+0x54>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_MspInit+0x54>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	210f      	movs	r1, #15
 80015ce:	f06f 0001 	mvn.w	r0, #1
 80015d2:	f000 fb4f 	bl	8001c74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_SPI_MspInit+0xc0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d14a      	bne.n	800169c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_SPI_MspInit+0xc4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <HAL_SPI_MspInit+0xc8>)
 8001676:	f001 fccd 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800167a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800168c:	2305      	movs	r3, #5
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <HAL_SPI_MspInit+0xcc>)
 8001698:	f001 fcbc 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40003800 	.word	0x40003800
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020400 	.word	0x40020400

080016b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c4:	d10e      	bne.n	80016e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_TIM_Base_MspInit+0x70>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <HAL_TIM_Base_MspInit+0x70>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_TIM_Base_MspInit+0x70>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016e2:	e01a      	b.n	800171a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_TIM_Base_MspInit+0x74>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d115      	bne.n	800171a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_TIM_Base_MspInit+0x70>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_TIM_Base_MspInit+0x70>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_Base_MspInit+0x70>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2105      	movs	r1, #5
 800170e:	202c      	movs	r0, #44	; 0x2c
 8001710:	f000 fab0 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001714:	202c      	movs	r0, #44	; 0x2c
 8001716:	f000 fac9 	bl	8001cac <HAL_NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2019      	movs	r0, #25
 8001742:	f000 fa97 	bl	8001c74 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001746:	2019      	movs	r0, #25
 8001748:	f000 fab0 	bl	8001cac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_InitTick+0xa4>)
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_InitTick+0xa4>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6453      	str	r3, [r2, #68]	; 0x44
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_InitTick+0xa4>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001768:	f107 0210 	add.w	r2, r7, #16
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fe56 	bl	8003424 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001778:	f001 fe40 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 800177c:	4603      	mov	r3, r0
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_InitTick+0xa8>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	3b01      	subs	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_InitTick+0xac>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_InitTick+0xb0>)
 8001794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_InitTick+0xac>)
 8001798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800179c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_InitTick+0xac>)
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_InitTick+0xac>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_InitTick+0xac>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <HAL_InitTick+0xac>)
 80017b2:	f002 fc11 	bl	8003fd8 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017bc:	4806      	ldr	r0, [pc, #24]	; (80017d8 <HAL_InitTick+0xac>)
 80017be:	f002 fcc3 	bl	8004148 <HAL_TIM_Base_Start_IT>
 80017c2:	4603      	mov	r3, r0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	20005824 	.word	0x20005824
 80017dc:	40010000 	.word	0x40010000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001812:	f002 fd09 	bl	8004228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20005824 	.word	0x20005824

08001820 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a03      	ldr	r2, [pc, #12]	; (8001838 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800182c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8001830:	f002 fcfa 	bl	8004228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20005790 	.word	0x20005790
 800183c:	2000573c 	.word	0x2000573c

08001840 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <ETH_IRQHandler+0x10>)
 8001856:	f000 fe1b 	bl	8002490 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20011c10 	.word	0x20011c10

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <_kill+0x20>)
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20016c9c 	.word	0x20016c9c

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe5 	bl	8001874 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
	}

return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d205      	bcs.n	800198c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <_sbrk+0x6c>)
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20020000 	.word	0x20020000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	200003f4 	.word	0x200003f4
 80019b8:	20016cb0 	.word	0x20016cb0
 80019bc:	20016c9c 	.word	0x20016c9c

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd7 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f01f fc1b 	bl	802124c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff f9bd 	bl	8000d94 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 8001a28:	08027758 	.word	0x08027758
  ldr r2, =_sbss
 8001a2c:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8001a30:	20016cb0 	.word	0x20016cb0

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f8fc 	bl	8001c5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f7ff fe60 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fd8e 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	2000586c 	.word	0x2000586c

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000586c 	.word	0x2000586c

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <__NVIC_SetPriorityGrouping>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff4c 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c86:	f7ff ff61 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001c8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	6978      	ldr	r0, [r7, #20]
 8001c92:	f7ff ffb1 	bl	8001bf8 <NVIC_EncodePriority>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff80 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff54 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001cd8:	4baa      	ldr	r3, [pc, #680]	; (8001f84 <HAL_ETH_Init+0x2bc>)
 8001cda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e183      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f009 f992 	bl	800b02c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <HAL_ETH_Init+0x2c0>)
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	4a9d      	ldr	r2, [pc, #628]	; (8001f88 <HAL_ETH_Init+0x2c0>)
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d16:	6453      	str	r3, [r2, #68]	; 0x44
 8001d18:	4b9b      	ldr	r3, [pc, #620]	; (8001f88 <HAL_ETH_Init+0x2c0>)
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d24:	4b99      	ldr	r3, [pc, #612]	; (8001f8c <HAL_ETH_Init+0x2c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a98      	ldr	r2, [pc, #608]	; (8001f8c <HAL_ETH_Init+0x2c4>)
 8001d2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d2e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d30:	4b96      	ldr	r3, [pc, #600]	; (8001f8c <HAL_ETH_Init+0x2c4>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4994      	ldr	r1, [pc, #592]	; (8001f8c <HAL_ETH_Init+0x2c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d54:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d56:	f7ff fea5 	bl	8001aa4 <HAL_GetTick>
 8001d5a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d5c:	e011      	b.n	8001d82 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d5e:	f7ff fea1 	bl	8001aa4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d6c:	d909      	bls.n	8001d82 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e139      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e4      	bne.n	8001d5e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f023 031c 	bic.w	r3, r3, #28
 8001da2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001da4:	f001 fb1e 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8001da8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_ETH_Init+0x2c8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d908      	bls.n	8001dc4 <HAL_ETH_Init+0xfc>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4a77      	ldr	r2, [pc, #476]	; (8001f94 <HAL_ETH_Init+0x2cc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d804      	bhi.n	8001dc4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e027      	b.n	8001e14 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	4a73      	ldr	r2, [pc, #460]	; (8001f94 <HAL_ETH_Init+0x2cc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d908      	bls.n	8001dde <HAL_ETH_Init+0x116>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	4a6d      	ldr	r2, [pc, #436]	; (8001f84 <HAL_ETH_Init+0x2bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d204      	bcs.n	8001dde <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f043 030c 	orr.w	r3, r3, #12
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	e01a      	b.n	8001e14 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4a68      	ldr	r2, [pc, #416]	; (8001f84 <HAL_ETH_Init+0x2bc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d303      	bcc.n	8001dee <HAL_ETH_Init+0x126>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4a6b      	ldr	r2, [pc, #428]	; (8001f98 <HAL_ETH_Init+0x2d0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d911      	bls.n	8001e12 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4a69      	ldr	r2, [pc, #420]	; (8001f98 <HAL_ETH_Init+0x2d0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d908      	bls.n	8001e08 <HAL_ETH_Init+0x140>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4a68      	ldr	r2, [pc, #416]	; (8001f9c <HAL_ETH_Init+0x2d4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d804      	bhi.n	8001e08 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e005      	b.n	8001e14 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	e000      	b.n	8001e14 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e12:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e20:	2100      	movs	r1, #0
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fc17 	bl	8002656 <HAL_ETH_WritePHYRegister>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001e32:	6939      	ldr	r1, [r7, #16]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fdcd 	bl	80029d4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d7      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001e46:	20ff      	movs	r0, #255	; 0xff
 8001e48:	f7ff fe38 	bl	8001abc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a5 	beq.w	8001fa0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e56:	f7ff fe25 	bl	8001aa4 <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	461a      	mov	r2, r3
 8001e62:	2101      	movs	r1, #1
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fb8e 	bl	8002586 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001e6a:	f7ff fe1b 	bl	8001aa4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d90f      	bls.n	8001e9c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e80:	6939      	ldr	r1, [r7, #16]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fda6 	bl	80029d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ac      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0da      	beq.n	8001e5c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fbd2 	bl	8002656 <HAL_ETH_WritePHYRegister>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fd88 	bl	80029d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e092      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff fde8 	bl	8001aa4 <HAL_GetTick>
 8001ed4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	461a      	mov	r2, r3
 8001edc:	2101      	movs	r1, #1
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fb51 	bl	8002586 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ee4:	f7ff fdde 	bl	8001aa4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d90f      	bls.n	8001f16 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001efa:	6939      	ldr	r1, [r7, #16]
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fd69 	bl	80029d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e06f      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0da      	beq.n	8001ed6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	461a      	mov	r2, r3
 8001f26:	2110      	movs	r1, #16
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb2c 	bl	8002586 <HAL_ETH_ReadPHYRegister>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f38:	6939      	ldr	r1, [r7, #16]
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fd4a 	bl	80029d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e054      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	e002      	b.n	8001f66 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	e035      	b.n	8001fe4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e030      	b.n	8001fe4 <HAL_ETH_Init+0x31c>
 8001f82:	bf00      	nop
 8001f84:	03938700 	.word	0x03938700
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	01312cff 	.word	0x01312cff
 8001f94:	02160ebf 	.word	0x02160ebf
 8001f98:	05f5e0ff 	.word	0x05f5e0ff
 8001f9c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fb4c 	bl	8002656 <HAL_ETH_WritePHYRegister>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00b      	beq.n	8001fdc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fc8:	6939      	ldr	r1, [r7, #16]
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fd02 	bl	80029d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e00c      	b.n	8001ff6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001fdc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001fe0:	f7ff fd6c 	bl	8001abc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001fe4:	6939      	ldr	r1, [r7, #16]
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fcf4 	bl	80029d4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop

08002000 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ETH_DMATxDescListInit+0x20>
 800201c:	2302      	movs	r3, #2
 800201e:	e052      	b.n	80020c6 <HAL_ETH_DMATxDescListInit+0xc6>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e030      	b.n	800209e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800204c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	461a      	mov	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	d208      	bcs.n	8002092 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	015b      	lsls	r3, r3, #5
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4413      	add	r3, r2
 800208a:	461a      	mov	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	e002      	b.n	8002098 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3ca      	bcc.n	800203c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b0:	3310      	adds	r3, #16
 80020b2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ETH_DMARxDescListInit+0x20>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e056      	b.n	80021a0 <HAL_ETH_DMARxDescListInit+0xce>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e034      	b.n	8002178 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	4413      	add	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800211e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002126:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	461a      	mov	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	429a      	cmp	r2, r3
 8002158:	d208      	bcs.n	800216c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	4413      	add	r3, r2
 8002164:	461a      	mov	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	e002      	b.n	8002172 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d3c6      	bcc.n	800210e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218a:	330c      	adds	r3, #12
 800218c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ETH_TransmitFrame+0x24>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0cd      	b.n	800236c <HAL_ETH_TransmitFrame+0x1c0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0b8      	b.n	800236c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da09      	bge.n	8002218 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2212      	movs	r2, #18
 8002208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0a9      	b.n	800236c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800221e:	4293      	cmp	r3, r2
 8002220:	d915      	bls.n	800224e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	4a54      	ldr	r2, [pc, #336]	; (8002378 <HAL_ETH_TransmitFrame+0x1cc>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0a9b      	lsrs	r3, r3, #10
 800222c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4b51      	ldr	r3, [pc, #324]	; (8002378 <HAL_ETH_TransmitFrame+0x1cc>)
 8002232:	fba3 1302 	umull	r1, r3, r3, r2
 8002236:	0a9b      	lsrs	r3, r3, #10
 8002238:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e001      	b.n	8002252 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800224e:	2301      	movs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11c      	bne.n	8002292 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002266:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002272:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002282:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002290:	e04b      	b.n	800232a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e044      	b.n	8002322 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022bc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022c6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d116      	bne.n	8002300 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022e0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_ETH_TransmitFrame+0x1d0>)
 80022e6:	fb02 f203 	mul.w	r2, r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80022f2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022fe:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800230e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	461a      	mov	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	3301      	adds	r3, #1
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3b6      	bcc.n	8002298 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002332:	3314      	adds	r3, #20
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002346:	3314      	adds	r3, #20
 8002348:	2204      	movs	r2, #4
 800234a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002354:	3304      	adds	r3, #4
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	ac02b00b 	.word	0xac02b00b
 800237c:	fffffa0c 	.word	0xfffffa0c

08002380 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002396:	2302      	movs	r3, #2
 8002398:	e074      	b.n	8002484 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80023aa:	e05a      	b.n	8002462 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d10d      	bne.n	80023de <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
 80023dc:	e041      	b.n	8002462 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
 8002402:	e02e      	b.n	8002462 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	2b01      	cmp	r3, #1
 800241c:	d103      	bne.n	8002426 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002432:	1f1a      	subs	r2, r3, #4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e010      	b.n	8002484 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db02      	blt.n	8002472 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d99c      	bls.n	80023ac <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	3314      	adds	r3, #20
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d112      	bne.n	80024d2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f008 fe6b 	bl	800b188 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	3314      	adds	r3, #20
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024d0:	e01b      	b.n	800250a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024da:	3314      	adds	r3, #20
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d111      	bne.n	800250a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f839 	bl	800255e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	3314      	adds	r3, #20
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	3314      	adds	r3, #20
 8002514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002518:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002522:	3314      	adds	r3, #20
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252e:	d112      	bne.n	8002556 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f81e 	bl	8002572 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253e:	3314      	adds	r3, #20
 8002540:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002544:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	460b      	mov	r3, r1
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b82      	cmp	r3, #130	; 0x82
 80025a6:	d101      	bne.n	80025ac <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
 80025aa:	e050      	b.n	800264e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2282      	movs	r2, #130	; 0x82
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 031c 	and.w	r3, r3, #28
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8a1b      	ldrh	r3, [r3, #16]
 80025c8:	02db      	lsls	r3, r3, #11
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80025d2:	897b      	ldrh	r3, [r7, #10]
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0302 	bic.w	r3, r3, #2
 80025e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025f8:	f7ff fa54 	bl	8001aa4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025fe:	e015      	b.n	800262c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002600:	f7ff fa50 	bl	8001aa4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d309      	bcc.n	8002624 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e014      	b.n	800264e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e4      	bne.n	8002600 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	460b      	mov	r3, r1
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b42      	cmp	r3, #66	; 0x42
 8002676:	d101      	bne.n	800267c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	e04e      	b.n	800271a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2242      	movs	r2, #66	; 0x42
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 031c 	and.w	r3, r3, #28
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8a1b      	ldrh	r3, [r3, #16]
 8002698:	02db      	lsls	r3, r3, #11
 800269a:	b29b      	uxth	r3, r3
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026d2:	f7ff f9e7 	bl	8001aa4 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026d8:	e015      	b.n	8002706 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80026da:	f7ff f9e3 	bl	8001aa4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d309      	bcc.n	80026fe <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e00d      	b.n	800271a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e4      	bne.n	80026da <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ETH_Start+0x16>
 8002734:	2302      	movs	r3, #2
 8002736:	e01f      	b.n	8002778 <HAL_ETH_Start+0x56>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fb45 	bl	8002dd8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fb7c 	bl	8002e4c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fc13 	bl	8002f80 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fbb0 	bl	8002ec0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fbdd 	bl	8002f20 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ETH_Stop+0x16>
 8002792:	2302      	movs	r3, #2
 8002794:	e01f      	b.n	80027d6 <HAL_ETH_Stop+0x56>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fba2 	bl	8002ef0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fbcf 	bl	8002f50 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb67 	bl	8002e86 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fbe1 	bl	8002f80 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fb27 	bl	8002e12 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_ETH_ConfigMAC+0x1c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0e4      	b.n	80029c6 <HAL_ETH_ConfigMAC+0x1e6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80b1 	beq.w	8002976 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800282c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002832:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002838:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800283e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002844:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800284a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002850:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002856:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800285c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002862:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002868:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800286e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff f918 	bl	8001abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800289c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80028a2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80028a8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80028ae:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80028b4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80028ba:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80028c6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028c8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7ff f8f2 	bl	8001abc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028e8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028f2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002910:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002916:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800291c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002922:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002928:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002940:	2001      	movs	r0, #1
 8002942:	f7ff f8bb 	bl	8001abc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002966:	2001      	movs	r0, #1
 8002968:	f7ff f8a8 	bl	8001abc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	61da      	str	r2, [r3, #28]
 8002974:	e01e      	b.n	80029b4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002984:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7ff f888 	bl	8001abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	ff20810f 	.word	0xff20810f

080029d4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0b0      	sub	sp, #192	; 0xc0
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002a02:	2300      	movs	r3, #0
 8002a04:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a20:	e001      	b.n	8002a26 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a30:	2300      	movs	r3, #0
 8002a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002aa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aac:	4bac      	ldr	r3, [pc, #688]	; (8002d60 <ETH_MACDMAConfig+0x38c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002ab8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002abc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002ac0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002ac6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002aca:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002ace:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002ad4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ad8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002adc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002ae0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002ae4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002ae8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002aea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002afc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7fe ffd7 	bl	8001abc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b16:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b1c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002b20:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002b26:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002b2c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002b32:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002b38:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002b3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002b44:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b46:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7fe ffb2 	bl	8001abc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b60:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b6a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b74:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b84:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b88:	4013      	ands	r3, r2
 8002b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b92:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b98:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002b9e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002ba4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002baa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002bb0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7fe ff73 	bl	8001abc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bde:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002be0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002be4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7fe ff5e 	bl	8001abc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c08:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c12:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c1c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c2e:	2304      	movs	r3, #4
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5e:	3318      	adds	r3, #24
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <ETH_MACDMAConfig+0x390>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c72:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c74:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c76:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c78:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c7a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c7c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c7e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c80:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c82:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c84:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c86:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c88:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c8a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c8e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c92:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb6:	3318      	adds	r3, #24
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7fe fefc 	bl	8001abc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ccc:	3318      	adds	r3, #24
 8002cce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cd8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002cdc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002ce0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002ce4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002cea:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002cee:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7fe fed5 	bl	8001abc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d1e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10f      	bne.n	8002d48 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d30:	331c      	adds	r3, #28
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d44:	331c      	adds	r3, #28
 8002d46:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2100      	movs	r1, #0
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f809 	bl	8002d68 <ETH_MACAddressConfig>
}
 8002d56:	bf00      	nop
 8002d58:	37c0      	adds	r7, #192	; 0xc0
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	ff20810f 	.word	0xff20810f
 8002d64:	f8de3f23 	.word	0xf8de3f23

08002d68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3305      	adds	r3, #5
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	3204      	adds	r2, #4
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <ETH_MACAddressConfig+0x68>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3303      	adds	r3, #3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	061a      	lsls	r2, r3, #24
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3301      	adds	r3, #1
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	4313      	orrs	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <ETH_MACAddressConfig+0x6c>)
 8002dba:	4413      	add	r3, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40028040 	.word	0x40028040
 8002dd4:	40028044 	.word	0x40028044

08002dd8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0208 	orr.w	r2, r2, #8
 8002df2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f000 f8e9 	bl	8002fd4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f000 f8cc 	bl	8002fd4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0204 	orr.w	r2, r2, #4
 8002e66:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e70:	2001      	movs	r0, #1
 8002e72:	f000 f8af 	bl	8002fd4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0204 	bic.w	r2, r2, #4
 8002ea0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f000 f892 	bl	8002fd4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee0:	3318      	adds	r3, #24
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f00:	3318      	adds	r3, #24
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f10:	3318      	adds	r3, #24
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	3318      	adds	r3, #24
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0202 	orr.w	r2, r2, #2
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f40:	3318      	adds	r3, #24
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f60:	3318      	adds	r3, #24
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0202 	bic.w	r2, r2, #2
 8002f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f70:	3318      	adds	r3, #24
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f94:	3318      	adds	r3, #24
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa4:	3318      	adds	r3, #24
 8002fa6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb0:	3318      	adds	r3, #24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 f80c 	bl	8002fd4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <ETH_Delay+0x38>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <ETH_Delay+0x3c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a5b      	lsrs	r3, r3, #9
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002ff0:	bf00      	nop
  } 
  while (Delay --);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	60fa      	str	r2, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <ETH_Delay+0x1c>
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000008 	.word	0x20000008
 8003010:	10624dd3 	.word	0x10624dd3

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e16b      	b.n	8003308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 815a 	bne.w	8003302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d005      	beq.n	8003066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	2b02      	cmp	r3, #2
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d017      	beq.n	8003104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80b4 	beq.w	8003302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b60      	ldr	r3, [pc, #384]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a5f      	ldr	r2, [pc, #380]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a5b      	ldr	r2, [pc, #364]	; (8003324 <HAL_GPIO_Init+0x310>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_GPIO_Init+0x314>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x226>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_GPIO_Init+0x318>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_GPIO_Init+0x31c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_GPIO_Init+0x320>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x21a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_GPIO_Init+0x324>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x216>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_GPIO_Init+0x328>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x212>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x32c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x330>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x20a>
 800321a:	2307      	movs	r3, #7
 800321c:	e00e      	b.n	800323c <HAL_GPIO_Init+0x228>
 800321e:	2308      	movs	r3, #8
 8003220:	e00c      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003222:	2306      	movs	r3, #6
 8003224:	e00a      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003226:	2305      	movs	r3, #5
 8003228:	e008      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322a:	2304      	movs	r3, #4
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x228>
 800323a:	2300      	movs	r3, #0
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324c:	4935      	ldr	r1, [pc, #212]	; (8003324 <HAL_GPIO_Init+0x310>)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_GPIO_Init+0x334>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <HAL_GPIO_Init+0x334>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_GPIO_Init+0x334>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a8:	4a27      	ldr	r2, [pc, #156]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	f67f ae90 	bls.w	8003030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40013800 	.word	0x40013800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020800 	.word	0x40020800
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40021000 	.word	0x40021000
 800333c:	40021400 	.word	0x40021400
 8003340:	40021800 	.word	0x40021800
 8003344:	40021c00 	.word	0x40021c00
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e001      	b.n	800336e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	4613      	mov	r3, r2
 800338a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003398:	e003      	b.n	80033a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	041a      	lsls	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	619a      	str	r2, [r3, #24]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c0:	887a      	ldrh	r2, [r7, #2]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	041a      	lsls	r2, r3, #16
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	400b      	ands	r3, r1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	619a      	str	r2, [r3, #24]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000008 	.word	0x20000008

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff fff0 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08027398 	.word	0x08027398

08003424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	220f      	movs	r2, #15
 8003432:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	08db      	lsrs	r3, r3, #3
 800345e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCC_GetClockConfig+0x60>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0207 	and.w	r2, r3, #7
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40023c00 	.word	0x40023c00

08003488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07b      	b.n	8003592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d009      	beq.n	80034c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe f882 	bl	80015e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	ea42 0103 	orr.w	r1, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0104 	and.w	r1, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0210 	and.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_SPI_Transmit+0x22>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e126      	b.n	800380a <HAL_SPI_Transmit+0x270>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c4:	f7fe fa6e 	bl	8001aa4 <HAL_GetTick>
 80035c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035de:	e10b      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x52>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f0:	e102      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003638:	d10f      	bne.n	800365a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d007      	beq.n	8003678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	d14b      	bne.n	800371a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0xf6>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d13e      	bne.n	800370e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b4:	e02b      	b.n	800370e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d112      	bne.n	80036ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e8:	e011      	b.n	800370e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fe f9db 	bl	8001aa4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x168>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x16e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800370c:	e074      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ce      	bne.n	80036b6 <HAL_SPI_Transmit+0x11c>
 8003718:	e04c      	b.n	80037b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0x18e>
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d140      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800374e:	e02c      	b.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d113      	bne.n	8003786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
 8003784:	e011      	b.n	80037aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fe f98d 	bl	8001aa4 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d803      	bhi.n	800379e <HAL_SPI_Transmit+0x204>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Transmit+0x20a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a8:	e026      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1cd      	bne.n	8003750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fbcb 	bl	8003f54 <SPI_EndRxTxTransaction>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e000      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003808:	7ffb      	ldrb	r3, [r7, #31]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b088      	sub	sp, #32
 8003816:	af02      	add	r7, sp, #8
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382e:	d112      	bne.n	8003856 <HAL_SPI_Receive+0x44>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10e      	bne.n	8003856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2204      	movs	r2, #4
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8f1 	bl	8003a34 <HAL_SPI_TransmitReceive>
 8003852:	4603      	mov	r3, r0
 8003854:	e0ea      	b.n	8003a2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_SPI_Receive+0x52>
 8003860:	2302      	movs	r3, #2
 8003862:	e0e3      	b.n	8003a2c <HAL_SPI_Receive+0x21a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386c:	f7fe f91a 	bl	8001aa4 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003882:	e0ca      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Receive+0x7e>
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003894:	e0c1      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2204      	movs	r2, #4
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	d10f      	bne.n	80038fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d007      	beq.n	800391c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d162      	bne.n	80039ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003924:	e02e      	b.n	8003984 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d115      	bne.n	8003960 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f103 020c 	add.w	r2, r3, #12
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395e:	e011      	b.n	8003984 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003960:	f7fe f8a0 	bl	8001aa4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d803      	bhi.n	8003978 <HAL_SPI_Receive+0x166>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d102      	bne.n	800397e <HAL_SPI_Receive+0x16c>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003982:	e04a      	b.n	8003a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cb      	bne.n	8003926 <HAL_SPI_Receive+0x114>
 800398e:	e031      	b.n	80039f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d113      	bne.n	80039c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	b292      	uxth	r2, r2
 80039aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c4:	e011      	b.n	80039ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c6:	f7fe f86d 	bl	8001aa4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d803      	bhi.n	80039de <HAL_SPI_Receive+0x1cc>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d102      	bne.n	80039e4 <HAL_SPI_Receive+0x1d2>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039e8:	e017      	b.n	8003a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1cd      	bne.n	8003990 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fa45 	bl	8003e88 <SPI_EndRxTransaction>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e000      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

error :
 8003a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x26>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e18a      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x33c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a62:	f7fe f81f 	bl	8001aa4 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d00f      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x70>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8a:	d107      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x68>
 8003a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d003      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aa2:	e15b      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003abc:	e14e      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d003      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2205      	movs	r2, #5
 8003ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	887a      	ldrh	r2, [r7, #2]
 8003ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d007      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2e:	d178      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x10a>
 8003b38:	8b7b      	ldrh	r3, [r7, #26]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d166      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b62:	e053      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d11b      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x176>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d016      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x176>
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d113      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d119      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x1b8>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bec:	f7fd ff5a 	bl	8001aa4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d807      	bhi.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c0a:	e0a7      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1a6      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x130>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1a1      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x130>
 8003c20:	e07c      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x1fc>
 8003c2a:	8b7b      	ldrh	r3, [r7, #26]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d16b      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c56:	e057      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d11c      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d114      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d119      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x2ae>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ce2:	f7fd fedf 	bl	8001aa4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d803      	bhi.n	8003cfa <HAL_SPI_TransmitReceive+0x2c6>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2cc>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d06:	e029      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1a2      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x224>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d19d      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f917 	bl	8003f54 <SPI_EndRxTxTransaction>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d38:	e010      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	e000      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3730      	adds	r7, #48	; 0x30
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d88:	f7fd fe8c 	bl	8001aa4 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d98:	f7fd fe84 	bl	8001aa4 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	015b      	lsls	r3, r3, #5
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	e054      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d050      	beq.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db8:	f7fd fe74 	bl	8001aa4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d111      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df0:	d004      	beq.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d107      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e14:	d10f      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e017      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d19b      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000008 	.word	0x20000008

08003e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9c:	d111      	bne.n	8003ec2 <SPI_EndRxTransaction+0x3a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d004      	beq.n	8003eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d107      	bne.n	8003ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eca:	d12a      	bne.n	8003f22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d012      	beq.n	8003efc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff ff49 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02d      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e026      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2200      	movs	r2, #0
 8003f04:	2101      	movs	r1, #1
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ff36 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01a      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e013      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff23 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e000      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <SPI_EndRxTxTransaction+0x7c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <SPI_EndRxTxTransaction+0x80>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0d5b      	lsrs	r3, r3, #21
 8003f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d112      	bne.n	8003fa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff fef4 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e00f      	b.n	8003fc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d0f2      	beq.n	8003fa6 <SPI_EndRxTxTransaction+0x52>
 8003fc0:	e000      	b.n	8003fc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fc2:	bf00      	nop
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000008 	.word	0x20000008
 8003fd4:	165e9f81 	.word	0x165e9f81

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fb58 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fafe 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e046      	b.n	800411e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <HAL_TIM_Base_Start+0xb4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d01d      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_TIM_Base_Start+0xb8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <HAL_TIM_Base_Start+0xbc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <HAL_TIM_Base_Start+0xc0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <HAL_TIM_Base_Start+0xc4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_TIM_Base_Start+0xc8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIM_Base_Start+0x70>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <HAL_TIM_Base_Start+0xcc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b06      	cmp	r3, #6
 80040f8:	d010      	beq.n	800411c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	e007      	b.n	800411c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40010400 	.word	0x40010400
 8004140:	40014000 	.word	0x40014000
 8004144:	40001800 	.word	0x40001800

08004148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e04e      	b.n	80041fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <HAL_TIM_Base_Start_IT+0xc4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d01d      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_TIM_Base_Start_IT+0xc8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_TIM_Base_Start_IT+0xcc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <HAL_TIM_Base_Start_IT+0xd0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1b      	ldr	r2, [pc, #108]	; (800421c <HAL_TIM_Base_Start_IT+0xd4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a19      	ldr	r2, [pc, #100]	; (8004220 <HAL_TIM_Base_Start_IT+0xd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_TIM_Base_Start_IT+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d010      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	e007      	b.n	80041fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40001800 	.word	0x40001800

08004228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0202 	mvn.w	r2, #2
 8004254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9b5 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9a7 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9b8 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0204 	mvn.w	r2, #4
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f98b 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f97d 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f98e 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0208 	mvn.w	r2, #8
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2204      	movs	r2, #4
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f961 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f953 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f964 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0210 	mvn.w	r2, #16
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2208      	movs	r2, #8
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f937 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f929 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f93a 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10e      	bne.n	80043ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0201 	mvn.w	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd f8d8 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fae0 	bl	8004998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8ff 	bl	8004602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b20      	cmp	r3, #32
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0220 	mvn.w	r2, #32
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 faaa 	bl	8004984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIM_ConfigClockSource+0x1c>
 8004450:	2302      	movs	r3, #2
 8004452:	e0b4      	b.n	80045be <HAL_TIM_ConfigClockSource+0x186>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448c:	d03e      	beq.n	800450c <HAL_TIM_ConfigClockSource+0xd4>
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	f200 8087 	bhi.w	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	f000 8086 	beq.w	80045aa <HAL_TIM_ConfigClockSource+0x172>
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d87f      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b70      	cmp	r3, #112	; 0x70
 80044a6:	d01a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0xa6>
 80044a8:	2b70      	cmp	r3, #112	; 0x70
 80044aa:	d87b      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b60      	cmp	r3, #96	; 0x60
 80044ae:	d050      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x11a>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d877      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b50      	cmp	r3, #80	; 0x50
 80044b6:	d03c      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0xfa>
 80044b8:	2b50      	cmp	r3, #80	; 0x50
 80044ba:	d873      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d058      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x13a>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d86f      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d064      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d86b      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d060      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d867      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05c      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d05a      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044dc:	e062      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f000 f9ad 	bl	800484c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	609a      	str	r2, [r3, #8]
      break;
 800450a:	e04f      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f000 f996 	bl	800484c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800452e:	609a      	str	r2, [r3, #8]
      break;
 8004530:	e03c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f000 f90a 	bl	8004758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2150      	movs	r1, #80	; 0x50
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f963 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8004550:	e02c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f929 	bl	80047b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2160      	movs	r1, #96	; 0x60
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f953 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8004570:	e01c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f8ea 	bl	8004758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2140      	movs	r1, #64	; 0x40
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f943 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8004590:	e00c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 f93a 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 80045a2:	e003      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      break;
 80045a8:	e000      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a40      	ldr	r2, [pc, #256]	; (800472c <TIM_Base_SetConfig+0x114>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <TIM_Base_SetConfig+0x118>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3c      	ldr	r2, [pc, #240]	; (8004734 <TIM_Base_SetConfig+0x11c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a3b      	ldr	r2, [pc, #236]	; (8004738 <TIM_Base_SetConfig+0x120>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a3a      	ldr	r2, [pc, #232]	; (800473c <TIM_Base_SetConfig+0x124>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d108      	bne.n	800466a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2f      	ldr	r2, [pc, #188]	; (800472c <TIM_Base_SetConfig+0x114>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d027      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <TIM_Base_SetConfig+0x118>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d023      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <TIM_Base_SetConfig+0x11c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <TIM_Base_SetConfig+0x120>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <TIM_Base_SetConfig+0x124>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d017      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <TIM_Base_SetConfig+0x128>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a27      	ldr	r2, [pc, #156]	; (8004744 <TIM_Base_SetConfig+0x12c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a26      	ldr	r2, [pc, #152]	; (8004748 <TIM_Base_SetConfig+0x130>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a25      	ldr	r2, [pc, #148]	; (800474c <TIM_Base_SetConfig+0x134>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <TIM_Base_SetConfig+0x138>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a23      	ldr	r2, [pc, #140]	; (8004754 <TIM_Base_SetConfig+0x13c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <TIM_Base_SetConfig+0x114>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <TIM_Base_SetConfig+0x124>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40010400 	.word	0x40010400
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800
 800474c:	40001800 	.word	0x40001800
 8004750:	40001c00 	.word	0x40001c00
 8004754:	40002000 	.word	0x40002000

08004758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 030a 	bic.w	r3, r3, #10
 8004794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b087      	sub	sp, #28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0210 	bic.w	r2, r3, #16
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	031b      	lsls	r3, r3, #12
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	f043 0307 	orr.w	r3, r3, #7
 8004838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	021a      	lsls	r2, r3, #8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	431a      	orrs	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e05a      	b.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d01d      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1d      	ldr	r2, [pc, #116]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40010400 	.word	0x40010400
 800497c:	40014000 	.word	0x40014000
 8004980:	40001800 	.word	0x40001800

08004984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_GPIO_SetPinMode>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	2103      	movs	r1, #3
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	401a      	ands	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	61bb      	str	r3, [r7, #24]
  return result;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3724      	adds	r7, #36	; 0x24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_GPIO_SetPinOutputType>:
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_GPIO_SetPinSpeed>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b089      	sub	sp, #36	; 0x24
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	fa93 f3a3 	rbit	r3, r3
 8004a54:	613b      	str	r3, [r7, #16]
  return result;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	fab3 f383 	clz	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	2103      	movs	r1, #3
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	61bb      	str	r3, [r7, #24]
  return result;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	609a      	str	r2, [r3, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	3724      	adds	r7, #36	; 0x24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_GPIO_SetPinPull>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	613b      	str	r3, [r7, #16]
  return result;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2103      	movs	r1, #3
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	61bb      	str	r3, [r7, #24]
  return result;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	60da      	str	r2, [r3, #12]
}
 8004aea:	bf00      	nop
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_GPIO_SetAFPin_0_7>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	b089      	sub	sp, #36	; 0x24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1a      	ldr	r2, [r3, #32]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	613b      	str	r3, [r7, #16]
  return result;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	fab3 f383 	clz	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	210f      	movs	r1, #15
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	401a      	ands	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	61bb      	str	r3, [r7, #24]
  return result;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	3724      	adds	r7, #36	; 0x24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <LL_GPIO_SetAFPin_8_15>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	613b      	str	r3, [r7, #16]
  return result;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	fab3 f383 	clz	r3, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	210f      	movs	r1, #15
 8004b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	401a      	ands	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	61bb      	str	r3, [r7, #24]
  return result;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b088      	sub	sp, #32
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	fa93 f3a3 	rbit	r3, r3
 8004bd4:	613b      	str	r3, [r7, #16]
  return result;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004be0:	e050      	b.n	8004c84 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2101      	movs	r1, #1
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d042      	beq.n	8004c7e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d003      	beq.n	8004c08 <LL_GPIO_Init+0x52>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d10d      	bne.n	8004c24 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	69b9      	ldr	r1, [r7, #24]
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff12 	bl	8004a3a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fef3 	bl	8004a0a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	69b9      	ldr	r1, [r7, #24]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ff33 	bl	8004a98 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d11a      	bne.n	8004c70 <LL_GPIO_Init+0xba>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	60bb      	str	r3, [r7, #8]
  return result;
 8004c46:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004c48:	fab3 f383 	clz	r3, r3
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	d807      	bhi.n	8004c62 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	461a      	mov	r2, r3
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff4b 	bl	8004af6 <LL_GPIO_SetAFPin_0_7>
 8004c60:	e006      	b.n	8004c70 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	461a      	mov	r2, r3
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff72 	bl	8004b54 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	461a      	mov	r2, r3
 8004c76:	69b9      	ldr	r1, [r7, #24]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fe97 	bl	80049ac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1a7      	bne.n	8004be2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <LL_RCC_GetSysClkSource>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <LL_RCC_GetSysClkSource+0x18>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <LL_RCC_GetAHBPrescaler>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <LL_RCC_GetAHBPrescaler+0x18>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800

08004cd4 <LL_RCC_GetAPB1Prescaler>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <LL_RCC_GetAPB1Prescaler+0x18>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800

08004cf0 <LL_RCC_GetAPB2Prescaler>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <LL_RCC_PLL_GetMainSource+0x18>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800

08004d28 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <LL_RCC_PLL_GetN+0x18>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	099b      	lsrs	r3, r3, #6
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40023800 	.word	0x40023800

08004d44 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <LL_RCC_PLL_GetP+0x18>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800

08004d60 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <LL_RCC_PLL_GetDivider+0x18>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800

08004d7c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004d84:	f000 f820 	bl	8004dc8 <RCC_GetSystemClockFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f840 	bl	8004e18 <RCC_GetHCLKClockFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f84e 	bl	8004e44 <RCC_GetPCLK1ClockFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f85a 	bl	8004e6c <RCC_GetPCLK2ClockFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004dd2:	f7ff ff63 	bl	8004c9c <LL_RCC_GetSysClkSource>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d00c      	beq.n	8004df6 <RCC_GetSystemClockFreq+0x2e>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d80f      	bhi.n	8004e00 <RCC_GetSystemClockFreq+0x38>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <RCC_GetSystemClockFreq+0x22>
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d003      	beq.n	8004df0 <RCC_GetSystemClockFreq+0x28>
 8004de8:	e00a      	b.n	8004e00 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <RCC_GetSystemClockFreq+0x48>)
 8004dec:	607b      	str	r3, [r7, #4]
      break;
 8004dee:	e00a      	b.n	8004e06 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <RCC_GetSystemClockFreq+0x4c>)
 8004df2:	607b      	str	r3, [r7, #4]
      break;
 8004df4:	e007      	b.n	8004e06 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004df6:	2008      	movs	r0, #8
 8004df8:	f000 f84c 	bl	8004e94 <RCC_PLL_GetFreqDomain_SYS>
 8004dfc:	6078      	str	r0, [r7, #4]
      break;
 8004dfe:	e002      	b.n	8004e06 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <RCC_GetSystemClockFreq+0x48>)
 8004e02:	607b      	str	r3, [r7, #4]
      break;
 8004e04:	bf00      	nop
  }

  return frequency;
 8004e06:	687b      	ldr	r3, [r7, #4]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200

08004e18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e20:	f7ff ff4a 	bl	8004cb8 <LL_RCC_GetAHBPrescaler>
 8004e24:	4603      	mov	r3, r0
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <RCC_GetHCLKClockFreq+0x28>)
 8004e2e:	5cd3      	ldrb	r3, [r2, r3]
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	40d3      	lsrs	r3, r2
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	08027388 	.word	0x08027388

08004e44 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004e4c:	f7ff ff42 	bl	8004cd4 <LL_RCC_GetAPB1Prescaler>
 8004e50:	4603      	mov	r3, r0
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <RCC_GetPCLK1ClockFreq+0x24>)
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	40d3      	lsrs	r3, r2
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	08027398 	.word	0x08027398

08004e6c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004e74:	f7ff ff3c 	bl	8004cf0 <LL_RCC_GetAPB2Prescaler>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <RCC_GetPCLK2ClockFreq+0x24>)
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
 8004e80:	461a      	mov	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	40d3      	lsrs	r3, r2
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	08027398 	.word	0x08027398

08004e94 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ea8:	f7ff ff30 	bl	8004d0c <LL_RCC_PLL_GetMainSource>
 8004eac:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eba:	d003      	beq.n	8004ec4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004ebc:	e005      	b.n	8004eca <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004ec0:	617b      	str	r3, [r7, #20]
      break;
 8004ec2:	e005      	b.n	8004ed0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004ec6:	617b      	str	r3, [r7, #20]
      break;
 8004ec8:	e002      	b.n	8004ed0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004ecc:	617b      	str	r3, [r7, #20]
      break;
 8004ece:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d113      	bne.n	8004efe <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ed6:	f7ff ff43 	bl	8004d60 <LL_RCC_PLL_GetDivider>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	fbb3 f4f2 	udiv	r4, r3, r2
 8004ee2:	f7ff ff21 	bl	8004d28 <LL_RCC_PLL_GetN>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	fb03 f404 	mul.w	r4, r3, r4
 8004eec:	f7ff ff2a 	bl	8004d44 <LL_RCC_PLL_GetP>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fbb4 f3f3 	udiv	r3, r4, r3
 8004efc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004efe:	693b      	ldr	r3, [r7, #16]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}
 8004f08:	00f42400 	.word	0x00f42400
 8004f0c:	007a1200 	.word	0x007a1200

08004f10 <LL_USART_IsEnabled>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_USART_SetStopBitsLength>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_USART_SetHWFlowCtrl>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	615a      	str	r2, [r3, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_USART_SetBaudRate>:
{
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	b09f      	sub	sp, #124	; 0x7c
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6778      	str	r0, [r7, #116]	; 0x74
 8004f8e:	6739      	str	r1, [r7, #112]	; 0x70
 8004f90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f92:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9a:	f040 80bc 	bne.w	8005116 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	f04f 0500 	mov.w	r5, #0
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	eb12 0a02 	adds.w	sl, r2, r2
 8004fae:	eb43 0b03 	adc.w	fp, r3, r3
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	1912      	adds	r2, r2, r4
 8004fb8:	eb45 0303 	adc.w	r3, r5, r3
 8004fbc:	f04f 0000 	mov.w	r0, #0
 8004fc0:	f04f 0100 	mov.w	r1, #0
 8004fc4:	00d9      	lsls	r1, r3, #3
 8004fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fca:	00d0      	lsls	r0, r2, #3
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	1911      	adds	r1, r2, r4
 8004fd2:	6639      	str	r1, [r7, #96]	; 0x60
 8004fd4:	416b      	adcs	r3, r5
 8004fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	6339      	str	r1, [r7, #48]	; 0x30
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ff0:	f7fb f996 	bl	8000320 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4ba9      	ldr	r3, [pc, #676]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 8004ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	b29b      	uxth	r3, r3
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	b29e      	uxth	r6, r3
 8005006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005008:	461c      	mov	r4, r3
 800500a:	f04f 0500 	mov.w	r5, #0
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	1891      	adds	r1, r2, r2
 8005014:	62b9      	str	r1, [r7, #40]	; 0x28
 8005016:	415b      	adcs	r3, r3
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800501e:	1912      	adds	r2, r2, r4
 8005020:	eb45 0303 	adc.w	r3, r5, r3
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	00d9      	lsls	r1, r3, #3
 800502e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005032:	00d0      	lsls	r0, r2, #3
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	1911      	adds	r1, r2, r4
 800503a:	65b9      	str	r1, [r7, #88]	; 0x58
 800503c:	416b      	adcs	r3, r5
 800503e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005042:	461a      	mov	r2, r3
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	1891      	adds	r1, r2, r2
 800504a:	6239      	str	r1, [r7, #32]
 800504c:	415b      	adcs	r3, r3
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
 8005050:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005054:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005058:	f7fb f962 	bl	8000320 <__aeabi_uldivmod>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4b8f      	ldr	r3, [pc, #572]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 8005062:	fba3 1302 	umull	r1, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2164      	movs	r1, #100	; 0x64
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	3332      	adds	r3, #50	; 0x32
 8005074:	4a8a      	ldr	r2, [pc, #552]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	b29b      	uxth	r3, r3
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005086:	b29b      	uxth	r3, r3
 8005088:	4433      	add	r3, r6
 800508a:	b29e      	uxth	r6, r3
 800508c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800508e:	4618      	mov	r0, r3
 8005090:	f04f 0100 	mov.w	r1, #0
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	1894      	adds	r4, r2, r2
 800509a:	61bc      	str	r4, [r7, #24]
 800509c:	415b      	adcs	r3, r3
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a4:	1812      	adds	r2, r2, r0
 80050a6:	eb41 0303 	adc.w	r3, r1, r3
 80050aa:	f04f 0400 	mov.w	r4, #0
 80050ae:	f04f 0500 	mov.w	r5, #0
 80050b2:	00dd      	lsls	r5, r3, #3
 80050b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050b8:	00d4      	lsls	r4, r2, #3
 80050ba:	4622      	mov	r2, r4
 80050bc:	462b      	mov	r3, r5
 80050be:	1814      	adds	r4, r2, r0
 80050c0:	653c      	str	r4, [r7, #80]	; 0x50
 80050c2:	414b      	adcs	r3, r1
 80050c4:	657b      	str	r3, [r7, #84]	; 0x54
 80050c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c8:	461a      	mov	r2, r3
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	6139      	str	r1, [r7, #16]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050de:	f7fb f91f 	bl	8000320 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b6e      	ldr	r3, [pc, #440]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	; 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	3332      	adds	r3, #50	; 0x32
 80050fa:	4a69      	ldr	r2, [pc, #420]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	b29b      	uxth	r3, r3
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	b29b      	uxth	r3, r3
 800510a:	4433      	add	r3, r6
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	e0be      	b.n	8005294 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005118:	461c      	mov	r4, r3
 800511a:	f04f 0500 	mov.w	r5, #0
 800511e:	4622      	mov	r2, r4
 8005120:	462b      	mov	r3, r5
 8005122:	eb12 0802 	adds.w	r8, r2, r2
 8005126:	eb43 0903 	adc.w	r9, r3, r3
 800512a:	4642      	mov	r2, r8
 800512c:	464b      	mov	r3, r9
 800512e:	1912      	adds	r2, r2, r4
 8005130:	eb45 0303 	adc.w	r3, r5, r3
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f04f 0100 	mov.w	r1, #0
 800513c:	00d9      	lsls	r1, r3, #3
 800513e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005142:	00d0      	lsls	r0, r2, #3
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	1911      	adds	r1, r2, r4
 800514a:	64b9      	str	r1, [r7, #72]	; 0x48
 800514c:	416b      	adcs	r3, r5
 800514e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005152:	4618      	mov	r0, r3
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005166:	0082      	lsls	r2, r0, #2
 8005168:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800516c:	f7fb f8d8 	bl	8000320 <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 8005176:	fba3 2302 	umull	r2, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	b29b      	uxth	r3, r3
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	b29e      	uxth	r6, r3
 8005182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005184:	4618      	mov	r0, r3
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	1894      	adds	r4, r2, r2
 8005190:	60bc      	str	r4, [r7, #8]
 8005192:	415b      	adcs	r3, r3
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800519a:	1812      	adds	r2, r2, r0
 800519c:	eb41 0303 	adc.w	r3, r1, r3
 80051a0:	f04f 0400 	mov.w	r4, #0
 80051a4:	f04f 0500 	mov.w	r5, #0
 80051a8:	00dd      	lsls	r5, r3, #3
 80051aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051ae:	00d4      	lsls	r4, r2, #3
 80051b0:	4622      	mov	r2, r4
 80051b2:	462b      	mov	r3, r5
 80051b4:	1814      	adds	r4, r2, r0
 80051b6:	643c      	str	r4, [r7, #64]	; 0x40
 80051b8:	414b      	adcs	r3, r1
 80051ba:	647b      	str	r3, [r7, #68]	; 0x44
 80051bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051be:	4618      	mov	r0, r3
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	008b      	lsls	r3, r1, #2
 80051ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051d2:	0082      	lsls	r2, r0, #2
 80051d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80051d8:	f7fb f8a2 	bl	8000320 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 80051e2:	fba3 1302 	umull	r1, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2164      	movs	r1, #100	; 0x64
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	; 0x32
 80051f4:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005202:	b29b      	uxth	r3, r3
 8005204:	4433      	add	r3, r6
 8005206:	b29e      	uxth	r6, r3
 8005208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800520a:	4618      	mov	r0, r3
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	1894      	adds	r4, r2, r2
 8005216:	603c      	str	r4, [r7, #0]
 8005218:	415b      	adcs	r3, r3
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	1812      	adds	r2, r2, r0
 8005222:	eb41 0303 	adc.w	r3, r1, r3
 8005226:	f04f 0400 	mov.w	r4, #0
 800522a:	f04f 0500 	mov.w	r5, #0
 800522e:	00dd      	lsls	r5, r3, #3
 8005230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005234:	00d4      	lsls	r4, r2, #3
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	1814      	adds	r4, r2, r0
 800523c:	63bc      	str	r4, [r7, #56]	; 0x38
 800523e:	414b      	adcs	r3, r1
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005244:	4618      	mov	r0, r3
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	008b      	lsls	r3, r1, #2
 8005254:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005258:	0082      	lsls	r2, r0, #2
 800525a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800525e:	f7fb f85f 	bl	8000320 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 8005268:	fba3 1302 	umull	r1, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	2164      	movs	r1, #100	; 0x64
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	3332      	adds	r3, #50	; 0x32
 800527a:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <LL_USART_SetBaudRate+0x31c>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	b29b      	uxth	r3, r3
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	b29b      	uxth	r3, r3
 800528a:	4433      	add	r3, r6
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	377c      	adds	r7, #124	; 0x7c
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529e:	bf00      	nop
 80052a0:	51eb851f 	.word	0x51eb851f

080052a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe2a 	bl	8004f10 <LL_USART_IsEnabled>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d15e      	bne.n	8005380 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052ca:	f023 030c 	bic.w	r3, r3, #12
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	6851      	ldr	r1, [r2, #4]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68d2      	ldr	r2, [r2, #12]
 80052d6:	4311      	orrs	r1, r2
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	6912      	ldr	r2, [r2, #16]
 80052dc:	4311      	orrs	r1, r2
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	6992      	ldr	r2, [r2, #24]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fe21 	bl	8004f38 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fe2e 	bl	8004f5e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fd38 	bl	8004d7c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1f      	ldr	r2, [pc, #124]	; (800538c <LL_USART_Init+0xe8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d102      	bne.n	800531a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e021      	b.n	800535e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <LL_USART_Init+0xec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d102      	bne.n	8005328 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e01a      	b.n	800535e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <LL_USART_Init+0xf0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d102      	bne.n	8005336 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	e013      	b.n	800535e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <LL_USART_Init+0xf4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d102      	bne.n	8005344 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e00c      	b.n	800535e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <LL_USART_Init+0xf8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d102      	bne.n	8005352 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	e005      	b.n	800535e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <LL_USART_Init+0xfc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69b9      	ldr	r1, [r7, #24]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fe02 	bl	8004f84 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005380:	7ffb      	ldrb	r3, [r7, #31]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40011000 	.word	0x40011000
 8005390:	40004400 	.word	0x40004400
 8005394:	40004800 	.word	0x40004800
 8005398:	40011400 	.word	0x40011400
 800539c:	40004c00 	.word	0x40004c00
 80053a0:	40005000 	.word	0x40005000

080053a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <LL_SetSystemCoreClock+0x1c>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6013      	str	r3, [r2, #0]
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000008 	.word	0x20000008

080053c4 <AES_Generate_Rand_Key>:
#include <AES_128.h>

uint8_t AES128key[AES128_KEY_LEN];

//generate new key for new connect
void AES_Generate_Rand_Key() {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
	int i;
	srand(time(NULL));
 80053ca:	2000      	movs	r0, #0
 80053cc:	f01c fa82 	bl	80218d4 <time>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4613      	mov	r3, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f01c f90c 	bl	80215f4 <srand>
	for(i = 0; i < AES128_KEY_LEN; i++) {
 80053dc:	2300      	movs	r3, #0
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e00b      	b.n	80053fa <AES_Generate_Rand_Key+0x36>
		AES128key[i] = (uint8_t)rand();
 80053e2:	f01c f935 	bl	8021650 <rand>
 80053e6:	4603      	mov	r3, r0
 80053e8:	b2d9      	uxtb	r1, r3
 80053ea:	4a08      	ldr	r2, [pc, #32]	; (800540c <AES_Generate_Rand_Key+0x48>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	460a      	mov	r2, r1
 80053f2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < AES128_KEY_LEN; i++) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3301      	adds	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b0f      	cmp	r3, #15
 80053fe:	ddf0      	ble.n	80053e2 <AES_Generate_Rand_Key+0x1e>
	}
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20005870 	.word	0x20005870

08005410 <AES_Get_Key>:

uint8_t* AES_Get_Key() {return AES128key;}
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <AES_Get_Key+0x10>)
 8005416:	4618      	mov	r0, r3
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	20005870 	.word	0x20005870

08005424 <KeyExpansionCore>:
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

void KeyExpansionCore(uint8_t* in, uint8_t i)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
	// Rotate left
	uint32_t* q = (uint32_t*)in; //uint8_t* q =in;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]
	*q = (*q >> 8) | ((*q & 0xff) << 24);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	ea4f 2233 	mov.w	r2, r3, ror #8
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]
	// s-box four bytes
	in[0] = s_box[in[0]];	 in[1] = s_box[in[1]];
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <KeyExpansionCore+0x80>)
 8005448:	5c9a      	ldrb	r2, [r3, r2]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3301      	adds	r3, #1
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3301      	adds	r3, #1
 800545a:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <KeyExpansionCore+0x80>)
 800545c:	5c52      	ldrb	r2, [r2, r1]
 800545e:	701a      	strb	r2, [r3, #0]
	in[2] = s_box[in[2]];	 in[3] = s_box[in[3]];
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3302      	adds	r3, #2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3302      	adds	r3, #2
 800546c:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <KeyExpansionCore+0x80>)
 800546e:	5c52      	ldrb	r2, [r2, r1]
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3303      	adds	r3, #3
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	4619      	mov	r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3303      	adds	r3, #3
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <KeyExpansionCore+0x80>)
 8005480:	5c52      	ldrb	r2, [r2, r1]
 8005482:	701a      	strb	r2, [r3, #0]
	// Rcon
	in[0] ^= rcon[i];
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	4907      	ldr	r1, [pc, #28]	; (80054a8 <KeyExpansionCore+0x84>)
 800548c:	5ccb      	ldrb	r3, [r1, r3]
 800548e:	4053      	eors	r3, r2
 8005490:	b2da      	uxtb	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	701a      	strb	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000003c 	.word	0x2000003c
 80054a8:	20000010 	.word	0x20000010

080054ac <KeyExpansion>:

void KeyExpansion(uint8_t* inputKey, uint8_t* expandedKeys)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	// The first 16 bytes are the original key:
	for (int i = 0; i < 16; i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	e00a      	b.n	80054d2 <KeyExpansion+0x26>
		expandedKeys[i] = inputKey[i];
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	440b      	add	r3, r1
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	ddf1      	ble.n	80054bc <KeyExpansion+0x10>
	//Variables:
	int bytesGenerated = 16; // We've generated 16 bytes so far
 80054d8:	2310      	movs	r3, #16
 80054da:	61bb      	str	r3, [r7, #24]
	int rconIteration = 0;  // Rcon Iteration begins at 1
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
	uint8_t temp[4]; // Temporary storage for core

	while (bytesGenerated < 176)
 80054e0:	e042      	b.n	8005568 <KeyExpansion+0xbc>
	{
		// Read 4 bytes for the core
		for (int i = 0; i < 4; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e00f      	b.n	8005508 <KeyExpansion+0x5c>
			temp[i] = expandedKeys[i + bytesGenerated - 4];
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	4413      	add	r3, r2
 80054ee:	3b04      	subs	r3, #4
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	4413      	add	r3, r2
 80054f4:	7819      	ldrb	r1, [r3, #0]
 80054f6:	f107 0208 	add.w	r2, r7, #8
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	460a      	mov	r2, r1
 8005500:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b03      	cmp	r3, #3
 800550c:	ddec      	ble.n	80054e8 <KeyExpansion+0x3c>
		//Perform the core once for each 16 byte key:
		if (bytesGenerated % 16 == 0)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <KeyExpansion+0x82>
		{
			KeyExpansionCore(temp, rconIteration);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	f107 0308 	add.w	r3, r7, #8
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ff7e 	bl	8005424 <KeyExpansionCore>
			rconIteration++;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3301      	adds	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
		}
		//XOR temp with [bytesGenerates-16], and store in expandedKeys:
		for (uint8_t a = 0; a < 4; a++)
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	e016      	b.n	8005562 <KeyExpansion+0xb6>
		{
			expandedKeys[bytesGenerated] =
				expandedKeys[bytesGenerated - 16] ^ temp[a];
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	3b10      	subs	r3, #16
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	4413      	add	r3, r2
 800553c:	7819      	ldrb	r1, [r3, #0]
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	f107 0220 	add.w	r2, r7, #32
 8005544:	4413      	add	r3, r2
 8005546:	f813 2c18 	ldrb.w	r2, [r3, #-24]
			expandedKeys[bytesGenerated] =
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	6838      	ldr	r0, [r7, #0]
 800554e:	4403      	add	r3, r0
 8005550:	404a      	eors	r2, r1
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
			bytesGenerated++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3301      	adds	r3, #1
 800555a:	61bb      	str	r3, [r7, #24]
		for (uint8_t a = 0; a < 4; a++)
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	3301      	adds	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d9e5      	bls.n	8005534 <KeyExpansion+0x88>
	while (bytesGenerated < 176)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2baf      	cmp	r3, #175	; 0xaf
 800556c:	ddb9      	ble.n	80054e2 <KeyExpansion+0x36>
		}
	}
}
 800556e:	bf00      	nop
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <InvSubBytes>:
{
	for (int i = 0; i < 16; i++)
		state[i] = s_box[state[i]];
}
void InvSubBytes(uint8_t* state)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 16; i++)
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e00d      	b.n	80055a2 <InvSubBytes+0x2a>
		state[i] = Invs_box[state[i]];
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <InvSubBytes+0x40>)
 8005598:	5c52      	ldrb	r2, [r2, r1]
 800559a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	ddee      	ble.n	8005586 <InvSubBytes+0xe>
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	2000013c 	.word	0x2000013c

080055bc <InvShiftRows>:
		temp[i] = state[SR_box[i]];
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
void InvShiftRows(uint8_t* state)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	uint8_t temp[16];
	for (int i = 0; i < 16; i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	e010      	b.n	80055ec <InvShiftRows+0x30>
		temp[i] = state[InvSR_box[i]];
 80055ca:	4a16      	ldr	r2, [pc, #88]	; (8005624 <InvShiftRows+0x68>)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	7819      	ldrb	r1, [r3, #0]
 80055da:	f107 0208 	add.w	r2, r7, #8
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	460a      	mov	r2, r1
 80055e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3301      	adds	r3, #1
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b0f      	cmp	r3, #15
 80055f0:	ddeb      	ble.n	80055ca <InvShiftRows+0xe>
	for (int i = 0; i < 16; i++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	e00b      	b.n	8005610 <InvShiftRows+0x54>
		state[i] = temp[i];
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	f107 0108 	add.w	r1, r7, #8
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	440a      	add	r2, r1
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3301      	adds	r3, #1
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b0f      	cmp	r3, #15
 8005614:	ddf0      	ble.n	80055f8 <InvShiftRows+0x3c>
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	3724      	adds	r7, #36	; 0x24
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	2000001c 	.word	0x2000001c

08005628 <mulGF>:

uint8_t mulGF(uint8_t i, uint8_t Mix) // multiple in GF 2^8
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	460a      	mov	r2, r1
 8005632:	71fb      	strb	r3, [r7, #7]
 8005634:	4613      	mov	r3, r2
 8005636:	71bb      	strb	r3, [r7, #6]
	uint16_t a = i;
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	81fb      	strh	r3, [r7, #14]
	if (Mix == 1)  return a;						  //mul 1  0001
 800563c:	79bb      	ldrb	r3, [r7, #6]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <mulGF+0x20>
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e076      	b.n	8005736 <mulGF+0x10e>
	if (Mix == 3)  a = (i << 1) ^ i;				  //mul 3  0011
 8005648:	79bb      	ldrb	r3, [r7, #6]
 800564a:	2b03      	cmp	r3, #3
 800564c:	d107      	bne.n	800565e <mulGF+0x36>
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	b21a      	sxth	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	b21b      	sxth	r3, r3
 8005658:	4053      	eors	r3, r2
 800565a:	b21b      	sxth	r3, r3
 800565c:	81fb      	strh	r3, [r7, #14]
	if (Mix == 2)  a = (i << 1);					  //mul 2  0010
 800565e:	79bb      	ldrb	r3, [r7, #6]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d103      	bne.n	800566c <mulGF+0x44>
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	b29b      	uxth	r3, r3
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	81fb      	strh	r3, [r7, #14]
	if (Mix == 9)  a = (i << 3) ^ i;				  //mul 9  1001
 800566c:	79bb      	ldrb	r3, [r7, #6]
 800566e:	2b09      	cmp	r3, #9
 8005670:	d107      	bne.n	8005682 <mulGF+0x5a>
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	b21a      	sxth	r2, r3
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	b21b      	sxth	r3, r3
 800567c:	4053      	eors	r3, r2
 800567e:	b21b      	sxth	r3, r3
 8005680:	81fb      	strh	r3, [r7, #14]
	if (Mix == 11) a = (i << 3) ^ (i << 1) ^ i;		  //mul 11 1011
 8005682:	79bb      	ldrb	r3, [r7, #6]
 8005684:	2b0b      	cmp	r3, #11
 8005686:	d10c      	bne.n	80056a2 <mulGF+0x7a>
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	b21a      	sxth	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	b21b      	sxth	r3, r3
 8005694:	4053      	eors	r3, r2
 8005696:	b21a      	sxth	r2, r3
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	b21b      	sxth	r3, r3
 800569c:	4053      	eors	r3, r2
 800569e:	b21b      	sxth	r3, r3
 80056a0:	81fb      	strh	r3, [r7, #14]
	if (Mix == 13) a = (i << 3) ^ (i << 2) ^ i;		  //mul 13 1101
 80056a2:	79bb      	ldrb	r3, [r7, #6]
 80056a4:	2b0d      	cmp	r3, #13
 80056a6:	d10c      	bne.n	80056c2 <mulGF+0x9a>
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	b21b      	sxth	r3, r3
 80056b4:	4053      	eors	r3, r2
 80056b6:	b21a      	sxth	r2, r3
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	b21b      	sxth	r3, r3
 80056bc:	4053      	eors	r3, r2
 80056be:	b21b      	sxth	r3, r3
 80056c0:	81fb      	strh	r3, [r7, #14]
	if (Mix == 14) a = (i << 3) ^ (i << 2) ^ (i << 1);//mul 14 1110
 80056c2:	79bb      	ldrb	r3, [r7, #6]
 80056c4:	2b0e      	cmp	r3, #14
 80056c6:	d10d      	bne.n	80056e4 <mulGF+0xbc>
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	b21a      	sxth	r2, r3
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	4053      	eors	r3, r2
 80056d6:	b21a      	sxth	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	b21b      	sxth	r3, r3
 80056de:	4053      	eors	r3, r2
 80056e0:	b21b      	sxth	r3, r3
 80056e2:	81fb      	strh	r3, [r7, #14]
	int k = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60bb      	str	r3, [r7, #8]
	while (a > 0xff)
 80056e8:	e020      	b.n	800572c <mulGF+0x104>
	{
		k = a / 0x100; // 1 0000  0000
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	60bb      	str	r3, [r7, #8]
		if (k >= 4) k = 4;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	dd01      	ble.n	80056fc <mulGF+0xd4>
 80056f8:	2304      	movs	r3, #4
 80056fa:	60bb      	str	r3, [r7, #8]
		if (k >= 2 && k < 4) k = 2;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	dd04      	ble.n	800570c <mulGF+0xe4>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b03      	cmp	r3, #3
 8005706:	dc01      	bgt.n	800570c <mulGF+0xe4>
 8005708:	2302      	movs	r3, #2
 800570a:	60bb      	str	r3, [r7, #8]
		a ^= (k * 0x11B); // 1 0001 1011: x^8 + x^4 + x^3 + x + 1
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	00d2      	lsls	r2, r2, #3
 8005714:	441a      	add	r2, r3
 8005716:	00d2      	lsls	r2, r2, #3
 8005718:	1ad2      	subs	r2, r2, r3
 800571a:	0092      	lsls	r2, r2, #2
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	b29b      	uxth	r3, r3
 8005720:	b21a      	sxth	r2, r3
 8005722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005726:	4053      	eors	r3, r2
 8005728:	b21b      	sxth	r3, r3
 800572a:	81fb      	strh	r3, [r7, #14]
	while (a > 0xff)
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d8db      	bhi.n	80056ea <mulGF+0xc2>
	}
	return a;
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	b2db      	uxtb	r3, r3
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <InvMixColumns>:
	}
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
void InvMixColumns(uint8_t* state)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	; 0x30
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	uint8_t temp[16];
	uint8_t n = 0, k = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005752:	2300      	movs	r3, #0
 8005754:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
 800575c:	e055      	b.n	800580a <InvMixColumns+0xc6>
	{
		if (i == 4) { n = 4;  k = 0; }
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2b04      	cmp	r3, #4
 8005762:	d105      	bne.n	8005770 <InvMixColumns+0x2c>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800576a:	2300      	movs	r3, #0
 800576c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (i == 8) { n = 8;  k = 0; }
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2b08      	cmp	r3, #8
 8005774:	d105      	bne.n	8005782 <InvMixColumns+0x3e>
 8005776:	2308      	movs	r3, #8
 8005778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800577c:	2300      	movs	r3, #0
 800577e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (i == 12) { n = 12; k = 0; }
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d105      	bne.n	8005794 <InvMixColumns+0x50>
 8005788:	230c      	movs	r3, #12
 800578a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800578e:	2300      	movs	r3, #0
 8005790:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		uint8_t tempXor[4];
		for (int j = 0; j < 4; j++)
 8005794:	2300      	movs	r3, #0
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	e01c      	b.n	80057d4 <InvMixColumns+0x90>
		{
			tempXor[j] = mulGF(state[j + n], InvMix[j + k * 4]);
 800579a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	4413      	add	r3, r2
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	7818      	ldrb	r0, [r3, #0]
 80057aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ae:	009a      	lsls	r2, r3, #2
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	4413      	add	r3, r2
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <InvMixColumns+0xfc>)
 80057b6:	5cd3      	ldrb	r3, [r2, r3]
 80057b8:	4619      	mov	r1, r3
 80057ba:	f7ff ff35 	bl	8005628 <mulGF>
 80057be:	4603      	mov	r3, r0
 80057c0:	4619      	mov	r1, r3
 80057c2:	f107 020c 	add.w	r2, r7, #12
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	4413      	add	r3, r2
 80057ca:	460a      	mov	r2, r1
 80057cc:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++)
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	3301      	adds	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	dddf      	ble.n	800579a <InvMixColumns+0x56>
		}
		temp[i] = tempXor[0] ^ tempXor[1] ^ tempXor[2] ^ tempXor[3];
 80057da:	7b3a      	ldrb	r2, [r7, #12]
 80057dc:	7b7b      	ldrb	r3, [r7, #13]
 80057de:	4053      	eors	r3, r2
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	4053      	eors	r3, r2
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	4053      	eors	r3, r2
 80057ec:	b2d9      	uxtb	r1, r3
 80057ee:	f107 0210 	add.w	r2, r7, #16
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	4413      	add	r3, r2
 80057f6:	460a      	mov	r2, r1
 80057f8:	701a      	strb	r2, [r3, #0]
		k++;
 80057fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057fe:	3301      	adds	r3, #1
 8005800:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	3301      	adds	r3, #1
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b0f      	cmp	r3, #15
 800580e:	dda6      	ble.n	800575e <InvMixColumns+0x1a>
	}
	for (int i = 0; i < 16; i++)
 8005810:	2300      	movs	r3, #0
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	e00b      	b.n	800582e <InvMixColumns+0xea>
		state[i] = temp[i];
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4413      	add	r3, r2
 800581c:	f107 0110 	add.w	r1, r7, #16
 8005820:	6a3a      	ldr	r2, [r7, #32]
 8005822:	440a      	add	r2, r1
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	3301      	adds	r3, #1
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	ddf0      	ble.n	8005816 <InvMixColumns+0xd2>
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3730      	adds	r7, #48	; 0x30
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	2000002c 	.word	0x2000002c

08005844 <AddRoundKey>:
void AddRoundKey(uint8_t* state, uint8_t* roundKey)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 16; i++)
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e010      	b.n	8005876 <AddRoundKey+0x32>
		state[i] ^= roundKey[i];
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	7819      	ldrb	r1, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	4413      	add	r3, r2
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4403      	add	r3, r0
 800586a:	404a      	eors	r2, r1
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	ddeb      	ble.n	8005854 <AddRoundKey+0x10>
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <AES_Decrypt_Block_Overwrite>:
	for (int i = 0; i < 16; i++)
		decrypted_cipher[i] = state[i];
}

void AES_Decrypt_Block_Overwrite(uint8_t* cipher, uint8_t* key)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b0b0      	sub	sp, #192	; 0xc0
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
	//trick exchange first and last two bytes
	uint8_t tmp = cipher[0];
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	cipher[0] = cipher[1];
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	785a      	ldrb	r2, [r3, #1]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	701a      	strb	r2, [r3, #0]
	cipher[1] = tmp;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3301      	adds	r3, #1
 80058a8:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80058ac:	701a      	strb	r2, [r3, #0]
	tmp = cipher[14];
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7b9b      	ldrb	r3, [r3, #14]
 80058b2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	cipher[14] = cipher[15];
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	330e      	adds	r3, #14
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	7bd2      	ldrb	r2, [r2, #15]
 80058be:	701a      	strb	r2, [r3, #0]
	cipher[15] = tmp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	330f      	adds	r3, #15
 80058c4:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80058c8:	701a      	strb	r2, [r3, #0]

	//Expand the key
	uint8_t expandedKey[176];
	KeyExpansion(key, expandedKey);
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	4619      	mov	r1, r3
 80058d0:	6838      	ldr	r0, [r7, #0]
 80058d2:	f7ff fdeb 	bl	80054ac <KeyExpansion>

	AddRoundKey(cipher, expandedKey + 160);
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	33a0      	adds	r3, #160	; 0xa0
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff ffb0 	bl	8005844 <AddRoundKey>

	for (int i = 8; i >= 0; i--)
 80058e4:	2308      	movs	r3, #8
 80058e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058ea:	e019      	b.n	8005920 <AES_Decrypt_Block_Overwrite+0x96>
	{
		InvShiftRows(cipher);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fe65 	bl	80055bc <InvShiftRows>
		InvSubBytes(cipher);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fe40 	bl	8005578 <InvSubBytes>
		AddRoundKey(cipher, expandedKey + (16 * (i + 1)));
 80058f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058fc:	3301      	adds	r3, #1
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	461a      	mov	r2, r3
 8005902:	f107 0308 	add.w	r3, r7, #8
 8005906:	4413      	add	r3, r2
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff ff9a 	bl	8005844 <AddRoundKey>
		InvMixColumns(cipher);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ff17 	bl	8005744 <InvMixColumns>
	for (int i = 8; i >= 0; i--)
 8005916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800591a:	3b01      	subs	r3, #1
 800591c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005924:	2b00      	cmp	r3, #0
 8005926:	dae1      	bge.n	80058ec <AES_Decrypt_Block_Overwrite+0x62>
	}
	//Final Round
	InvShiftRows(cipher);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fe47 	bl	80055bc <InvShiftRows>
	InvSubBytes(cipher);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fe22 	bl	8005578 <InvSubBytes>
	AddRoundKey(cipher, expandedKey);
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff ff82 	bl	8005844 <AddRoundKey>
}
 8005940:	bf00      	nop
 8005942:	37c0      	adds	r7, #192	; 0xc0
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <AES_Decrypt_Packet>:
	}
	return newLen;
}

//overwrite, make sure data memory size is multiple of a block size. return decrypted packet len, fail return -1
int AES_Decrypt_Packet(uint8_t *data, int len) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
	if(len % 16 != 0) return - 1;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <AES_Decrypt_Packet+0x1a>
 800595c:	f04f 33ff 	mov.w	r3, #4294967295
 8005960:	e019      	b.n	8005996 <AES_Decrypt_Packet+0x4e>
	int i;
	int blockNum = len / 16;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da00      	bge.n	800596a <AES_Decrypt_Packet+0x22>
 8005968:	330f      	adds	r3, #15
 800596a:	111b      	asrs	r3, r3, #4
 800596c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blockNum; i++) {
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e00b      	b.n	800598c <AES_Decrypt_Packet+0x44>
		AES_Decrypt_Block_Overwrite(data + i*16, AES128key);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	461a      	mov	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	4908      	ldr	r1, [pc, #32]	; (80059a0 <AES_Decrypt_Packet+0x58>)
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff82 	bl	800588a <AES_Decrypt_Block_Overwrite>
	for(i = 0; i < blockNum; i++) {
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	dbef      	blt.n	8005974 <AES_Decrypt_Packet+0x2c>
	}
	return len;
 8005994:	683b      	ldr	r3, [r7, #0]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20005870 	.word	0x20005870

080059a4 <AES_Decrypt_Packet_Key>:

//overwrite, own key, make sure data memory size is multiple of a block size. return decrypted packet len, fail return -1
int AES_Decrypt_Packet_Key(uint8_t *data, int len, uint8_t *key) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
	if(len % 16 != 0) return - 1;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <AES_Decrypt_Packet_Key+0x1c>
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	e019      	b.n	80059f4 <AES_Decrypt_Packet_Key+0x50>
	int i;
	int blockNum = len / 16;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da00      	bge.n	80059c8 <AES_Decrypt_Packet_Key+0x24>
 80059c6:	330f      	adds	r3, #15
 80059c8:	111b      	asrs	r3, r3, #4
 80059ca:	613b      	str	r3, [r7, #16]
	for(i = 0; i < blockNum; i++) {
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e00b      	b.n	80059ea <AES_Decrypt_Packet_Key+0x46>
		AES_Decrypt_Block_Overwrite(data + i*16, key);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ff53 	bl	800588a <AES_Decrypt_Block_Overwrite>
	for(i = 0; i < blockNum; i++) {
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3301      	adds	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	dbef      	blt.n	80059d2 <AES_Decrypt_Packet_Key+0x2e>
	}
	return len;
 80059f2:	68bb      	ldr	r3, [r7, #8]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <bn_decode>:
static bn_t bn_sub_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits);
static bn_t bn_add_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits);
static uint32_t bn_digit_bits(bn_t a);

void bn_decode(bn_t *bn, uint32_t digits, uint8_t *hexarr, uint32_t size)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
    bn_t t;
    int j;
    uint32_t i, u;
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	e024      	b.n	8005a60 <bn_decode+0x64>
        t = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e010      	b.n	8005a42 <bn_decode+0x46>
            t |= ((bn_t)hexarr[j]) << u;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61fb      	str	r3, [r7, #28]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	db02      	blt.n	8005a4e <bn_decode+0x52>
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b1f      	cmp	r3, #31
 8005a4c:	d9e8      	bls.n	8005a20 <bn_decode+0x24>
        }
        bn[i] = t;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	601a      	str	r2, [r3, #0]
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d20c      	bcs.n	8005a82 <bn_decode+0x86>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dad3      	bge.n	8005a16 <bn_decode+0x1a>
    }

    for(; i<digits; i++) {
 8005a6e:	e008      	b.n	8005a82 <bn_decode+0x86>
        bn[i] = 0;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
    for(; i<digits; i++) {
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d3f2      	bcc.n	8005a70 <bn_decode+0x74>
    }
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	3724      	adds	r7, #36	; 0x24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <bn_encode>:

void bn_encode(uint8_t *hexarr, uint32_t size, bn_t *bn, uint32_t digits)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b089      	sub	sp, #36	; 0x24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
    bn_t t;
    int j;
    uint32_t i, u;

    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e020      	b.n	8005af4 <bn_encode+0x5c>
        t = bn[i];
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4413      	add	r3, r2
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	613b      	str	r3, [r7, #16]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e00e      	b.n	8005ae2 <bn_encode+0x4a>
            hexarr[j] = (uint8_t)(t >> u);
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	fa22 f103 	lsr.w	r1, r2, r3
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	b2ca      	uxtb	r2, r1
 8005ad4:	701a      	strb	r2, [r3, #0]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db02      	blt.n	8005aee <bn_encode+0x56>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b1f      	cmp	r3, #31
 8005aec:	d9ea      	bls.n	8005ac4 <bn_encode+0x2c>
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	3301      	adds	r3, #1
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d20b      	bcs.n	8005b14 <bn_encode+0x7c>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	dad7      	bge.n	8005ab2 <bn_encode+0x1a>
        }
    }

    for(; j>=0; j--) {
 8005b02:	e007      	b.n	8005b14 <bn_encode+0x7c>
        hexarr[j] = 0;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
    for(; j>=0; j--) {
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	daf4      	bge.n	8005b04 <bn_encode+0x6c>
    }
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	3724      	adds	r7, #36	; 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <bn_assign>:

void bn_assign(bn_t *a, bn_t *b, uint32_t digits)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for(i=0; i<digits; i++) {
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e00c      	b.n	8005b54 <bn_assign+0x2c>
        a[i] = b[i];
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	441a      	add	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	440b      	add	r3, r1
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	3301      	adds	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3ee      	bcc.n	8005b3a <bn_assign+0x12>
    }
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <bn_assign_zero>:

void bn_assign_zero(bn_t *a, uint32_t digits)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i=0; i<digits; i++) {
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e008      	b.n	8005b8c <bn_assign_zero+0x22>
        a[i] = 0;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3f2      	bcc.n	8005b7a <bn_assign_zero+0x10>
    }
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <bn_sub>:

    return carry;
}

bn_t bn_sub(bn_t *a, bn_t *b, bn_t *c, uint32_t digits)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b089      	sub	sp, #36	; 0x24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
    bn_t ai, borrow;
    uint32_t i;

    borrow = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61bb      	str	r3, [r7, #24]
    for(i=0; i<digits; i++) {
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e033      	b.n	8005c22 <bn_sub+0x80>
        if((ai = b[i] - borrow) > (BN_MAX_DIGIT - borrow)) {
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d907      	bls.n	8005be4 <bn_sub+0x42>
            ai = BN_MAX_DIGIT - c[i];
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	e015      	b.n	8005c10 <bn_sub+0x6e>
        } else if((ai -= c[i]) > (BN_MAX_DIGIT - c[i])) {
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d902      	bls.n	8005c0c <bn_sub+0x6a>
            borrow = 1;
 8005c06:	2301      	movs	r3, #1
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	e001      	b.n	8005c10 <bn_sub+0x6e>
        } else {
            borrow = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
        }
        a[i] = ai;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3c7      	bcc.n	8005bba <bn_sub+0x18>
    }

    return borrow;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3724      	adds	r7, #36	; 0x24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <bn_mul>:

void bn_mul(bn_t *a, bn_t *b, bn_t *c, uint32_t digits)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8005c3e:	af02      	add	r7, sp, #8
 8005c40:	f107 040c 	add.w	r4, r7, #12
 8005c44:	6020      	str	r0, [r4, #0]
 8005c46:	f107 0008 	add.w	r0, r7, #8
 8005c4a:	6001      	str	r1, [r0, #0]
 8005c4c:	1d39      	adds	r1, r7, #4
 8005c4e:	600a      	str	r2, [r1, #0]
 8005c50:	463a      	mov	r2, r7
 8005c52:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS];
    uint32_t bdigits, cdigits, i;

    bn_assign_zero(t, 2*digits);
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	005a      	lsls	r2, r3, #1
 8005c5a:	f107 0314 	add.w	r3, r7, #20
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff82 	bl	8005b6a <bn_assign_zero>
    bdigits = bn_digits(b, digits);
 8005c66:	463a      	mov	r2, r7
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	6811      	ldr	r1, [r2, #0]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	f000 fbbf 	bl	80063f2 <bn_digits>
 8005c74:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
    cdigits = bn_digits(c, digits);
 8005c78:	463a      	mov	r2, r7
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f000 fbb7 	bl	80063f2 <bn_digits>
 8005c84:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

    for(i=0; i<bdigits; i++) {
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005c8e:	e033      	b.n	8005cf8 <bn_mul+0xc0>
        t[i+cdigits] += bn_add_digit_mul(&t[i], &t[i], b[i], c, cdigits);
 8005c90:	f107 0214 	add.w	r2, r7, #20
 8005c94:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	18d0      	adds	r0, r2, r3
 8005c9c:	f107 0214 	add.w	r2, r7, #20
 8005ca0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	18d1      	adds	r1, r2, r3
 8005ca8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	681c      	ldr	r4, [r3, #0]
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8005cbe:	9200      	str	r2, [sp, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	f000 fbb5 	bl	8006432 <bn_add_digit_mul>
 8005cc8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8005ccc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005cd0:	441a      	add	r2, r3
 8005cd2:	f107 0314 	add.w	r3, r7, #20
 8005cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cda:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8005cde:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8005ce2:	440a      	add	r2, r1
 8005ce4:	18c1      	adds	r1, r0, r3
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i=0; i<bdigits; i++) {
 8005cee:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005cf8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8005cfc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d3c5      	bcc.n	8005c90 <bn_mul+0x58>
    }

    bn_assign(a, t, 2*digits);
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	005a      	lsls	r2, r3, #1
 8005d0a:	f107 0114 	add.w	r1, r7, #20
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	f7ff ff08 	bl	8005b28 <bn_assign>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f01b fb00 	bl	8021328 <memset>
}
 8005d28:	bf00      	nop
 8005d2a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}

08005d32 <bn_div>:

void bn_div(bn_t *a, bn_t *b, bn_t *c, uint32_t cdigits, bn_t *d, uint32_t ddigits)
{
 8005d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d34:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	f107 060c 	add.w	r6, r7, #12
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	f107 0008 	add.w	r0, r7, #8
 8005d44:	6001      	str	r1, [r0, #0]
 8005d46:	1d39      	adds	r1, r7, #4
 8005d48:	600a      	str	r2, [r1, #0]
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	6013      	str	r3, [r2, #0]
    dbn_t tmp;
    bn_t ai, t, cc[2*BN_MAX_DIGITS+1], dd[BN_MAX_DIGITS];
    int i;
    uint32_t dddigits, shift;

    dddigits = bn_digits(d, ddigits);
 8005d4e:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8005d52:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8005d56:	f000 fb4c 	bl	80063f2 <bn_digits>
 8005d5a:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
    if(dddigits == 0)
 8005d5e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 813a 	beq.w	8005fdc <bn_div+0x2aa>
        return;

    shift = BN_DIGIT_BITS - bn_digit_bits(d[dddigits-1]);
 8005d68:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d70:	3b01      	subs	r3, #1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8005d78:	4413      	add	r3, r2
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fc38 	bl	80065f2 <bn_digit_bits>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f1c3 0320 	rsb	r3, r3, #32
 8005d88:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    bn_assign_zero(cc, dddigits);
 8005d8c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005d90:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fee8 	bl	8005b6a <bn_assign_zero>
    cc[cdigits] = bn_shift_l(cc, c, shift, cdigits);
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	1d39      	adds	r1, r7, #4
 8005d9e:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005da8:	6809      	ldr	r1, [r1, #0]
 8005daa:	f000 f91c 	bl	8005fe6 <bn_shift_l>
 8005dae:	4601      	mov	r1, r0
 8005db0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005db4:	463a      	mov	r2, r7
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    bn_shift_l(dd, d, shift, dddigits);
 8005dbc:	f107 0010 	add.w	r0, r7, #16
 8005dc0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005dc4:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005dc8:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8005dcc:	f000 f90b 	bl	8005fe6 <bn_shift_l>
    t = dd[dddigits-1];
 8005dd0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005dd4:	1e5a      	subs	r2, r3, #1
 8005dd6:	f107 0310 	add.w	r3, r7, #16
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

    bn_assign_zero(a, cdigits);
 8005de2:	463a      	mov	r2, r7
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	6811      	ldr	r1, [r2, #0]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	f7ff febd 	bl	8005b6a <bn_assign_zero>
    i = cdigits - dddigits;
 8005df0:	463b      	mov	r3, r7
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    for(; i>=0; i--) {
 8005dfe:	e0c5      	b.n	8005f8c <bn_div+0x25a>
        if(t == BN_MAX_DIGIT) {
 8005e00:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d10b      	bne.n	8005e22 <bn_div+0xf0>
            ai = cc[i+dddigits];
 8005e0a:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005e0e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e12:	441a      	add	r2, r3
 8005e14:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8005e20:	e036      	b.n	8005e90 <bn_div+0x15e>
        } else {
            tmp = cc[i+dddigits-1];
 8005e22:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005e26:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e2a:	4413      	add	r3, r2
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
            tmp += (dbn_t)cc[i+dddigits] << BN_DIGIT_BITS;
 8005e40:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005e44:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e48:	441a      	add	r2, r3
 8005e4a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	0003      	movs	r3, r0
 8005e62:	2200      	movs	r2, #0
 8005e64:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8005e68:	1884      	adds	r4, r0, r2
 8005e6a:	eb41 0503 	adc.w	r5, r1, r3
 8005e6e:	e9c7 45c8 	strd	r4, r5, [r7, #800]	; 0x320
            ai = tmp / (t + 1);
 8005e72:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005e76:	3301      	adds	r3, #1
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8005e82:	f7fa fa4d 	bl	8000320 <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
        }

        cc[i+dddigits] -= bn_sub_digit_mul(&cc[i], &cc[i], ai, dd, dddigits);
 8005e90:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005e94:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	18d0      	adds	r0, r2, r3
 8005e9c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005ea0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	18d1      	adds	r1, r2, r3
 8005ea8:	f107 0210 	add.w	r2, r7, #16
 8005eac:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005eb8:	f000 fb2a 	bl	8006510 <bn_sub_digit_mul>
 8005ebc:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005ec0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005ec4:	441a      	add	r2, r3
 8005ec6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8005ed2:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005ed6:	440a      	add	r2, r1
 8005ed8:	1a19      	subs	r1, r3, r0
 8005eda:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // printf("cc[%d]: %08X\n", i, cc[i+dddigits]);
        while(cc[i+dddigits] || (bn_cmp(&cc[i], dd, dddigits) >= 0)) {
 8005ee2:	e029      	b.n	8005f38 <bn_div+0x206>
            ai++;
 8005ee4:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
            cc[i+dddigits] -= bn_sub(&cc[i], &cc[i], dd, dddigits);
 8005eee:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005ef2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	18d0      	adds	r0, r2, r3
 8005efa:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005efe:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	18d1      	adds	r1, r2, r3
 8005f06:	f107 0210 	add.w	r2, r7, #16
 8005f0a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f0e:	f7ff fe48 	bl	8005ba2 <bn_sub>
 8005f12:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005f16:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f1a:	441a      	add	r2, r3
 8005f1c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8005f28:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005f2c:	440a      	add	r2, r1
 8005f2e:	1a19      	subs	r1, r3, r0
 8005f30:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(cc[i+dddigits] || (bn_cmp(&cc[i], dd, dddigits) >= 0)) {
 8005f38:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005f3c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f40:	441a      	add	r2, r3
 8005f42:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ca      	bne.n	8005ee4 <bn_div+0x1b2>
 8005f4e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005f52:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	f107 0110 	add.w	r1, r7, #16
 8005f5e:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fa11 	bl	800638a <bn_cmp>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	daba      	bge.n	8005ee4 <bn_div+0x1b2>
        }
        a[i] = ai;
 8005f6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f107 020c 	add.w	r2, r7, #12
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005f80:	601a      	str	r2, [r3, #0]
    for(; i>=0; i--) {
 8005f82:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f86:	3b01      	subs	r3, #1
 8005f88:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8005f8c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f6bf af35 	bge.w	8005e00 <bn_div+0xce>
        // printf("ai[%d]: %08X\n", i, ai);
    }

    bn_assign_zero(b, ddigits);
 8005f96:	f107 0308 	add.w	r3, r7, #8
 8005f9a:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	f7ff fde3 	bl	8005b6a <bn_assign_zero>
    bn_shift_r(b, cc, shift, dddigits);
 8005fa4:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8005fa8:	f107 0008 	add.w	r0, r7, #8
 8005fac:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005fb0:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005fb4:	6800      	ldr	r0, [r0, #0]
 8005fb6:	f000 f854 	bl	8006062 <bn_shift_r>

    // Clear potentially sensitive information
    memset((uint8_t *)cc, 0, sizeof(cc));
 8005fba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005fbe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f01b f9af 	bl	8021328 <memset>
    memset((uint8_t *)dd, 0, sizeof(dd));
 8005fca:	f107 0310 	add.w	r3, r7, #16
 8005fce:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f01b f9a7 	bl	8021328 <memset>
 8005fda:	e000      	b.n	8005fde <bn_div+0x2ac>
        return;
 8005fdc:	bf00      	nop
}
 8005fde:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fe6 <bn_shift_l>:

bn_t bn_shift_l(bn_t *a, bn_t *b, uint32_t c, uint32_t digits)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b089      	sub	sp, #36	; 0x24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
    bn_t bi, carry;
    uint32_t i, t;

    if(c >= BN_DIGIT_BITS)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b1f      	cmp	r3, #31
 8005ff8:	d901      	bls.n	8005ffe <bn_shift_l+0x18>
        return 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e02b      	b.n	8006056 <bn_shift_l+0x70>

    t = BN_DIGIT_BITS - c;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1c3 0320 	rsb	r3, r3, #32
 8006004:	617b      	str	r3, [r7, #20]
    carry = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
    for(i=0; i<digits; i++) {
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e01d      	b.n	800604c <bn_shift_l+0x66>
        bi = b[i];
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	4413      	add	r3, r2
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]
        a[i] = (bi << c) | carry;
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	fa02 f103 	lsl.w	r1, r2, r3
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	430a      	orrs	r2, r1
 8006030:	601a      	str	r2, [r3, #0]
        carry = c ? (bi >> t) : 0;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <bn_shift_l+0x5c>
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
 8006040:	e000      	b.n	8006044 <bn_shift_l+0x5e>
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
    for(i=0; i<digits; i++) {
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	3301      	adds	r3, #1
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d3dd      	bcc.n	8006010 <bn_shift_l+0x2a>
    }

    return carry;
 8006054:	69fb      	ldr	r3, [r7, #28]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3724      	adds	r7, #36	; 0x24
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <bn_shift_r>:

bn_t bn_shift_r(bn_t *a, bn_t *b, uint32_t c, uint32_t digits)
{
 8006062:	b480      	push	{r7}
 8006064:	b089      	sub	sp, #36	; 0x24
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	603b      	str	r3, [r7, #0]
    bn_t bi, carry;
    int i;
    uint32_t t;

    if(c >= BN_DIGIT_BITS)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b1f      	cmp	r3, #31
 8006074:	d901      	bls.n	800607a <bn_shift_r+0x18>
        return 0;
 8006076:	2300      	movs	r3, #0
 8006078:	e02b      	b.n	80060d2 <bn_shift_r+0x70>

    t = BN_DIGIT_BITS - c;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1c3 0320 	rsb	r3, r3, #32
 8006080:	617b      	str	r3, [r7, #20]
    carry = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
    i = digits - 1;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	3b01      	subs	r3, #1
 800608a:	61bb      	str	r3, [r7, #24]
    for(; i>=0; i--) {
 800608c:	e01d      	b.n	80060ca <bn_shift_r+0x68>
        bi = b[i];
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
        a[i] = (bi >> c) | carry;
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	fa22 f103 	lsr.w	r1, r2, r3
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]
        carry = c ? (bi << t) : 0;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <bn_shift_r+0x5e>
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	e000      	b.n	80060c2 <bn_shift_r+0x60>
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
    for(; i>=0; i--) {
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dade      	bge.n	800608e <bn_shift_r+0x2c>
    }

    return carry;
 80060d0:	69fb      	ldr	r3, [r7, #28]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3724      	adds	r7, #36	; 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <bn_mod>:

void bn_mod(bn_t *a, bn_t *b, uint32_t bdigits, bn_t *c, uint32_t cdigits)
{
 80060de:	b590      	push	{r4, r7, lr}
 80060e0:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	f107 040c 	add.w	r4, r7, #12
 80060ea:	6020      	str	r0, [r4, #0]
 80060ec:	f107 0008 	add.w	r0, r7, #8
 80060f0:	6001      	str	r1, [r0, #0]
 80060f2:	1d39      	adds	r1, r7, #4
 80060f4:	600a      	str	r2, [r1, #0]
 80060f6:	463a      	mov	r2, r7
 80060f8:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS] = {0};
 80060fa:	f107 0310 	add.w	r3, r7, #16
 80060fe:	4618      	mov	r0, r3
 8006100:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006104:	461a      	mov	r2, r3
 8006106:	2100      	movs	r1, #0
 8006108:	f01b f90e 	bl	8021328 <memset>

    bn_div(t, a, b, bdigits, c, cdigits);
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	f107 0208 	add.w	r2, r7, #8
 8006112:	f107 010c 	add.w	r1, r7, #12
 8006116:	f107 0410 	add.w	r4, r7, #16
 800611a:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 800611e:	9001      	str	r0, [sp, #4]
 8006120:	4638      	mov	r0, r7
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	9000      	str	r0, [sp, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	6809      	ldr	r1, [r1, #0]
 800612c:	4620      	mov	r0, r4
 800612e:	f7ff fe00 	bl	8005d32 <bn_div>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 8006132:	f107 0310 	add.w	r3, r7, #16
 8006136:	f44f 7202 	mov.w	r2, #520	; 0x208
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f01b f8f3 	bl	8021328 <memset>
}
 8006142:	bf00      	nop
 8006144:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8006148:	46bd      	mov	sp, r7
 800614a:	bd90      	pop	{r4, r7, pc}

0800614c <bn_mod_mul>:

void bn_mod_mul(bn_t *a, bn_t *b, bn_t *c, bn_t *d, uint32_t digits)
{
 800614c:	b590      	push	{r4, r7, lr}
 800614e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8006152:	af02      	add	r7, sp, #8
 8006154:	f107 040c 	add.w	r4, r7, #12
 8006158:	6020      	str	r0, [r4, #0]
 800615a:	f107 0008 	add.w	r0, r7, #8
 800615e:	6001      	str	r1, [r0, #0]
 8006160:	1d39      	adds	r1, r7, #4
 8006162:	600a      	str	r2, [r1, #0]
 8006164:	463a      	mov	r2, r7
 8006166:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS];

    bn_mul(t, b, c, digits);
 8006168:	1d3a      	adds	r2, r7, #4
 800616a:	f107 0108 	add.w	r1, r7, #8
 800616e:	f107 0010 	add.w	r0, r7, #16
 8006172:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	6809      	ldr	r1, [r1, #0]
 800617a:	f7ff fd5d 	bl	8005c38 <bn_mul>
    bn_mod(a, t, 2*digits, d, digits);
 800617e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006182:	005c      	lsls	r4, r3, #1
 8006184:	463b      	mov	r3, r7
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	f107 000c 	add.w	r0, r7, #12
 800618e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8006192:	9200      	str	r2, [sp, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4622      	mov	r2, r4
 8006198:	6800      	ldr	r0, [r0, #0]
 800619a:	f7ff ffa0 	bl	80060de <bn_mod>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 800619e:	f107 0310 	add.w	r3, r7, #16
 80061a2:	f44f 7202 	mov.w	r2, #520	; 0x208
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f01b f8bd 	bl	8021328 <memset>
}
 80061ae:	bf00      	nop
 80061b0:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd90      	pop	{r4, r7, pc}

080061b8 <bn_mod_exp>:

void bn_mod_exp(bn_t *a, bn_t *b, bn_t *c, uint32_t cdigits, bn_t *d, uint32_t ddigits)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 80061be:	af02      	add	r7, sp, #8
 80061c0:	f107 040c 	add.w	r4, r7, #12
 80061c4:	6020      	str	r0, [r4, #0]
 80061c6:	f107 0008 	add.w	r0, r7, #8
 80061ca:	6001      	str	r1, [r0, #0]
 80061cc:	1d39      	adds	r1, r7, #4
 80061ce:	600a      	str	r2, [r1, #0]
 80061d0:	463a      	mov	r2, r7
 80061d2:	6013      	str	r3, [r2, #0]
    bn_t bpower[3][BN_MAX_DIGITS], ci, t[BN_MAX_DIGITS];
    int i;
    uint32_t ci_bits, j, s;

    bn_assign(bpower[0], b, ddigits);
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80061dc:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	f7ff fca1 	bl	8005b28 <bn_assign>
    bn_mod_mul(bpower[1], bpower[0], b, d, ddigits);
 80061e6:	f107 0208 	add.w	r2, r7, #8
 80061ea:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80061ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061f2:	f503 7082 	add.w	r0, r3, #260	; 0x104
 80061f6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	f7ff ffa3 	bl	800614c <bn_mod_mul>
    bn_mod_mul(bpower[2], bpower[1], b, d, ddigits);
 8006206:	f107 0208 	add.w	r2, r7, #8
 800620a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800620e:	f503 7182 	add.w	r1, r3, #260	; 0x104
 8006212:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006216:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800621a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	f7ff ff91 	bl	800614c <bn_mod_mul>

    BN_ASSIGN_DIGIT(t, 1, ddigits);
 800622a:	f107 0314 	add.w	r3, r7, #20
 800622e:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fc99 	bl	8005b6a <bn_assign_zero>
 8006238:	f107 0314 	add.w	r3, r7, #20
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]

    cdigits = bn_digits(c, cdigits);
 8006240:	463c      	mov	r4, r7
 8006242:	463a      	mov	r2, r7
 8006244:	1d3b      	adds	r3, r7, #4
 8006246:	6811      	ldr	r1, [r2, #0]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	f000 f8d2 	bl	80063f2 <bn_digits>
 800624e:	6020      	str	r0, [r4, #0]
    i = cdigits - 1;
 8006250:	463b      	mov	r3, r7
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
    for(; i>=0; i--) {
 800625a:	e074      	b.n	8006346 <bn_mod_exp+0x18e>
        ci = c[i];
 800625c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	1d3a      	adds	r2, r7, #4
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4413      	add	r3, r2
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        ci_bits = BN_DIGIT_BITS;
 800626e:	2320      	movs	r3, #32
 8006270:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

        if(i == (int)(cdigits - 1)) {
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006280:	4293      	cmp	r3, r2
 8006282:	d10f      	bne.n	80062a4 <bn_mod_exp+0xec>
            while(!DIGIT_2MSB(ci)) {
 8006284:	e009      	b.n	800629a <bn_mod_exp+0xe2>
                ci <<= 2;
 8006286:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
                ci_bits -= 2;
 8006290:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8006294:	3b02      	subs	r3, #2
 8006296:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
            while(!DIGIT_2MSB(ci)) {
 800629a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800629e:	0f9b      	lsrs	r3, r3, #30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <bn_mod_exp+0xce>
            }
        }

        for(j=0; j<ci_bits; j+=2) {
 80062a4:	2300      	movs	r3, #0
 80062a6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80062aa:	e041      	b.n	8006330 <bn_mod_exp+0x178>
            bn_mod_mul(t, t, t, d, ddigits);
 80062ac:	f107 0214 	add.w	r2, r7, #20
 80062b0:	f107 0114 	add.w	r1, r7, #20
 80062b4:	f107 0014 	add.w	r0, r7, #20
 80062b8:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80062c2:	f7ff ff43 	bl	800614c <bn_mod_mul>
            bn_mod_mul(t, t, t, d, ddigits);
 80062c6:	f107 0214 	add.w	r2, r7, #20
 80062ca:	f107 0114 	add.w	r1, r7, #20
 80062ce:	f107 0014 	add.w	r0, r7, #20
 80062d2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80062dc:	f7ff ff36 	bl	800614c <bn_mod_mul>
            if((s = DIGIT_2MSB(ci)) != 0) {
 80062e0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80062e4:	0f9b      	lsrs	r3, r3, #30
 80062e6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80062ea:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d014      	beq.n	800631c <bn_mod_exp+0x164>
                bn_mod_mul(t, t, bpower[s-1], d, ddigits);
 80062f2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80062fc:	4613      	mov	r3, r2
 80062fe:	019b      	lsls	r3, r3, #6
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	18ca      	adds	r2, r1, r3
 8006306:	f107 0114 	add.w	r1, r7, #20
 800630a:	f107 0014 	add.w	r0, r7, #20
 800630e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8006318:	f7ff ff18 	bl	800614c <bn_mod_mul>
            }
            ci <<= 2;
 800631c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        for(j=0; j<ci_bits; j+=2) {
 8006326:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800632a:	3302      	adds	r3, #2
 800632c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8006330:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8006334:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8006338:	429a      	cmp	r2, r3
 800633a:	d3b7      	bcc.n	80062ac <bn_mod_exp+0xf4>
    for(; i>=0; i--) {
 800633c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006340:	3b01      	subs	r3, #1
 8006342:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8006346:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800634a:	2b00      	cmp	r3, #0
 800634c:	da86      	bge.n	800625c <bn_mod_exp+0xa4>
        }
    }

    bn_assign(a, t, ddigits);
 800634e:	f107 0114 	add.w	r1, r7, #20
 8006352:	f107 030c 	add.w	r3, r7, #12
 8006356:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	f7ff fbe4 	bl	8005b28 <bn_assign>

    // Clear potentially sensitive information
    memset((uint8_t *)bpower, 0, sizeof(bpower));
 8006360:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006364:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f01a ffdc 	bl	8021328 <memset>
    memset((uint8_t *)t, 0, sizeof(t));
 8006370:	f107 0314 	add.w	r3, r7, #20
 8006374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f01a ffd4 	bl	8021328 <memset>
}
 8006380:	bf00      	nop
 8006382:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8006386:	46bd      	mov	sp, r7
 8006388:	bd90      	pop	{r4, r7, pc}

0800638a <bn_cmp>:

int bn_cmp(bn_t *a, bn_t *b, uint32_t digits)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
    int i;
    for(i=digits-1; i>=0; i--) {
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3b01      	subs	r3, #1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e01f      	b.n	80063de <bn_cmp+0x54>
        if(a[i] > b[i])     return 1;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	440b      	add	r3, r1
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d901      	bls.n	80063ba <bn_cmp+0x30>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e015      	b.n	80063e6 <bn_cmp+0x5c>
        if(a[i] < b[i])     return -1;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	440b      	add	r3, r1
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d202      	bcs.n	80063d8 <bn_cmp+0x4e>
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295
 80063d6:	e006      	b.n	80063e6 <bn_cmp+0x5c>
    for(i=digits-1; i>=0; i--) {
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	3b01      	subs	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dadc      	bge.n	800639e <bn_cmp+0x14>
    }

    return 0;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <bn_digits>:

uint32_t bn_digits(bn_t *a, uint32_t digits)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
    int i;
    for(i=digits-1; i>=0; i--) {
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3b01      	subs	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e009      	b.n	8006418 <bn_digits+0x26>
        if(a[i])    break;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <bn_digits+0x2e>
    for(i=digits-1; i>=0; i--) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b01      	subs	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	daf2      	bge.n	8006404 <bn_digits+0x12>
 800641e:	e000      	b.n	8006422 <bn_digits+0x30>
        if(a[i])    break;
 8006420:	bf00      	nop
    }

    return (i + 1);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3301      	adds	r3, #1
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <bn_add_digit_mul>:

static bn_t bn_add_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits)
{
 8006432:	b4b0      	push	{r4, r5, r7}
 8006434:	b08b      	sub	sp, #44	; 0x2c
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	603b      	str	r3, [r7, #0]
    dbn_t result;
    bn_t carry, rh, rl;
    uint32_t i;

    if(c == 0)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <bn_add_digit_mul+0x18>
        return 0;
 8006446:	2300      	movs	r3, #0
 8006448:	e05d      	b.n	8006506 <bn_add_digit_mul+0xd4>

    carry = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 800644e:	2300      	movs	r3, #0
 8006450:	623b      	str	r3, [r7, #32]
 8006452:	e053      	b.n	80064fc <bn_add_digit_mul+0xca>
        result = (dbn_t)c * d[i];
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	4413      	add	r3, r2
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	fb02 f501 	mul.w	r5, r2, r1
 8006470:	fb00 f403 	mul.w	r4, r0, r3
 8006474:	442c      	add	r4, r5
 8006476:	fba0 2302 	umull	r2, r3, r0, r2
 800647a:	18e1      	adds	r1, r4, r3
 800647c:	460b      	mov	r3, r1
 800647e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006482:	e9c7 2306 	strd	r2, r3, [r7, #24]
        rl = result & BN_MAX_DIGIT;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	617b      	str	r3, [r7, #20]
        rh = (result >> BN_DIGIT_BITS) & BN_MAX_DIGIT;
 800648a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	000a      	movs	r2, r1
 8006498:	2300      	movs	r3, #0
 800649a:	4613      	mov	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
        if((a[i] = b[i] + carry) < carry) {
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4413      	add	r3, r2
 80064a6:	6819      	ldr	r1, [r3, #0]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b2:	440a      	add	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d902      	bls.n	80064c4 <bn_add_digit_mul+0x92>
            carry = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
 80064c2:	e001      	b.n	80064c8 <bn_add_digit_mul+0x96>
        } else {
            carry = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if((a[i] += rl) < rl) {
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	440a      	add	r2, r1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d902      	bls.n	80064ee <bn_add_digit_mul+0xbc>
            carry++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
        carry += rh;
 80064ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	3301      	adds	r3, #1
 80064fa:	623b      	str	r3, [r7, #32]
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	429a      	cmp	r2, r3
 8006502:	d3a7      	bcc.n	8006454 <bn_add_digit_mul+0x22>
    }

    return carry;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006506:	4618      	mov	r0, r3
 8006508:	372c      	adds	r7, #44	; 0x2c
 800650a:	46bd      	mov	sp, r7
 800650c:	bcb0      	pop	{r4, r5, r7}
 800650e:	4770      	bx	lr

08006510 <bn_sub_digit_mul>:

static bn_t bn_sub_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits)
{
 8006510:	b4b0      	push	{r4, r5, r7}
 8006512:	b08b      	sub	sp, #44	; 0x2c
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
    dbn_t result;
    bn_t borrow, rh, rl;
    uint32_t i;

    if(c == 0)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <bn_sub_digit_mul+0x18>
        return 0;
 8006524:	2300      	movs	r3, #0
 8006526:	e05f      	b.n	80065e8 <bn_sub_digit_mul+0xd8>

    borrow = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 800652c:	2300      	movs	r3, #0
 800652e:	623b      	str	r3, [r7, #32]
 8006530:	e055      	b.n	80065de <bn_sub_digit_mul+0xce>
        result = (dbn_t)c * d[i];
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	f04f 0100 	mov.w	r1, #0
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	4413      	add	r3, r2
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	fb02 f501 	mul.w	r5, r2, r1
 800654e:	fb00 f403 	mul.w	r4, r0, r3
 8006552:	442c      	add	r4, r5
 8006554:	fba0 2302 	umull	r2, r3, r0, r2
 8006558:	18e1      	adds	r1, r4, r3
 800655a:	460b      	mov	r3, r1
 800655c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006560:	e9c7 2306 	strd	r2, r3, [r7, #24]
        rl = result & BN_MAX_DIGIT;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	617b      	str	r3, [r7, #20]
        rh = (result >> BN_DIGIT_BITS) & BN_MAX_DIGIT;
 8006568:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	000a      	movs	r2, r1
 8006576:	2300      	movs	r3, #0
 8006578:	4613      	mov	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        if((a[i] = b[i] - borrow) > (BN_MAX_DIGIT - borrow)) {
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	4413      	add	r3, r2
 8006584:	6819      	ldr	r1, [r3, #0]
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006590:	1a8a      	subs	r2, r1, r2
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	43db      	mvns	r3, r3
 800659a:	429a      	cmp	r2, r3
 800659c:	d902      	bls.n	80065a4 <bn_sub_digit_mul+0x94>
            borrow = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e001      	b.n	80065a8 <bn_sub_digit_mul+0x98>
        } else {
            borrow = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if((a[i] -= rl) > (BN_MAX_DIGIT - rl)) {
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	6819      	ldr	r1, [r3, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	1a8a      	subs	r2, r1, r2
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d902      	bls.n	80065d0 <bn_sub_digit_mul+0xc0>
            borrow++;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	3301      	adds	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
        borrow += rh;
 80065d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	3301      	adds	r3, #1
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	6a3a      	ldr	r2, [r7, #32]
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d3a5      	bcc.n	8006532 <bn_sub_digit_mul+0x22>
    }

    return borrow;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	372c      	adds	r7, #44	; 0x2c
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bcb0      	pop	{r4, r5, r7}
 80065f0:	4770      	bx	lr

080065f2 <bn_digit_bits>:

static uint32_t bn_digit_bits(bn_t a)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i=0; i<BN_DIGIT_BITS; i++) {
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e008      	b.n	8006612 <bn_digit_bits+0x20>
        if(a == 0)  break;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <bn_digit_bits+0x28>
        a >>= 1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	607b      	str	r3, [r7, #4]
    for(i=0; i<BN_DIGIT_BITS; i++) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b1f      	cmp	r3, #31
 8006616:	d9f3      	bls.n	8006600 <bn_digit_bits+0xe>
 8006618:	e000      	b.n	800661c <bn_digit_bits+0x2a>
        if(a == 0)  break;
 800661a:	bf00      	nop
    }

    return i;
 800661c:	68fb      	ldr	r3, [r7, #12]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <savePosDma>:
DMA_POS_Struct dma_pos_array[DMA_POS_LOG_LEN];

unsigned int curOrderDmaPos = 0;

void savePosDma(int oldPos, int newPos, int returnTmp)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
    int index = curOrderDmaPos % DMA_POS_LOG_LEN;
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <savePosDma+0x70>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <savePosDma+0x74>)
 800663e:	fba3 1302 	umull	r1, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2164      	movs	r1, #100	; 0x64
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	617b      	str	r3, [r7, #20]
	dma_pos_array[index].order = curOrderDmaPos;
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <savePosDma+0x70>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4914      	ldr	r1, [pc, #80]	; (80066a4 <savePosDma+0x78>)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	440b      	add	r3, r1
 800665a:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].old_pos = oldPos;
 800665c:	4a11      	ldr	r2, [pc, #68]	; (80066a4 <savePosDma+0x78>)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	3304      	adds	r3, #4
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].new_pos = newPos;
 800666a:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <savePosDma+0x78>)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	4413      	add	r3, r2
 8006672:	3308      	adds	r3, #8
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].return_Tmp = returnTmp;
 8006678:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <savePosDma+0x78>)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	4413      	add	r3, r2
 8006680:	330c      	adds	r3, #12
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	601a      	str	r2, [r3, #0]
    curOrderDmaPos++;
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <savePosDma+0x70>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	4a03      	ldr	r2, [pc, #12]	; (800669c <savePosDma+0x70>)
 800668e:	6013      	str	r3, [r2, #0]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	200003f8 	.word	0x200003f8
 80066a0:	51eb851f 	.word	0x51eb851f
 80066a4:	20005880 	.word	0x20005880

080066a8 <udp_receive_callback>:

extern struct netif gnetif;

//udp
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
    LOG_WRITE("recv udp\n");
 80066b6:	480f      	ldr	r0, [pc, #60]	; (80066f4 <udp_receive_callback+0x4c>)
 80066b8:	f01a ff94 	bl	80215e4 <puts>
    UDP_Packet_Analyze(p->payload, p->len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	895b      	ldrh	r3, [r3, #10]
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f003 fc94 	bl	8009ff4 <UDP_Packet_Analyze>

    /* Free receive pbuf */
    if (pbuf_free(p) != ERR_OK)
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f00e fcc3 	bl	8015058 <pbuf_free>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <udp_receive_callback+0x42>
    {
        LOG_WRITE("recv udp pcb error\n");
 80066d8:	4807      	ldr	r0, [pc, #28]	; (80066f8 <udp_receive_callback+0x50>)
 80066da:	f01a ff83 	bl	80215e4 <puts>
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 80066de:	4b07      	ldr	r3, [pc, #28]	; (80066fc <udp_receive_callback+0x54>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2108      	movs	r1, #8
 80066e4:	4618      	mov	r0, r3
 80066e6:	f005 fb33 	bl	800bd50 <osEventFlagsSet>
    }
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	08022a04 	.word	0x08022a04
 80066f8:	08022a10 	.word	0x08022a10
 80066fc:	20005820 	.word	0x20005820

08006700 <udp_client_connect>:

void udp_client_connect(ip_addr_t serverIpAddr, uint16_t sererPort)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	807b      	strh	r3, [r7, #2]
    static bool bUdpFirstTime = true;
    err_t err;
    bool bUdpConnectErr = true;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
    LOG_WRITE("udp connect %d %d\n", bUdpFirstTime, upcb);
 8006710:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <udp_client_connect+0xa4>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <udp_client_connect+0xa8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	4823      	ldr	r0, [pc, #140]	; (80067ac <udp_client_connect+0xac>)
 800671e:	f01a fec5 	bl	80214ac <iprintf>
    if (bUdpFirstTime) /* First time - Create a new UDP control block  */
 8006722:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <udp_client_connect+0xa4>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <udp_client_connect+0x3e>
    {
        upcb = udp_new();
 800672a:	f015 ff99 	bl	801c660 <udp_new>
 800672e:	4603      	mov	r3, r0
 8006730:	461a      	mov	r2, r3
 8006732:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <udp_client_connect+0xa8>)
 8006734:	601a      	str	r2, [r3, #0]
        bUdpFirstTime = false;
 8006736:	4b1b      	ldr	r3, [pc, #108]	; (80067a4 <udp_client_connect+0xa4>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	e008      	b.n	8006750 <udp_client_connect+0x50>
    }
    else 
    {
        if (upcb != NULL)
 800673e:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <udp_client_connect+0xa8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <udp_client_connect+0x50>
            udp_disconnect(upcb);
 8006746:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <udp_client_connect+0xa8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f015 fefe 	bl	801c54c <udp_disconnect>
    }

    if (upcb != NULL)
 8006750:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <udp_client_connect+0xa8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d015      	beq.n	8006784 <udp_client_connect+0x84>
    {
        /* configure destination IP address and port */
        err = udp_connect(upcb, &serverIpAddr, sererPort);
 8006758:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <udp_client_connect+0xa8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	887a      	ldrh	r2, [r7, #2]
 800675e:	1d39      	adds	r1, r7, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f015 fe85 	bl	801c470 <udp_connect>
 8006766:	4603      	mov	r3, r0
 8006768:	73bb      	strb	r3, [r7, #14]

        if (err == ERR_OK)
 800676a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <udp_client_connect+0x84>
        {
            /* Set a receive callback for the upcb */
            udp_recv(upcb, udp_receive_callback, NULL);
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <udp_client_connect+0xa8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2200      	movs	r2, #0
 8006778:	490d      	ldr	r1, [pc, #52]	; (80067b0 <udp_client_connect+0xb0>)
 800677a:	4618      	mov	r0, r3
 800677c:	f015 ff0e 	bl	801c59c <udp_recv>

            bUdpConnectErr = false;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (bUdpConnectErr)
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <udp_client_connect+0x9c>
    {
        LOG_WRITE("create new udp pcb error\n");
 800678a:	480a      	ldr	r0, [pc, #40]	; (80067b4 <udp_client_connect+0xb4>)
 800678c:	f01a ff2a 	bl	80215e4 <puts>
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <udp_client_connect+0xb8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2108      	movs	r1, #8
 8006796:	4618      	mov	r0, r3
 8006798:	f005 fada 	bl	800bd50 <osEventFlagsSet>
    }
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000023c 	.word	0x2000023c
 80067a8:	20005ec4 	.word	0x20005ec4
 80067ac:	08022a24 	.word	0x08022a24
 80067b0:	080066a9 	.word	0x080066a9
 80067b4:	08022a38 	.word	0x08022a38
 80067b8:	20005820 	.word	0x20005820

080067bc <udp_client_send>:

void udp_client_send(uint8_t *data, int len)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
    LOG_WRITE("udp send %d %p\n", ethConnectStatus, upcb);
 80067c6:	4b26      	ldr	r3, [pc, #152]	; (8006860 <udp_client_send+0xa4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a26      	ldr	r2, [pc, #152]	; (8006864 <udp_client_send+0xa8>)
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	4825      	ldr	r0, [pc, #148]	; (8006868 <udp_client_send+0xac>)
 80067d2:	f01a fe6b 	bl	80214ac <iprintf>

    if (ethConnectStatus != 2 || upcb == NULL)
 80067d6:	4b22      	ldr	r3, [pc, #136]	; (8006860 <udp_client_send+0xa4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d13b      	bne.n	8006856 <udp_client_send+0x9a>
 80067de:	4b21      	ldr	r3, [pc, #132]	; (8006864 <udp_client_send+0xa8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d037      	beq.n	8006856 <udp_client_send+0x9a>
        return;

    bool bUdpSendErr = true;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
    struct pbuf *p;

    /* allocate pbuf from pool*/
    p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80067f2:	4619      	mov	r1, r3
 80067f4:	2036      	movs	r0, #54	; 0x36
 80067f6:	f00e f94b 	bl	8014a90 <pbuf_alloc>
 80067fa:	60b8      	str	r0, [r7, #8]

    if (p != NULL)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01c      	beq.n	800683c <udp_client_send+0x80>
    {
        /* copy data to pbuf */
        if (pbuf_take(p, data, len) == ERR_OK)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	68b8      	ldr	r0, [r7, #8]
 800680c:	f00e fed8 	bl	80155c0 <pbuf_take>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <udp_client_send+0x70>
        {
            /* send udp data */
            if (udp_send(upcb, p) == ERR_OK)
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <udp_client_send+0xa8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	4618      	mov	r0, r3
 800681e:	f015 fbb5 	bl	801bf8c <udp_send>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <udp_client_send+0x70>
            {
                bUdpSendErr = false;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]
            }
        }
        /* free pbuf */
        if (pbuf_free(p) != ERR_OK)
 800682c:	68b8      	ldr	r0, [r7, #8]
 800682e:	f00e fc13 	bl	8015058 <pbuf_free>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <udp_client_send+0x80>
        {
            bUdpSendErr = true;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (bUdpSendErr)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <udp_client_send+0x9c>
    {
        LOG_WRITE("send udp pcb error\n");
 8006842:	480a      	ldr	r0, [pc, #40]	; (800686c <udp_client_send+0xb0>)
 8006844:	f01a fece 	bl	80215e4 <puts>
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 8006848:	4b09      	ldr	r3, [pc, #36]	; (8006870 <udp_client_send+0xb4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2108      	movs	r1, #8
 800684e:	4618      	mov	r0, r3
 8006850:	f005 fa7e 	bl	800bd50 <osEventFlagsSet>
 8006854:	e000      	b.n	8006858 <udp_client_send+0x9c>
        return;
 8006856:	bf00      	nop
    }
}
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	200003fc 	.word	0x200003fc
 8006864:	20005ec4 	.word	0x20005ec4
 8006868:	08022a54 	.word	0x08022a54
 800686c:	08022a64 	.word	0x08022a64
 8006870:	20005820 	.word	0x20005820

08006874 <ethSendTask>:

//tcp
void ethSendTask()
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08c      	sub	sp, #48	; 0x30
 8006878:	af02      	add	r7, sp, #8
    osStatus_t sendStt;
    err_t err;
    //wait until have packet
    for (;;)
    {
        sendStt = osMessageQueueGet(SendEthQueueID, &sendMsgObj, NULL, osWaitForever);
 800687a:	4b28      	ldr	r3, [pc, #160]	; (800691c <ethSendTask+0xa8>)
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f107 0108 	add.w	r1, r7, #8
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	2200      	movs	r2, #0
 8006888:	f005 fe84 	bl	800c594 <osMessageQueueGet>
 800688c:	6238      	str	r0, [r7, #32]
        LOG_WRITE("eth send task %d %d\n", ethConnectStatus, sendMsgObj.type);
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <ethSendTask+0xac>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	7b3a      	ldrb	r2, [r7, #12]
 8006894:	4619      	mov	r1, r3
 8006896:	4823      	ldr	r0, [pc, #140]	; (8006924 <ethSendTask+0xb0>)
 8006898:	f01a fe08 	bl	80214ac <iprintf>
        if (ethConnectStatus == 0 || sendStt != osOK)
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <ethSendTask+0xac>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d038      	beq.n	8006916 <ethSendTask+0xa2>
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d135      	bne.n	8006916 <ethSendTask+0xa2>
            continue;
        if (sendMsgObj.type == 1)
 80068aa:	7b3b      	ldrb	r3, [r7, #12]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d128      	bne.n	8006902 <ethSendTask+0x8e>
        {
            int nWritten = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len;
            while (nWritten < sendMsgObj.len)
 80068b4:	e020      	b.n	80068f8 <ethSendTask+0x84>
            {
                err = netconn_write_partly(
 80068b6:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <ethSendTask+0xb4>)
 80068b8:	6818      	ldr	r0, [r3, #0]
                    conn,                                      //connection
                    (const void *)(sendMsgObj.ptr + nWritten), //buffer pointer
 80068ba:	693a      	ldr	r2, [r7, #16]
                err = netconn_write_partly(
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                    (const void *)(sendMsgObj.ptr + nWritten), //buffer pointer
 80068be:	18d1      	adds	r1, r2, r3
                    (sendMsgObj.len - nWritten),               //buffer length
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	1ad3      	subs	r3, r2, r3
                err = netconn_write_partly(
 80068c6:	461a      	mov	r2, r3
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2304      	movs	r3, #4
 80068ce:	f00a f863 	bl	8010998 <netconn_write_partly>
 80068d2:	4603      	mov	r3, r0
 80068d4:	77fb      	strb	r3, [r7, #31]
                    NETCONN_DONTBLOCK,                         //no copy
                    (size_t *)&len);                           //written len
                if (err == ERR_OK)
 80068d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d105      	bne.n	80068ea <ethSendTask+0x76>
                {
                    nWritten += (int)len;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	4413      	add	r3, r2
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	e006      	b.n	80068f8 <ethSendTask+0x84>
                }
                else
                {
                    //re-connect
                    osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <ethSendTask+0xb8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2101      	movs	r1, #1
 80068f0:	4618      	mov	r0, r3
 80068f2:	f005 fa2d 	bl	800bd50 <osEventFlagsSet>
                    break;
 80068f6:	e00f      	b.n	8006918 <ethSendTask+0xa4>
            while (nWritten < sendMsgObj.len)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fc:	429a      	cmp	r2, r3
 80068fe:	dbda      	blt.n	80068b6 <ethSendTask+0x42>
 8006900:	e7bb      	b.n	800687a <ethSendTask+0x6>
                }
            }
        }
        else if (sendMsgObj.type == 2)
 8006902:	7b3b      	ldrb	r3, [r7, #12]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d1b8      	bne.n	800687a <ethSendTask+0x6>
        {
            udp_client_send(sendMsgObj.ptr, sendMsgObj.len);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4611      	mov	r1, r2
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff54 	bl	80067bc <udp_client_send>
 8006914:	e7b1      	b.n	800687a <ethSendTask+0x6>
            continue;
 8006916:	bf00      	nop
        sendStt = osMessageQueueGet(SendEthQueueID, &sendMsgObj, NULL, osWaitForever);
 8006918:	e7af      	b.n	800687a <ethSendTask+0x6>
 800691a:	bf00      	nop
 800691c:	200056dc 	.word	0x200056dc
 8006920:	200003fc 	.word	0x200003fc
 8006924:	08022a78 	.word	0x08022a78
 8006928:	20005ec0 	.word	0x20005ec0
 800692c:	20005820 	.word	0x20005820

08006930 <ethConnectRelease>:
        }
    }
}

void ethConnectRelease()
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
    //release tcp/udp stack
    ethConnectStatus = 0;
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <ethConnectRelease+0x30>)
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
    TCP_UDP_Stack_Release();
 800693a:	f003 fc97 	bl	800a26c <TCP_UDP_Stack_Release>

    netconn_close(conn);  //close session
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <ethConnectRelease+0x34>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f00a f92a 	bl	8010b9c <netconn_close>
    netconn_delete(conn); //free memory
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <ethConnectRelease+0x34>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f009 fdd9 	bl	8010504 <netconn_delete>
    osDelay(RECONNECT_INTERVAR_ETH);
 8006952:	f242 7010 	movw	r0, #10000	; 0x2710
 8006956:	f005 f8aa 	bl	800baae <osDelay>
}
 800695a:	bf00      	nop
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	200003fc 	.word	0x200003fc
 8006964:	20005ec0 	.word	0x20005ec0

08006968 <ethConnectTcpUdp>:

//return 0 ~ success, -1 ~ fail
int ethConnectTcpUdp()
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af02      	add	r7, sp, #8
    ip_addr_t server_addr; //server address
    err_t err;
 
    int tryDhcp = 5;
 800696e:	2305      	movs	r3, #5
 8006970:	613b      	str	r3, [r7, #16]
    while (MX_LWIP_checkIsystem_ip_addr() == 0)
 8006972:	e00b      	b.n	800698c <ethConnectTcpUdp+0x24>
    {
        osDelay(1000);
 8006974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006978:	f005 f899 	bl	800baae <osDelay>
        if(tryDhcp-- < 0)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1e5a      	subs	r2, r3, #1
 8006980:	613a      	str	r2, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	da02      	bge.n	800698c <ethConnectTcpUdp+0x24>
        {
            //error connect
            return -1;
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	e06c      	b.n	8006a66 <ethConnectTcpUdp+0xfe>
    while (MX_LWIP_checkIsystem_ip_addr() == 0)
 800698c:	f004 fab0 	bl	800aef0 <MX_LWIP_checkIsystem_ip_addr>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0ee      	beq.n	8006974 <ethConnectTcpUdp+0xc>
        }
    }

    //debug
    uint8_t* ipLWIP = MX_LWIP_getIP();
 8006996:	f004 fac3 	bl	800af20 <MX_LWIP_getIP>
 800699a:	4603      	mov	r3, r0
 800699c:	60bb      	str	r3, [r7, #8]
    if(ipLWIP != NULL)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <ethConnectTcpUdp+0x62>
    {
        LOG_WRITE(">>> ip: %d %d %d %d\n", ipLWIP[0], ipLWIP[1], ipLWIP[2], ipLWIP[3]);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	3301      	adds	r3, #1
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	3302      	adds	r3, #2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3303      	adds	r3, #3
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	4603      	mov	r3, r0
 80069c4:	482a      	ldr	r0, [pc, #168]	; (8006a70 <ethConnectTcpUdp+0x108>)
 80069c6:	f01a fd71 	bl	80214ac <iprintf>
    }

    conn = netconn_new(NETCONN_TCP); //new tcp netconn
 80069ca:	2200      	movs	r2, #0
 80069cc:	2100      	movs	r1, #0
 80069ce:	2010      	movs	r0, #16
 80069d0:	f009 fcfa 	bl	80103c8 <netconn_new_with_proto_and_callback>
 80069d4:	4603      	mov	r3, r0
 80069d6:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <ethConnectTcpUdp+0x10c>)
 80069d8:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 80069da:	4b26      	ldr	r3, [pc, #152]	; (8006a74 <ethConnectTcpUdp+0x10c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d03c      	beq.n	8006a5c <ethConnectTcpUdp+0xf4>
    {
        int tryGetIp = 5;
 80069e2:	2305      	movs	r3, #5
 80069e4:	60fb      	str	r3, [r7, #12]
        while (tryGetIp--)
 80069e6:	e00a      	b.n	80069fe <ethConnectTcpUdp+0x96>
        {
            err = netconn_gethostbyname(serverDomain, &server_addr);
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	4822      	ldr	r0, [pc, #136]	; (8006a78 <ethConnectTcpUdp+0x110>)
 80069ee:	f00a f8fd 	bl	8010bec <netconn_gethostbyname>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
            if (err == ERR_OK)
 80069f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <ethConnectTcpUdp+0xa2>
        while (tryGetIp--)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1e5a      	subs	r2, r3, #1
 8006a02:	60fa      	str	r2, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ef      	bne.n	80069e8 <ethConnectTcpUdp+0x80>
 8006a08:	e000      	b.n	8006a0c <ethConnectTcpUdp+0xa4>
            {
                break;
 8006a0a:	bf00      	nop
            }
        }

        if (err == ERR_OK)
 8006a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <ethConnectTcpUdp+0xc2>
            err = netconn_connect(conn, &server_addr, serverPort); //connect to the server
 8006a14:	4b17      	ldr	r3, [pc, #92]	; (8006a74 <ethConnectTcpUdp+0x10c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <ethConnectTcpUdp+0x114>)
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	1d39      	adds	r1, r7, #4
 8006a20:	4618      	mov	r0, r3
 8006a22:	f009 fd8b 	bl	801053c <netconn_connect>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]

        if (err == ERR_OK)
 8006a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d117      	bne.n	8006a62 <ethConnectTcpUdp+0xfa>
        {
            ethConnectStatus = 1; //done TCP
 8006a32:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <ethConnectTcpUdp+0x118>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
            udp_client_connect(server_addr, serverPort);
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <ethConnectTcpUdp+0x114>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff fe5d 	bl	8006700 <udp_client_connect>
            TCP_UDP_Stack_Init(ConnectEthEventID, doneTLSEthEnum, reConEthEnum, true);
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <ethConnectTcpUdp+0x11c>)
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2102      	movs	r1, #2
 8006a50:	f003 fb86 	bl	800a160 <TCP_UDP_Stack_Init>
            TCP_Request(); //request rsa pub key
 8006a54:	f003 fcc8 	bl	800a3e8 <TCP_Request>

            return 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e004      	b.n	8006a66 <ethConnectTcpUdp+0xfe>
        }
    }
    else
    {
        LOG_WRITE("create new tcp conn error\n");
 8006a5c:	480a      	ldr	r0, [pc, #40]	; (8006a88 <ethConnectTcpUdp+0x120>)
 8006a5e:	f01a fdc1 	bl	80215e4 <puts>
    }
    return -1;
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295

}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	08022a90 	.word	0x08022a90
 8006a74:	20005ec0 	.word	0x20005ec0
 8006a78:	20000248 	.word	0x20000248
 8006a7c:	200002ac 	.word	0x200002ac
 8006a80:	200003fc 	.word	0x200003fc
 8006a84:	20005820 	.word	0x20005820
 8006a88:	08022aa8 	.word	0x08022aa8

08006a8c <ethRecv>:

//receive data, put in loop
void ethRecv()
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
    struct netbuf *buf;
    void *data;
    u16_t len; //buffer length

    err_t err = netconn_recv(conn, &buf);
 8006a92:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <ethRecv+0x74>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f107 0208 	add.w	r2, r7, #8
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f009 ff01 	bl	80108a4 <netconn_recv>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]

    LOG_WRITE("net conn recv %d\n", err);
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4815      	ldr	r0, [pc, #84]	; (8006b04 <ethRecv+0x78>)
 8006aae:	f01a fcfd 	bl	80214ac <iprintf>

    if (err == ERR_OK)
 8006ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d117      	bne.n	8006aea <ethRecv+0x5e>
    {
        do
        {
            netbuf_data(buf, &data, &len); //receive data pointer & length
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	1cba      	adds	r2, r7, #2
 8006abe:	1d39      	adds	r1, r7, #4
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f00b fd09 	bl	80124d8 <netbuf_data>
            TCP_Packet_Analyze(data, len);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	887a      	ldrh	r2, [r7, #2]
 8006aca:	4611      	mov	r1, r2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f003 f9c7 	bl	8009e60 <TCP_Packet_Analyze>
        } while (netbuf_next(buf) >= 0); //check buffer empty
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f00b fd49 	bl	801256c <netbuf_next>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	daec      	bge.n	8006aba <ethRecv+0x2e>
        netbuf_delete(buf);              //clear buffer
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f00b fcd8 	bl	8012498 <netbuf_delete>
    }
    else
    {
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
    }
}
 8006ae8:	e005      	b.n	8006af6 <ethRecv+0x6a>
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <ethRecv+0x7c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f005 f92d 	bl	800bd50 <osEventFlagsSet>
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20005ec0 	.word	0x20005ec0
 8006b04:	08022ac4 	.word	0x08022ac4
 8006b08:	20005820 	.word	0x20005820

08006b0c <ethConnectTask>:
int countethConnectTask = 0;
void ethConnectTask()
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
    //first time
    if(ethConnectTcpUdp() != 0)
 8006b12:	f7ff ff29 	bl	8006968 <ethConnectTcpUdp>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <ethConnectTask+0x1c>
    {
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum); //to re connect
 8006b1c:	4b1e      	ldr	r3, [pc, #120]	; (8006b98 <ethConnectTask+0x8c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2101      	movs	r1, #1
 8006b22:	4618      	mov	r0, r3
 8006b24:	f005 f914 	bl	800bd50 <osEventFlagsSet>
    }

    LOG_WRITE("connectEthTask\n");
 8006b28:	481c      	ldr	r0, [pc, #112]	; (8006b9c <ethConnectTask+0x90>)
 8006b2a:	f01a fd5b 	bl	80215e4 <puts>
    int connectEthFlag;
    for (;;)
    {
        connectEthFlag = osEventFlagsWait(ConnectEthEventID, 0xFF, osFlagsWaitAny, 0);
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <ethConnectTask+0x8c>)
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	2300      	movs	r3, #0
 8006b34:	2200      	movs	r2, #0
 8006b36:	21ff      	movs	r1, #255	; 0xff
 8006b38:	f005 f980 	bl	800be3c <osEventFlagsWait>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	607b      	str	r3, [r7, #4]
        countethConnectTask++;
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <ethConnectTask+0x94>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <ethConnectTask+0x94>)
 8006b48:	6013      	str	r3, [r2, #0]
        // LOG_WRITE("connectEthFlag %d\n", connectEthFlag);
        if (connectEthFlag & (1 << errorEthEnum))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <ethConnectTask+0x50>
        {
            LOG_WRITE("conEthFlag err\n");
 8006b54:	4813      	ldr	r0, [pc, #76]	; (8006ba4 <ethConnectTask+0x98>)
 8006b56:	f01a fd45 	bl	80215e4 <puts>
 8006b5a:	e01a      	b.n	8006b92 <ethConnectTask+0x86>
            //reboot stm32 by watch-dog
        }
        else if (connectEthFlag & (1 << reConEthEnum))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <ethConnectTask+0x76>
        {
            ethConnectRelease();
 8006b66:	f7ff fee3 	bl	8006930 <ethConnectRelease>
            if(ethConnectTcpUdp() != 0)
 8006b6a:	f7ff fefd 	bl	8006968 <ethConnectTcpUdp>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <ethConnectTask+0x86>
            {
                osEventFlagsSet(ConnectEthEventID, 1 << errConEthEnum); //to re connect
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <ethConnectTask+0x8c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2102      	movs	r1, #2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f005 f8e8 	bl	800bd50 <osEventFlagsSet>
                continue;
 8006b80:	e009      	b.n	8006b96 <ethConnectTask+0x8a>
            }
        }
        else if (connectEthFlag & (1 << doneTLSEthEnum))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <ethConnectTask+0x86>
        {
            ethConnectStatus = 2;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <ethConnectTask+0x9c>)
 8006b8e:	2202      	movs	r2, #2
 8006b90:	601a      	str	r2, [r3, #0]
        }
        
        //recv data
        ethRecv();
 8006b92:	f7ff ff7b 	bl	8006a8c <ethRecv>
        connectEthFlag = osEventFlagsWait(ConnectEthEventID, 0xFF, osFlagsWaitAny, 0);
 8006b96:	e7ca      	b.n	8006b2e <ethConnectTask+0x22>
 8006b98:	20005820 	.word	0x20005820
 8006b9c:	08022ad8 	.word	0x08022ad8
 8006ba0:	20000400 	.word	0x20000400
 8006ba4:	08022ae8 	.word	0x08022ae8
 8006ba8:	200003fc 	.word	0x200003fc

08006bac <ethSendIP>:
    }
}

bool ethSendIP(int type, uint8_t *data, int len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
    if (type != 1 && type != 2)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d004      	beq.n	8006bc8 <ethSendIP+0x1c>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d001      	beq.n	8006bc8 <ethSendIP+0x1c>
    {
        return false;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e019      	b.n	8006bfc <ethSendIP+0x50>
    }
    LOG_WRITE("eth send %d\n", type);
 8006bc8:	68f9      	ldr	r1, [r7, #12]
 8006bca:	480e      	ldr	r0, [pc, #56]	; (8006c04 <ethSendIP+0x58>)
 8006bcc:	f01a fc6e 	bl	80214ac <iprintf>
    sendEthPack sendMsgObj;
    sendMsgObj.ptr = data;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	61bb      	str	r3, [r7, #24]
    sendMsgObj.len = len;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	61fb      	str	r3, [r7, #28]
    sendMsgObj.type = type;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	753b      	strb	r3, [r7, #20]
    osStatus_t sendMsgStt = osMessageQueuePut(SendEthQueueID, &sendMsgObj, 0U, 0U);
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <ethSendIP+0x5c>)
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	f107 0110 	add.w	r1, r7, #16
 8006be6:	2300      	movs	r3, #0
 8006be8:	2200      	movs	r2, #0
 8006bea:	f005 fc73 	bl	800c4d4 <osMessageQueuePut>
 8006bee:	6278      	str	r0, [r7, #36]	; 0x24

    return (sendMsgStt == osOK);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3728      	adds	r7, #40	; 0x28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	08022af8 	.word	0x08022af8
 8006c08:	200056dc 	.word	0x200056dc

08006c0c <md5hash>:
#include "md5.h"

uint8_t md5sum[MD5_LEN];

uint8_t* md5hash(uint8_t *initial_msg, int initial_len) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	1d3b      	adds	r3, r7, #4
 8006c16:	6018      	str	r0, [r3, #0]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	6019      	str	r1, [r3, #0]
    uint32_t *h0, *h1, *h2, *h3;
    h0 = (uint32_t*)md5sum;
 8006c1c:	4bb1      	ldr	r3, [pc, #708]	; (8006ee4 <md5hash+0x2d8>)
 8006c1e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    h1 = (uint32_t*)(md5sum + 4);
 8006c22:	4bb1      	ldr	r3, [pc, #708]	; (8006ee8 <md5hash+0x2dc>)
 8006c24:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    h2 = (uint32_t*)(md5sum + 8);
 8006c28:	4bb0      	ldr	r3, [pc, #704]	; (8006eec <md5hash+0x2e0>)
 8006c2a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    h3 = (uint32_t*)(md5sum + 12);
 8006c2e:	4bb0      	ldr	r3, [pc, #704]	; (8006ef0 <md5hash+0x2e4>)
 8006c30:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    // Message (to prepare)
    uint8_t *msg = NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 
    // Note: All variables are unsigned 32 bit and wrap modulo 2^32 when calculating
 
    // r specifies the per-round shift amounts
 
    uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
 8006c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c3e:	4aad      	ldr	r2, [pc, #692]	; (8006ef4 <md5hash+0x2e8>)
 8006c40:	4618      	mov	r0, r3
 8006c42:	4611      	mov	r1, r2
 8006c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f01a fb45 	bl	80212d8 <memcpy>
                    5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

    // Use binary integer part of the sines of integers (in radians) as constants// Initialize variables:
    uint32_t k[] = {
 8006c4e:	f107 0310 	add.w	r3, r7, #16
 8006c52:	4aa9      	ldr	r2, [pc, #676]	; (8006ef8 <md5hash+0x2ec>)
 8006c54:	4618      	mov	r0, r3
 8006c56:	4611      	mov	r1, r2
 8006c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f01a fb3b 	bl	80212d8 <memcpy>
        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
        0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
        0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};
 
    *h0 = 0x67452301;
 8006c62:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006c66:	4aa5      	ldr	r2, [pc, #660]	; (8006efc <md5hash+0x2f0>)
 8006c68:	601a      	str	r2, [r3, #0]
    *h1 = 0xefcdab89;
 8006c6a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006c6e:	4aa4      	ldr	r2, [pc, #656]	; (8006f00 <md5hash+0x2f4>)
 8006c70:	601a      	str	r2, [r3, #0]
    *h2 = 0x98badcfe;
 8006c72:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006c76:	4aa3      	ldr	r2, [pc, #652]	; (8006f04 <md5hash+0x2f8>)
 8006c78:	601a      	str	r2, [r3, #0]
    *h3 = 0x10325476;
 8006c7a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006c7e:	4aa2      	ldr	r2, [pc, #648]	; (8006f08 <md5hash+0x2fc>)
 8006c80:	601a      	str	r2, [r3, #0]
 
    // Pre-processing: padding with zeros
    //append "0" bit until message length in bit ≡ 448 (mod 512)
    //append length mod (2 pow 64) to message
 
    int new_len = ((((initial_len + 8) / 64) + 1) * 64) - 8;
 8006c82:	463b      	mov	r3, r7
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3308      	adds	r3, #8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da00      	bge.n	8006c8e <md5hash+0x82>
 8006c8c:	333f      	adds	r3, #63	; 0x3f
 8006c8e:	119b      	asrs	r3, r3, #6
 8006c90:	3301      	adds	r3, #1
 8006c92:	019b      	lsls	r3, r3, #6
 8006c94:	3b08      	subs	r3, #8
 8006c96:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 
    msg = calloc(new_len + 64, 1); // also appends "0" bits 
 8006c9a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006c9e:	3340      	adds	r3, #64	; 0x40
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f01a f9d4 	bl	8021050 <calloc>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
                                   // (we alloc also 64 extra bytes...)
    memcpy(msg, initial_msg, initial_len);
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	1d3b      	adds	r3, r7, #4
 8006cb4:	6819      	ldr	r1, [r3, #0]
 8006cb6:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8006cba:	f01a fb0d 	bl	80212d8 <memcpy>
    msg[initial_len] = 128; // write the "1" bit
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006cc6:	4413      	add	r3, r2
 8006cc8:	2280      	movs	r2, #128	; 0x80
 8006cca:	701a      	strb	r2, [r3, #0]
 
    uint32_t bits_len = 8*initial_len; // note, we append the len
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	601a      	str	r2, [r3, #0]
    memcpy(msg + new_len, &bits_len, 4);           // in bits at the end of the buffer
 8006cda:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006cde:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f107 020c 	add.w	r2, r7, #12
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	601a      	str	r2, [r3, #0]
 
    // Process the message in successive 512-bit chunks:
    //for each 512-bit chunk of message:
    int offset;
    for(offset=0; offset<new_len; offset += (512/8)) {
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006cf2:	e0e5      	b.n	8006ec0 <md5hash+0x2b4>
 
        // break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15
        uint32_t *w = (uint32_t *) (msg + offset);
 8006cf4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006cf8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 
        // Initialize hash value for this chunk:
        uint32_t a = *h0;
 8006d02:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        uint32_t b = *h1;
 8006d0c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
        uint32_t c = *h2;
 8006d16:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        uint32_t d = *h3;
 8006d20:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 
        // Main loop:
        uint32_t i;
        for(i = 0; i<64; i++) {
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006d30:	e098      	b.n	8006e64 <md5hash+0x258>
            uint32_t f, g;

                if (i < 16) {
 8006d32:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006d36:	2b0f      	cmp	r3, #15
 8006d38:	d812      	bhi.n	8006d60 <md5hash+0x154>
                f = (b & c) | ((~b) & d);
 8006d3a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006d3e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006d42:	401a      	ands	r2, r3
 8006d44:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006d48:	43d9      	mvns	r1, r3
 8006d4a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006d4e:	400b      	ands	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = i;
 8006d56:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006d5a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006d5e:	e049      	b.n	8006df4 <md5hash+0x1e8>
            } else if (i < 32) {
 8006d60:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006d64:	2b1f      	cmp	r3, #31
 8006d66:	d818      	bhi.n	8006d9a <md5hash+0x18e>
                f = (d & b) | ((~d) & c);
 8006d68:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8006d6c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006d70:	401a      	ands	r2, r3
 8006d72:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006d76:	43d9      	mvns	r1, r3
 8006d78:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006d7c:	400b      	ands	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (5*i + 1) % 16;
 8006d84:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006d98:	e02c      	b.n	8006df4 <md5hash+0x1e8>
            } else if (i < 48) {
 8006d9a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8006da0:	d814      	bhi.n	8006dcc <md5hash+0x1c0>
                f = b ^ c ^ d;
 8006da2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006da6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006daa:	4053      	eors	r3, r2
 8006dac:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8006db0:	4053      	eors	r3, r2
 8006db2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (3*i + 5) % 16;          
 8006db6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006dba:	4613      	mov	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3305      	adds	r3, #5
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006dca:	e013      	b.n	8006df4 <md5hash+0x1e8>
            } else {
                f = c ^ (b | (~d));
 8006dcc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006dd0:	43da      	mvns	r2, r3
 8006dd2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006ddc:	4053      	eors	r3, r2
 8006dde:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (7*i) % 16;
 8006de2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006de6:	4613      	mov	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
            }

            uint32_t temp = d;
 8006df4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006df8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            d = c;
 8006dfc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006e00:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
            c = b;
 8006e04:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006e08:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
            // printf("rotateLeft(%x + %x + %x + %x, %d)\n", a, f, k[i], w[g], r[i]);
            b = b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);
 8006e0c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006e10:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8006e14:	441a      	add	r2, r3
 8006e16:	f107 0310 	add.w	r3, r7, #16
 8006e1a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006e1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e22:	441a      	add	r2, r3
 8006e24:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8006e2e:	440b      	add	r3, r1
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	441a      	add	r2, r3
 8006e34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e38:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e40:	f1c3 0320 	rsb	r3, r3, #32
 8006e44:	fa62 f303 	ror.w	r3, r2, r3
 8006e48:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
            a = temp;
 8006e52:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006e56:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        for(i = 0; i<64; i++) {
 8006e5a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006e5e:	3301      	adds	r3, #1
 8006e60:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006e64:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006e68:	2b3f      	cmp	r3, #63	; 0x3f
 8006e6a:	f67f af62 	bls.w	8006d32 <md5hash+0x126>
        }
 
        // Add this chunk's hash to result so far:
        *h0 += a;
 8006e6e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006e78:	441a      	add	r2, r3
 8006e7a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006e7e:	601a      	str	r2, [r3, #0]
        *h1 += b;
 8006e80:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006e8a:	441a      	add	r2, r3
 8006e8c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006e90:	601a      	str	r2, [r3, #0]
        *h2 += c;
 8006e92:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006e9c:	441a      	add	r2, r3
 8006e9e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006ea2:	601a      	str	r2, [r3, #0]
        *h3 += d;
 8006ea4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006eae:	441a      	add	r2, r3
 8006eb0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006eb4:	601a      	str	r2, [r3, #0]
    for(offset=0; offset<new_len; offset += (512/8)) {
 8006eb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006eba:	3340      	adds	r3, #64	; 0x40
 8006ebc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ec0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8006ec4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	f6ff af13 	blt.w	8006cf4 <md5hash+0xe8>
    }
 
    // cleanup
    free(msg);
 8006ece:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8006ed2:	f01a f9eb 	bl	80212ac <free>

    return md5sum;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <md5hash+0x2d8>)
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20005ec8 	.word	0x20005ec8
 8006ee8:	20005ecc 	.word	0x20005ecc
 8006eec:	20005ed0 	.word	0x20005ed0
 8006ef0:	20005ed4 	.word	0x20005ed4
 8006ef4:	08022b08 	.word	0x08022b08
 8006ef8:	08022c08 	.word	0x08022c08
 8006efc:	67452301 	.word	0x67452301
 8006f00:	efcdab89 	.word	0xefcdab89
 8006f04:	98badcfe 	.word	0x98badcfe
 8006f08:	10325476 	.word	0x10325476

08006f0c <mp3GetFrame>:
    return numOfMp3FrameSaving;
}

//get adu and frame from tcp packet and save to memory
void mp3GetFrame(MP3Struct *mp3Packet, int len)
{
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	b093      	sub	sp, #76	; 0x4c
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
    MP3LOG("mp3GetFrame\n");

    //check property packet, len of adu and mp3 frame
    uint8_t *tmpPtr = mp3Packet->data + mp3Packet->sizeOfFirstFrame + (mp3Packet->numOfFrame - 1) * mp3Packet->frameSize;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4618      	mov	r0, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	68f9      	ldr	r1, [r7, #12]
 8006f32:	f8b1 1025 	ldrh.w	r1, [r1, #37]	; 0x25
 8006f36:	b289      	uxth	r1, r1
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	4403      	add	r3, r0
 8006f3e:	4413      	add	r3, r2
 8006f40:	63bb      	str	r3, [r7, #56]	; 0x38
    if (tmpPtr != (uint8_t *)mp3Packet + len)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	f040 819d 	bne.w	800728a <mp3GetFrame+0x37e>
        return;

    //get volume, timeperframe
    newVol = mp3Packet->volume;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	7d5b      	ldrb	r3, [r3, #21]
 8006f54:	461a      	mov	r2, r3
 8006f56:	4bb0      	ldr	r3, [pc, #704]	; (8007218 <mp3GetFrame+0x30c>)
 8006f58:	601a      	str	r2, [r3, #0]
    timeFrame = mp3Packet->timePerFrame;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006f60:	461a      	mov	r2, r3
 8006f62:	4bae      	ldr	r3, [pc, #696]	; (800721c <mp3GetFrame+0x310>)
 8006f64:	601a      	str	r2, [r3, #0]
    timePacket = mp3Packet->timePerFrame * mp3Packet->numOfFrame;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f74:	fb03 f302 	mul.w	r3, r3, r2
 8006f78:	4aa9      	ldr	r2, [pc, #676]	; (8007220 <mp3GetFrame+0x314>)
 8006f7a:	6013      	str	r3, [r2, #0]

    //check time, before save
    int64_t curTime = TCP_UDP_GetNtpTime();
 8006f7c:	f003 f8b6 	bl	800a0ec <TCP_UDP_GetNtpTime>
 8006f80:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    curTimeDebug = curTime;
 8006f84:	49a7      	ldr	r1, [pc, #668]	; (8007224 <mp3GetFrame+0x318>)
 8006f86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f8a:	e9c1 2300 	strd	r2, r3, [r1]
    if(curTime == 0) return; //don't have ntp time
 8006f8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f000 817b 	beq.w	800728e <mp3GetFrame+0x382>
    int64_t offsetTime = mp3Packet->timestamp - curTime;
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	f8d1 2016 	ldr.w	r2, [r1, #22]
 8006f9e:	f8d1 301a 	ldr.w	r3, [r1, #26]
 8006fa2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006fa6:	1a16      	subs	r6, r2, r0
 8006fa8:	603e      	str	r6, [r7, #0]
 8006faa:	eb63 0301 	sbc.w	r3, r3, r1
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    offsetTimeDebug = offsetTime;
 8006fb8:	499b      	ldr	r1, [pc, #620]	; (8007228 <mp3GetFrame+0x31c>)
 8006fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fbe:	e9c1 2300 	strd	r2, r3, [r1]

    //debug
    if(curTimeDebugFirst == 0) curTimeDebugFirst = curTime;
 8006fc2:	4b9a      	ldr	r3, [pc, #616]	; (800722c <mp3GetFrame+0x320>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	d104      	bne.n	8006fd6 <mp3GetFrame+0xca>
 8006fcc:	4997      	ldr	r1, [pc, #604]	; (800722c <mp3GetFrame+0x320>)
 8006fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fd2:	e9c1 2300 	strd	r2, r3, [r1]
//    LOG_WRITE(">>> offset recv time %d", (int)offsetTime);

//   return;

    int numOfFrame;     //copy from tcp packet to memory
    if (offsetTime < 0) //packet come slow, need remove some frames
 8006fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	f173 0300 	sbcs.w	r3, r3, #0
 8006fe0:	da2c      	bge.n	800703c <mp3GetFrame+0x130>
    {
        int64_t numOfFrameWillRemove = (-offsetTime) / mp3Packet->timePerFrame + 1; // + 1 to margin
 8006fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fe6:	4250      	negs	r0, r2
 8006fe8:	eb63 0143 	sbc.w	r1, r3, r3, lsl #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	f7f9 f942 	bl	8000280 <__aeabi_ldivmod>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	f112 0a01 	adds.w	sl, r2, #1
 8007004:	f143 0b00 	adc.w	fp, r3, #0
 8007008:	e9c7 ab08 	strd	sl, fp, [r7, #32]
        numOfFrame = (int)mp3Packet->numOfFrame - (int)numOfFrameWillRemove;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007012:	461a      	mov	r2, r3
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	647b      	str	r3, [r7, #68]	; 0x44

        //debug     /////////////////////////
        if (numOfFrame < 0) //sth wrong ?
 800701a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701c:	2b00      	cmp	r3, #0
 800701e:	da03      	bge.n	8007028 <mp3GetFrame+0x11c>
        {
            LOG_WRITE("numOfFrame < 0 \n");
 8007020:	4883      	ldr	r0, [pc, #524]	; (8007230 <mp3GetFrame+0x324>)
 8007022:	f01a fadf 	bl	80215e4 <puts>
            return;
 8007026:	e133      	b.n	8007290 <mp3GetFrame+0x384>
        }
        /////////////////////////////////////

        numOfFrame = min(numOfFrame, (int)mp3Packet->numOfFrame);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800702e:	461a      	mov	r2, r3
 8007030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007032:	4293      	cmp	r3, r2
 8007034:	bfa8      	it	ge
 8007036:	4613      	movge	r3, r2
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
 800703a:	e003      	b.n	8007044 <mp3GetFrame+0x138>
    }
    else
    {
        numOfFrame = (int)mp3Packet->numOfFrame;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007042:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //remain slot to save frame
    int remainSlotSaveFrame = MP3_NUM_OF_FRAME_MAX - numOfMp3FrameSaving;
 8007044:	4b7b      	ldr	r3, [pc, #492]	; (8007234 <mp3GetFrame+0x328>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800704c:	61fb      	str	r3, [r7, #28]

    //debug     //////////////////////
    if (remainSlotSaveFrame < 0) //sth wrong ?
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	da03      	bge.n	800705c <mp3GetFrame+0x150>
    {
        LOG_WRITE("remainSlotSaveFrame < 0 \n");
 8007054:	4878      	ldr	r0, [pc, #480]	; (8007238 <mp3GetFrame+0x32c>)
 8007056:	f01a fac5 	bl	80215e4 <puts>
        return;
 800705a:	e119      	b.n	8007290 <mp3GetFrame+0x384>
    }
    //////////////////////////////////

    numOfFrame = min(numOfFrame, remainSlotSaveFrame);
 800705c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4293      	cmp	r3, r2
 8007062:	bfa8      	it	ge
 8007064:	4613      	movge	r3, r2
 8007066:	647b      	str	r3, [r7, #68]	; 0x44

    

    int numOfFrameRemoved = mp3Packet->numOfFrame - numOfFrame;               //use this to update timestamp
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800706e:	461a      	mov	r2, r3
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	61bb      	str	r3, [r7, #24]
    mp3Packet->timestamp += (int)mp3Packet->timePerFrame * numOfFrameRemoved; //update new timestamp
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	f8d1 2016 	ldr.w	r2, [r1, #22]
 800707c:	f8d1 301a 	ldr.w	r3, [r1, #26]
 8007080:	68f9      	ldr	r1, [r7, #12]
 8007082:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8007086:	4608      	mov	r0, r1
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	fb01 f100 	mul.w	r1, r1, r0
 800708e:	4608      	mov	r0, r1
 8007090:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007094:	1814      	adds	r4, r2, r0
 8007096:	eb43 0501 	adc.w	r5, r3, r1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3316      	adds	r3, #22
 800709e:	601c      	str	r4, [r3, #0]
 80070a0:	605d      	str	r5, [r3, #4]

    int realFrameSize = mp3Packet->frameSize + 4; //4B for header
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3304      	adds	r3, #4
 80070ac:	617b      	str	r3, [r7, #20]
    uint8_t *framePtr = mp3Packet->data;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3328      	adds	r3, #40	; 0x28
 80070b2:	643b      	str	r3, [r7, #64]	; 0x40
    //copy numOfFrame frame
    for (int i = 0; i < (int)numOfFrame; i++)
 80070b4:	2300      	movs	r3, #0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b8:	e0d1      	b.n	800725e <mp3GetFrame+0x352>
    {
        FrameStruct *newFrame = (FrameStruct *)malloc(sizeof(FrameStruct));
 80070ba:	2028      	movs	r0, #40	; 0x28
 80070bc:	f01a f8ee 	bl	802129c <malloc>
 80070c0:	4603      	mov	r3, r0
 80070c2:	613b      	str	r3, [r7, #16]
        if (newFrame != NULL) //success allocate
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80c3 	beq.w	8007252 <mp3GetFrame+0x346>
        {
            newFrame->nextFrame = NULL;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2200      	movs	r2, #0
 80070d0:	60da      	str	r2, [r3, #12]
            newFrame->prevFrame = NULL;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2200      	movs	r2, #0
 80070d6:	609a      	str	r2, [r3, #8]

            if (i == 0) //adu frame
 80070d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <mp3GetFrame+0x1ea>
                // newFrame->data = (uint8_t *)malloc(ADU_FRAME_SIZE);
                newFrame->data = (uint8_t *)malloc(mp3Packet->sizeOfFirstFrame);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4618      	mov	r0, r3
 80070e8:	f01a f8d8 	bl	802129c <malloc>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	621a      	str	r2, [r3, #32]
 80070f4:	e007      	b.n	8007106 <mp3GetFrame+0x1fa>
            else //mp3 frame
                newFrame->data = (uint8_t *)malloc(realFrameSize);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f01a f8cf 	bl	802129c <malloc>
 80070fe:	4603      	mov	r3, r0
 8007100:	461a      	mov	r2, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	621a      	str	r2, [r3, #32]
            if (newFrame->data != NULL)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 809a 	beq.w	8007244 <mp3GetFrame+0x338>
            {
                if (i == 0)
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d119      	bne.n	800714a <mp3GetFrame+0x23e>
                {
                    //copy data
                    memcpy(newFrame->data, framePtr, mp3Packet->sizeOfFirstFrame);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6a18      	ldr	r0, [r3, #32]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8007120:	b29b      	uxth	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007126:	f01a f8d7 	bl	80212d8 <memcpy>
                    newFrame->len = mp3Packet->sizeOfFirstFrame;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	611a      	str	r2, [r3, #16]
                    // newFrame->len = ADU_FRAME_SIZE;
                    framePtr += mp3Packet->sizeOfFirstFrame;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007144:	4413      	add	r3, r2
 8007146:	643b      	str	r3, [r7, #64]	; 0x40
 8007148:	e01b      	b.n	8007182 <mp3GetFrame+0x276>
                    // }
                }
                else
                {
                    //copy data, first 4B header, then ....
                    memcpy(newFrame->data, mp3Packet->data, 4);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	3228      	adds	r2, #40	; 0x28
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	601a      	str	r2, [r3, #0]
                    memcpy(newFrame->data + 4, framePtr, mp3Packet->frameSize);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	1d18      	adds	r0, r3, #4
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 8007162:	b29b      	uxth	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007168:	f01a f8b6 	bl	80212d8 <memcpy>
                    newFrame->len = realFrameSize;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	611a      	str	r2, [r3, #16]
                    framePtr += mp3Packet->frameSize;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717e:	4413      	add	r3, r2
 8007180:	643b      	str	r3, [r7, #64]	; 0x40
                }

                //copy value id, session, timestamp
                if (i == (int)numOfFrame - 1) //last frame
 8007182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007184:	3b01      	subs	r3, #1
 8007186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007188:	429a      	cmp	r2, r3
 800718a:	d103      	bne.n	8007194 <mp3GetFrame+0x288>
                    newFrame->isTail = true;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2201      	movs	r2, #1
 8007190:	771a      	strb	r2, [r3, #28]
 8007192:	e002      	b.n	800719a <mp3GetFrame+0x28e>
                else
                    newFrame->isTail = false;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2200      	movs	r2, #0
 8007198:	771a      	strb	r2, [r3, #28]
                newFrame->session = mp3Packet->session;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	619a      	str	r2, [r3, #24]
                newFrame->id = mp3Packet->frameID + i;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	441a      	add	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	615a      	str	r2, [r3, #20]
                newFrame->timestamp = mp3Packet->timestamp + i * mp3Packet->timePerFrame;
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	f8d1 2016 	ldr.w	r2, [r1, #22]
 80071b8:	f8d1 301a 	ldr.w	r3, [r1, #26]
 80071bc:	68f9      	ldr	r1, [r7, #12]
 80071be:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80071c2:	4608      	mov	r0, r1
 80071c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071c6:	fb01 f100 	mul.w	r1, r1, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80071d0:	eb12 0800 	adds.w	r8, r2, r0
 80071d4:	eb43 0901 	adc.w	r9, r3, r1
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	e9c3 8900 	strd	r8, r9, [r3]

                if (curFrame != NULL)
 80071de:	4b17      	ldr	r3, [pc, #92]	; (800723c <mp3GetFrame+0x330>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <mp3GetFrame+0x2ea>
                {
                    curFrame->nextFrame = newFrame;
 80071e6:	4b15      	ldr	r3, [pc, #84]	; (800723c <mp3GetFrame+0x330>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	60da      	str	r2, [r3, #12]
                    newFrame->prevFrame = curFrame;
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <mp3GetFrame+0x330>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	609a      	str	r2, [r3, #8]
                }
                curFrame = newFrame;
 80071f6:	4a11      	ldr	r2, [pc, #68]	; (800723c <mp3GetFrame+0x330>)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6013      	str	r3, [r2, #0]
                if (headFrame == NULL) //first time
 80071fc:	4b10      	ldr	r3, [pc, #64]	; (8007240 <mp3GetFrame+0x334>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <mp3GetFrame+0x2fe>
                    headFrame = newFrame;
 8007204:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <mp3GetFrame+0x334>)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6013      	str	r3, [r2, #0]

                numOfMp3FrameSaving++;
 800720a:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <mp3GetFrame+0x328>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	4a08      	ldr	r2, [pc, #32]	; (8007234 <mp3GetFrame+0x328>)
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	e020      	b.n	8007258 <mp3GetFrame+0x34c>
 8007216:	bf00      	nop
 8007218:	20000240 	.word	0x20000240
 800721c:	20005ee0 	.word	0x20005ee0
 8007220:	20005ee4 	.word	0x20005ee4
 8007224:	20005ed8 	.word	0x20005ed8
 8007228:	20005ee8 	.word	0x20005ee8
 800722c:	20000410 	.word	0x20000410
 8007230:	08022d08 	.word	0x08022d08
 8007234:	20000404 	.word	0x20000404
 8007238:	08022d18 	.word	0x08022d18
 800723c:	2000040c 	.word	0x2000040c
 8007240:	20000408 	.word	0x20000408
            }
            else
            {
                //free newFrame
                free(newFrame);
 8007244:	6938      	ldr	r0, [r7, #16]
 8007246:	f01a f831 	bl	80212ac <free>
                LOG_WRITE("fail allocate new frame data\n");
 800724a:	4813      	ldr	r0, [pc, #76]	; (8007298 <mp3GetFrame+0x38c>)
 800724c:	f01a f9ca 	bl	80215e4 <puts>
                break; //not enough data
 8007250:	e00a      	b.n	8007268 <mp3GetFrame+0x35c>
            }
        }
        else
        {
            LOG_WRITE("fail allocate new frame node\n");
 8007252:	4812      	ldr	r0, [pc, #72]	; (800729c <mp3GetFrame+0x390>)
 8007254:	f01a f9c6 	bl	80215e4 <puts>
    for (int i = 0; i < (int)numOfFrame; i++)
 8007258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725a:	3301      	adds	r3, #1
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800725e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007262:	429a      	cmp	r2, r3
 8007264:	f6ff af29 	blt.w	80070ba <mp3GetFrame+0x1ae>
        }
    }

    //debug
    if(numOfMp3FrameSaving >= 10 && curTimeDebugSecond == 0) curTimeDebugSecond = TCP_UDP_GetNtpTime();
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <mp3GetFrame+0x394>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b09      	cmp	r3, #9
 800726e:	dd0f      	ble.n	8007290 <mp3GetFrame+0x384>
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <mp3GetFrame+0x398>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	4313      	orrs	r3, r2
 8007278:	d10a      	bne.n	8007290 <mp3GetFrame+0x384>
 800727a:	f002 ff37 	bl	800a0ec <TCP_UDP_GetNtpTime>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4908      	ldr	r1, [pc, #32]	; (80072a4 <mp3GetFrame+0x398>)
 8007284:	e9c1 2300 	strd	r2, r3, [r1]
 8007288:	e002      	b.n	8007290 <mp3GetFrame+0x384>
        return;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <mp3GetFrame+0x384>
    if(curTime == 0) return; //don't have ntp time
 800728e:	bf00      	nop
}
 8007290:	374c      	adds	r7, #76	; 0x4c
 8007292:	46bd      	mov	sp, r7
 8007294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	08022d34 	.word	0x08022d34
 800729c:	08022d54 	.word	0x08022d54
 80072a0:	20000404 	.word	0x20000404
 80072a4:	20000418 	.word	0x20000418

080072a8 <mp3GetVol>:

int mp3GetVol()
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
    MP3LOG("mp3GetVol\n");
    return newVol;
 80072ac:	4b03      	ldr	r3, [pc, #12]	; (80072bc <mp3GetVol+0x14>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000240 	.word	0x20000240

080072c0 <mp3GetHeadFrame>:

FrameStruct *mp3GetHeadFrame()
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
    return headFrame;
 80072c4:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <mp3GetHeadFrame+0x14>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000408 	.word	0x20000408

080072d8 <mp3GetNewFrame>:


//get frame has timestamp(ts), ntp-ts > 0, < 48
FrameStruct *mp3GetNewFrame()
{
 80072d8:	b5b0      	push	{r4, r5, r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
    // MP3LOG("mp3GetNewFrame\n");
    //check time
    // int64_t curTime = TCP_UDP_GetNtpTime();
    int64_t offsetTime = TCP_UDP_GetNtpTime() - headFrame->timestamp;
 80072de:	f002 ff05 	bl	800a0ec <TCP_UDP_GetNtpTime>
 80072e2:	4b12      	ldr	r3, [pc, #72]	; (800732c <mp3GetNewFrame+0x54>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	1a84      	subs	r4, r0, r2
 80072ec:	eb61 0503 	sbc.w	r5, r1, r3
 80072f0:	e9c7 4500 	strd	r4, r5, [r7]
    if(offsetTime < 0) 
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	f173 0300 	sbcs.w	r3, r3, #0
 80072fe:	da01      	bge.n	8007304 <mp3GetNewFrame+0x2c>
        return NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	e00f      	b.n	8007324 <mp3GetNewFrame+0x4c>
    else if(offsetTime < 40) 
 8007304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007308:	2a28      	cmp	r2, #40	; 0x28
 800730a:	f173 0300 	sbcs.w	r3, r3, #0
 800730e:	da02      	bge.n	8007316 <mp3GetNewFrame+0x3e>
        return headFrame;
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <mp3GetNewFrame+0x54>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	e006      	b.n	8007324 <mp3GetNewFrame+0x4c>
    else // >= 40
    {
        //remove all frame to tail
        mp3RemoveTcpFrame(headFrame);
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <mp3GetNewFrame+0x54>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f82c 	bl	8007378 <mp3RemoveTcpFrame>
    }
    
    return headFrame;
 8007320:	4b02      	ldr	r3, [pc, #8]	; (800732c <mp3GetNewFrame+0x54>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bdb0      	pop	{r4, r5, r7, pc}
 800732c:	20000408 	.word	0x20000408

08007330 <mp3RemoveFrame>:

void mp3RemoveFrame(FrameStruct *frame)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    MP3LOG("mp3RemoveFrame\n");
    if(frame != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d014      	beq.n	8007368 <mp3RemoveFrame+0x38>
    {
        if(frame->data != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <mp3RemoveFrame+0x20>
            free(frame->data);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4618      	mov	r0, r3
 800734c:	f019 ffae 	bl	80212ac <free>

        headFrame = frame->nextFrame; //point to next frame
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a06      	ldr	r2, [pc, #24]	; (8007370 <mp3RemoveFrame+0x40>)
 8007356:	6013      	str	r3, [r2, #0]

        free(frame);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f019 ffa7 	bl	80212ac <free>
        numOfMp3FrameSaving--;
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <mp3RemoveFrame+0x44>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3b01      	subs	r3, #1
 8007364:	4a03      	ldr	r2, [pc, #12]	; (8007374 <mp3RemoveFrame+0x44>)
 8007366:	6013      	str	r3, [r2, #0]
    }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000408 	.word	0x20000408
 8007374:	20000404 	.word	0x20000404

08007378 <mp3RemoveTcpFrame>:

//remove from current frame to tail frame
void mp3RemoveTcpFrame(FrameStruct *frame)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
    MP3LOG("mp3RemoveTcpFrame\n");
    for(;;)
    {
        if(frame == NULL) return; //has nothing to delete
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <mp3RemoveTcpFrame+0x28>
        bool endProcess = frame->isTail;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	7f1b      	ldrb	r3, [r3, #28]
 800738a:	73fb      	strb	r3, [r7, #15]

        mp3RemoveFrame(frame);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ffcf 	bl	8007330 <mp3RemoveFrame>
        frame = headFrame;
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <mp3RemoveTcpFrame+0x34>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	607b      	str	r3, [r7, #4]

        if(endProcess) return; //reach tail
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <mp3RemoveTcpFrame+0x2c>
    {
 800739e:	e7ef      	b.n	8007380 <mp3RemoveTcpFrame+0x8>
        if(frame == NULL) return; //has nothing to delete
 80073a0:	bf00      	nop
 80073a2:	e000      	b.n	80073a6 <mp3RemoveTcpFrame+0x2e>
        if(endProcess) return; //reach tail
 80073a4:	bf00      	nop
    }
}
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000408 	.word	0x20000408

080073b0 <generate_rand>:
int rsa_public_decrypt (uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk);
int rsa_private_encrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);
int rsa_private_decrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);

void generate_rand(uint8_t *block, uint32_t block_len)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i=0; i<block_len; i++) {
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e013      	b.n	80073e8 <generate_rand+0x38>
        srand ((unsigned)time(NULL));
 80073c0:	2000      	movs	r0, #0
 80073c2:	f01a fa87 	bl	80218d4 <time>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4613      	mov	r3, r2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f01a f911 	bl	80215f4 <srand>
        block[i] = rand();
 80073d2:	f01a f93d 	bl	8021650 <rand>
 80073d6:	4601      	mov	r1, r0
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	b2ca      	uxtb	r2, r1
 80073e0:	701a      	strb	r2, [r3, #0]
    for(i=0; i<block_len; i++) {
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d3e7      	bcc.n	80073c0 <generate_rand+0x10>
    }
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <rsa_public_encrypt>:
static int public_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk);
static int private_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);

uint8_t pkcs_block[RSA_MAX_MODULUS_LEN];
int rsa_public_encrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
    int status;
    uint8_t byte;// pkcs_block[RSA_MAX_MODULUS_LEN];
    uint32_t i, modulus_len;

    modulus_len = (pk->bits + 7) / 8;
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3307      	adds	r3, #7
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	61bb      	str	r3, [r7, #24]
    if(in_len + 11 > modulus_len) {
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	330b      	adds	r3, #11
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d202      	bcs.n	8007424 <rsa_public_encrypt+0x28>
        return ERR_WRONG_LEN;
 800741e:	f241 0302 	movw	r3, #4098	; 0x1002
 8007422:	e041      	b.n	80074a8 <rsa_public_encrypt+0xac>
    }

    pkcs_block[0] = 0;
 8007424:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <rsa_public_encrypt+0xb4>)
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
    pkcs_block[1] = 2;
 800742a:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <rsa_public_encrypt+0xb4>)
 800742c:	2202      	movs	r2, #2
 800742e:	705a      	strb	r2, [r3, #1]
    for(i=2; i<modulus_len-in_len-1; i++) {
 8007430:	2302      	movs	r3, #2
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	e011      	b.n	800745a <rsa_public_encrypt+0x5e>
        do {
            generate_rand(&byte, 1);
 8007436:	f107 0313 	add.w	r3, r7, #19
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff ffb7 	bl	80073b0 <generate_rand>
        } while(byte == 0);
 8007442:	7cfb      	ldrb	r3, [r7, #19]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f6      	beq.n	8007436 <rsa_public_encrypt+0x3a>
        pkcs_block[i] = byte;
 8007448:	7cf9      	ldrb	r1, [r7, #19]
 800744a:	4a19      	ldr	r2, [pc, #100]	; (80074b0 <rsa_public_encrypt+0xb4>)
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	4413      	add	r3, r2
 8007450:	460a      	mov	r2, r1
 8007452:	701a      	strb	r2, [r3, #0]
    for(i=2; i<modulus_len-in_len-1; i++) {
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3301      	adds	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3e6      	bcc.n	8007436 <rsa_public_encrypt+0x3a>
    }

    pkcs_block[i++] = 0;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	61fa      	str	r2, [r7, #28]
 800746e:	4a10      	ldr	r2, [pc, #64]	; (80074b0 <rsa_public_encrypt+0xb4>)
 8007470:	2100      	movs	r1, #0
 8007472:	54d1      	strb	r1, [r2, r3]

    memcpy((uint8_t *)&pkcs_block[i], (uint8_t *)in, in_len);
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	4a0e      	ldr	r2, [pc, #56]	; (80074b0 <rsa_public_encrypt+0xb4>)
 8007478:	4413      	add	r3, r2
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4618      	mov	r0, r3
 8007480:	f019 ff2a 	bl	80212d8 <memcpy>
    status = public_block_operation(out, out_len, pkcs_block, modulus_len, pk);
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <rsa_public_encrypt+0xb4>)
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f810 	bl	80074b4 <public_block_operation>
 8007494:	6178      	str	r0, [r7, #20]

    // Clear potentially sensitive information
    byte = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	74fb      	strb	r3, [r7, #19]
    memset((uint8_t *)pkcs_block, 0, sizeof(pkcs_block));
 800749a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800749e:	2100      	movs	r1, #0
 80074a0:	4803      	ldr	r0, [pc, #12]	; (80074b0 <rsa_public_encrypt+0xb4>)
 80074a2:	f019 ff41 	bl	8021328 <memset>

    return status;
 80074a6:	697b      	ldr	r3, [r7, #20]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20005ff4 	.word	0x20005ff4

080074b4 <public_block_operation>:

    return status;
}
bn_t c[BN_MAX_DIGITS], e[BN_MAX_DIGITS], m[BN_MAX_DIGITS], n[BN_MAX_DIGITS];
static int public_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
    uint32_t edigits, ndigits;

    bn_decode(m, BN_MAX_DIGITS, in, in_len);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	2141      	movs	r1, #65	; 0x41
 80074c8:	4828      	ldr	r0, [pc, #160]	; (800756c <public_block_operation+0xb8>)
 80074ca:	f7fe fa97 	bl	80059fc <bn_decode>
    bn_decode(n, BN_MAX_DIGITS, pk->modulus, RSA_MAX_MODULUS_LEN);
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	1d1a      	adds	r2, r3, #4
 80074d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d6:	2141      	movs	r1, #65	; 0x41
 80074d8:	4825      	ldr	r0, [pc, #148]	; (8007570 <public_block_operation+0xbc>)
 80074da:	f7fe fa8f 	bl	80059fc <bn_decode>
    bn_decode(e, BN_MAX_DIGITS, pk->exponent, RSA_MAX_MODULUS_LEN);
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f503 7282 	add.w	r2, r3, #260	; 0x104
 80074e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074e8:	2141      	movs	r1, #65	; 0x41
 80074ea:	4822      	ldr	r0, [pc, #136]	; (8007574 <public_block_operation+0xc0>)
 80074ec:	f7fe fa86 	bl	80059fc <bn_decode>

    ndigits = bn_digits(n, BN_MAX_DIGITS);
 80074f0:	2141      	movs	r1, #65	; 0x41
 80074f2:	481f      	ldr	r0, [pc, #124]	; (8007570 <public_block_operation+0xbc>)
 80074f4:	f7fe ff7d 	bl	80063f2 <bn_digits>
 80074f8:	6178      	str	r0, [r7, #20]
    edigits = bn_digits(e, BN_MAX_DIGITS);
 80074fa:	2141      	movs	r1, #65	; 0x41
 80074fc:	481d      	ldr	r0, [pc, #116]	; (8007574 <public_block_operation+0xc0>)
 80074fe:	f7fe ff78 	bl	80063f2 <bn_digits>
 8007502:	6138      	str	r0, [r7, #16]

    if(bn_cmp(m, n, ndigits) >= 0) {
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	491a      	ldr	r1, [pc, #104]	; (8007570 <public_block_operation+0xbc>)
 8007508:	4818      	ldr	r0, [pc, #96]	; (800756c <public_block_operation+0xb8>)
 800750a:	f7fe ff3e 	bl	800638a <bn_cmp>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	db02      	blt.n	800751a <public_block_operation+0x66>
        return ERR_WRONG_DATA;
 8007514:	f241 0301 	movw	r3, #4097	; 0x1001
 8007518:	e023      	b.n	8007562 <public_block_operation+0xae>
    }

    bn_mod_exp(c, m, e, edigits, n, ndigits);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <public_block_operation+0xbc>)
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <public_block_operation+0xc0>)
 8007526:	4911      	ldr	r1, [pc, #68]	; (800756c <public_block_operation+0xb8>)
 8007528:	4813      	ldr	r0, [pc, #76]	; (8007578 <public_block_operation+0xc4>)
 800752a:	f7fe fe45 	bl	80061b8 <bn_mod_exp>

    *out_len = (pk->bits + 7) / 8;
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3307      	adds	r3, #7
 8007534:	08da      	lsrs	r2, r3, #3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	601a      	str	r2, [r3, #0]
    bn_encode(out, *out_len, c, ndigits);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	4a0d      	ldr	r2, [pc, #52]	; (8007578 <public_block_operation+0xc4>)
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7fe faa8 	bl	8005a98 <bn_encode>

    // Clear potentially sensitive information
    memset((uint8_t *)c, 0, sizeof(c));
 8007548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800754c:	2100      	movs	r1, #0
 800754e:	480a      	ldr	r0, [pc, #40]	; (8007578 <public_block_operation+0xc4>)
 8007550:	f019 feea 	bl	8021328 <memset>
    memset((uint8_t *)m, 0, sizeof(m));
 8007554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007558:	2100      	movs	r1, #0
 800755a:	4804      	ldr	r0, [pc, #16]	; (800756c <public_block_operation+0xb8>)
 800755c:	f019 fee4 	bl	8021328 <memset>

    return 0;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200062fc 	.word	0x200062fc
 8007570:	20005ef0 	.word	0x20005ef0
 8007574:	200061f8 	.word	0x200061f8
 8007578:	200060f4 	.word	0x200060f4

0800757c <RSA2048_Pubkey_Encrypt>:
    return 0;
}

rsa_pk_t pk = {0};
//return output len when success
int RSA2048_Pubkey_Encrypt(uint8_t* pubkey, int pubkeyLen, uint8_t* input, int inputLen, uint8_t* output) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]


    //exchange pubkey
    uint8_t tmp = pubkey[0];
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	75fb      	strb	r3, [r7, #23]
    pubkey[0] = pubkey[1];
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	785a      	ldrb	r2, [r3, #1]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	701a      	strb	r2, [r3, #0]
    pubkey[1] = tmp;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	7dfa      	ldrb	r2, [r7, #23]
 800759e:	701a      	strb	r2, [r3, #0]

    tmp = pubkey[pubkeyLen - 2];
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3b02      	subs	r3, #2
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	75fb      	strb	r3, [r7, #23]
    pubkey[pubkeyLen - 2] = pubkey[pubkeyLen - 1];
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	441a      	add	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3b02      	subs	r3, #2
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	440b      	add	r3, r1
 80075bc:	7812      	ldrb	r2, [r2, #0]
 80075be:	701a      	strb	r2, [r3, #0]
    pubkey[pubkeyLen - 1]  = tmp;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	7dfa      	ldrb	r2, [r7, #23]
 80075ca:	701a      	strb	r2, [r3, #0]

    pk.bits = KEY_M_BITS;
 80075cc:	4b25      	ldr	r3, [pc, #148]	; (8007664 <RSA2048_Pubkey_Encrypt+0xe8>)
 80075ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075d2:	601a      	str	r2, [r3, #0]
    memcpy(&pk.modulus         [RSA_MAX_MODULUS_LEN- pubkeyLen],  pubkey,  pubkeyLen);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80075da:	4a22      	ldr	r2, [pc, #136]	; (8007664 <RSA2048_Pubkey_Encrypt+0xe8>)
 80075dc:	4413      	add	r3, r2
 80075de:	3304      	adds	r3, #4
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f019 fe77 	bl	80212d8 <memcpy>
    // memcpy(&pk.modulus         [0],  key_m,  256);
    memcpy(&pk.exponent        [RSA_MAX_MODULUS_LEN-sizeof(key_e) ],  key_e,  sizeof(key_e ));
 80075ea:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <RSA2048_Pubkey_Encrypt+0xe8>)
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <RSA2048_Pubkey_Encrypt+0xec>)
 80075ee:	f203 2301 	addw	r3, r3, #513	; 0x201
 80075f2:	8811      	ldrh	r1, [r2, #0]
 80075f4:	7892      	ldrb	r2, [r2, #2]
 80075f6:	8019      	strh	r1, [r3, #0]
 80075f8:	709a      	strb	r2, [r3, #2]

    uint32_t outputLen;
    
    if(rsa_public_encrypt(output, &outputLen, (uint8_t*)input, inputLen, &pk) == 0) {
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	f107 0110 	add.w	r1, r7, #16
 8007600:	4a18      	ldr	r2, [pc, #96]	; (8007664 <RSA2048_Pubkey_Encrypt+0xe8>)
 8007602:	9200      	str	r2, [sp, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6a38      	ldr	r0, [r7, #32]
 8007608:	f7ff fef8 	bl	80073fc <rsa_public_encrypt>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d122      	bne.n	8007658 <RSA2048_Pubkey_Encrypt+0xdc>
        //trick exchange first and last two bytes
    	tmp = output[0]; output[0] = output[1]; output[1] = tmp;
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	75fb      	strb	r3, [r7, #23]
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	785a      	ldrb	r2, [r3, #1]
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	3301      	adds	r3, #1
 8007624:	7dfa      	ldrb	r2, [r7, #23]
 8007626:	701a      	strb	r2, [r3, #0]
        tmp = output[outputLen - 2]; output[outputLen - 2] = output[outputLen - 1]; output[outputLen - 1] = tmp;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	3b02      	subs	r3, #2
 800762c:	6a3a      	ldr	r2, [r7, #32]
 800762e:	4413      	add	r3, r2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	75fb      	strb	r3, [r7, #23]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3b01      	subs	r3, #1
 8007638:	6a3a      	ldr	r2, [r7, #32]
 800763a:	441a      	add	r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3b02      	subs	r3, #2
 8007640:	6a39      	ldr	r1, [r7, #32]
 8007642:	440b      	add	r3, r1
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	701a      	strb	r2, [r3, #0]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	3b01      	subs	r3, #1
 800764c:	6a3a      	ldr	r2, [r7, #32]
 800764e:	4413      	add	r3, r2
 8007650:	7dfa      	ldrb	r2, [r7, #23]
 8007652:	701a      	strb	r2, [r3, #0]
        return outputLen;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	e001      	b.n	800765c <RSA2048_Pubkey_Encrypt+0xe0>
    }

    return -1;
 8007658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000420 	.word	0x20000420
 8007668:	20000244 	.word	0x20000244

0800766c <LL_DMA_EnableStream>:
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8007676:	4a0c      	ldr	r2, [pc, #48]	; (80076a8 <LL_DMA_EnableStream+0x3c>)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	4413      	add	r3, r2
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4908      	ldr	r1, [pc, #32]	; (80076a8 <LL_DMA_EnableStream+0x3c>)
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	440a      	add	r2, r1
 800768c:	7812      	ldrb	r2, [r2, #0]
 800768e:	4611      	mov	r1, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	440a      	add	r2, r1
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	6013      	str	r3, [r2, #0]
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	080273a0 	.word	0x080273a0

080076ac <LL_DMA_DisableStream>:
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80076b6:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <LL_DMA_DisableStream+0x3c>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4413      	add	r3, r2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4908      	ldr	r1, [pc, #32]	; (80076e8 <LL_DMA_DisableStream+0x3c>)
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	440a      	add	r2, r1
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	4611      	mov	r1, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	440a      	add	r2, r1
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	6013      	str	r3, [r2, #0]
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	080273a0 	.word	0x080273a0

080076ec <LL_DMA_IsEnabledStream>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80076f6:	4a0a      	ldr	r2, [pc, #40]	; (8007720 <LL_DMA_IsEnabledStream+0x34>)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	4413      	add	r3, r2
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4413      	add	r3, r2
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b01      	cmp	r3, #1
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	080273a0 	.word	0x080273a0

08007724 <LL_DMA_SetDataTransferDirection>:
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8007730:	4a0d      	ldr	r2, [pc, #52]	; (8007768 <LL_DMA_SetDataTransferDirection+0x44>)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007744:	4908      	ldr	r1, [pc, #32]	; (8007768 <LL_DMA_SetDataTransferDirection+0x44>)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	440b      	add	r3, r1
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	4619      	mov	r1, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	440b      	add	r3, r1
 8007752:	4619      	mov	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4313      	orrs	r3, r2
 8007758:	600b      	str	r3, [r1, #0]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	080273a0 	.word	0x080273a0

0800776c <LL_DMA_SetMode>:
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8007778:	4a0d      	ldr	r2, [pc, #52]	; (80077b0 <LL_DMA_SetMode+0x44>)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800778c:	4908      	ldr	r1, [pc, #32]	; (80077b0 <LL_DMA_SetMode+0x44>)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	440b      	add	r3, r1
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	440b      	add	r3, r1
 800779a:	4619      	mov	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4313      	orrs	r3, r2
 80077a0:	600b      	str	r3, [r1, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	080273a0 	.word	0x080273a0

080077b4 <LL_DMA_SetPeriphIncMode>:
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80077c0:	4a0d      	ldr	r2, [pc, #52]	; (80077f8 <LL_DMA_SetPeriphIncMode+0x44>)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4413      	add	r3, r2
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4413      	add	r3, r2
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077d4:	4908      	ldr	r1, [pc, #32]	; (80077f8 <LL_DMA_SetPeriphIncMode+0x44>)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	440b      	add	r3, r1
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	4619      	mov	r1, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	440b      	add	r3, r1
 80077e2:	4619      	mov	r1, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	080273a0 	.word	0x080273a0

080077fc <LL_DMA_SetMemoryIncMode>:
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8007808:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <LL_DMA_SetMemoryIncMode+0x44>)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4413      	add	r3, r2
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800781c:	4908      	ldr	r1, [pc, #32]	; (8007840 <LL_DMA_SetMemoryIncMode+0x44>)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	440b      	add	r3, r1
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	4619      	mov	r1, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	440b      	add	r3, r1
 800782a:	4619      	mov	r1, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4313      	orrs	r3, r2
 8007830:	600b      	str	r3, [r1, #0]
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	080273a0 	.word	0x080273a0

08007844 <LL_DMA_SetPeriphSize>:
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8007850:	4a0d      	ldr	r2, [pc, #52]	; (8007888 <LL_DMA_SetPeriphSize+0x44>)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4413      	add	r3, r2
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007864:	4908      	ldr	r1, [pc, #32]	; (8007888 <LL_DMA_SetPeriphSize+0x44>)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	440b      	add	r3, r1
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	4619      	mov	r1, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	440b      	add	r3, r1
 8007872:	4619      	mov	r1, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4313      	orrs	r3, r2
 8007878:	600b      	str	r3, [r1, #0]
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	080273a0 	.word	0x080273a0

0800788c <LL_DMA_SetMemorySize>:
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8007898:	4a0d      	ldr	r2, [pc, #52]	; (80078d0 <LL_DMA_SetMemorySize+0x44>)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80078ac:	4908      	ldr	r1, [pc, #32]	; (80078d0 <LL_DMA_SetMemorySize+0x44>)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	440b      	add	r3, r1
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	4619      	mov	r1, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	440b      	add	r3, r1
 80078ba:	4619      	mov	r1, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4313      	orrs	r3, r2
 80078c0:	600b      	str	r3, [r1, #0]
}
 80078c2:	bf00      	nop
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	080273a0 	.word	0x080273a0

080078d4 <LL_DMA_SetStreamPriorityLevel>:
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80078e0:	4a0d      	ldr	r2, [pc, #52]	; (8007918 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4413      	add	r3, r2
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f4:	4908      	ldr	r1, [pc, #32]	; (8007918 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	440b      	add	r3, r1
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	440b      	add	r3, r1
 8007902:	4619      	mov	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4313      	orrs	r3, r2
 8007908:	600b      	str	r3, [r1, #0]
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	080273a0 	.word	0x080273a0

0800791c <LL_DMA_SetDataLength>:
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8007928:	4a0d      	ldr	r2, [pc, #52]	; (8007960 <LL_DMA_SetDataLength+0x44>)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	4908      	ldr	r1, [pc, #32]	; (8007960 <LL_DMA_SetDataLength+0x44>)
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	440a      	add	r2, r1
 8007942:	7812      	ldrb	r2, [r2, #0]
 8007944:	4611      	mov	r1, r2
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	440a      	add	r2, r1
 800794a:	4611      	mov	r1, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4313      	orrs	r3, r2
 8007950:	604b      	str	r3, [r1, #4]
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	080273a0 	.word	0x080273a0

08007964 <LL_DMA_GetDataLength>:
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 800796e:	4a07      	ldr	r2, [pc, #28]	; (800798c <LL_DMA_GetDataLength+0x28>)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	4413      	add	r3, r2
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	b29b      	uxth	r3, r3
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	080273a0 	.word	0x080273a0

08007990 <LL_DMA_SetChannelSelection>:
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800799c:	4a0d      	ldr	r2, [pc, #52]	; (80079d4 <LL_DMA_SetChannelSelection+0x44>)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80079b0:	4908      	ldr	r1, [pc, #32]	; (80079d4 <LL_DMA_SetChannelSelection+0x44>)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	440b      	add	r3, r1
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	440b      	add	r3, r1
 80079be:	4619      	mov	r1, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	600b      	str	r3, [r1, #0]
}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	080273a0 	.word	0x080273a0

080079d8 <LL_DMA_DisableFifoMode>:
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80079e2:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <LL_DMA_DisableFifoMode+0x3c>)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	4413      	add	r3, r2
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4413      	add	r3, r2
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	4908      	ldr	r1, [pc, #32]	; (8007a14 <LL_DMA_DisableFifoMode+0x3c>)
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	440a      	add	r2, r1
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	4611      	mov	r1, r2
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	440a      	add	r2, r1
 8007a00:	f023 0304 	bic.w	r3, r3, #4
 8007a04:	6153      	str	r3, [r2, #20]
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	080273a0 	.word	0x080273a0

08007a18 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007a24:	4a07      	ldr	r2, [pc, #28]	; (8007a44 <LL_DMA_SetMemoryAddress+0x2c>)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4413      	add	r3, r2
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60d3      	str	r3, [r2, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	080273a0 	.word	0x080273a0

08007a48 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007a54:	4a07      	ldr	r2, [pc, #28]	; (8007a74 <LL_DMA_SetPeriphAddress+0x2c>)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	4413      	add	r3, r2
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4413      	add	r3, r2
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6093      	str	r3, [r2, #8]
}
 8007a68:	bf00      	nop
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	080273a0 	.word	0x080273a0

08007a78 <LL_AHB1_GRP1_EnableClock>:
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007a80:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a84:	4907      	ldr	r1, [pc, #28]	; (8007aa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4013      	ands	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	bf00      	nop
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	40023800 	.word	0x40023800

08007aa8 <LL_APB2_GRP1_EnableClock>:
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007ab0:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ab4:	4907      	ldr	r1, [pc, #28]	; (8007ad4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	40023800 	.word	0x40023800

08007ad8 <LL_USART_Enable>:
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <LL_USART_Disable>:
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <LL_USART_IsEnabled>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	2300      	movne	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <LL_USART_SetBaudRate>:
{
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	b09f      	sub	sp, #124	; 0x7c
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6778      	str	r0, [r7, #116]	; 0x74
 8007b4a:	6739      	str	r1, [r7, #112]	; 0x70
 8007b4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b4e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b56:	f040 80bc 	bne.w	8007cd2 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b5c:	461c      	mov	r4, r3
 8007b5e:	f04f 0500 	mov.w	r5, #0
 8007b62:	4622      	mov	r2, r4
 8007b64:	462b      	mov	r3, r5
 8007b66:	eb12 0a02 	adds.w	sl, r2, r2
 8007b6a:	eb43 0b03 	adc.w	fp, r3, r3
 8007b6e:	4652      	mov	r2, sl
 8007b70:	465b      	mov	r3, fp
 8007b72:	1912      	adds	r2, r2, r4
 8007b74:	eb45 0303 	adc.w	r3, r5, r3
 8007b78:	f04f 0000 	mov.w	r0, #0
 8007b7c:	f04f 0100 	mov.w	r1, #0
 8007b80:	00d9      	lsls	r1, r3, #3
 8007b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b86:	00d0      	lsls	r0, r2, #3
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	1911      	adds	r1, r2, r4
 8007b8e:	6639      	str	r1, [r7, #96]	; 0x60
 8007b90:	416b      	adcs	r3, r5
 8007b92:	667b      	str	r3, [r7, #100]	; 0x64
 8007b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b96:	461a      	mov	r2, r3
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	1891      	adds	r1, r2, r2
 8007b9e:	6339      	str	r1, [r7, #48]	; 0x30
 8007ba0:	415b      	adcs	r3, r3
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ba8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007bac:	f7f8 fbb8 	bl	8000320 <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4ba9      	ldr	r3, [pc, #676]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	b29e      	uxth	r6, r3
 8007bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bc4:	461c      	mov	r4, r3
 8007bc6:	f04f 0500 	mov.w	r5, #0
 8007bca:	4622      	mov	r2, r4
 8007bcc:	462b      	mov	r3, r5
 8007bce:	1891      	adds	r1, r2, r2
 8007bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bd2:	415b      	adcs	r3, r3
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bda:	1912      	adds	r2, r2, r4
 8007bdc:	eb45 0303 	adc.w	r3, r5, r3
 8007be0:	f04f 0000 	mov.w	r0, #0
 8007be4:	f04f 0100 	mov.w	r1, #0
 8007be8:	00d9      	lsls	r1, r3, #3
 8007bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bee:	00d0      	lsls	r0, r2, #3
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	1911      	adds	r1, r2, r4
 8007bf6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bf8:	416b      	adcs	r3, r5
 8007bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	1891      	adds	r1, r2, r2
 8007c06:	6239      	str	r1, [r7, #32]
 8007c08:	415b      	adcs	r3, r3
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c10:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c14:	f7f8 fb84 	bl	8000320 <__aeabi_uldivmod>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4b8f      	ldr	r3, [pc, #572]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	2164      	movs	r1, #100	; 0x64
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	3332      	adds	r3, #50	; 0x32
 8007c30:	4a8a      	ldr	r2, [pc, #552]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	4433      	add	r3, r6
 8007c46:	b29e      	uxth	r6, r3
 8007c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f04f 0100 	mov.w	r1, #0
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	1894      	adds	r4, r2, r2
 8007c56:	61bc      	str	r4, [r7, #24]
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c60:	1812      	adds	r2, r2, r0
 8007c62:	eb41 0303 	adc.w	r3, r1, r3
 8007c66:	f04f 0400 	mov.w	r4, #0
 8007c6a:	f04f 0500 	mov.w	r5, #0
 8007c6e:	00dd      	lsls	r5, r3, #3
 8007c70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c74:	00d4      	lsls	r4, r2, #3
 8007c76:	4622      	mov	r2, r4
 8007c78:	462b      	mov	r3, r5
 8007c7a:	1814      	adds	r4, r2, r0
 8007c7c:	653c      	str	r4, [r7, #80]	; 0x50
 8007c7e:	414b      	adcs	r3, r1
 8007c80:	657b      	str	r3, [r7, #84]	; 0x54
 8007c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c84:	461a      	mov	r2, r3
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	1891      	adds	r1, r2, r2
 8007c8c:	6139      	str	r1, [r7, #16]
 8007c8e:	415b      	adcs	r3, r3
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c9a:	f7f8 fb41 	bl	8000320 <__aeabi_uldivmod>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4b6e      	ldr	r3, [pc, #440]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	2164      	movs	r1, #100	; 0x64
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	3332      	adds	r3, #50	; 0x32
 8007cb6:	4a69      	ldr	r2, [pc, #420]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4433      	add	r3, r6
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cce:	609a      	str	r2, [r3, #8]
}
 8007cd0:	e0be      	b.n	8007e50 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd4:	461c      	mov	r4, r3
 8007cd6:	f04f 0500 	mov.w	r5, #0
 8007cda:	4622      	mov	r2, r4
 8007cdc:	462b      	mov	r3, r5
 8007cde:	eb12 0802 	adds.w	r8, r2, r2
 8007ce2:	eb43 0903 	adc.w	r9, r3, r3
 8007ce6:	4642      	mov	r2, r8
 8007ce8:	464b      	mov	r3, r9
 8007cea:	1912      	adds	r2, r2, r4
 8007cec:	eb45 0303 	adc.w	r3, r5, r3
 8007cf0:	f04f 0000 	mov.w	r0, #0
 8007cf4:	f04f 0100 	mov.w	r1, #0
 8007cf8:	00d9      	lsls	r1, r3, #3
 8007cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cfe:	00d0      	lsls	r0, r2, #3
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	1911      	adds	r1, r2, r4
 8007d06:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d08:	416b      	adcs	r3, r5
 8007d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f04f 0100 	mov.w	r1, #0
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	008b      	lsls	r3, r1, #2
 8007d1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d22:	0082      	lsls	r2, r0, #2
 8007d24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d28:	f7f8 fafa 	bl	8000320 <__aeabi_uldivmod>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007d32:	fba3 2302 	umull	r2, r3, r3, r2
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	b29e      	uxth	r6, r3
 8007d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d40:	4618      	mov	r0, r3
 8007d42:	f04f 0100 	mov.w	r1, #0
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	1894      	adds	r4, r2, r2
 8007d4c:	60bc      	str	r4, [r7, #8]
 8007d4e:	415b      	adcs	r3, r3
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d56:	1812      	adds	r2, r2, r0
 8007d58:	eb41 0303 	adc.w	r3, r1, r3
 8007d5c:	f04f 0400 	mov.w	r4, #0
 8007d60:	f04f 0500 	mov.w	r5, #0
 8007d64:	00dd      	lsls	r5, r3, #3
 8007d66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d6a:	00d4      	lsls	r4, r2, #3
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	462b      	mov	r3, r5
 8007d70:	1814      	adds	r4, r2, r0
 8007d72:	643c      	str	r4, [r7, #64]	; 0x40
 8007d74:	414b      	adcs	r3, r1
 8007d76:	647b      	str	r3, [r7, #68]	; 0x44
 8007d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	008b      	lsls	r3, r1, #2
 8007d8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d8e:	0082      	lsls	r2, r0, #2
 8007d90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007d94:	f7f8 fac4 	bl	8000320 <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4b2f      	ldr	r3, [pc, #188]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	2164      	movs	r1, #100	; 0x64
 8007da6:	fb01 f303 	mul.w	r3, r1, r3
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	3332      	adds	r3, #50	; 0x32
 8007db0:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4433      	add	r3, r6
 8007dc2:	b29e      	uxth	r6, r3
 8007dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f04f 0100 	mov.w	r1, #0
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	1894      	adds	r4, r2, r2
 8007dd2:	603c      	str	r4, [r7, #0]
 8007dd4:	415b      	adcs	r3, r3
 8007dd6:	607b      	str	r3, [r7, #4]
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	1812      	adds	r2, r2, r0
 8007dde:	eb41 0303 	adc.w	r3, r1, r3
 8007de2:	f04f 0400 	mov.w	r4, #0
 8007de6:	f04f 0500 	mov.w	r5, #0
 8007dea:	00dd      	lsls	r5, r3, #3
 8007dec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007df0:	00d4      	lsls	r4, r2, #3
 8007df2:	4622      	mov	r2, r4
 8007df4:	462b      	mov	r3, r5
 8007df6:	1814      	adds	r4, r2, r0
 8007df8:	63bc      	str	r4, [r7, #56]	; 0x38
 8007dfa:	414b      	adcs	r3, r1
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e00:	4618      	mov	r0, r3
 8007e02:	f04f 0100 	mov.w	r1, #0
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	008b      	lsls	r3, r1, #2
 8007e10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e14:	0082      	lsls	r2, r0, #2
 8007e16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e1a:	f7f8 fa81 	bl	8000320 <__aeabi_uldivmod>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007e24:	fba3 1302 	umull	r1, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	2164      	movs	r1, #100	; 0x64
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	3332      	adds	r3, #50	; 0x32
 8007e36:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <LL_USART_SetBaudRate+0x31c>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4433      	add	r3, r6
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	377c      	adds	r7, #124	; 0x7c
 8007e54:	46bd      	mov	sp, r7
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	bf00      	nop
 8007e5c:	51eb851f 	.word	0x51eb851f

08007e60 <LL_USART_ConfigAsyncMode>:
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	615a      	str	r2, [r3, #20]
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	bf0c      	ite	eq
 8007ec6:	2301      	moveq	r3, #1
 8007ec8:	2300      	movne	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b089      	sub	sp, #36	; 0x24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3314      	adds	r3, #20
 8007ee4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3314      	adds	r3, #20
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	61ba      	str	r2, [r7, #24]
 8007efe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6979      	ldr	r1, [r7, #20]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e7      	bne.n	8007ee0 <LL_USART_EnableDMAReq_RX+0x8>
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	3724      	adds	r7, #36	; 0x24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <LL_GPIO_ReadInputPort>:
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <LL_GPIO_SetOutputPin>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	619a      	str	r2, [r3, #24]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	041a      	lsls	r2, r3, #16
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	619a      	str	r2, [r3, #24]
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <sim7600_powerON>:
int sim7600DisconnectTime = 0;

bool bSim7600IsRunning = false;

void sim7600_powerON()
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
  LOG_WRITE("powerOn\n");  
 8007f96:	4823      	ldr	r0, [pc, #140]	; (8008024 <sim7600_powerON+0x94>)
 8007f98:	f019 fb24 	bl	80215e4 <puts>
  Sim_PWR(0);
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4822      	ldr	r0, [pc, #136]	; (8008028 <sim7600_powerON+0x98>)
 8007fa0:	f7ff ffe6 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 8007fa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fa8:	f003 fd81 	bl	800baae <osDelay>
  Sim_PWR(1);
 8007fac:	2101      	movs	r1, #1
 8007fae:	481e      	ldr	r0, [pc, #120]	; (8008028 <sim7600_powerON+0x98>)
 8007fb0:	f7ff ffd0 	bl	8007f54 <LL_GPIO_SetOutputPin>
  osDelay(500);
 8007fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fb8:	f003 fd79 	bl	800baae <osDelay>
  Sim_PWR(0);
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	481a      	ldr	r0, [pc, #104]	; (8008028 <sim7600_powerON+0x98>)
 8007fc0:	f7ff ffd6 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  osDelay(1000); //margin
 8007fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fc8:	f003 fd71 	bl	800baae <osDelay>

  //wait until sim_status == 1;, time-out 60s
  int try = 6000;
 8007fcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8007fd0:	607b      	str	r3, [r7, #4]
  int count = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	603b      	str	r3, [r7, #0]
  while (try--)
 8007fd6:	e013      	b.n	8008000 <sim7600_powerON+0x70>
  {
    if (Sim_STT > 0)
 8007fd8:	4813      	ldr	r0, [pc, #76]	; (8008028 <sim7600_powerON+0x98>)
 8007fda:	f7ff ffaf 	bl	8007f3c <LL_GPIO_ReadInputPort>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <sim7600_powerON+0x60>
      count++;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	e001      	b.n	8007ff4 <sim7600_powerON+0x64>
    else
      count = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	603b      	str	r3, [r7, #0]
    if(count > 10)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b0a      	cmp	r3, #10
 8007ff8:	dc08      	bgt.n	800800c <sim7600_powerON+0x7c>
      break;
    osDelay(10);
 8007ffa:	200a      	movs	r0, #10
 8007ffc:	f003 fd57 	bl	800baae <osDelay>
  while (try--)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	607a      	str	r2, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <sim7600_powerON+0x48>
 800800a:	e000      	b.n	800800e <sim7600_powerON+0x7e>
      break;
 800800c:	bf00      	nop
  }
  osDelay(50000); //max time
 800800e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008012:	f003 fd4c 	bl	800baae <osDelay>

  bSim7600IsRunning = true;
 8008016:	4b05      	ldr	r3, [pc, #20]	; (800802c <sim7600_powerON+0x9c>)
 8008018:	2201      	movs	r2, #1
 800801a:	701a      	strb	r2, [r3, #0]
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	08022d74 	.word	0x08022d74
 8008028:	40021000 	.word	0x40021000
 800802c:	20000640 	.word	0x20000640

08008030 <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
  bSim7600IsRunning = false;
 8008036:	4b23      	ldr	r3, [pc, #140]	; (80080c4 <sim7600_powerOFF+0x94>)
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]

  LOG_WRITE("powerOff\n");  
 800803c:	4822      	ldr	r0, [pc, #136]	; (80080c8 <sim7600_powerOFF+0x98>)
 800803e:	f019 fad1 	bl	80215e4 <puts>
  Sim_PWR(0);
 8008042:	2101      	movs	r1, #1
 8008044:	4821      	ldr	r0, [pc, #132]	; (80080cc <sim7600_powerOFF+0x9c>)
 8008046:	f7ff ff93 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 800804a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800804e:	f003 fd2e 	bl	800baae <osDelay>
  Sim_PWR(1);
 8008052:	2101      	movs	r1, #1
 8008054:	481d      	ldr	r0, [pc, #116]	; (80080cc <sim7600_powerOFF+0x9c>)
 8008056:	f7ff ff7d 	bl	8007f54 <LL_GPIO_SetOutputPin>
  osDelay(4000);
 800805a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800805e:	f003 fd26 	bl	800baae <osDelay>
  Sim_PWR(0);
 8008062:	2101      	movs	r1, #1
 8008064:	4819      	ldr	r0, [pc, #100]	; (80080cc <sim7600_powerOFF+0x9c>)
 8008066:	f7ff ff83 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  osDelay(1000); //margin
 800806a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800806e:	f003 fd1e 	bl	800baae <osDelay>

  //wait until sim_status == 0;, time-out 60s
  int try = 6000;
 8008072:	f241 7370 	movw	r3, #6000	; 0x1770
 8008076:	607b      	str	r3, [r7, #4]
  int count = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	603b      	str	r3, [r7, #0]
  while (try--)
 800807c:	e013      	b.n	80080a6 <sim7600_powerOFF+0x76>
  {
    if (Sim_STT == 0)
 800807e:	4813      	ldr	r0, [pc, #76]	; (80080cc <sim7600_powerOFF+0x9c>)
 8008080:	f7ff ff5c 	bl	8007f3c <LL_GPIO_ReadInputPort>
 8008084:	4603      	mov	r3, r0
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <sim7600_powerOFF+0x66>
      count++;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	3301      	adds	r3, #1
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	e001      	b.n	800809a <sim7600_powerOFF+0x6a>
    else
      count = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	603b      	str	r3, [r7, #0]
    if(count > 10) //remove noise
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b0a      	cmp	r3, #10
 800809e:	dc08      	bgt.n	80080b2 <sim7600_powerOFF+0x82>
      break;
    osDelay(10);
 80080a0:	200a      	movs	r0, #10
 80080a2:	f003 fd04 	bl	800baae <osDelay>
  while (try--)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e6      	bne.n	800807e <sim7600_powerOFF+0x4e>
 80080b0:	e000      	b.n	80080b4 <sim7600_powerOFF+0x84>
      break;
 80080b2:	bf00      	nop
  }
  osDelay(30000); //max time
 80080b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80080b8:	f003 fcf9 	bl	800baae <osDelay>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000640 	.word	0x20000640
 80080c8:	08022d7c 	.word	0x08022d7c
 80080cc:	40021000 	.word	0x40021000

080080d0 <sim7600_reset>:

void sim7600_reset()
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0

  LOG_WRITE("reset\n");  
 80080d4:	480e      	ldr	r0, [pc, #56]	; (8008110 <sim7600_reset+0x40>)
 80080d6:	f019 fa85 	bl	80215e4 <puts>

  Sim_RST(0);
 80080da:	2102      	movs	r1, #2
 80080dc:	480d      	ldr	r0, [pc, #52]	; (8008114 <sim7600_reset+0x44>)
 80080de:	f7ff ff47 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 80080e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080e6:	f003 fce2 	bl	800baae <osDelay>
  Sim_RST(1);
 80080ea:	2102      	movs	r1, #2
 80080ec:	4809      	ldr	r0, [pc, #36]	; (8008114 <sim7600_reset+0x44>)
 80080ee:	f7ff ff31 	bl	8007f54 <LL_GPIO_SetOutputPin>
  osDelay(400);
 80080f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80080f6:	f003 fcda 	bl	800baae <osDelay>
  Sim_RST(0);
 80080fa:	2102      	movs	r1, #2
 80080fc:	4805      	ldr	r0, [pc, #20]	; (8008114 <sim7600_reset+0x44>)
 80080fe:	f7ff ff37 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  osDelay(30000);
 8008102:	f247 5030 	movw	r0, #30000	; 0x7530
 8008106:	f003 fcd2 	bl	800baae <osDelay>
}
 800810a:	bf00      	nop
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	08022d88 	.word	0x08022d88
 8008114:	40021000 	.word	0x40021000

08008118 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
  LOG_WRITE("gpioInit\n");  
 800811e:	4824      	ldr	r0, [pc, #144]	; (80081b0 <sim7600_gpio_init+0x98>)
 8008120:	f019 fa60 	bl	80215e4 <puts>

  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008124:	463b      	mov	r3, r7
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	609a      	str	r2, [r3, #8]
 800812e:	60da      	str	r2, [r3, #12]
 8008130:	611a      	str	r2, [r3, #16]
 8008132:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8008134:	2010      	movs	r0, #16
 8008136:	f7ff fc9f 	bl	8007a78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800813a:	2001      	movs	r0, #1
 800813c:	f7ff fc9c 	bl	8007a78 <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_ResetOutputPin(pwrSIM_GPIO_Port, pwrSIM_Pin | rstSIM_Pin);
 8008140:	2103      	movs	r1, #3
 8008142:	481c      	ldr	r0, [pc, #112]	; (80081b4 <sim7600_gpio_init+0x9c>)
 8008144:	f7ff ff14 	bl	8007f70 <LL_GPIO_ResetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin;
 8008148:	2303      	movs	r3, #3
 800814a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800814c:	2301      	movs	r3, #1
 800814e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008150:	2300      	movs	r3, #0
 8008152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008158:	2301      	movs	r3, #1
 800815a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(pwrSIM_GPIO_Port, &GPIO_InitStruct);
 800815c:	463b      	mov	r3, r7
 800815e:	4619      	mov	r1, r3
 8008160:	4814      	ldr	r0, [pc, #80]	; (80081b4 <sim7600_gpio_init+0x9c>)
 8008162:	f7fc fd28 	bl	8004bb6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sttSIM_Pin; //status pin
 8008166:	2304      	movs	r3, #4
 8008168:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN; //need pull down to read exactly value from (sim_status -> TXS0108EPWR)
 800816e:	2302      	movs	r3, #2
 8008170:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sttSIM_GPIO_Port, &GPIO_InitStruct);
 8008172:	463b      	mov	r3, r7
 8008174:	4619      	mov	r1, r3
 8008176:	480f      	ldr	r0, [pc, #60]	; (80081b4 <sim7600_gpio_init+0x9c>)
 8008178:	f7fc fd1d 	bl	8004bb6 <LL_GPIO_Init>

  LL_GPIO_ResetOutputPin(CTS_SIM_GPIO_Port, CTS_SIM_Pin);
 800817c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008180:	480d      	ldr	r0, [pc, #52]	; (80081b8 <sim7600_gpio_init+0xa0>)
 8008182:	f7ff fef5 	bl	8007f70 <LL_GPIO_ResetOutputPin>
  GPIO_InitStruct.Pin = CTS_SIM_Pin;
 8008186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800818c:	2301      	movs	r3, #1
 800818e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008190:	2303      	movs	r3, #3
 8008192:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008198:	2302      	movs	r3, #2
 800819a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CTS_SIM_GPIO_Port, &GPIO_InitStruct);
 800819c:	463b      	mov	r3, r7
 800819e:	4619      	mov	r1, r3
 80081a0:	4805      	ldr	r0, [pc, #20]	; (80081b8 <sim7600_gpio_init+0xa0>)
 80081a2:	f7fc fd08 	bl	8004bb6 <LL_GPIO_Init>
}
 80081a6:	bf00      	nop
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	08022d90 	.word	0x08022d90
 80081b4:	40021000 	.word	0x40021000
 80081b8:	40020000 	.word	0x40020000

080081bc <sim7600_init>:

//initialize UART, DMA, GPIO for stm32-sim7600 to connect Internet + gps (full) or just use jps (mini)
void sim7600_init(bool isMini)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b090      	sub	sp, #64	; 0x40
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
  LOG_WRITE("simInit\n");
 80081c6:	4864      	ldr	r0, [pc, #400]	; (8008358 <sim7600_init+0x19c>)
 80081c8:	f019 fa0c 	bl	80215e4 <puts>
  sim_dma_buff_size = 15000;
 80081cc:	4b63      	ldr	r3, [pc, #396]	; (800835c <sim7600_init+0x1a0>)
 80081ce:	f643 2298 	movw	r2, #15000	; 0x3a98
 80081d2:	601a      	str	r2, [r3, #0]
  //   sim_dma_buff_size = SIM_BUFF_SIZE_FULL;
  //   sim_dma_buff = (uint8_t *)malloc(SIM_BUFF_SIZE_FULL); //circle buffer
  //   sim_buff = (uint8_t *)malloc(SIM_BUFF_SIZE_FULL + 1); //real data received (+1 bytes for '\0' end of string)
  // }

  sim7600_gpio_init();
 80081d4:	f7ff ffa0 	bl	8008118 <sim7600_gpio_init>

  LL_USART_Disable(USART1);
 80081d8:	4861      	ldr	r0, [pc, #388]	; (8008360 <sim7600_init+0x1a4>)
 80081da:	f7ff fc8d 	bl	8007af8 <LL_USART_Disable>
  while (LL_USART_IsEnabled(USART1)); //waite until En bit == 0
 80081de:	bf00      	nop
 80081e0:	485f      	ldr	r0, [pc, #380]	; (8008360 <sim7600_init+0x1a4>)
 80081e2:	f7ff fc99 	bl	8007b18 <LL_USART_IsEnabled>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f9      	bne.n	80081e0 <sim7600_init+0x24>
  
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 80081ec:	2102      	movs	r1, #2
 80081ee:	485d      	ldr	r0, [pc, #372]	; (8008364 <sim7600_init+0x1a8>)
 80081f0:	f7ff fa5c 	bl	80076ac <LL_DMA_DisableStream>
  while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 80081f4:	bf00      	nop
 80081f6:	2102      	movs	r1, #2
 80081f8:	485a      	ldr	r0, [pc, #360]	; (8008364 <sim7600_init+0x1a8>)
 80081fa:	f7ff fa77 	bl	80076ec <LL_DMA_IsEnabledStream>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f8      	bne.n	80081f6 <sim7600_init+0x3a>
    ; //wait until En bit == 0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	605a      	str	r2, [r3, #4]
 800820e:	609a      	str	r2, [r3, #8]
 8008210:	60da      	str	r2, [r3, #12]
 8008212:	611a      	str	r2, [r3, #16]
 8008214:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008216:	f107 030c 	add.w	r3, r7, #12
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	605a      	str	r2, [r3, #4]
 8008220:	609a      	str	r2, [r3, #8]
 8008222:	60da      	str	r2, [r3, #12]
 8008224:	611a      	str	r2, [r3, #16]
 8008226:	615a      	str	r2, [r3, #20]
 8008228:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800822a:	2010      	movs	r0, #16
 800822c:	f7ff fc3c 	bl	8007aa8 <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008230:	2001      	movs	r0, #1
 8008232:	f7ff fc21 	bl	8007a78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8008236:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800823a:	f7ff fc1d 	bl	8007a78 <LL_AHB1_GRP1_EnableClock>
       * PA10   ------> USART1_RX
       * PA11   ------> USART1_CTS
       * PA12   ------> USART1_RTS
       */
  // GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |LL_GPIO_PIN_11; //debug
 800823e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008244:	2302      	movs	r3, #2
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008248:	2303      	movs	r3, #3
 800824a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800824c:	2300      	movs	r3, #0
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008250:	2300      	movs	r3, #0
 8008252:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 8008254:	2307      	movs	r3, #7
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800825c:	4619      	mov	r1, r3
 800825e:	4842      	ldr	r0, [pc, #264]	; (8008368 <sim7600_init+0x1ac>)
 8008260:	f7fc fca9 	bl	8004bb6 <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8008264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008268:	2102      	movs	r1, #2
 800826a:	483e      	ldr	r0, [pc, #248]	; (8008364 <sim7600_init+0x1a8>)
 800826c:	f7ff fb90 	bl	8007990 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8008270:	2200      	movs	r2, #0
 8008272:	2102      	movs	r1, #2
 8008274:	483b      	ldr	r0, [pc, #236]	; (8008364 <sim7600_init+0x1a8>)
 8008276:	f7ff fa55 	bl	8007724 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 800827a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800827e:	2102      	movs	r1, #2
 8008280:	4838      	ldr	r0, [pc, #224]	; (8008364 <sim7600_init+0x1a8>)
 8008282:	f7ff fb27 	bl	80078d4 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8008286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800828a:	2102      	movs	r1, #2
 800828c:	4835      	ldr	r0, [pc, #212]	; (8008364 <sim7600_init+0x1a8>)
 800828e:	f7ff fa6d 	bl	800776c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8008292:	2200      	movs	r2, #0
 8008294:	2102      	movs	r1, #2
 8008296:	4833      	ldr	r0, [pc, #204]	; (8008364 <sim7600_init+0x1a8>)
 8008298:	f7ff fa8c 	bl	80077b4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 800829c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082a0:	2102      	movs	r1, #2
 80082a2:	4830      	ldr	r0, [pc, #192]	; (8008364 <sim7600_init+0x1a8>)
 80082a4:	f7ff faaa 	bl	80077fc <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80082a8:	2200      	movs	r2, #0
 80082aa:	2102      	movs	r1, #2
 80082ac:	482d      	ldr	r0, [pc, #180]	; (8008364 <sim7600_init+0x1a8>)
 80082ae:	f7ff fac9 	bl	8007844 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80082b2:	2200      	movs	r2, #0
 80082b4:	2102      	movs	r1, #2
 80082b6:	482b      	ldr	r0, [pc, #172]	; (8008364 <sim7600_init+0x1a8>)
 80082b8:	f7ff fae8 	bl	800788c <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 80082bc:	2102      	movs	r1, #2
 80082be:	4829      	ldr	r0, [pc, #164]	; (8008364 <sim7600_init+0x1a8>)
 80082c0:	f7ff fb8a 	bl	80079d8 <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 80082c4:	4a29      	ldr	r2, [pc, #164]	; (800836c <sim7600_init+0x1b0>)
 80082c6:	2102      	movs	r1, #2
 80082c8:	4826      	ldr	r0, [pc, #152]	; (8008364 <sim7600_init+0x1a8>)
 80082ca:	f7ff fbbd 	bl	8007a48 <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buff);
 80082ce:	4b28      	ldr	r3, [pc, #160]	; (8008370 <sim7600_init+0x1b4>)
 80082d0:	461a      	mov	r2, r3
 80082d2:	2102      	movs	r1, #2
 80082d4:	4823      	ldr	r0, [pc, #140]	; (8008364 <sim7600_init+0x1a8>)
 80082d6:	f7ff fb9f 	bl	8007a18 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buff_size);
 80082da:	4b20      	ldr	r3, [pc, #128]	; (800835c <sim7600_init+0x1a0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	2102      	movs	r1, #2
 80082e2:	4820      	ldr	r0, [pc, #128]	; (8008364 <sim7600_init+0x1a8>)
 80082e4:	f7ff fb1a 	bl	800791c <LL_DMA_SetDataLength>

  /* USART configuration */
  USART_InitStruct.BaudRate = SIM7600_BAUDRATE_DEFAULT;
 80082e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80082ec:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80082ee:	2300      	movs	r3, #0
 80082f0:	613b      	str	r3, [r7, #16]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80082fa:	230c      	movs	r3, #12
 80082fc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_CTS;
 80082fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008302:	623b      	str	r3, [r7, #32]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008304:	2300      	movs	r3, #0
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
  LL_USART_Init(USART1, &USART_InitStruct);
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	4619      	mov	r1, r3
 800830e:	4814      	ldr	r0, [pc, #80]	; (8008360 <sim7600_init+0x1a4>)
 8008310:	f7fc ffc8 	bl	80052a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8008314:	4812      	ldr	r0, [pc, #72]	; (8008360 <sim7600_init+0x1a4>)
 8008316:	f7ff fda3 	bl	8007e60 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 800831a:	4811      	ldr	r0, [pc, #68]	; (8008360 <sim7600_init+0x1a4>)
 800831c:	f7ff fddc 	bl	8007ed8 <LL_USART_EnableDMAReq_RX>

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8008320:	2102      	movs	r1, #2
 8008322:	4810      	ldr	r0, [pc, #64]	; (8008364 <sim7600_init+0x1a8>)
 8008324:	f7ff f9a2 	bl	800766c <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 8008328:	480d      	ldr	r0, [pc, #52]	; (8008360 <sim7600_init+0x1a4>)
 800832a:	f7ff fbd5 	bl	8007ad8 <LL_USART_Enable>

  //wait until USART DMA is ready
  while (!LL_USART_IsEnabled(USART1) || !LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 800832e:	bf00      	nop
 8008330:	480b      	ldr	r0, [pc, #44]	; (8008360 <sim7600_init+0x1a4>)
 8008332:	f7ff fbf1 	bl	8007b18 <LL_USART_IsEnabled>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0f9      	beq.n	8008330 <sim7600_init+0x174>
 800833c:	2102      	movs	r1, #2
 800833e:	4809      	ldr	r0, [pc, #36]	; (8008364 <sim7600_init+0x1a8>)
 8008340:	f7ff f9d4 	bl	80076ec <LL_DMA_IsEnabledStream>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f2      	beq.n	8008330 <sim7600_init+0x174>

  //power off to debug (don't need to plug out sim7600)
//  sim7600_powerOFF();

  //power on sim7600
  sim7600_powerON();
 800834a:	f7ff fe21 	bl	8007f90 <sim7600_powerON>
}
 800834e:	bf00      	nop
 8008350:	3740      	adds	r7, #64	; 0x40
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	08022d9c 	.word	0x08022d9c
 800835c:	20006404 	.word	0x20006404
 8008360:	40011000 	.word	0x40011000
 8008364:	40026400 	.word	0x40026400
 8008368:	40020000 	.word	0x40020000
 800836c:	40011004 	.word	0x40011004
 8008370:	20009eb0 	.word	0x20009eb0

08008374 <sim7600_update_response>:

void sim7600_update_response(const char *_res1, const char *_res2)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  LOG_WRITE("UpdateRes\n");
 800837e:	4812      	ldr	r0, [pc, #72]	; (80083c8 <sim7600_update_response+0x54>)
 8008380:	f019 f930 	bl	80215e4 <puts>
  if (_res1 != NULL && strlen(_res1) > 0)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <sim7600_update_response+0x26>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <sim7600_update_response+0x26>
    res1 = _res1;
 8008392:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <sim7600_update_response+0x58>)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	e002      	b.n	80083a0 <sim7600_update_response+0x2c>
  else
    res1 = NULL;
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <sim7600_update_response+0x58>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]

  if (_res2 != NULL && strlen(_res2) > 0)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <sim7600_update_response+0x42>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <sim7600_update_response+0x42>
    res2 = _res2;
 80083ae:	4a08      	ldr	r2, [pc, #32]	; (80083d0 <sim7600_update_response+0x5c>)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e003      	b.n	80083be <sim7600_update_response+0x4a>
  else
    res2 = NULL;
 80083b6:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <sim7600_update_response+0x5c>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	08022da4 	.word	0x08022da4
 80083cc:	2000640c 	.word	0x2000640c
 80083d0:	20006400 	.word	0x20006400

080083d4 <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  LOG_WRITE("sendStr\n");
 80083dc:	480a      	ldr	r0, [pc, #40]	; (8008408 <sim7600_usart_send_string+0x34>)
 80083de:	f019 f901 	bl	80215e4 <puts>
  if(str != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <sim7600_usart_send_string+0x2c>
  {
    int tmpLen = strlen(str);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f7 fef1 	bl	80001d0 <strlen>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60fb      	str	r3, [r7, #12]
    if(tmpLen > 0)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd03      	ble.n	8008400 <sim7600_usart_send_string+0x2c>
      sim7600_usart_send_byte(str, tmpLen);
 80083f8:	68f9      	ldr	r1, [r7, #12]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f806 	bl	800840c <sim7600_usart_send_byte>
  }
}
 8008400:	bf00      	nop
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	08022db0 	.word	0x08022db0

0800840c <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  LOG_WRITE("sendBytes\n");
 8008416:	4814      	ldr	r0, [pc, #80]	; (8008468 <sim7600_usart_send_byte+0x5c>)
 8008418:	f019 f8e4 	bl	80215e4 <puts>
  const uint8_t *d = (uint8_t*)data;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 8008420:	e012      	b.n	8008448 <sim7600_usart_send_byte+0x3c>
  {
    LL_USART_TransmitData8(USART1, *d);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	4619      	mov	r1, r3
 8008428:	4810      	ldr	r0, [pc, #64]	; (800846c <sim7600_usart_send_byte+0x60>)
 800842a:	f7ff fd78 	bl	8007f1e <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 800842e:	bf00      	nop
 8008430:	480e      	ldr	r0, [pc, #56]	; (800846c <sim7600_usart_send_byte+0x60>)
 8008432:	f7ff fd3e 	bl	8007eb2 <LL_USART_IsActiveFlag_TXE>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f9      	beq.n	8008430 <sim7600_usart_send_byte+0x24>
  for (; len > 0; --len, ++d)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	3b01      	subs	r3, #1
 8008440:	603b      	str	r3, [r7, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dce9      	bgt.n	8008422 <sim7600_usart_send_byte+0x16>
      ;
  }
  while (!LL_USART_IsActiveFlag_TC(USART1))
 800844e:	bf00      	nop
 8008450:	4806      	ldr	r0, [pc, #24]	; (800846c <sim7600_usart_send_byte+0x60>)
 8008452:	f7ff fd1b 	bl	8007e8c <LL_USART_IsActiveFlag_TC>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f9      	beq.n	8008450 <sim7600_usart_send_byte+0x44>
    ;
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	08022db8 	.word	0x08022db8
 800846c:	40011000 	.word	0x40011000

08008470 <sim7600_send_cmd>:

//send direct AT cmd, return 0: fail, 1,2: response 1,2
int sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  LOG_WRITE("sendCMD\n");
 800847e:	481a      	ldr	r0, [pc, #104]	; (80084e8 <sim7600_send_cmd+0x78>)
 8008480:	f019 f8b0 	bl	80215e4 <puts>
  uint32_t sendSimFlag = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
  sim7600_update_response(response1, response2);
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	68b8      	ldr	r0, [r7, #8]
 800848c:	f7ff ff72 	bl	8008374 <sim7600_update_response>
  sim7600_usart_send_string(cmd);
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff ff9f 	bl	80083d4 <sim7600_usart_send_string>
  cmdSendStatus = 1;
 8008496:	4b15      	ldr	r3, [pc, #84]	; (80084ec <sim7600_send_cmd+0x7c>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
  sendSimFlag = osEventFlagsWait(SendSimEventID, 3, osFlagsWaitAny, timeout); //500ms receive max 100 bytes with baud = 115200
 800849c:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <sim7600_send_cmd+0x80>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	2103      	movs	r1, #3
 80084a6:	f003 fcc9 	bl	800be3c <osEventFlagsWait>
 80084aa:	6178      	str	r0, [r7, #20]
  cmdSendStatus = 0;
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <sim7600_send_cmd+0x7c>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
  if(sendSimFlag == 1U || sendSimFlag == 2U)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d002      	beq.n	80084be <sim7600_send_cmd+0x4e>
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d101      	bne.n	80084c2 <sim7600_send_cmd+0x52>
  {
    return sendSimFlag;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	e00d      	b.n	80084de <sim7600_send_cmd+0x6e>
  }
  else if(sendSimFlag != osFlagsErrorTimeout)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f113 0f02 	cmn.w	r3, #2
 80084c8:	d008      	beq.n	80084dc <sim7600_send_cmd+0x6c>
  {
    LOG_WRITE("sim send cmd eror\n");
 80084ca:	480a      	ldr	r0, [pc, #40]	; (80084f4 <sim7600_send_cmd+0x84>)
 80084cc:	f019 f88a 	bl	80215e4 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <sim7600_send_cmd+0x88>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2104      	movs	r1, #4
 80084d6:	4618      	mov	r0, r3
 80084d8:	f003 fc3a 	bl	800bd50 <osEventFlagsSet>
  }
  return 0;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	08022dc4 	.word	0x08022dc4
 80084ec:	2000062c 	.word	0x2000062c
 80084f0:	200057a4 	.word	0x200057a4
 80084f4:	08022dcc 	.word	0x08022dcc
 80084f8:	200057bc 	.word	0x200057bc

080084fc <sim7600_AT>:

//push AT cmd to queue, return 0: fail, 1,2: response 1,2
int sim7600_AT(const char *cmd, const char *response1, const char *response2, int timeout, int try)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08e      	sub	sp, #56	; 0x38
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  LOG_WRITE("simAT\n");
 800850a:	483c      	ldr	r0, [pc, #240]	; (80085fc <sim7600_AT+0x100>)
 800850c:	f019 f86a 	bl	80215e4 <puts>
  sendSimPack sendMsgObj;
  osStatus_t sendMsgStt;
  uint32_t sendMsgFlag = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	637b      	str	r3, [r7, #52]	; 0x34

  osEventFlagsId_t SimATEventID = osEventFlagsNew(NULL);
 8008514:	2000      	movs	r0, #0
 8008516:	f003 fbdc 	bl	800bcd2 <osEventFlagsNew>
 800851a:	6338      	str	r0, [r7, #48]	; 0x30
  if (SimATEventID == NULL)
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <sim7600_AT+0x3c>
  {
    LOG_WRITE("SimATEventID eror\n");
 8008522:	4837      	ldr	r0, [pc, #220]	; (8008600 <sim7600_AT+0x104>)
 8008524:	f019 f85e 	bl	80215e4 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 8008528:	4b36      	ldr	r3, [pc, #216]	; (8008604 <sim7600_AT+0x108>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2104      	movs	r1, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f003 fc0e 	bl	800bd50 <osEventFlagsSet>
    return 0;
 8008534:	2300      	movs	r3, #0
 8008536:	e05c      	b.n	80085f2 <sim7600_AT+0xf6>
  }

  //put data
  sendMsgObj.EventID = SimATEventID;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	613b      	str	r3, [r7, #16]
  sendMsgObj.ptr = cmd;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	61bb      	str	r3, [r7, #24]
  sendMsgObj.res1 = response1;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	623b      	str	r3, [r7, #32]
  sendMsgObj.res2 = response2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
  sendMsgObj.timeout = timeout;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28
  sendMsgObj.type = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	753b      	strb	r3, [r7, #20]
  while (try-- > 0)
 8008550:	e046      	b.n	80085e0 <sim7600_AT+0xe4>
  {
    sendMsgStt = osMessageQueuePut(SendSimQueueID, &sendMsgObj, 0U, 0U);
 8008552:	4b2d      	ldr	r3, [pc, #180]	; (8008608 <sim7600_AT+0x10c>)
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f107 0110 	add.w	r1, r7, #16
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	f003 ffb9 	bl	800c4d4 <osMessageQueuePut>
 8008562:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (sendMsgStt == osOK)
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d120      	bne.n	80085ac <sim7600_AT+0xb0>
    {
      sendMsgFlag = osEventFlagsWait(SimATEventID, 3, osFlagsWaitAny, timeout + 100); //+100 margin
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	3364      	adds	r3, #100	; 0x64
 800856e:	2200      	movs	r2, #0
 8008570:	2103      	movs	r1, #3
 8008572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008574:	f003 fc62 	bl	800be3c <osEventFlagsWait>
 8008578:	6378      	str	r0, [r7, #52]	; 0x34
      if (sendMsgFlag == 1 || sendMsgFlag == 2) 
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	2b01      	cmp	r3, #1
 800857e:	d002      	beq.n	8008586 <sim7600_AT+0x8a>
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	2b02      	cmp	r3, #2
 8008584:	d104      	bne.n	8008590 <sim7600_AT+0x94>
      {
        osEventFlagsDelete(SimATEventID);
 8008586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008588:	f003 fcbe 	bl	800bf08 <osEventFlagsDelete>
        return sendMsgFlag;
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	e030      	b.n	80085f2 <sim7600_AT+0xf6>
      }
      else if(sendMsgFlag != osFlagsErrorTimeout) //flag error
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	f113 0f02 	cmn.w	r3, #2
 8008596:	d023      	beq.n	80085e0 <sim7600_AT+0xe4>
      {
        LOG_WRITE("SendSimQueueID eror1\n");
 8008598:	481c      	ldr	r0, [pc, #112]	; (800860c <sim7600_AT+0x110>)
 800859a:	f019 f823 	bl	80215e4 <puts>
        osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 800859e:	4b19      	ldr	r3, [pc, #100]	; (8008604 <sim7600_AT+0x108>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2104      	movs	r1, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f003 fbd3 	bl	800bd50 <osEventFlagsSet>
        break;
 80085aa:	e01e      	b.n	80085ea <sim7600_AT+0xee>
      }
    }
    else if(sendMsgStt == osErrorTimeout || sendMsgStt == osErrorResource)
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	f113 0f02 	cmn.w	r3, #2
 80085b2:	d003      	beq.n	80085bc <sim7600_AT+0xc0>
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	f113 0f03 	cmn.w	r3, #3
 80085ba:	d107      	bne.n	80085cc <sim7600_AT+0xd0>
    {
      if(try > 0)
 80085bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd0e      	ble.n	80085e0 <sim7600_AT+0xe4>
        osDelay(timeout);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f003 fa72 	bl	800baae <osDelay>
      if(try > 0)
 80085ca:	e009      	b.n	80085e0 <sim7600_AT+0xe4>
    }
    else //msg queue error
    {
      LOG_WRITE("SendSimQueueID error2\n");
 80085cc:	4810      	ldr	r0, [pc, #64]	; (8008610 <sim7600_AT+0x114>)
 80085ce:	f019 f809 	bl	80215e4 <puts>
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 80085d2:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <sim7600_AT+0x108>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2104      	movs	r1, #4
 80085d8:	4618      	mov	r0, r3
 80085da:	f003 fbb9 	bl	800bd50 <osEventFlagsSet>
      break;
 80085de:	e004      	b.n	80085ea <sim7600_AT+0xee>
  while (try-- > 0)
 80085e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e2:	1e5a      	subs	r2, r3, #1
 80085e4:	643a      	str	r2, [r7, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dcb3      	bgt.n	8008552 <sim7600_AT+0x56>
    }
  }
  osEventFlagsDelete(SimATEventID);
 80085ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ec:	f003 fc8c 	bl	800bf08 <osEventFlagsDelete>
  return 0; //fail
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3738      	adds	r7, #56	; 0x38
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	08022de0 	.word	0x08022de0
 8008600:	08022de8 	.word	0x08022de8
 8008604:	200057bc 	.word	0x200057bc
 8008608:	200057c8 	.word	0x200057c8
 800860c:	08022dfc 	.word	0x08022dfc
 8008610:	08022e14 	.word	0x08022e14

08008614 <sim7600_AT_notify_error>:

//send AT and set simError flag if error, return false if send error
int sim7600_AT_notify_error(const char *cmd, const char *response1, const char *response2, int timeout, int try)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af02      	add	r7, sp, #8
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  LOG_WRITE("simATnotify\n");
 8008622:	480e      	ldr	r0, [pc, #56]	; (800865c <sim7600_AT_notify_error+0x48>)
 8008624:	f018 ffde 	bl	80215e4 <puts>
  int tmpFlag = sim7600_AT(cmd, response1, response2, timeout, try);
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff ff62 	bl	80084fc <sim7600_AT>
 8008638:	6178      	str	r0, [r7, #20]
  if (tmpFlag == 0) //error
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d108      	bne.n	8008652 <sim7600_AT_notify_error+0x3e>
  {
    //set bit simError in ConfigSimEventID to restart and re config
    LOG_WRITE("sim7600_AT_notify error\n");
 8008640:	4807      	ldr	r0, [pc, #28]	; (8008660 <sim7600_AT_notify_error+0x4c>)
 8008642:	f018 ffcf 	bl	80215e4 <puts>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <sim7600_AT_notify_error+0x50>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2104      	movs	r1, #4
 800864c:	4618      	mov	r0, r3
 800864e:	f003 fb7f 	bl	800bd50 <osEventFlagsSet>
  }
  return tmpFlag;
 8008652:	697b      	ldr	r3, [r7, #20]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	08022e2c 	.word	0x08022e2c
 8008660:	08022e38 	.word	0x08022e38
 8008664:	200057bc 	.word	0x200057bc

08008668 <sim7600_send_packet_ip>:
//debug
uint32_t waitTimecmdSendStatus2;

//send packet, type:1 - TCP , type:2 - UDP; return true: send successful, false: fail
bool sim7600_send_packet_ip(int type, const uint8_t *data, int data_length)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  LOG_WRITE("sendIP %d\n", type);
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	4858      	ldr	r0, [pc, #352]	; (80087d8 <sim7600_send_packet_ip+0x170>)
 8008678:	f018 ff18 	bl	80214ac <iprintf>
  //can send udp when sim7600ConnectStatus  == 2 and tcp when sim7600ConnectStatus >= 1;
  char *sim7600_cmd_buff; //default null
  if (type == 2 && sim7600ConnectStatus == 2)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d11f      	bne.n	80086c2 <sim7600_send_packet_ip+0x5a>
 8008682:	4b56      	ldr	r3, [pc, #344]	; (80087dc <sim7600_send_packet_ip+0x174>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d11b      	bne.n	80086c2 <sim7600_send_packet_ip+0x5a>
  { 
    // udp
    if (serverDomain != NULL)
    {
      int tmpLen = strlen(serverDomain);
 800868a:	4855      	ldr	r0, [pc, #340]	; (80087e0 <sim7600_send_packet_ip+0x178>)
 800868c:	f7f7 fda0 	bl	80001d0 <strlen>
 8008690:	4603      	mov	r3, r0
 8008692:	617b      	str	r3, [r7, #20]
      if (tmpLen > 0)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	dd2a      	ble.n	80086f0 <sim7600_send_packet_ip+0x88>
      {
        sim7600_cmd_buff = (char *)malloc(tmpLen + 35);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	3323      	adds	r3, #35	; 0x23
 800869e:	4618      	mov	r0, r3
 80086a0:	f018 fdfc 	bl	802129c <malloc>
 80086a4:	4603      	mov	r3, r0
 80086a6:	61fb      	str	r3, [r7, #28]
        if (sim7600_cmd_buff != NULL)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d020      	beq.n	80086f0 <sim7600_send_packet_ip+0x88>
          sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 80086ae:	4b4d      	ldr	r3, [pc, #308]	; (80087e4 <sim7600_send_packet_ip+0x17c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	4b4a      	ldr	r3, [pc, #296]	; (80087e0 <sim7600_send_packet_ip+0x178>)
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	494b      	ldr	r1, [pc, #300]	; (80087e8 <sim7600_send_packet_ip+0x180>)
 80086ba:	69f8      	ldr	r0, [r7, #28]
 80086bc:	f019 f882 	bl	80217c4 <siprintf>
    if (serverDomain != NULL)
 80086c0:	e016      	b.n	80086f0 <sim7600_send_packet_ip+0x88>
      }
    }
  }
  else if (type == 1 && sim7600ConnectStatus >= 1)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d111      	bne.n	80086ec <sim7600_send_packet_ip+0x84>
 80086c8:	4b44      	ldr	r3, [pc, #272]	; (80087dc <sim7600_send_packet_ip+0x174>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dd0d      	ble.n	80086ec <sim7600_send_packet_ip+0x84>
  { 
    //tcp
    sim7600_cmd_buff = (char*)malloc(25);
 80086d0:	2019      	movs	r0, #25
 80086d2:	f018 fde3 	bl	802129c <malloc>
 80086d6:	4603      	mov	r3, r0
 80086d8:	61fb      	str	r3, [r7, #28]
    if(sim7600_cmd_buff != NULL)
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <sim7600_send_packet_ip+0x8a>
      sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4942      	ldr	r1, [pc, #264]	; (80087ec <sim7600_send_packet_ip+0x184>)
 80086e4:	69f8      	ldr	r0, [r7, #28]
 80086e6:	f019 f86d 	bl	80217c4 <siprintf>
    if(sim7600_cmd_buff != NULL)
 80086ea:	e002      	b.n	80086f2 <sim7600_send_packet_ip+0x8a>
  }
  else
  {
    return false;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e06e      	b.n	80087ce <sim7600_send_packet_ip+0x166>
    if (serverDomain != NULL)
 80086f0:	bf00      	nop
  }

  if (sim7600_cmd_buff == NULL) //can't allocate memory
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <sim7600_send_packet_ip+0xa6>
  {
    LOG_WRITE("sim7600_send_packet_ip allocate error\n");
 80086f8:	483d      	ldr	r0, [pc, #244]	; (80087f0 <sim7600_send_packet_ip+0x188>)
 80086fa:	f018 ff73 	bl	80215e4 <puts>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 80086fe:	4b3d      	ldr	r3, [pc, #244]	; (80087f4 <sim7600_send_packet_ip+0x18c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2104      	movs	r1, #4
 8008704:	4618      	mov	r0, r3
 8008706:	f003 fb23 	bl	800bd50 <osEventFlagsSet>
    return false;
 800870a:	2300      	movs	r3, #0
 800870c:	e05f      	b.n	80087ce <sim7600_send_packet_ip+0x166>
  }

  sim7600_usart_send_string(sim7600_cmd_buff);
 800870e:	69f8      	ldr	r0, [r7, #28]
 8008710:	f7ff fe60 	bl	80083d4 <sim7600_usart_send_string>
  free(sim7600_cmd_buff);
 8008714:	69f8      	ldr	r0, [r7, #28]
 8008716:	f018 fdc9 	bl	80212ac <free>
  // sim7600_update_response(">",""); //not necessaary, see sim7600_handle_received to know detail, at line cmdSendStatus == 2
  cmdSendStatus = 2; // -> ipSendStatus
 800871a:	4b37      	ldr	r3, [pc, #220]	; (80087f8 <sim7600_send_packet_ip+0x190>)
 800871c:	2202      	movs	r2, #2
 800871e:	601a      	str	r2, [r3, #0]

  //debug
  uint32_t tmpCNT = TIM2->CNT;
 8008720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	613b      	str	r3, [r7, #16]

  uint32_t sendSimFlag = osEventFlagsWait(SendSimEventID, 1U, osFlagsWaitAll, 500); //500ms receive max 100 bytes with baud = 115200
 8008728:	4b34      	ldr	r3, [pc, #208]	; (80087fc <sim7600_send_packet_ip+0x194>)
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008730:	2201      	movs	r2, #1
 8008732:	2101      	movs	r1, #1
 8008734:	f003 fb82 	bl	800be3c <osEventFlagsWait>
 8008738:	61b8      	str	r0, [r7, #24]

  //debug
  waitTimecmdSendStatus2 = (TIM2->CNT - tmpCNT) >> 1;
 800873a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800873e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	4a2e      	ldr	r2, [pc, #184]	; (8008800 <sim7600_send_packet_ip+0x198>)
 8008748:	6013      	str	r3, [r2, #0]

  if (sendSimFlag == 1U)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d113      	bne.n	8008778 <sim7600_send_packet_ip+0x110>
  { //recevied >
    sim7600_update_response("+CIPSEND", "+CIPERROR");
 8008750:	492c      	ldr	r1, [pc, #176]	; (8008804 <sim7600_send_packet_ip+0x19c>)
 8008752:	482d      	ldr	r0, [pc, #180]	; (8008808 <sim7600_send_packet_ip+0x1a0>)
 8008754:	f7ff fe0e 	bl	8008374 <sim7600_update_response>
    sim7600_usart_send_byte(data, data_length);
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	68b8      	ldr	r0, [r7, #8]
 800875c:	f7ff fe56 	bl	800840c <sim7600_usart_send_byte>
    cmdSendStatus = 1; // -> ipSendStatus
 8008760:	4b25      	ldr	r3, [pc, #148]	; (80087f8 <sim7600_send_packet_ip+0x190>)
 8008762:	2201      	movs	r2, #1
 8008764:	601a      	str	r2, [r3, #0]
    sendSimFlag = osEventFlagsWait(SendSimEventID, 3U, osFlagsWaitAny, 5000);
 8008766:	4b25      	ldr	r3, [pc, #148]	; (80087fc <sim7600_send_packet_ip+0x194>)
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f241 3388 	movw	r3, #5000	; 0x1388
 800876e:	2200      	movs	r2, #0
 8008770:	2103      	movs	r1, #3
 8008772:	f003 fb63 	bl	800be3c <osEventFlagsWait>
 8008776:	61b8      	str	r0, [r7, #24]
  }
  cmdSendStatus = 0; // reset
 8008778:	4b1f      	ldr	r3, [pc, #124]	; (80087f8 <sim7600_send_packet_ip+0x190>)
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
  if(sendSimFlag == 1U) //send success full
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d104      	bne.n	800878e <sim7600_send_packet_ip+0x126>
  {
    send_ip_error_count = 0;
 8008784:	4b21      	ldr	r3, [pc, #132]	; (800880c <sim7600_send_packet_ip+0x1a4>)
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]
    return true;
 800878a:	2301      	movs	r3, #1
 800878c:	e01f      	b.n	80087ce <sim7600_send_packet_ip+0x166>
  }
  else if(sendSimFlag == 2U)
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d112      	bne.n	80087ba <sim7600_send_packet_ip+0x152>
  {
    send_ip_error_count++;
 8008794:	4b1d      	ldr	r3, [pc, #116]	; (800880c <sim7600_send_packet_ip+0x1a4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3301      	adds	r3, #1
 800879a:	4a1c      	ldr	r2, [pc, #112]	; (800880c <sim7600_send_packet_ip+0x1a4>)
 800879c:	6013      	str	r3, [r2, #0]
    if(send_ip_error_count >= SEND_IP_ERROR_COUNT_MAX)
 800879e:	4b1b      	ldr	r3, [pc, #108]	; (800880c <sim7600_send_packet_ip+0x1a4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	dd12      	ble.n	80087cc <sim7600_send_packet_ip+0x164>
    {
      send_ip_error_count = 0;
 80087a6:	4b19      	ldr	r3, [pc, #100]	; (800880c <sim7600_send_packet_ip+0x1a4>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
      osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //re-CONNECT
 80087ac:	4b18      	ldr	r3, [pc, #96]	; (8008810 <sim7600_send_packet_ip+0x1a8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2110      	movs	r1, #16
 80087b2:	4618      	mov	r0, r3
 80087b4:	f003 facc 	bl	800bd50 <osEventFlagsSet>
 80087b8:	e008      	b.n	80087cc <sim7600_send_packet_ip+0x164>
    }
  }
  else //don't recv response -> something wrong
  {
    LOG_WRITE("sendSimFlag error\n");
 80087ba:	4816      	ldr	r0, [pc, #88]	; (8008814 <sim7600_send_packet_ip+0x1ac>)
 80087bc:	f018 ff12 	bl	80215e4 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart, reset
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <sim7600_send_packet_ip+0x18c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2104      	movs	r1, #4
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 fac2 	bl	800bd50 <osEventFlagsSet>
  }
  return false;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	08022e50 	.word	0x08022e50
 80087dc:	20000634 	.word	0x20000634
 80087e0:	20000248 	.word	0x20000248
 80087e4:	200002ac 	.word	0x200002ac
 80087e8:	08022e5c 	.word	0x08022e5c
 80087ec:	08022e78 	.word	0x08022e78
 80087f0:	08022e8c 	.word	0x08022e8c
 80087f4:	200057bc 	.word	0x200057bc
 80087f8:	2000062c 	.word	0x2000062c
 80087fc:	200057a4 	.word	0x200057a4
 8008800:	20006408 	.word	0x20006408
 8008804:	08022eb4 	.word	0x08022eb4
 8008808:	08022ec0 	.word	0x08022ec0
 800880c:	20000630 	.word	0x20000630
 8008810:	200057c0 	.word	0x200057c0
 8008814:	08022ecc 	.word	0x08022ecc

08008818 <sim7600_IP>:

//send IP packet by put to send sim queue. type: 2-udp, 1-tcp
bool sim7600_IP(int type, uint8_t *data, int len)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	; 0x30
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  LOG_WRITE("simIP %d\n", type);;
 8008824:	68f9      	ldr	r1, [r7, #12]
 8008826:	4812      	ldr	r0, [pc, #72]	; (8008870 <sim7600_IP+0x58>)
 8008828:	f018 fe40 	bl	80214ac <iprintf>
  if(type != 1 && type != 2)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d004      	beq.n	800883c <sim7600_IP+0x24>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d001      	beq.n	800883c <sim7600_IP+0x24>
  {
    return false;
 8008838:	2300      	movs	r3, #0
 800883a:	e015      	b.n	8008868 <sim7600_IP+0x50>
  }
  sendSimPack sendMsgObj;
  sendMsgObj.ptr = data;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	61bb      	str	r3, [r7, #24]
  sendMsgObj.len = len;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	61fb      	str	r3, [r7, #28]
  sendMsgObj.type = type;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	753b      	strb	r3, [r7, #20]
  osStatus_t sendMsgStt = osMessageQueuePut(SendSimQueueID, &sendMsgObj, 0U, 0U);
 800884a:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <sim7600_IP+0x5c>)
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f107 0110 	add.w	r1, r7, #16
 8008852:	2300      	movs	r3, #0
 8008854:	2200      	movs	r2, #0
 8008856:	f003 fe3d 	bl	800c4d4 <osMessageQueuePut>
 800885a:	62f8      	str	r0, [r7, #44]	; 0x2c

  return (sendMsgStt == osOK);
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	2b00      	cmp	r3, #0
 8008860:	bf0c      	ite	eq
 8008862:	2301      	moveq	r3, #1
 8008864:	2300      	movne	r3, #0
 8008866:	b2db      	uxtb	r3, r3
}
 8008868:	4618      	mov	r0, r3
 800886a:	3730      	adds	r7, #48	; 0x30
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	08022ee0 	.word	0x08022ee0
 8008874:	200057c8 	.word	0x200057c8

08008878 <sim7600_fullConfig>:
  return true;
}

//full config for internet
bool sim7600_fullConfig()
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af02      	add	r7, sp, #8
  LOG_WRITE("fullConfig\n");
 800887e:	484d      	ldr	r0, [pc, #308]	; (80089b4 <sim7600_fullConfig+0x13c>)
 8008880:	f018 feb0 	bl	80215e4 <puts>
  char sim7600_cmd_buff[25];
  //change to main baudrate permantly
  // sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", SIM7600_BAUDRATE_MAIN); //temporarily
  sprintf(sim7600_cmd_buff, "AT+IPREX=%d\r\n", SIM7600_BAUDRATE_MAIN); //permantly, prevent receive "...SMS DONE..." after reboot/power-up
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	4a4c      	ldr	r2, [pc, #304]	; (80089b8 <sim7600_fullConfig+0x140>)
 8008888:	494c      	ldr	r1, [pc, #304]	; (80089bc <sim7600_fullConfig+0x144>)
 800888a:	4618      	mov	r0, r3
 800888c:	f018 ff9a 	bl	80217c4 <siprintf>
  sim7600_AT(sim7600_cmd_buff, "OK", NULL, 500, 2);              //don't check for the first config
 8008890:	1d38      	adds	r0, r7, #4
 8008892:	2302      	movs	r3, #2
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800889a:	2200      	movs	r2, #0
 800889c:	4948      	ldr	r1, [pc, #288]	; (80089c0 <sim7600_fullConfig+0x148>)
 800889e:	f7ff fe2d 	bl	80084fc <sim7600_AT>
  sim7600_change_baud(SIM7600_BAUDRATE_MAIN);
 80088a2:	4845      	ldr	r0, [pc, #276]	; (80089b8 <sim7600_fullConfig+0x140>)
 80088a4:	f000 ff28 	bl	80096f8 <sim7600_change_baud>
  if (!sim7600_AT(sim7600_cmd_buff, "OK", NULL, 500, 2))
 80088a8:	1d38      	adds	r0, r7, #4
 80088aa:	2302      	movs	r3, #2
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088b2:	2200      	movs	r2, #0
 80088b4:	4942      	ldr	r1, [pc, #264]	; (80089c0 <sim7600_fullConfig+0x148>)
 80088b6:	f7ff fe21 	bl	80084fc <sim7600_AT>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <sim7600_fullConfig+0x4c>
    return false;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e073      	b.n	80089ac <sim7600_fullConfig+0x134>
  //echo cmd off
  if (!sim7600_AT("ATE0\r\n", "OK", NULL, 500, 2))
 80088c4:	2302      	movs	r3, #2
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088cc:	2200      	movs	r2, #0
 80088ce:	493c      	ldr	r1, [pc, #240]	; (80089c0 <sim7600_fullConfig+0x148>)
 80088d0:	483c      	ldr	r0, [pc, #240]	; (80089c4 <sim7600_fullConfig+0x14c>)
 80088d2:	f7ff fe13 	bl	80084fc <sim7600_AT>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <sim7600_fullConfig+0x68>
    return false;
 80088dc:	2300      	movs	r3, #0
 80088de:	e065      	b.n	80089ac <sim7600_fullConfig+0x134>
  restartSimstatus = 0; //reset
 80088e0:	4b39      	ldr	r3, [pc, #228]	; (80089c8 <sim7600_fullConfig+0x150>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]

  //flow control AT+IFC=2,2 (sim_RTS, sim_CTS respectively)
  if (!sim7600_AT("AT+IFC=2,2\r\n", "OK", NULL, 500, 2))
 80088e6:	2302      	movs	r3, #2
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088ee:	2200      	movs	r2, #0
 80088f0:	4933      	ldr	r1, [pc, #204]	; (80089c0 <sim7600_fullConfig+0x148>)
 80088f2:	4836      	ldr	r0, [pc, #216]	; (80089cc <sim7600_fullConfig+0x154>)
 80088f4:	f7ff fe02 	bl	80084fc <sim7600_AT>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <sim7600_fullConfig+0x8a>
    return false;
 80088fe:	2300      	movs	r3, #0
 8008900:	e054      	b.n	80089ac <sim7600_fullConfig+0x134>

  //check sim
  if (!sim7600_AT("at+ciccid\r\n", "OK", NULL, 500, 2))
 8008902:	2302      	movs	r3, #2
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800890a:	2200      	movs	r2, #0
 800890c:	492c      	ldr	r1, [pc, #176]	; (80089c0 <sim7600_fullConfig+0x148>)
 800890e:	4830      	ldr	r0, [pc, #192]	; (80089d0 <sim7600_fullConfig+0x158>)
 8008910:	f7ff fdf4 	bl	80084fc <sim7600_AT>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <sim7600_fullConfig+0xa6>
    return false;
 800891a:	2300      	movs	r3, #0
 800891c:	e046      	b.n	80089ac <sim7600_fullConfig+0x134>
  if (!sim7600_AT("at+csq\r\n", "OK", NULL, 500, 2))
 800891e:	2302      	movs	r3, #2
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008926:	2200      	movs	r2, #0
 8008928:	4925      	ldr	r1, [pc, #148]	; (80089c0 <sim7600_fullConfig+0x148>)
 800892a:	482a      	ldr	r0, [pc, #168]	; (80089d4 <sim7600_fullConfig+0x15c>)
 800892c:	f7ff fde6 	bl	80084fc <sim7600_AT>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <sim7600_fullConfig+0xc2>
    return false;
 8008936:	2300      	movs	r3, #0
 8008938:	e038      	b.n	80089ac <sim7600_fullConfig+0x134>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_AT("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", NULL, 500, 2))
 800893a:	2302      	movs	r3, #2
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008942:	2200      	movs	r2, #0
 8008944:	491e      	ldr	r1, [pc, #120]	; (80089c0 <sim7600_fullConfig+0x148>)
 8008946:	4824      	ldr	r0, [pc, #144]	; (80089d8 <sim7600_fullConfig+0x160>)
 8008948:	f7ff fdd8 	bl	80084fc <sim7600_AT>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <sim7600_fullConfig+0xde>
    return false;
 8008952:	2300      	movs	r3, #0
 8008954:	e02a      	b.n	80089ac <sim7600_fullConfig+0x134>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 500
  if (!sim7600_AT("AT+CIPCCFG=10,0,0,1,1,0,500\r\n", "OK", NULL, 500, 2))
 8008956:	2302      	movs	r3, #2
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800895e:	2200      	movs	r2, #0
 8008960:	4917      	ldr	r1, [pc, #92]	; (80089c0 <sim7600_fullConfig+0x148>)
 8008962:	481e      	ldr	r0, [pc, #120]	; (80089dc <sim7600_fullConfig+0x164>)
 8008964:	f7ff fdca 	bl	80084fc <sim7600_AT>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <sim7600_fullConfig+0xfa>
    return false;
 800896e:	2300      	movs	r3, #0
 8008970:	e01c      	b.n	80089ac <sim7600_fullConfig+0x134>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_AT("AT+CIPHEAD=1\r\n", "OK", NULL, 500, 2))
 8008972:	2302      	movs	r3, #2
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800897a:	2200      	movs	r2, #0
 800897c:	4910      	ldr	r1, [pc, #64]	; (80089c0 <sim7600_fullConfig+0x148>)
 800897e:	4818      	ldr	r0, [pc, #96]	; (80089e0 <sim7600_fullConfig+0x168>)
 8008980:	f7ff fdbc 	bl	80084fc <sim7600_AT>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <sim7600_fullConfig+0x116>
    return false;
 800898a:	2300      	movs	r3, #0
 800898c:	e00e      	b.n	80089ac <sim7600_fullConfig+0x134>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_AT("AT+CIPSRIP=0\r\n", "OK", NULL, 500, 2))
 800898e:	2302      	movs	r3, #2
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008996:	2200      	movs	r2, #0
 8008998:	4909      	ldr	r1, [pc, #36]	; (80089c0 <sim7600_fullConfig+0x148>)
 800899a:	4812      	ldr	r0, [pc, #72]	; (80089e4 <sim7600_fullConfig+0x16c>)
 800899c:	f7ff fdae 	bl	80084fc <sim7600_AT>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <sim7600_fullConfig+0x132>
    return false;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <sim7600_fullConfig+0x134>
//
//  if (!sim7600_AT("AT+CGPSINFO\r\n", "OK", NULL, 500, 2))
//    return false;


  return true;
 80089aa:	2301      	movs	r3, #1
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08022eec 	.word	0x08022eec
 80089b8:	002dc6c0 	.word	0x002dc6c0
 80089bc:	08022ef8 	.word	0x08022ef8
 80089c0:	08022f08 	.word	0x08022f08
 80089c4:	08022f0c 	.word	0x08022f0c
 80089c8:	20000628 	.word	0x20000628
 80089cc:	08022f14 	.word	0x08022f14
 80089d0:	08022f24 	.word	0x08022f24
 80089d4:	08022f30 	.word	0x08022f30
 80089d8:	08022f3c 	.word	0x08022f3c
 80089dc:	08022f60 	.word	0x08022f60
 80089e0:	08022f80 	.word	0x08022f80
 80089e4:	08022f90 	.word	0x08022f90

080089e8 <sim7600_fullConfigTask>:

void sim7600_fullConfigTask()
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af02      	add	r7, sp, #8
  //     }
  //   }
  // }


  LOG_WRITE("fullConfigTask\n");
 80089ee:	4864      	ldr	r0, [pc, #400]	; (8008b80 <sim7600_fullConfigTask+0x198>)
 80089f0:	f018 fdf8 	bl	80215e4 <puts>
  //first config
  sim7600_init(false);
 80089f4:	2000      	movs	r0, #0
 80089f6:	f7ff fbe1 	bl	80081bc <sim7600_init>
    LOG_WRITE("sim7600_fullConfigTask error0\n");
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart sim7600 and reset stm32
  }
  else
  {
    if (sim7600_fullConfig())
 80089fa:	f7ff ff3d 	bl	8008878 <sim7600_fullConfig>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00c      	beq.n	8008a1e <sim7600_fullConfigTask+0x36>
    {
      //set event to invoke connect task open net and open socket tcp, udp
      osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8008a04:	4b5f      	ldr	r3, [pc, #380]	; (8008b84 <sim7600_fullConfigTask+0x19c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2102      	movs	r1, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f003 f9a0 	bl	800bd50 <osEventFlagsSet>
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008a10:	4b5c      	ldr	r3, [pc, #368]	; (8008b84 <sim7600_fullConfigTask+0x19c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2101      	movs	r1, #1
 8008a16:	4618      	mov	r0, r3
 8008a18:	f003 f99a 	bl	800bd50 <osEventFlagsSet>
 8008a1c:	e008      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
      // osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
    }
    else
    { //error
      LOG_WRITE("sim7600_fullConfigTask error1\n");
 8008a1e:	485a      	ldr	r0, [pc, #360]	; (8008b88 <sim7600_fullConfigTask+0x1a0>)
 8008a20:	f018 fde0 	bl	80215e4 <puts>
      //set bit simError in ConfigSimEventID to restart and re-config
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008a24:	4b59      	ldr	r3, [pc, #356]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2104      	movs	r1, #4
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f003 f990 	bl	800bd50 <osEventFlagsSet>
  }
  ////
  int configSimFlag;
  for (;;)
  {
    configSimFlag = osEventFlagsWait(ConfigSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008a30:	4b56      	ldr	r3, [pc, #344]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295
 8008a38:	2202      	movs	r2, #2
 8008a3a:	21ff      	movs	r1, #255	; 0xff
 8008a3c:	f003 f9fe 	bl	800be3c <osEventFlagsWait>
 8008a40:	4603      	mov	r3, r0
 8008a42:	607b      	str	r3, [r7, #4]
    LOG_WRITE("configSimFlag %d\n", configSimFlag);
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4852      	ldr	r0, [pc, #328]	; (8008b90 <sim7600_fullConfigTask+0x1a8>)
 8008a48:	f018 fd30 	bl	80214ac <iprintf>
    if(configSimFlag < 0) //error 0xFFFFFFF...U
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da0c      	bge.n	8008a6c <sim7600_fullConfigTask+0x84>
    {
      LOG_WRITE("configSimFlag errorFlag\n");
 8008a52:	4850      	ldr	r0, [pc, #320]	; (8008b94 <sim7600_fullConfigTask+0x1ac>)
 8008a54:	f018 fdc6 	bl	80215e4 <puts>
      LOG_WRITE("sim7600_fullConfigTask error2\n");
 8008a58:	484f      	ldr	r0, [pc, #316]	; (8008b98 <sim7600_fullConfigTask+0x1b0>)
 8008a5a:	f018 fdc3 	bl	80215e4 <puts>
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8008a5e:	4b4b      	ldr	r3, [pc, #300]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2104      	movs	r1, #4
 8008a64:	4618      	mov	r0, r3
 8008a66:	f003 f973 	bl	800bd50 <osEventFlagsSet>
 8008a6a:	e7e1      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
    }
    //analyze follow priority
    else if (configSimFlag & (1 << simErrorEnum))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d026      	beq.n	8008ac4 <sim7600_fullConfigTask+0xdc>
    {
      LOG_WRITE("configSimFlag simError\n");
 8008a76:	4849      	ldr	r0, [pc, #292]	; (8008b9c <sim7600_fullConfigTask+0x1b4>)
 8008a78:	f018 fdb4 	bl	80215e4 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << simErrorEnum);
 8008a7c:	4b43      	ldr	r3, [pc, #268]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2104      	movs	r1, #4
 8008a82:	4618      	mov	r0, r3
 8008a84:	f003 f9a8 	bl	800bdd8 <osEventFlagsClear>
      //restart then clear all flag, var
      sim7600_restart(); //restart + reset
 8008a88:	f000 fe90 	bl	80097ac <sim7600_restart>
      if (sim7600_fullConfig())
 8008a8c:	f7ff fef4 	bl	8008878 <sim7600_fullConfig>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00c      	beq.n	8008ab0 <sim7600_fullConfigTask+0xc8>
      {
        //set event to invoke connect task open net and open socket tcp, udp
        osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8008a96:	4b3b      	ldr	r3, [pc, #236]	; (8008b84 <sim7600_fullConfigTask+0x19c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f003 f957 	bl	800bd50 <osEventFlagsSet>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008aa2:	4b38      	ldr	r3, [pc, #224]	; (8008b84 <sim7600_fullConfigTask+0x19c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f003 f951 	bl	800bd50 <osEventFlagsSet>
 8008aae:	e7bf      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
        // osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
      }
      else
      { //error
        LOG_WRITE("sim7600_fullConfigTask error3\n");
 8008ab0:	483b      	ldr	r0, [pc, #236]	; (8008ba0 <sim7600_fullConfigTask+0x1b8>)
 8008ab2:	f018 fd97 	bl	80215e4 <puts>
        //set bit simError in ConfigSimEventID to restart and re config
        osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008ab6:	4b35      	ldr	r3, [pc, #212]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2104      	movs	r1, #4
 8008abc:	4618      	mov	r0, r3
 8008abe:	f003 f947 	bl	800bd50 <osEventFlagsSet>
 8008ac2:	e7b5      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
      }
    }
    else if(configSimFlag & (1 << rebootEnum))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d024      	beq.n	8008b18 <sim7600_fullConfigTask+0x130>
    {
      LOG_WRITE("configSimFlag rebootEnum\n");
 8008ace:	4835      	ldr	r0, [pc, #212]	; (8008ba4 <sim7600_fullConfigTask+0x1bc>)
 8008ad0:	f018 fd88 	bl	80215e4 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << rebootEnum);
 8008ad4:	4b2d      	ldr	r3, [pc, #180]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2108      	movs	r1, #8
 8008ada:	4618      	mov	r0, r3
 8008adc:	f003 f97c 	bl	800bdd8 <osEventFlagsClear>
      if (sim7600_fullConfig())
 8008ae0:	f7ff feca 	bl	8008878 <sim7600_fullConfig>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00c      	beq.n	8008b04 <sim7600_fullConfigTask+0x11c>
      {
        //set event to invoke connect task open net and open socket tcp, udp
        osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8008aea:	4b26      	ldr	r3, [pc, #152]	; (8008b84 <sim7600_fullConfigTask+0x19c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2102      	movs	r1, #2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f003 f92d 	bl	800bd50 <osEventFlagsSet>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008af6:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <sim7600_fullConfigTask+0x19c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2101      	movs	r1, #1
 8008afc:	4618      	mov	r0, r3
 8008afe:	f003 f927 	bl	800bd50 <osEventFlagsSet>
 8008b02:	e795      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
        // osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
      }
      else
      { //error
        LOG_WRITE("sim7600_fullConfigTask error4\n");
 8008b04:	4828      	ldr	r0, [pc, #160]	; (8008ba8 <sim7600_fullConfigTask+0x1c0>)
 8008b06:	f018 fd6d 	bl	80215e4 <puts>
        //set bit simError in ConfigSimEventID to restart and re config
        osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008b0a:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2104      	movs	r1, #4
 8008b10:	4618      	mov	r0, r3
 8008b12:	f003 f91d 	bl	800bd50 <osEventFlagsSet>
 8008b16:	e78b      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
      }
    }
    else if (configSimFlag & (1 << callingEnum))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d012      	beq.n	8008b48 <sim7600_fullConfigTask+0x160>
    {
      LOG_WRITE("configSimFlag calling\n");
 8008b22:	4822      	ldr	r0, [pc, #136]	; (8008bac <sim7600_fullConfigTask+0x1c4>)
 8008b24:	f018 fd5e 	bl	80215e4 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << callingEnum);
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f003 f952 	bl	800bdd8 <osEventFlagsClear>
      //send AT+CHUP to end call
      sim7600_AT_notify_error("AT+CHUP", "OK", NULL, 500, 2);
 8008b34:	2302      	movs	r3, #2
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	491c      	ldr	r1, [pc, #112]	; (8008bb0 <sim7600_fullConfigTask+0x1c8>)
 8008b40:	481c      	ldr	r0, [pc, #112]	; (8008bb4 <sim7600_fullConfigTask+0x1cc>)
 8008b42:	f7ff fd67 	bl	8008614 <sim7600_AT_notify_error>
 8008b46:	e773      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
    //   //reconnect TCP, UDP
    //   osEventFlagsClear(ConfigSimEventID, 1 << IPerrorEnum);
    //   // osEventFlagsSet(ConnectSimEventID, 1U);
    //   osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
    // }
    else if (configSimFlag & (1 << smsEnum))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <sim7600_fullConfigTask+0x17e>
    {
      LOG_WRITE("configSimFlag sms\n");
 8008b52:	4819      	ldr	r0, [pc, #100]	; (8008bb8 <sim7600_fullConfigTask+0x1d0>)
 8008b54:	f018 fd46 	bl	80215e4 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << smsEnum);
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f003 f93a 	bl	800bdd8 <osEventFlagsClear>
 8008b64:	e764      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
      //   osEventFlagsSet(ConfigSimEventID, (1 << netErrorEnum));
      // }
    }
    else
    { //something wrong
      LOG_WRITE("configSimFlag sthElse\n");
 8008b66:	4815      	ldr	r0, [pc, #84]	; (8008bbc <sim7600_fullConfigTask+0x1d4>)
 8008b68:	f018 fd3c 	bl	80215e4 <puts>
      LOG_WRITE("sim7600_fullConfigTask error5\n");
 8008b6c:	4814      	ldr	r0, [pc, #80]	; (8008bc0 <sim7600_fullConfigTask+0x1d8>)
 8008b6e:	f018 fd39 	bl	80215e4 <puts>
      //set bit simError in ConfigSimEventID to restart and re config
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <sim7600_fullConfigTask+0x1a4>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2104      	movs	r1, #4
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f003 f8e9 	bl	800bd50 <osEventFlagsSet>
    configSimFlag = osEventFlagsWait(ConfigSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008b7e:	e757      	b.n	8008a30 <sim7600_fullConfigTask+0x48>
 8008b80:	08022fa0 	.word	0x08022fa0
 8008b84:	200057c0 	.word	0x200057c0
 8008b88:	08022fb0 	.word	0x08022fb0
 8008b8c:	200057bc 	.word	0x200057bc
 8008b90:	08022fd0 	.word	0x08022fd0
 8008b94:	08022fe4 	.word	0x08022fe4
 8008b98:	08022ffc 	.word	0x08022ffc
 8008b9c:	0802301c 	.word	0x0802301c
 8008ba0:	08023034 	.word	0x08023034
 8008ba4:	08023054 	.word	0x08023054
 8008ba8:	08023070 	.word	0x08023070
 8008bac:	08023090 	.word	0x08023090
 8008bb0:	08022f08 	.word	0x08022f08
 8008bb4:	080230a8 	.word	0x080230a8
 8008bb8:	080230b0 	.word	0x080230b0
 8008bbc:	080230c4 	.word	0x080230c4
 8008bc0:	080230dc 	.word	0x080230dc

08008bc4 <sim7600_connectTask>:
    }
  }
}

void sim7600_connectTask()
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af02      	add	r7, sp, #8
  LOG_WRITE("connectTask\n");
 8008bca:	48b3      	ldr	r0, [pc, #716]	; (8008e98 <sim7600_connectTask+0x2d4>)
 8008bcc:	f018 fd0a 	bl	80215e4 <puts>
  int connectSimFlag;
  for (;;)
  {
    // connectSimFlag = osThreadFlagsWait(0xFF, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
    connectSimFlag = osEventFlagsWait(ConnectSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008bd0:	4bb2      	ldr	r3, [pc, #712]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008bd2:	6818      	ldr	r0, [r3, #0]
 8008bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd8:	2202      	movs	r2, #2
 8008bda:	21ff      	movs	r1, #255	; 0xff
 8008bdc:	f003 f92e 	bl	800be3c <osEventFlagsWait>
 8008be0:	4603      	mov	r3, r0
 8008be2:	613b      	str	r3, [r7, #16]
    LOG_WRITE("connectSimFlag %d\n", connectSimFlag);
 8008be4:	6939      	ldr	r1, [r7, #16]
 8008be6:	48ae      	ldr	r0, [pc, #696]	; (8008ea0 <sim7600_connectTask+0x2dc>)
 8008be8:	f018 fc60 	bl	80214ac <iprintf>
    if (connectSimFlag < 0) //error 0xFFFFFFF...U
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da0c      	bge.n	8008c0c <sim7600_connectTask+0x48>
    {
      LOG_WRITE("connectSimFlag errorFlag\n");
 8008bf2:	48ac      	ldr	r0, [pc, #688]	; (8008ea4 <sim7600_connectTask+0x2e0>)
 8008bf4:	f018 fcf6 	bl	80215e4 <puts>
      LOG_WRITE("sim7600_connectTask error0\n");
 8008bf8:	48ab      	ldr	r0, [pc, #684]	; (8008ea8 <sim7600_connectTask+0x2e4>)
 8008bfa:	f018 fcf3 	bl	80215e4 <puts>
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8008bfe:	4bab      	ldr	r3, [pc, #684]	; (8008eac <sim7600_connectTask+0x2e8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2104      	movs	r1, #4
 8008c04:	4618      	mov	r0, r3
 8008c06:	f003 f8a3 	bl	800bd50 <osEventFlagsSet>
 8008c0a:	e7e1      	b.n	8008bd0 <sim7600_connectTask+0xc>
    }
    else if (connectSimFlag & (1 << netErrorEnum))
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d041      	beq.n	8008c9a <sim7600_connectTask+0xd6>
    {
      LOG_WRITE("connectSimFlag netError\n");
 8008c16:	48a6      	ldr	r0, [pc, #664]	; (8008eb0 <sim7600_connectTask+0x2ec>)
 8008c18:	f018 fce4 	bl	80215e4 <puts>
      osEventFlagsClear(ConnectSimEventID, 1 << netErrorEnum);
 8008c1c:	4b9f      	ldr	r3, [pc, #636]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2108      	movs	r1, #8
 8008c22:	4618      	mov	r0, r3
 8008c24:	f003 f8d8 	bl	800bdd8 <osEventFlagsClear>

      //release tcp/udp stack
      sim7600ConnectStatus = 0;
 8008c28:	4ba2      	ldr	r3, [pc, #648]	; (8008eb4 <sim7600_connectTask+0x2f0>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
      TCP_UDP_Stack_Release();
 8008c2e:	f001 fb1d 	bl	800a26c <TCP_UDP_Stack_Release>

      //close IP socket (tcp, udp)
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue; //tcp //+CIPCLOSE: 0,0
 8008c32:	2302      	movs	r3, #2
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	f242 7310 	movw	r3, #10000	; 0x2710
 8008c3a:	4a9f      	ldr	r2, [pc, #636]	; (8008eb8 <sim7600_connectTask+0x2f4>)
 8008c3c:	499f      	ldr	r1, [pc, #636]	; (8008ebc <sim7600_connectTask+0x2f8>)
 8008c3e:	48a0      	ldr	r0, [pc, #640]	; (8008ec0 <sim7600_connectTask+0x2fc>)
 8008c40:	f7ff fce8 	bl	8008614 <sim7600_AT_notify_error>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8119 	beq.w	8008e7e <sim7600_connectTask+0x2ba>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue; //udp //+CIPCLOSE: 1,0
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	f242 7310 	movw	r3, #10000	; 0x2710
 8008c54:	4a9b      	ldr	r2, [pc, #620]	; (8008ec4 <sim7600_connectTask+0x300>)
 8008c56:	4999      	ldr	r1, [pc, #612]	; (8008ebc <sim7600_connectTask+0x2f8>)
 8008c58:	489b      	ldr	r0, [pc, #620]	; (8008ec8 <sim7600_connectTask+0x304>)
 8008c5a:	f7ff fcdb 	bl	8008614 <sim7600_AT_notify_error>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 810e 	beq.w	8008e82 <sim7600_connectTask+0x2be>
      //close net
      if (!sim7600_AT_notify_error("AT+NETCLOSE\r\n", "OK", "ERROR", 10000, 2)) continue; //+NETCLOSE: 0
 8008c66:	2302      	movs	r3, #2
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8008c6e:	4a97      	ldr	r2, [pc, #604]	; (8008ecc <sim7600_connectTask+0x308>)
 8008c70:	4992      	ldr	r1, [pc, #584]	; (8008ebc <sim7600_connectTask+0x2f8>)
 8008c72:	4897      	ldr	r0, [pc, #604]	; (8008ed0 <sim7600_connectTask+0x30c>)
 8008c74:	f7ff fcce 	bl	8008614 <sim7600_AT_notify_error>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8103 	beq.w	8008e86 <sim7600_connectTask+0x2c2>

      //set flag to open net and tcp/udp again
      osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8008c80:	4b86      	ldr	r3, [pc, #536]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2102      	movs	r1, #2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f003 f862 	bl	800bd50 <osEventFlagsSet>
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008c8c:	4b83      	ldr	r3, [pc, #524]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2101      	movs	r1, #1
 8008c92:	4618      	mov	r0, r3
 8008c94:	f003 f85c 	bl	800bd50 <osEventFlagsSet>
 8008c98:	e79a      	b.n	8008bd0 <sim7600_connectTask+0xc>
    }
    else if (connectSimFlag & (1 << openNetEnum))
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d014      	beq.n	8008cce <sim7600_connectTask+0x10a>
    {
      LOG_WRITE("connectSimFlag openNet\n");
 8008ca4:	488b      	ldr	r0, [pc, #556]	; (8008ed4 <sim7600_connectTask+0x310>)
 8008ca6:	f018 fc9d 	bl	80215e4 <puts>
      osEventFlagsClear(ConnectSimEventID, 1 << openNetEnum);
 8008caa:	4b7c      	ldr	r3, [pc, #496]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2102      	movs	r1, #2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f003 f891 	bl	800bdd8 <osEventFlagsClear>

      //open network
      if (!sim7600_AT_notify_error("AT+NETOPEN\r\n", "OK", NULL, 10000, 2)) continue; //+NETOPEN: 0
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	f242 7310 	movw	r3, #10000	; 0x2710
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	497e      	ldr	r1, [pc, #504]	; (8008ebc <sim7600_connectTask+0x2f8>)
 8008cc2:	4885      	ldr	r0, [pc, #532]	; (8008ed8 <sim7600_connectTask+0x314>)
 8008cc4:	f7ff fca6 	bl	8008614 <sim7600_AT_notify_error>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	e780      	b.n	8008bd0 <sim7600_connectTask+0xc>
    }
    else if (connectSimFlag & (1 << ipCloseEnum))
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d033      	beq.n	8008d40 <sim7600_connectTask+0x17c>
    {
      LOG_WRITE("connectSimFlag ipClose\n");
 8008cd8:	4880      	ldr	r0, [pc, #512]	; (8008edc <sim7600_connectTask+0x318>)
 8008cda:	f018 fc83 	bl	80215e4 <puts>
      sim7600DisconnectTime++;
 8008cde:	4b80      	ldr	r3, [pc, #512]	; (8008ee0 <sim7600_connectTask+0x31c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	4a7e      	ldr	r2, [pc, #504]	; (8008ee0 <sim7600_connectTask+0x31c>)
 8008ce6:	6013      	str	r3, [r2, #0]

      osEventFlagsClear(ConnectSimEventID, 1 << ipCloseEnum);
 8008ce8:	4b6c      	ldr	r3, [pc, #432]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2110      	movs	r1, #16
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f003 f872 	bl	800bdd8 <osEventFlagsClear>

      //release tcp/udp stack
      sim7600ConnectStatus = 0;
 8008cf4:	4b6f      	ldr	r3, [pc, #444]	; (8008eb4 <sim7600_connectTask+0x2f0>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	601a      	str	r2, [r3, #0]
      TCP_UDP_Stack_Release();
 8008cfa:	f001 fab7 	bl	800a26c <TCP_UDP_Stack_Release>

      //maybe tcp/udp, one of them is closed, so to make sure before open tcp/udp connect, release all
      //close IP socket (tcp, udp)
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	f242 7310 	movw	r3, #10000	; 0x2710
 8008d06:	4a6c      	ldr	r2, [pc, #432]	; (8008eb8 <sim7600_connectTask+0x2f4>)
 8008d08:	496c      	ldr	r1, [pc, #432]	; (8008ebc <sim7600_connectTask+0x2f8>)
 8008d0a:	486d      	ldr	r0, [pc, #436]	; (8008ec0 <sim7600_connectTask+0x2fc>)
 8008d0c:	f7ff fc82 	bl	8008614 <sim7600_AT_notify_error>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80b9 	beq.w	8008e8a <sim7600_connectTask+0x2c6>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8008d20:	4a68      	ldr	r2, [pc, #416]	; (8008ec4 <sim7600_connectTask+0x300>)
 8008d22:	4966      	ldr	r1, [pc, #408]	; (8008ebc <sim7600_connectTask+0x2f8>)
 8008d24:	4868      	ldr	r0, [pc, #416]	; (8008ec8 <sim7600_connectTask+0x304>)
 8008d26:	f7ff fc75 	bl	8008614 <sim7600_AT_notify_error>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80ae 	beq.w	8008e8e <sim7600_connectTask+0x2ca>

      //then set openCon flag to re-open tcp/udp connect
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008d32:	4b5a      	ldr	r3, [pc, #360]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2101      	movs	r1, #1
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f003 f809 	bl	800bd50 <osEventFlagsSet>
 8008d3e:	e747      	b.n	8008bd0 <sim7600_connectTask+0xc>
    }
    else if ((connectSimFlag & (1 << openConEnum)) && sim7600ConnectStatus == 0)
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d05f      	beq.n	8008e0a <sim7600_connectTask+0x246>
 8008d4a:	4b5a      	ldr	r3, [pc, #360]	; (8008eb4 <sim7600_connectTask+0x2f0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d15b      	bne.n	8008e0a <sim7600_connectTask+0x246>
    {
      LOG_WRITE("connectSimFlag openCon\n");
 8008d52:	4864      	ldr	r0, [pc, #400]	; (8008ee4 <sim7600_connectTask+0x320>)
 8008d54:	f018 fc46 	bl	80215e4 <puts>
      sim7600ConnectTime++;
 8008d58:	4b63      	ldr	r3, [pc, #396]	; (8008ee8 <sim7600_connectTask+0x324>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	4a62      	ldr	r2, [pc, #392]	; (8008ee8 <sim7600_connectTask+0x324>)
 8008d60:	6013      	str	r3, [r2, #0]

      osEventFlagsClear(ConnectSimEventID, 1 << openConEnum);
 8008d62:	4b4e      	ldr	r3, [pc, #312]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2101      	movs	r1, #1
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f003 f835 	bl	800bdd8 <osEventFlagsClear>
      //check connectToHostCount, if > connectToHostCountMax then change serverDomain, serverport
      //open tcp connect
      char *sim7600_cmd_buff;
      if(serverDomain != NULL)
      {
        int tmpLen = strlen(serverDomain);
 8008d6e:	485f      	ldr	r0, [pc, #380]	; (8008eec <sim7600_connectTask+0x328>)
 8008d70:	f7f7 fa2e 	bl	80001d0 <strlen>
 8008d74:	4603      	mov	r3, r0
 8008d76:	60fb      	str	r3, [r7, #12]
        if(tmpLen > 0)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dd06      	ble.n	8008d8c <sim7600_connectTask+0x1c8>
          sim7600_cmd_buff = (char*)malloc(tmpLen + 35);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3323      	adds	r3, #35	; 0x23
 8008d82:	4618      	mov	r0, r3
 8008d84:	f018 fa8a 	bl	802129c <malloc>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	617b      	str	r3, [r7, #20]
      }
      if(sim7600_cmd_buff == NULL) //can't allocate mem in heap
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d109      	bne.n	8008da6 <sim7600_connectTask+0x1e2>
      {
        LOG_WRITE("sim7600_connectTask error1\n");
 8008d92:	4857      	ldr	r0, [pc, #348]	; (8008ef0 <sim7600_connectTask+0x32c>)
 8008d94:	f018 fc26 	bl	80215e4 <puts>
        osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart
 8008d98:	4b44      	ldr	r3, [pc, #272]	; (8008eac <sim7600_connectTask+0x2e8>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f002 ffd6 	bl	800bd50 <osEventFlagsSet>
        continue;
 8008da4:	e0bb      	b.n	8008f1e <sim7600_connectTask+0x35a>
      }
      sprintf(sim7600_cmd_buff, "AT+CIPOPEN=0,\"TCP\",\"%s\",%d\r\n", serverDomain, serverPort);
 8008da6:	4b53      	ldr	r3, [pc, #332]	; (8008ef4 <sim7600_connectTask+0x330>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a50      	ldr	r2, [pc, #320]	; (8008eec <sim7600_connectTask+0x328>)
 8008dac:	4952      	ldr	r1, [pc, #328]	; (8008ef8 <sim7600_connectTask+0x334>)
 8008dae:	6978      	ldr	r0, [r7, #20]
 8008db0:	f018 fd08 	bl	80217c4 <siprintf>
      int tmpResTCP = sim7600_AT_notify_error(sim7600_cmd_buff, "+CIPOPEN: 0,0", "+CIPOPEN: 0", 10000, 2);
 8008db4:	2302      	movs	r3, #2
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	f242 7310 	movw	r3, #10000	; 0x2710
 8008dbc:	4a4f      	ldr	r2, [pc, #316]	; (8008efc <sim7600_connectTask+0x338>)
 8008dbe:	4950      	ldr	r1, [pc, #320]	; (8008f00 <sim7600_connectTask+0x33c>)
 8008dc0:	6978      	ldr	r0, [r7, #20]
 8008dc2:	f7ff fc27 	bl	8008614 <sim7600_AT_notify_error>
 8008dc6:	60b8      	str	r0, [r7, #8]
      free(sim7600_cmd_buff);
 8008dc8:	6978      	ldr	r0, [r7, #20]
 8008dca:	f018 fa6f 	bl	80212ac <free>
      if (tmpResTCP == 1) //successful open
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d10c      	bne.n	8008dee <sim7600_connectTask+0x22a>
      {
        //open tcp success
        sim7600ConnectStatus = 1;
 8008dd4:	4b37      	ldr	r3, [pc, #220]	; (8008eb4 <sim7600_connectTask+0x2f0>)
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
        //init tcp udp stack to start TLS handshake
        TCP_UDP_Stack_Init(ConnectSimEventID, doneTLSEnum, ipCloseEnum, false);
 8008dda:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	2300      	movs	r3, #0
 8008de0:	2204      	movs	r2, #4
 8008de2:	2102      	movs	r1, #2
 8008de4:	f001 f9bc 	bl	800a160 <TCP_UDP_Stack_Init>
        TCP_Request(); //request rsa pub key
 8008de8:	f001 fafe 	bl	800a3e8 <TCP_Request>
    {
 8008dec:	e051      	b.n	8008e92 <sim7600_connectTask+0x2ce>
      }
      else if(tmpResTCP == 2) //open fail, re-connect
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d14e      	bne.n	8008e92 <sim7600_connectTask+0x2ce>
      {
        osDelay(RECONNECT_INTERVAL);
 8008df4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008df8:	f002 fe59 	bl	800baae <osDelay>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008dfc:	4b27      	ldr	r3, [pc, #156]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2101      	movs	r1, #1
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 ffa4 	bl	800bd50 <osEventFlagsSet>
    {
 8008e08:	e043      	b.n	8008e92 <sim7600_connectTask+0x2ce>
      }
    }
    else if ((connectSimFlag & (1 << doneTLSEnum)) && sim7600ConnectStatus == 1)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d027      	beq.n	8008e64 <sim7600_connectTask+0x2a0>
 8008e14:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <sim7600_connectTask+0x2f0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d123      	bne.n	8008e64 <sim7600_connectTask+0x2a0>
    {
      LOG_WRITE("connectSimFlag doneTLS\n");
 8008e1c:	4839      	ldr	r0, [pc, #228]	; (8008f04 <sim7600_connectTask+0x340>)
 8008e1e:	f018 fbe1 	bl	80215e4 <puts>
      osEventFlagsClear(ConnectSimEventID, 1 << doneTLSEnum);
 8008e22:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2104      	movs	r1, #4
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f002 ffd5 	bl	800bdd8 <osEventFlagsClear>

      //open UDP connect
      int tmpResUDP = sim7600_AT_notify_error("AT+CIPOPEN=1,\"UDP\",,,8080\r\n", "+CIPOPEN: 1,0", "+CIPOPEN: 1", 10000, 2);
 8008e2e:	2302      	movs	r3, #2
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e36:	4a34      	ldr	r2, [pc, #208]	; (8008f08 <sim7600_connectTask+0x344>)
 8008e38:	4934      	ldr	r1, [pc, #208]	; (8008f0c <sim7600_connectTask+0x348>)
 8008e3a:	4835      	ldr	r0, [pc, #212]	; (8008f10 <sim7600_connectTask+0x34c>)
 8008e3c:	f7ff fbea 	bl	8008614 <sim7600_AT_notify_error>
 8008e40:	6078      	str	r0, [r7, #4]
      if(tmpResUDP == 1) //successful
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d103      	bne.n	8008e50 <sim7600_connectTask+0x28c>
      {
        sim7600ConnectStatus = 2;
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <sim7600_connectTask+0x2f0>)
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	601a      	str	r2, [r3, #0]
    {
 8008e4e:	e065      	b.n	8008f1c <sim7600_connectTask+0x358>
        //successful, reset connectToHostCount, change Domain2 <-> Domain1 if neccessary
      }
      else if(tmpResUDP == 2) //open fail
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d162      	bne.n	8008f1c <sim7600_connectTask+0x358>
      {
        osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum);
 8008e56:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <sim7600_connectTask+0x2d8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2110      	movs	r1, #16
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 ff77 	bl	800bd50 <osEventFlagsSet>
    {
 8008e62:	e05b      	b.n	8008f1c <sim7600_connectTask+0x358>
    //     osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //re-CONNECT
    //   }
    // }
    else
    { //something wrong
      LOG_WRITE("connectSimFlag sthElse\n");
 8008e64:	482b      	ldr	r0, [pc, #172]	; (8008f14 <sim7600_connectTask+0x350>)
 8008e66:	f018 fbbd 	bl	80215e4 <puts>
      LOG_WRITE("sim7600_connectTask error2\n");
 8008e6a:	482b      	ldr	r0, [pc, #172]	; (8008f18 <sim7600_connectTask+0x354>)
 8008e6c:	f018 fbba 	bl	80215e4 <puts>
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart
 8008e70:	4b0e      	ldr	r3, [pc, #56]	; (8008eac <sim7600_connectTask+0x2e8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2104      	movs	r1, #4
 8008e76:	4618      	mov	r0, r3
 8008e78:	f002 ff6a 	bl	800bd50 <osEventFlagsSet>
 8008e7c:	e6a8      	b.n	8008bd0 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue; //tcp //+CIPCLOSE: 0,0
 8008e7e:	bf00      	nop
 8008e80:	e6a6      	b.n	8008bd0 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue; //udp //+CIPCLOSE: 1,0
 8008e82:	bf00      	nop
 8008e84:	e6a4      	b.n	8008bd0 <sim7600_connectTask+0xc>
      if (!sim7600_AT_notify_error("AT+NETCLOSE\r\n", "OK", "ERROR", 10000, 2)) continue; //+NETCLOSE: 0
 8008e86:	bf00      	nop
 8008e88:	e6a2      	b.n	8008bd0 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue;
 8008e8a:	bf00      	nop
 8008e8c:	e6a0      	b.n	8008bd0 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue;
 8008e8e:	bf00      	nop
 8008e90:	e69e      	b.n	8008bd0 <sim7600_connectTask+0xc>
    {
 8008e92:	bf00      	nop
 8008e94:	e69c      	b.n	8008bd0 <sim7600_connectTask+0xc>
 8008e96:	bf00      	nop
 8008e98:	080230fc 	.word	0x080230fc
 8008e9c:	200057c0 	.word	0x200057c0
 8008ea0:	08023108 	.word	0x08023108
 8008ea4:	0802311c 	.word	0x0802311c
 8008ea8:	08023138 	.word	0x08023138
 8008eac:	200057bc 	.word	0x200057bc
 8008eb0:	08023154 	.word	0x08023154
 8008eb4:	20000634 	.word	0x20000634
 8008eb8:	0802316c 	.word	0x0802316c
 8008ebc:	08022f08 	.word	0x08022f08
 8008ec0:	0802317c 	.word	0x0802317c
 8008ec4:	0802318c 	.word	0x0802318c
 8008ec8:	0802319c 	.word	0x0802319c
 8008ecc:	080231ac 	.word	0x080231ac
 8008ed0:	080231b4 	.word	0x080231b4
 8008ed4:	080231c4 	.word	0x080231c4
 8008ed8:	080231dc 	.word	0x080231dc
 8008edc:	080231ec 	.word	0x080231ec
 8008ee0:	2000063c 	.word	0x2000063c
 8008ee4:	08023204 	.word	0x08023204
 8008ee8:	20000638 	.word	0x20000638
 8008eec:	20000248 	.word	0x20000248
 8008ef0:	0802321c 	.word	0x0802321c
 8008ef4:	200002ac 	.word	0x200002ac
 8008ef8:	08023238 	.word	0x08023238
 8008efc:	08023258 	.word	0x08023258
 8008f00:	08023264 	.word	0x08023264
 8008f04:	08023274 	.word	0x08023274
 8008f08:	0802328c 	.word	0x0802328c
 8008f0c:	08023298 	.word	0x08023298
 8008f10:	080232a8 	.word	0x080232a8
 8008f14:	080232c4 	.word	0x080232c4
 8008f18:	080232dc 	.word	0x080232dc
    {
 8008f1c:	bf00      	nop
    connectSimFlag = osEventFlagsWait(ConnectSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008f1e:	e657      	b.n	8008bd0 <sim7600_connectTask+0xc>

08008f20 <sim7600_sendTask>:
{
	return true;
}

void sim7600_sendTask()
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af00      	add	r7, sp, #0
  LOG_WRITE("sendTask\n");
 8008f26:	481f      	ldr	r0, [pc, #124]	; (8008fa4 <sim7600_sendTask+0x84>)
 8008f28:	f018 fb5c 	bl	80215e4 <puts>
  sendSimPack sendMsgObj;
  osStatus_t sendMsgStt;
  for (;;)
  {
    sendMsgStt = osMessageQueueGet(SendSimQueueID, &sendMsgObj, NULL, osWaitForever); //wait until has msg
 8008f2c:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <sim7600_sendTask+0x88>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	1d39      	adds	r1, r7, #4
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295
 8008f36:	2200      	movs	r2, #0
 8008f38:	f003 fb2c 	bl	800c594 <osMessageQueueGet>
 8008f3c:	6278      	str	r0, [r7, #36]	; 0x24
    LOG_WRITE("sendMsgStt %d\n", sendMsgStt);
 8008f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f40:	481a      	ldr	r0, [pc, #104]	; (8008fac <sim7600_sendTask+0x8c>)
 8008f42:	f018 fab3 	bl	80214ac <iprintf>
    if (sendMsgStt == osOK && bSim7600IsRunning)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1ef      	bne.n	8008f2c <sim7600_sendTask+0xc>
 8008f4c:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <sim7600_sendTask+0x90>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d0eb      	beq.n	8008f2c <sim7600_sendTask+0xc>
    {
      LOG_WRITE("sendMsgType %d\n", sendMsgObj.type);
 8008f54:	7a3b      	ldrb	r3, [r7, #8]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4816      	ldr	r0, [pc, #88]	; (8008fb4 <sim7600_sendTask+0x94>)
 8008f5a:	f018 faa7 	bl	80214ac <iprintf>
      //check send msg type
      if (sendMsgObj.type == 0)
 8008f5e:	7a3b      	ldrb	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d116      	bne.n	8008f92 <sim7600_sendTask+0x72>
      { //normal cmd
        int tmpRes = sim7600_send_cmd(sendMsgObj.ptr, sendMsgObj.res1, sendMsgObj.res2, sendMsgObj.timeout);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	6979      	ldr	r1, [r7, #20]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	f7ff fa80 	bl	8008470 <sim7600_send_cmd>
 8008f70:	6238      	str	r0, [r7, #32]
        if (tmpRes == 1 || tmpRes == 2)
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d002      	beq.n	8008f7e <sim7600_sendTask+0x5e>
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d1d6      	bne.n	8008f2c <sim7600_sendTask+0xc>
        {
          if (sendMsgObj.EventID != NULL) //can't make hard error
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0d3      	beq.n	8008f2c <sim7600_sendTask+0xc>
            osEventFlagsSet(sendMsgObj.EventID, tmpRes);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a3a      	ldr	r2, [r7, #32]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 fee0 	bl	800bd50 <osEventFlagsSet>
 8008f90:	e7cc      	b.n	8008f2c <sim7600_sendTask+0xc>
        }
      }
      else
      { //send TCP packet
        sim7600_send_packet_ip(sendMsgObj.type, sendMsgObj.ptr, sendMsgObj.len);
 8008f92:	7a3b      	ldrb	r3, [r7, #8]
 8008f94:	4618      	mov	r0, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f7ff fb64 	bl	8008668 <sim7600_send_packet_ip>
    sendMsgStt = osMessageQueueGet(SendSimQueueID, &sendMsgObj, NULL, osWaitForever); //wait until has msg
 8008fa0:	e7c4      	b.n	8008f2c <sim7600_sendTask+0xc>
 8008fa2:	bf00      	nop
 8008fa4:	080232f8 	.word	0x080232f8
 8008fa8:	200057c8 	.word	0x200057c8
 8008fac:	08023304 	.word	0x08023304
 8008fb0:	20000640 	.word	0x20000640
 8008fb4:	08023314 	.word	0x08023314

08008fb8 <sim7600_recvTask>:
    }
  }
}

void sim7600_recvTask()
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  LOG_WRITE("recvTask\n");
 8008fbc:	4806      	ldr	r0, [pc, #24]	; (8008fd8 <sim7600_recvTask+0x20>)
 8008fbe:	f018 fb11 	bl	80215e4 <puts>
  for (;;)
  {
    osDelay(RECV_SIM_TASK_INTERVAL);
 8008fc2:	2005      	movs	r0, #5
 8008fc4:	f002 fd73 	bl	800baae <osDelay>
    if(bSim7600IsRunning)
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <sim7600_recvTask+0x24>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0f8      	beq.n	8008fc2 <sim7600_recvTask+0xa>
      sim7600_usart_rx_check();
 8008fd0:	f000 f806 	bl	8008fe0 <sim7600_usart_rx_check>
    osDelay(RECV_SIM_TASK_INTERVAL);
 8008fd4:	e7f5      	b.n	8008fc2 <sim7600_recvTask+0xa>
 8008fd6:	bf00      	nop
 8008fd8:	08023324 	.word	0x08023324
 8008fdc:	20000640 	.word	0x20000640

08008fe0 <sim7600_usart_rx_check>:
//global var
int old_pos_dma = 0;
int new_pos_dma = 0;

void sim7600_usart_rx_check()
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
  SIM7600_PAUSE_RX();
 8008fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008fea:	485c      	ldr	r0, [pc, #368]	; (800915c <sim7600_usart_rx_check+0x17c>)
 8008fec:	f7fe ffb2 	bl	8007f54 <LL_GPIO_SetOutputPin>
  
  /* Calculate current position in buffer */
  new_pos_dma = sim_dma_buff_size - (int)(LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2) & 0xFFFF);
 8008ff0:	4b5b      	ldr	r3, [pc, #364]	; (8009160 <sim7600_usart_rx_check+0x180>)
 8008ff2:	681c      	ldr	r4, [r3, #0]
 8008ff4:	2102      	movs	r1, #2
 8008ff6:	485b      	ldr	r0, [pc, #364]	; (8009164 <sim7600_usart_rx_check+0x184>)
 8008ff8:	f7fe fcb4 	bl	8007964 <LL_DMA_GetDataLength>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	1ae3      	subs	r3, r4, r3
 8009002:	4a59      	ldr	r2, [pc, #356]	; (8009168 <sim7600_usart_rx_check+0x188>)
 8009004:	6013      	str	r3, [r2, #0]
  if(new_pos_dma < 0)
 8009006:	4b58      	ldr	r3, [pc, #352]	; (8009168 <sim7600_usart_rx_check+0x188>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da0e      	bge.n	800902c <sim7600_usart_rx_check+0x4c>
  {
    LOG_WRITE("new_pos_dma < 0\n");
 800900e:	4857      	ldr	r0, [pc, #348]	; (800916c <sim7600_usart_rx_check+0x18c>)
 8009010:	f018 fae8 	bl	80215e4 <puts>
    //something wrong
    SIM7600_RESUME_RX();
 8009014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009018:	4850      	ldr	r0, [pc, #320]	; (800915c <sim7600_usart_rx_check+0x17c>)
 800901a:	f7fe ffa9 	bl	8007f70 <LL_GPIO_ResetOutputPin>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 800901e:	4b54      	ldr	r3, [pc, #336]	; (8009170 <sim7600_usart_rx_check+0x190>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2104      	movs	r1, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f002 fe93 	bl	800bd50 <osEventFlagsSet>
    return;
 800902a:	e093      	b.n	8009154 <sim7600_usart_rx_check+0x174>
  }
  //0 1 2 3 4 5
  if (new_pos_dma != old_pos_dma)
 800902c:	4b4e      	ldr	r3, [pc, #312]	; (8009168 <sim7600_usart_rx_check+0x188>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	4b50      	ldr	r3, [pc, #320]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	f000 8088 	beq.w	800914a <sim7600_usart_rx_check+0x16a>
  { /* Check change in received data */
    LOG_WRITE("new_pos_dma %d, oldPos %d\n", new_pos_dma, old_pos_dma);
 800903a:	4b4b      	ldr	r3, [pc, #300]	; (8009168 <sim7600_usart_rx_check+0x188>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a4d      	ldr	r2, [pc, #308]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009040:	6812      	ldr	r2, [r2, #0]
 8009042:	4619      	mov	r1, r3
 8009044:	484c      	ldr	r0, [pc, #304]	; (8009178 <sim7600_usart_rx_check+0x198>)
 8009046:	f018 fa31 	bl	80214ac <iprintf>
    if (new_pos_dma > old_pos_dma)
 800904a:	4b47      	ldr	r3, [pc, #284]	; (8009168 <sim7600_usart_rx_check+0x188>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b49      	ldr	r3, [pc, #292]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	dd12      	ble.n	800907c <sim7600_usart_rx_check+0x9c>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos_dma], new_pos_dma - old_pos_dma);
      sim_buff_length = new_pos_dma - old_pos_dma;
 8009056:	4b44      	ldr	r3, [pc, #272]	; (8009168 <sim7600_usart_rx_check+0x188>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b46      	ldr	r3, [pc, #280]	; (8009174 <sim7600_usart_rx_check+0x194>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	4a46      	ldr	r2, [pc, #280]	; (800917c <sim7600_usart_rx_check+0x19c>)
 8009062:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buff + old_pos_dma, sim_buff_length);
 8009064:	4b43      	ldr	r3, [pc, #268]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	4b45      	ldr	r3, [pc, #276]	; (8009180 <sim7600_usart_rx_check+0x1a0>)
 800906c:	4413      	add	r3, r2
 800906e:	4a43      	ldr	r2, [pc, #268]	; (800917c <sim7600_usart_rx_check+0x19c>)
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	4619      	mov	r1, r3
 8009074:	4843      	ldr	r0, [pc, #268]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 8009076:	f018 f92f 	bl	80212d8 <memcpy>
 800907a:	e027      	b.n	80090cc <sim7600_usart_rx_check+0xec>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buff_size - old_pos_dma; //0 1 2 3 4
 800907c:	4b38      	ldr	r3, [pc, #224]	; (8009160 <sim7600_usart_rx_check+0x180>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	4b3c      	ldr	r3, [pc, #240]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	4a3d      	ldr	r2, [pc, #244]	; (800917c <sim7600_usart_rx_check+0x19c>)
 8009088:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buff + old_pos_dma, sim_buff_length);
 800908a:	4b3a      	ldr	r3, [pc, #232]	; (8009174 <sim7600_usart_rx_check+0x194>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	4b3b      	ldr	r3, [pc, #236]	; (8009180 <sim7600_usart_rx_check+0x1a0>)
 8009092:	4413      	add	r3, r2
 8009094:	4a39      	ldr	r2, [pc, #228]	; (800917c <sim7600_usart_rx_check+0x19c>)
 8009096:	6812      	ldr	r2, [r2, #0]
 8009098:	4619      	mov	r1, r3
 800909a:	483a      	ldr	r0, [pc, #232]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 800909c:	f018 f91c 	bl	80212d8 <memcpy>
      /* Check and continue with beginning of buffer */
      if (new_pos_dma > 0)
 80090a0:	4b31      	ldr	r3, [pc, #196]	; (8009168 <sim7600_usart_rx_check+0x188>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd11      	ble.n	80090cc <sim7600_usart_rx_check+0xec>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], new_pos_dma);
        memcpy(sim_buff + sim_buff_length, sim_dma_buff, new_pos_dma);
 80090a8:	4b34      	ldr	r3, [pc, #208]	; (800917c <sim7600_usart_rx_check+0x19c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	4b35      	ldr	r3, [pc, #212]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 80090b0:	4413      	add	r3, r2
 80090b2:	4a2d      	ldr	r2, [pc, #180]	; (8009168 <sim7600_usart_rx_check+0x188>)
 80090b4:	6812      	ldr	r2, [r2, #0]
 80090b6:	4932      	ldr	r1, [pc, #200]	; (8009180 <sim7600_usart_rx_check+0x1a0>)
 80090b8:	4618      	mov	r0, r3
 80090ba:	f018 f90d 	bl	80212d8 <memcpy>
        sim_buff_length += new_pos_dma;
 80090be:	4b2f      	ldr	r3, [pc, #188]	; (800917c <sim7600_usart_rx_check+0x19c>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	4b29      	ldr	r3, [pc, #164]	; (8009168 <sim7600_usart_rx_check+0x188>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4413      	add	r3, r2
 80090c8:	4a2c      	ldr	r2, [pc, #176]	; (800917c <sim7600_usart_rx_check+0x19c>)
 80090ca:	6013      	str	r3, [r2, #0]
      }
    }

    //debug /////////////////////////////////////
    uint8_t tmp = sim_buff[10]; sim_buff[10] = 0;
 80090cc:	4b2d      	ldr	r3, [pc, #180]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 80090ce:	7a9b      	ldrb	r3, [r3, #10]
 80090d0:	71fb      	strb	r3, [r7, #7]
 80090d2:	4b2c      	ldr	r3, [pc, #176]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	729a      	strb	r2, [r3, #10]
    LOG_WRITE("simbuff %s\n", sim_buff);
 80090d8:	492a      	ldr	r1, [pc, #168]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 80090da:	482b      	ldr	r0, [pc, #172]	; (8009188 <sim7600_usart_rx_check+0x1a8>)
 80090dc:	f018 f9e6 	bl	80214ac <iprintf>
    sim_buff[10] = tmp;
 80090e0:	4a28      	ldr	r2, [pc, #160]	; (8009184 <sim7600_usart_rx_check+0x1a4>)
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	7293      	strb	r3, [r2, #10]
    //////////////////////////////////////////////

    int returnTmp = sim7600_handle_received_data();
 80090e6:	f000 f90b 	bl	8009300 <sim7600_handle_received_data>
 80090ea:	6038      	str	r0, [r7, #0]
    SIM7600_RESUME_RX();
 80090ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80090f0:	481a      	ldr	r0, [pc, #104]	; (800915c <sim7600_usart_rx_check+0x17c>)
 80090f2:	f7fe ff3d 	bl	8007f70 <LL_GPIO_ResetOutputPin>
    LOG_WRITE("returnTmp %d\n", returnTmp);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	4824      	ldr	r0, [pc, #144]	; (800918c <sim7600_usart_rx_check+0x1ac>)
 80090fa:	f018 f9d7 	bl	80214ac <iprintf>
    if (returnTmp < 0) //something wrong
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	da09      	bge.n	8009118 <sim7600_usart_rx_check+0x138>
    {
      LOG_WRITE("returnTmp < 0\n");
 8009104:	4822      	ldr	r0, [pc, #136]	; (8009190 <sim7600_usart_rx_check+0x1b0>)
 8009106:	f018 fa6d 	bl	80215e4 <puts>
      //something wrong
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 800910a:	4b19      	ldr	r3, [pc, #100]	; (8009170 <sim7600_usart_rx_check+0x190>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2104      	movs	r1, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f002 fe1d 	bl	800bd50 <osEventFlagsSet>
      return;
 8009116:	e01d      	b.n	8009154 <sim7600_usart_rx_check+0x174>
    }

    //debug //////////////////////////////////////
    savePosDma(old_pos_dma, new_pos_dma, returnTmp);
 8009118:	4b16      	ldr	r3, [pc, #88]	; (8009174 <sim7600_usart_rx_check+0x194>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a12      	ldr	r2, [pc, #72]	; (8009168 <sim7600_usart_rx_check+0x188>)
 800911e:	6811      	ldr	r1, [r2, #0]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f7fd fa82 	bl	800662c <savePosDma>
    //////////////////////////////////////////////

    old_pos_dma += returnTmp;
 8009128:	4b12      	ldr	r3, [pc, #72]	; (8009174 <sim7600_usart_rx_check+0x194>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	4413      	add	r3, r2
 8009130:	4a10      	ldr	r2, [pc, #64]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009132:	6013      	str	r3, [r2, #0]
    old_pos_dma %= sim_dma_buff_size; // ~ if(old_pos_dma >= sim_dma_buff_size) old_pos_dma -= sim_dma_buff_size;
 8009134:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a09      	ldr	r2, [pc, #36]	; (8009160 <sim7600_usart_rx_check+0x180>)
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009140:	fb02 f201 	mul.w	r2, r2, r1
 8009144:	1a9b      	subs	r3, r3, r2
 8009146:	4a0b      	ldr	r2, [pc, #44]	; (8009174 <sim7600_usart_rx_check+0x194>)
 8009148:	6013      	str	r3, [r2, #0]
  }

  SIM7600_RESUME_RX();
 800914a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800914e:	4803      	ldr	r0, [pc, #12]	; (800915c <sim7600_usart_rx_check+0x17c>)
 8009150:	f7fe ff0e 	bl	8007f70 <LL_GPIO_ResetOutputPin>
}
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	bd90      	pop	{r4, r7, pc}
 800915a:	bf00      	nop
 800915c:	40020000 	.word	0x40020000
 8009160:	20006404 	.word	0x20006404
 8009164:	40026400 	.word	0x40026400
 8009168:	20000648 	.word	0x20000648
 800916c:	08023330 	.word	0x08023330
 8009170:	200057bc 	.word	0x200057bc
 8009174:	20000644 	.word	0x20000644
 8009178:	08023340 	.word	0x08023340
 800917c:	20006410 	.word	0x20006410
 8009180:	20009eb0 	.word	0x20009eb0
 8009184:	20006414 	.word	0x20006414
 8009188:	0802335c 	.word	0x0802335c
 800918c:	08023368 	.word	0x08023368
 8009190:	08023378 	.word	0x08023378

08009194 <check_normal_response>:

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index
//__STATIC_INLINE  ~ macro
int check_normal_response(uint8_t *posOfSubStr, const char *response, int *_sim_buff_index) //macro
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  LOG_WRITE("chkRes\n");
 80091a0:	4808      	ldr	r0, [pc, #32]	; (80091c4 <check_normal_response+0x30>)
 80091a2:	f018 fa1f 	bl	80215e4 <puts>
  //simple because all data received is string
  *_sim_buff_index = posOfSubStr + strlen(response) - sim_buff; // + 2 for "\r\n"
 80091a6:	68b8      	ldr	r0, [r7, #8]
 80091a8:	f7f7 f812 	bl	80001d0 <strlen>
 80091ac:	4602      	mov	r2, r0
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4413      	add	r3, r2
 80091b2:	4a05      	ldr	r2, [pc, #20]	; (80091c8 <check_normal_response+0x34>)
 80091b4:	1a9a      	subs	r2, r3, r2
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	601a      	str	r2, [r3, #0]
  return 0;
 80091ba:	2300      	movs	r3, #0
    //return _sim_buff_index; don't have enough data
  {
    LOG_WRITE("chkIp 2\n");
    return 2;
  }
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	08023388 	.word	0x08023388
 80091c8:	20006414 	.word	0x20006414

080091cc <check_normal_ip_packet>:

//return 0 ~ success + continue, 1~ no success (error),2 ~ return sim_buff_index (don't have enough data)
int check_normal_ip_packet(uint8_t *posOfSubStrSave, const char *response, int *_sim_buff_index, uint8_t **outputData, int *outputLen)
{
 80091cc:	b590      	push	{r4, r7, lr}
 80091ce:	b089      	sub	sp, #36	; 0x24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	603b      	str	r3, [r7, #0]
  LOG_WRITE("chkIpRes, %d, %x, resLen %d\n", *_sim_buff_index, posOfSubStrSave, strlen(response));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681c      	ldr	r4, [r3, #0]
 80091de:	68b8      	ldr	r0, [r7, #8]
 80091e0:	f7f6 fff6 	bl	80001d0 <strlen>
 80091e4:	4603      	mov	r3, r0
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4621      	mov	r1, r4
 80091ea:	483e      	ldr	r0, [pc, #248]	; (80092e4 <check_normal_ip_packet+0x118>)
 80091ec:	f018 f95e 	bl	80214ac <iprintf>
  //check whether have \r\n at buffer
  posOfSubStrSave += strlen(response);                      //point to length of IP packet (right after ",1," or ",0,")
 80091f0:	68b8      	ldr	r0, [r7, #8]
 80091f2:	f7f6 ffed 	bl	80001d0 <strlen>
 80091f6:	4602      	mov	r2, r0
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  if(posOfSubStrSave >= (sim_buff + sim_buff_length))
 80091fe:	4b3a      	ldr	r3, [pc, #232]	; (80092e8 <check_normal_ip_packet+0x11c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	4b39      	ldr	r3, [pc, #228]	; (80092ec <check_normal_ip_packet+0x120>)
 8009206:	4413      	add	r3, r2
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	429a      	cmp	r2, r3
 800920c:	d304      	bcc.n	8009218 <check_normal_ip_packet+0x4c>
  {
    LOG_WRITE("chkIpRes pos >= (sim_+ sim_b)\n");
 800920e:	4838      	ldr	r0, [pc, #224]	; (80092f0 <check_normal_ip_packet+0x124>)
 8009210:	f018 f9e8 	bl	80215e4 <puts>
    return 2;
 8009214:	2302      	movs	r3, #2
 8009216:	e060      	b.n	80092da <check_normal_ip_packet+0x10e>
  }
  uint8_t *pointerTo_r_n = strstr(posOfSubStrSave, "\r"); //point to '\r'
 8009218:	210d      	movs	r1, #13
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f018 fb35 	bl	802188a <strchr>
 8009220:	61b8      	str	r0, [r7, #24]
  //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
  // ->  posOfSubStrSave point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
  if (pointerTo_r_n != NULL && (pointerTo_r_n - posOfSubStrSave) <= 4) //,0,1500\r\n
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d049      	beq.n	80092bc <check_normal_ip_packet+0xf0>
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b04      	cmp	r3, #4
 8009230:	dc44      	bgt.n	80092bc <check_normal_ip_packet+0xf0>
  {
    int lengthOfIPPacket = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]
    while (posOfSubStrSave < pointerTo_r_n)
 8009236:	e01b      	b.n	8009270 <check_normal_ip_packet+0xa4>
    { //make sure break when meet '\r'
      char numberTmp = (char)(*posOfSubStrSave);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	75fb      	strb	r3, [r7, #23]
      if (numberTmp >= '0' && numberTmp <= '9')
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	2b2f      	cmp	r3, #47	; 0x2f
 8009242:	d910      	bls.n	8009266 <check_normal_ip_packet+0x9a>
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	2b39      	cmp	r3, #57	; 0x39
 8009248:	d80d      	bhi.n	8009266 <check_normal_ip_packet+0x9a>
      {
        lengthOfIPPacket = lengthOfIPPacket * 10 + numberTmp - '0';
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	4613      	mov	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	461a      	mov	r2, r3
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	4413      	add	r3, r2
 800925a:	3b30      	subs	r3, #48	; 0x30
 800925c:	61fb      	str	r3, [r7, #28]
      else
      { //data maybe bit-error -> restart
        LOG_WRITE("chkIpRes Err1\n");
        return 1;
      }
      posOfSubStrSave++;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e004      	b.n	8009270 <check_normal_ip_packet+0xa4>
        LOG_WRITE("chkIpRes Err1\n");
 8009266:	4823      	ldr	r0, [pc, #140]	; (80092f4 <check_normal_ip_packet+0x128>)
 8009268:	f018 f9bc 	bl	80215e4 <puts>
        return 1;
 800926c:	2301      	movs	r3, #1
 800926e:	e034      	b.n	80092da <check_normal_ip_packet+0x10e>
    while (posOfSubStrSave < pointerTo_r_n)
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	429a      	cmp	r2, r3
 8009276:	d3df      	bcc.n	8009238 <check_normal_ip_packet+0x6c>
    }
    posOfSubStrSave += 2;                                                //point to data
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3302      	adds	r3, #2
 800927c:	60fb      	str	r3, [r7, #12]
    if (posOfSubStrSave + lengthOfIPPacket > sim_buff + sim_buff_length) // don't have enough data
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	441a      	add	r2, r3
 8009284:	4b18      	ldr	r3, [pc, #96]	; (80092e8 <check_normal_ip_packet+0x11c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4619      	mov	r1, r3
 800928a:	4b18      	ldr	r3, [pc, #96]	; (80092ec <check_normal_ip_packet+0x120>)
 800928c:	440b      	add	r3, r1
 800928e:	429a      	cmp	r2, r3
 8009290:	d901      	bls.n	8009296 <check_normal_ip_packet+0xca>
    {
      return 2;
 8009292:	2302      	movs	r3, #2
 8009294:	e021      	b.n	80092da <check_normal_ip_packet+0x10e>
    }
    //else data is sastified
    *outputData = posOfSubStrSave;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	601a      	str	r2, [r3, #0]
    *outputLen = lengthOfIPPacket;
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	601a      	str	r2, [r3, #0]
    *_sim_buff_index = posOfSubStrSave - sim_buff + lengthOfIPPacket;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a11      	ldr	r2, [pc, #68]	; (80092ec <check_normal_ip_packet+0x120>)
 80092a6:	1a9a      	subs	r2, r3, r2
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	441a      	add	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
    LOG_WRITE("ipPacket len %d\n", lengthOfIPPacket);
 80092b0:	69f9      	ldr	r1, [r7, #28]
 80092b2:	4811      	ldr	r0, [pc, #68]	; (80092f8 <check_normal_ip_packet+0x12c>)
 80092b4:	f018 f8fa 	bl	80214ac <iprintf>
    return 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e00e      	b.n	80092da <check_normal_ip_packet+0x10e>
  }
  else if (posOfSubStrSave + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,1500\r\n
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	1d9a      	adds	r2, r3, #6
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <check_normal_ip_packet+0x11c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4619      	mov	r1, r3
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <check_normal_ip_packet+0x120>)
 80092c8:	440b      	add	r3, r1
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d204      	bcs.n	80092d8 <check_normal_ip_packet+0x10c>
  {
    //data may be error-bit
    LOG_WRITE("chkIpRes Err2\n");
 80092ce:	480b      	ldr	r0, [pc, #44]	; (80092fc <check_normal_ip_packet+0x130>)
 80092d0:	f018 f988 	bl	80215e4 <puts>
    return 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <check_normal_ip_packet+0x10e>
  }
  else
    return 2; //dont have enough data
 80092d8:	2302      	movs	r3, #2
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3724      	adds	r7, #36	; 0x24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08023390 	.word	0x08023390
 80092e8:	20006410 	.word	0x20006410
 80092ec:	20006414 	.word	0x20006414
 80092f0:	080233b0 	.word	0x080233b0
 80092f4:	080233d0 	.word	0x080233d0
 80092f8:	080233e0 	.word	0x080233e0
 80092fc:	080233f4 	.word	0x080233f4

08009300 <sim7600_handle_received_data>:

// "+CIPERROR",   //6 send IP packet error

 //handle received data, return num of bytes handled
int sim7600_handle_received_data()
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08e      	sub	sp, #56	; 0x38
 8009304:	af02      	add	r7, sp, #8
  LOG_WRITE("simHdlRecv\n");
 8009306:	48a4      	ldr	r0, [pc, #656]	; (8009598 <sim7600_handle_received_data+0x298>)
 8009308:	f018 f96c 	bl	80215e4 <puts>
  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 800930c:	4ba3      	ldr	r3, [pc, #652]	; (800959c <sim7600_handle_received_data+0x29c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4aa3      	ldr	r2, [pc, #652]	; (80095a0 <sim7600_handle_received_data+0x2a0>)
 8009312:	2100      	movs	r1, #0
 8009314:	54d1      	strb	r1, [r2, r3]
  uint8_t *posOfSubStr;
  uint8_t *posOfSubStrSave;
  int sim_buff_index = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
  LOG_WRITE("sim_buff_length %d\n", sim_buff_length);
 800931a:	4ba0      	ldr	r3, [pc, #640]	; (800959c <sim7600_handle_received_data+0x29c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4619      	mov	r1, r3
 8009320:	48a0      	ldr	r0, [pc, #640]	; (80095a4 <sim7600_handle_received_data+0x2a4>)
 8009322:	f018 f8c3 	bl	80214ac <iprintf>
  // }

  //can do this, since all data is string
  // if ((strstr(sim_buff, "CPIN: READY") != NULL) &&
  //         (strstr(sim_buff, "SMS DONE") != NULL) && 
  if(strstr(sim_buff, "PB DONE") != NULL)
 8009326:	49a0      	ldr	r1, [pc, #640]	; (80095a8 <sim7600_handle_received_data+0x2a8>)
 8009328:	489d      	ldr	r0, [pc, #628]	; (80095a0 <sim7600_handle_received_data+0x2a0>)
 800932a:	f018 fabb 	bl	80218a4 <strstr>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <sim7600_handle_received_data+0x4c>
  {
    LOG_WRITE("sim is rebooted\n");
 8009334:	489d      	ldr	r0, [pc, #628]	; (80095ac <sim7600_handle_received_data+0x2ac>)
 8009336:	f018 f955 	bl	80215e4 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << rebootEnum);
 800933a:	4b9d      	ldr	r3, [pc, #628]	; (80095b0 <sim7600_handle_received_data+0x2b0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2108      	movs	r1, #8
 8009340:	4618      	mov	r0, r3
 8009342:	f002 fd05 	bl	800bd50 <osEventFlagsSet>
    return sim_buff_length;
 8009346:	4b95      	ldr	r3, [pc, #596]	; (800959c <sim7600_handle_received_data+0x29c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	e1c1      	b.n	80096d0 <sim7600_handle_received_data+0x3d0>
  }

  while (true)
  {
    LOG_WRITE("sim_buff_index %d\n", sim_buff_index);
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	4619      	mov	r1, r3
 8009350:	4898      	ldr	r0, [pc, #608]	; (80095b4 <sim7600_handle_received_data+0x2b4>)
 8009352:	f018 f8ab 	bl	80214ac <iprintf>
    posOfSubStrSave = NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sim_buff_index == sim_buff_length)
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4b8f      	ldr	r3, [pc, #572]	; (800959c <sim7600_handle_received_data+0x29c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d102      	bne.n	800936a <sim7600_handle_received_data+0x6a>
      return sim_buff_length; //reach end of buff
 8009364:	4b8d      	ldr	r3, [pc, #564]	; (800959c <sim7600_handle_received_data+0x29c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	e1b2      	b.n	80096d0 <sim7600_handle_received_data+0x3d0>
    else if(sim_buff_index > sim_buff_length) //out of index
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4b8b      	ldr	r3, [pc, #556]	; (800959c <sim7600_handle_received_data+0x29c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	dd05      	ble.n	8009380 <sim7600_handle_received_data+0x80>
    {
      //something wrong
      LOG_WRITE("return sim_buff_index error\n");
 8009374:	4890      	ldr	r0, [pc, #576]	; (80095b8 <sim7600_handle_received_data+0x2b8>)
 8009376:	f018 f935 	bl	80215e4 <puts>
      return sim_buff_length;
 800937a:	4b88      	ldr	r3, [pc, #544]	; (800959c <sim7600_handle_received_data+0x29c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	e1a7      	b.n	80096d0 <sim7600_handle_received_data+0x3d0>
    }

    int resultCheck = -1;
 8009380:	f04f 33ff 	mov.w	r3, #4294967295
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
    //first check cmd response
    const char *checkCmdResPtr;
    if (cmdSendStatus == 1)
 8009386:	4b8d      	ldr	r3, [pc, #564]	; (80095bc <sim7600_handle_received_data+0x2bc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d139      	bne.n	8009402 <sim7600_handle_received_data+0x102>
    {
      if (res1 != NULL)
 800938e:	4b8c      	ldr	r3, [pc, #560]	; (80095c0 <sim7600_handle_received_data+0x2c0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d014      	beq.n	80093c0 <sim7600_handle_received_data+0xc0>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	461a      	mov	r2, r3
 800939a:	4b81      	ldr	r3, [pc, #516]	; (80095a0 <sim7600_handle_received_data+0x2a0>)
 800939c:	4413      	add	r3, r2
 800939e:	4a88      	ldr	r2, [pc, #544]	; (80095c0 <sim7600_handle_received_data+0x2c0>)
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	4611      	mov	r1, r2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f018 fa7d 	bl	80218a4 <strstr>
 80093aa:	61b8      	str	r0, [r7, #24]
        if (posOfSubStr != NULL)
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d006      	beq.n	80093c0 <sim7600_handle_received_data+0xc0>
        {
          posOfSubStrSave = posOfSubStr;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          checkCmdResPtr = res1;
 80093b6:	4b82      	ldr	r3, [pc, #520]	; (80095c0 <sim7600_handle_received_data+0x2c0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
          resultCheck = LIST_RESPONSE_SIZE;
 80093bc:	2306      	movs	r3, #6
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
      if (res2 != NULL)
 80093c0:	4b80      	ldr	r3, [pc, #512]	; (80095c4 <sim7600_handle_received_data+0x2c4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d030      	beq.n	800942a <sim7600_handle_received_data+0x12a>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	461a      	mov	r2, r3
 80093cc:	4b74      	ldr	r3, [pc, #464]	; (80095a0 <sim7600_handle_received_data+0x2a0>)
 80093ce:	4413      	add	r3, r2
 80093d0:	4a7c      	ldr	r2, [pc, #496]	; (80095c4 <sim7600_handle_received_data+0x2c4>)
 80093d2:	6812      	ldr	r2, [r2, #0]
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f018 fa64 	bl	80218a4 <strstr>
 80093dc:	61b8      	str	r0, [r7, #24]
        if (posOfSubStr != NULL && (posOfSubStr < posOfSubStrSave || posOfSubStrSave == NULL))
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d022      	beq.n	800942a <sim7600_handle_received_data+0x12a>
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d302      	bcc.n	80093f2 <sim7600_handle_received_data+0xf2>
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d11b      	bne.n	800942a <sim7600_handle_received_data+0x12a>
        {
          posOfSubStrSave = posOfSubStr;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          checkCmdResPtr = res2;
 80093f6:	4b73      	ldr	r3, [pc, #460]	; (80095c4 <sim7600_handle_received_data+0x2c4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
          resultCheck = LIST_RESPONSE_SIZE;
 80093fc:	2306      	movs	r3, #6
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009400:	e013      	b.n	800942a <sim7600_handle_received_data+0x12a>
        }
      }
    }
    else if (cmdSendStatus == 2)
 8009402:	4b6e      	ldr	r3, [pc, #440]	; (80095bc <sim7600_handle_received_data+0x2bc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b02      	cmp	r3, #2
 8009408:	d10f      	bne.n	800942a <sim7600_handle_received_data+0x12a>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, ">");
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	461a      	mov	r2, r3
 800940e:	4b64      	ldr	r3, [pc, #400]	; (80095a0 <sim7600_handle_received_data+0x2a0>)
 8009410:	4413      	add	r3, r2
 8009412:	213e      	movs	r1, #62	; 0x3e
 8009414:	4618      	mov	r0, r3
 8009416:	f018 fa38 	bl	802188a <strchr>
 800941a:	61b8      	str	r0, [r7, #24]
      if (posOfSubStr != NULL)
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <sim7600_handle_received_data+0x12a>
      {
        posOfSubStrSave = posOfSubStr;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
        resultCheck = LIST_RESPONSE_SIZE;
 8009426:	2306      	movs	r3, #6
 8009428:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }

    //check in list
    for (int i = 0; i < LIST_RESPONSE_SIZE; i++)
 800942a:	2300      	movs	r3, #0
 800942c:	623b      	str	r3, [r7, #32]
 800942e:	e01f      	b.n	8009470 <sim7600_handle_received_data+0x170>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, listResponse[i]);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	461a      	mov	r2, r3
 8009434:	4b5a      	ldr	r3, [pc, #360]	; (80095a0 <sim7600_handle_received_data+0x2a0>)
 8009436:	18d0      	adds	r0, r2, r3
 8009438:	6a3a      	ldr	r2, [r7, #32]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4a61      	ldr	r2, [pc, #388]	; (80095c8 <sim7600_handle_received_data+0x2c8>)
 8009444:	4413      	add	r3, r2
 8009446:	4619      	mov	r1, r3
 8009448:	f018 fa2c 	bl	80218a4 <strstr>
 800944c:	61b8      	str	r0, [r7, #24]
      if (posOfSubStr != NULL && (posOfSubStr < posOfSubStrSave || posOfSubStrSave == NULL))
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <sim7600_handle_received_data+0x16a>
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	429a      	cmp	r2, r3
 800945a:	d302      	bcc.n	8009462 <sim7600_handle_received_data+0x162>
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <sim7600_handle_received_data+0x16a>
      {
        posOfSubStrSave = posOfSubStr;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
        resultCheck = i;
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < LIST_RESPONSE_SIZE; i++)
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	3301      	adds	r3, #1
 800946e:	623b      	str	r3, [r7, #32]
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	2b05      	cmp	r3, #5
 8009474:	dddc      	ble.n	8009430 <sim7600_handle_received_data+0x130>
      }
    }

    LOG_WRITE("resCheck %d, cmdStt %d\n", resultCheck, cmdSendStatus);
 8009476:	4b51      	ldr	r3, [pc, #324]	; (80095bc <sim7600_handle_received_data+0x2bc>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800947e:	4853      	ldr	r0, [pc, #332]	; (80095cc <sim7600_handle_received_data+0x2cc>)
 8009480:	f018 f814 	bl	80214ac <iprintf>
    int resultTmp = -1;
 8009484:	f04f 33ff 	mov.w	r3, #4294967295
 8009488:	61fb      	str	r3, [r7, #28]
    if (resultCheck < 0) // nothing can find
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	2b00      	cmp	r3, #0
 800948e:	da0a      	bge.n	80094a6 <sim7600_handle_received_data+0x1a6>
    {
      if((sim_buff_length - sim_buff_index) > 100)
 8009490:	4b42      	ldr	r3, [pc, #264]	; (800959c <sim7600_handle_received_data+0x29c>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b64      	cmp	r3, #100	; 0x64
 800949a:	f340 8109 	ble.w	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        resultTmp = -1;
 800949e:	f04f 33ff 	mov.w	r3, #4294967295
 80094a2:	61fb      	str	r3, [r7, #28]
 80094a4:	e104      	b.n	80096b0 <sim7600_handle_received_data+0x3b0>
      }
    }                          

    else if (resultCheck == 0) //udp received
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11d      	bne.n	80094e8 <sim7600_handle_received_data+0x1e8>
    {
      uint8_t *udpData;
      int udpDataLen;
      resultTmp = check_normal_ip_packet(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index, &udpData, &udpDataLen);
 80094ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4a44      	ldr	r2, [pc, #272]	; (80095c8 <sim7600_handle_received_data+0x2c8>)
 80094b8:	1899      	adds	r1, r3, r2
 80094ba:	f107 0010 	add.w	r0, r7, #16
 80094be:	f107 0214 	add.w	r2, r7, #20
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4603      	mov	r3, r0
 80094ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094cc:	f7ff fe7e 	bl	80091cc <check_normal_ip_packet>
 80094d0:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0)
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 80eb 	bne.w	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        UDP_Packet_Analyze(udpData, udpDataLen);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fd87 	bl	8009ff4 <UDP_Packet_Analyze>
 80094e6:	e731      	b.n	800934c <sim7600_handle_received_data+0x4c>
        continue;
      }
    }
    else if (resultCheck == 1) //1 net error
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d118      	bne.n	8009520 <sim7600_handle_received_data+0x220>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80094ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a33      	ldr	r2, [pc, #204]	; (80095c8 <sim7600_handle_received_data+0x2c8>)
 80094fa:	4413      	add	r3, r2
 80094fc:	f107 0214 	add.w	r2, r7, #20
 8009500:	4619      	mov	r1, r3
 8009502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009504:	f7ff fe46 	bl	8009194 <check_normal_response>
 8009508:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 80cf 	bne.w	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        //sim7600 error, handle in a task sim7600 config task
        osEventFlagsSet(ConnectSimEventID, 1 << netErrorEnum);
 8009512:	4b2f      	ldr	r3, [pc, #188]	; (80095d0 <sim7600_handle_received_data+0x2d0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2108      	movs	r1, #8
 8009518:	4618      	mov	r0, r3
 800951a:	f002 fc19 	bl	800bd50 <osEventFlagsSet>
        continue;
 800951e:	e0d6      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
      }
    }
    else if (resultCheck == 2) //2 udp/tcp closed , reconnect
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	2b02      	cmp	r3, #2
 8009524:	d118      	bne.n	8009558 <sim7600_handle_received_data+0x258>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8009526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4a25      	ldr	r2, [pc, #148]	; (80095c8 <sim7600_handle_received_data+0x2c8>)
 8009532:	4413      	add	r3, r2
 8009534:	f107 0214 	add.w	r2, r7, #20
 8009538:	4619      	mov	r1, r3
 800953a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800953c:	f7ff fe2a 	bl	8009194 <check_normal_response>
 8009540:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f040 80b3 	bne.w	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //notify connectTask that need to reconnect
 800954a:	4b21      	ldr	r3, [pc, #132]	; (80095d0 <sim7600_handle_received_data+0x2d0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2110      	movs	r1, #16
 8009550:	4618      	mov	r0, r3
 8009552:	f002 fbfd 	bl	800bd50 <osEventFlagsSet>
        continue;
 8009556:	e0ba      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
      }
    }
    else if (resultCheck == 3) //3 received TCP packet
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	2b03      	cmp	r3, #3
 800955c:	d13a      	bne.n	80095d4 <sim7600_handle_received_data+0x2d4>
    {
      uint8_t *tcpData;
      int tcpDataLen;
      resultTmp = check_normal_ip_packet(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index, &tcpData, &tcpDataLen);
 800955e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <sim7600_handle_received_data+0x2c8>)
 800956a:	1899      	adds	r1, r3, r2
 800956c:	f107 0008 	add.w	r0, r7, #8
 8009570:	f107 0214 	add.w	r2, r7, #20
 8009574:	1d3b      	adds	r3, r7, #4
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4603      	mov	r3, r0
 800957a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800957c:	f7ff fe26 	bl	80091cc <check_normal_ip_packet>
 8009580:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0)
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	2b00      	cmp	r3, #0
 8009586:	f040 8093 	bne.w	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        TCP_Packet_Analyze(tcpData, tcpDataLen);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fc65 	bl	8009e60 <TCP_Packet_Analyze>
 8009596:	e6d9      	b.n	800934c <sim7600_handle_received_data+0x4c>
 8009598:	08023404 	.word	0x08023404
 800959c:	20006410 	.word	0x20006410
 80095a0:	20006414 	.word	0x20006414
 80095a4:	08023410 	.word	0x08023410
 80095a8:	08023424 	.word	0x08023424
 80095ac:	0802342c 	.word	0x0802342c
 80095b0:	200057bc 	.word	0x200057bc
 80095b4:	0802343c 	.word	0x0802343c
 80095b8:	08023450 	.word	0x08023450
 80095bc:	2000062c 	.word	0x2000062c
 80095c0:	2000640c 	.word	0x2000640c
 80095c4:	20006400 	.word	0x20006400
 80095c8:	200002b0 	.word	0x200002b0
 80095cc:	0802346c 	.word	0x0802346c
 80095d0:	200057c0 	.word	0x200057c0
        continue;
      }
    }
    else if (resultCheck == 4) //4 call
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d117      	bne.n	800960a <sim7600_handle_received_data+0x30a>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80095da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a3c      	ldr	r2, [pc, #240]	; (80096d8 <sim7600_handle_received_data+0x3d8>)
 80095e6:	4413      	add	r3, r2
 80095e8:	f107 0214 	add.w	r2, r7, #20
 80095ec:	4619      	mov	r1, r3
 80095ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095f0:	f7ff fdd0 	bl	8009194 <check_normal_response>
 80095f4:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d159      	bne.n	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        osEventFlagsSet(ConfigSimEventID, 1 << callingEnum); //notify configTask to hang-up
 80095fc:	4b37      	ldr	r3, [pc, #220]	; (80096dc <sim7600_handle_received_data+0x3dc>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2102      	movs	r1, #2
 8009602:	4618      	mov	r0, r3
 8009604:	f002 fba4 	bl	800bd50 <osEventFlagsSet>
        continue;
 8009608:	e061      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
      }
    }
    else if (resultCheck == 5) //sms
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	2b05      	cmp	r3, #5
 800960e:	d117      	bne.n	8009640 <sim7600_handle_received_data+0x340>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8009610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4a2f      	ldr	r2, [pc, #188]	; (80096d8 <sim7600_handle_received_data+0x3d8>)
 800961c:	4413      	add	r3, r2
 800961e:	f107 0214 	add.w	r2, r7, #20
 8009622:	4619      	mov	r1, r3
 8009624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009626:	f7ff fdb5 	bl	8009194 <check_normal_response>
 800962a:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d13e      	bne.n	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        osEventFlagsSet(ConfigSimEventID, 1 << smsEnum); //notify configTask to hang up
 8009632:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <sim7600_handle_received_data+0x3dc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2101      	movs	r1, #1
 8009638:	4618      	mov	r0, r3
 800963a:	f002 fb89 	bl	800bd50 <osEventFlagsSet>
        continue;
 800963e:	e046      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
      }
    }
    else //cmd check
    {
      LOG_WRITE("cmdSendStt %d\n", cmdSendStatus);
 8009640:	4b27      	ldr	r3, [pc, #156]	; (80096e0 <sim7600_handle_received_data+0x3e0>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4619      	mov	r1, r3
 8009646:	4827      	ldr	r0, [pc, #156]	; (80096e4 <sim7600_handle_received_data+0x3e4>)
 8009648:	f017 ff30 	bl	80214ac <iprintf>
      if (cmdSendStatus == 2)
 800964c:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <sim7600_handle_received_data+0x3e0>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d10b      	bne.n	800966c <sim7600_handle_received_data+0x36c>
      {                                      //just need '>'
        osEventFlagsSet(SendSimEventID, 1U); //notify to send task
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <sim7600_handle_received_data+0x3e8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2101      	movs	r1, #1
 800965a:	4618      	mov	r0, r3
 800965c:	f002 fb78 	bl	800bd50 <osEventFlagsSet>
        // osThreadYield();
        //change sim_buff_index
        sim_buff_index = posOfSubStrSave - sim_buff + 1; // + 1 for ">"
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	4a22      	ldr	r2, [pc, #136]	; (80096ec <sim7600_handle_received_data+0x3ec>)
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	3301      	adds	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
        continue;
 800966a:	e030      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
      }
      else if (cmdSendStatus == 1)
 800966c:	4b1c      	ldr	r3, [pc, #112]	; (80096e0 <sim7600_handle_received_data+0x3e0>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d11d      	bne.n	80096b0 <sim7600_handle_received_data+0x3b0>
      {
        //check whether have \r\n at the end of this response
        resultTmp = check_normal_response(posOfSubStrSave, checkCmdResPtr, &sim_buff_index);
 8009674:	f107 0314 	add.w	r3, r7, #20
 8009678:	461a      	mov	r2, r3
 800967a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800967c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800967e:	f7ff fd89 	bl	8009194 <check_normal_response>
 8009682:	61f8      	str	r0, [r7, #28]
        if (resultTmp == 0)
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d112      	bne.n	80096b0 <sim7600_handle_received_data+0x3b0>
        {
          //notify to send task
          if (checkCmdResPtr == res1)
 800968a:	4b19      	ldr	r3, [pc, #100]	; (80096f0 <sim7600_handle_received_data+0x3f0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009690:	429a      	cmp	r2, r3
 8009692:	d106      	bne.n	80096a2 <sim7600_handle_received_data+0x3a2>
          {
            osEventFlagsSet(SendSimEventID, 1U);
 8009694:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <sim7600_handle_received_data+0x3e8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2101      	movs	r1, #1
 800969a:	4618      	mov	r0, r3
 800969c:	f002 fb58 	bl	800bd50 <osEventFlagsSet>
          }
          else
          {
            osEventFlagsSet(SendSimEventID, 2U);
          }
          continue;
 80096a0:	e015      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
            osEventFlagsSet(SendSimEventID, 2U);
 80096a2:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <sim7600_handle_received_data+0x3e8>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2102      	movs	r1, #2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f002 fb51 	bl	800bd50 <osEventFlagsSet>
          continue;
 80096ae:	e00e      	b.n	80096ce <sim7600_handle_received_data+0x3ce>
        }
      }
    }

    LOG_WRITE("resultTmp %d\n", resultTmp);
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	4810      	ldr	r0, [pc, #64]	; (80096f4 <sim7600_handle_received_data+0x3f4>)
 80096b4:	f017 fefa 	bl	80214ac <iprintf>
    //data or net error, need to start
    if (resultTmp == 1)
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d105      	bne.n	80096ca <sim7600_handle_received_data+0x3ca>
    {
      //error need to start
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //notify configTask to restart and re config
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <sim7600_handle_received_data+0x3dc>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2104      	movs	r1, #4
 80096c4:	4618      	mov	r0, r3
 80096c6:	f002 fb43 	bl	800bd50 <osEventFlagsSet>
    }
    //dont have enough data
    //else if(resultTmp == 2) return sim_buff_index;
    return sim_buff_index;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	e000      	b.n	80096d0 <sim7600_handle_received_data+0x3d0>
  {
 80096ce:	e63d      	b.n	800934c <sim7600_handle_received_data+0x4c>
  //     }
  //   }
  //   break; //if can't find \r\n .. \r\n sastified
  // }
  // return sim_buff_index;
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3730      	adds	r7, #48	; 0x30
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	200002b0 	.word	0x200002b0
 80096dc:	200057bc 	.word	0x200057bc
 80096e0:	2000062c 	.word	0x2000062c
 80096e4:	08023484 	.word	0x08023484
 80096e8:	200057a4 	.word	0x200057a4
 80096ec:	20006414 	.word	0x20006414
 80096f0:	2000640c 	.word	0x2000640c
 80096f4:	08023494 	.word	0x08023494

080096f8 <sim7600_change_baud>:
//   if(checksum == sim7600_check_sum_data(tcpPacket, length - 2)) return true;
//   return false;
// }

void sim7600_change_baud(uint32_t baudrate)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  LOG_WRITE("changeBaud %lu\n", baudrate);
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4809      	ldr	r0, [pc, #36]	; (8009728 <sim7600_change_baud+0x30>)
 8009704:	f017 fed2 	bl	80214ac <iprintf>
  LL_USART_Disable(USART1);
 8009708:	4808      	ldr	r0, [pc, #32]	; (800972c <sim7600_change_baud+0x34>)
 800970a:	f7fe f9f5 	bl	8007af8 <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	4907      	ldr	r1, [pc, #28]	; (8009730 <sim7600_change_baud+0x38>)
 8009714:	4805      	ldr	r0, [pc, #20]	; (800972c <sim7600_change_baud+0x34>)
 8009716:	f7fe fa13 	bl	8007b40 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 800971a:	4804      	ldr	r0, [pc, #16]	; (800972c <sim7600_change_baud+0x34>)
 800971c:	f7fe f9dc 	bl	8007ad8 <LL_USART_Enable>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	080234a4 	.word	0x080234a4
 800972c:	40011000 	.word	0x40011000
 8009730:	0501bd00 	.word	0x0501bd00

08009734 <sim7600_reset_all_state>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_reset_all_state()
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  connectToHostCount = 0;
 8009738:	4b13      	ldr	r3, [pc, #76]	; (8009788 <sim7600_reset_all_state+0x54>)
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]

  sim7600ConnectStatus = 0;
 800973e:	4b13      	ldr	r3, [pc, #76]	; (800978c <sim7600_reset_all_state+0x58>)
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]

  //clear event
  osEventFlagsClear(ConfigSimEventID, 0xFF);
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <sim7600_reset_all_state+0x5c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	21ff      	movs	r1, #255	; 0xff
 800974a:	4618      	mov	r0, r3
 800974c:	f002 fb44 	bl	800bdd8 <osEventFlagsClear>
  osEventFlagsClear(ConnectSimEventID, 0xFF);
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <sim7600_reset_all_state+0x60>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	21ff      	movs	r1, #255	; 0xff
 8009756:	4618      	mov	r0, r3
 8009758:	f002 fb3e 	bl	800bdd8 <osEventFlagsClear>

  //clear message queue
  osMessageQueueReset(SendSimQueueID);
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <sim7600_reset_all_state+0x64>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	f002 ff95 	bl	800c690 <osMessageQueueReset>

  cmdSendStatus = 0;
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <sim7600_reset_all_state+0x68>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
  osEventFlagsClear(SendSimEventID, 0xFF);
 800976c:	4b0c      	ldr	r3, [pc, #48]	; (80097a0 <sim7600_reset_all_state+0x6c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	21ff      	movs	r1, #255	; 0xff
 8009772:	4618      	mov	r0, r3
 8009774:	f002 fb30 	bl	800bdd8 <osEventFlagsClear>

  old_pos_dma = 0;
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <sim7600_reset_all_state+0x70>)
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
  new_pos_dma = 0;
 800977e:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <sim7600_reset_all_state+0x74>)
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20000624 	.word	0x20000624
 800978c:	20000634 	.word	0x20000634
 8009790:	200057bc 	.word	0x200057bc
 8009794:	200057c0 	.word	0x200057c0
 8009798:	200057c8 	.word	0x200057c8
 800979c:	2000062c 	.word	0x2000062c
 80097a0:	200057a4 	.word	0x200057a4
 80097a4:	20000644 	.word	0x20000644
 80097a8:	20000648 	.word	0x20000648

080097ac <sim7600_restart>:

void sim7600_restart()
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  LOG_WRITE("restart\n");
 80097b0:	4829      	ldr	r0, [pc, #164]	; (8009858 <sim7600_restart+0xac>)
 80097b2:	f017 ff17 	bl	80215e4 <puts>
  // {
  //   /* code */
  // }
  

  LL_USART_Disable(USART1);
 80097b6:	4829      	ldr	r0, [pc, #164]	; (800985c <sim7600_restart+0xb0>)
 80097b8:	f7fe f99e 	bl	8007af8 <LL_USART_Disable>
  while (LL_USART_IsEnabled(USART1)); //waite until En bit == 0
 80097bc:	bf00      	nop
 80097be:	4827      	ldr	r0, [pc, #156]	; (800985c <sim7600_restart+0xb0>)
 80097c0:	f7fe f9aa 	bl	8007b18 <LL_USART_IsEnabled>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1f9      	bne.n	80097be <sim7600_restart+0x12>
  
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 80097ca:	2102      	movs	r1, #2
 80097cc:	4824      	ldr	r0, [pc, #144]	; (8009860 <sim7600_restart+0xb4>)
 80097ce:	f7fd ff6d 	bl	80076ac <LL_DMA_DisableStream>
  while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 80097d2:	bf00      	nop
 80097d4:	2102      	movs	r1, #2
 80097d6:	4822      	ldr	r0, [pc, #136]	; (8009860 <sim7600_restart+0xb4>)
 80097d8:	f7fd ff88 	bl	80076ec <LL_DMA_IsEnabledStream>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f8      	bne.n	80097d4 <sim7600_restart+0x28>
    ; //wait until En bit == 0

  //reset global var
  sim7600_reset_all_state();
 80097e2:	f7ff ffa7 	bl	8009734 <sim7600_reset_all_state>

  if (restartSimstatus < MAX_NUM_RESTART_SIM7600) //0-19
 80097e6:	4b1f      	ldr	r3, [pc, #124]	; (8009864 <sim7600_restart+0xb8>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b13      	cmp	r3, #19
 80097ec:	dc07      	bgt.n	80097fe <sim7600_restart+0x52>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 80097ee:	f7fe fc1f 	bl	8008030 <sim7600_powerOFF>
    restartSimstatus++;
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <sim7600_restart+0xb8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3301      	adds	r3, #1
 80097f8:	4a1a      	ldr	r2, [pc, #104]	; (8009864 <sim7600_restart+0xb8>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e013      	b.n	8009826 <sim7600_restart+0x7a>
  }
  else if (restartSimstatus < (MAX_NUM_RESTART_SIM7600 + MAX_NUM_RESET_SIM7600)) // 20-21
 80097fe:	4b19      	ldr	r3, [pc, #100]	; (8009864 <sim7600_restart+0xb8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b15      	cmp	r3, #21
 8009804:	dc09      	bgt.n	800981a <sim7600_restart+0x6e>
  {
    sim7600_reset();
 8009806:	f7fe fc63 	bl	80080d0 <sim7600_reset>
    sim7600_powerOFF();
 800980a:	f7fe fc11 	bl	8008030 <sim7600_powerOFF>
    restartSimstatus++;
 800980e:	4b15      	ldr	r3, [pc, #84]	; (8009864 <sim7600_restart+0xb8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3301      	adds	r3, #1
 8009814:	4a13      	ldr	r2, [pc, #76]	; (8009864 <sim7600_restart+0xb8>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e005      	b.n	8009826 <sim7600_restart+0x7a>
  }
  else // >=22
  {
    //delay to wait
    osDelay(SLEEP_MINUTES_SIM7600 * 60 * 1000); // SLEEP_MINUTES_SIM7600 minutes
 800981a:	4813      	ldr	r0, [pc, #76]	; (8009868 <sim7600_restart+0xbc>)
 800981c:	f002 f947 	bl	800baae <osDelay>
    restartSimstatus = 0;
 8009820:	4b10      	ldr	r3, [pc, #64]	; (8009864 <sim7600_restart+0xb8>)
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
  }

  //reset global var
  sim7600_reset_all_state();
 8009826:	f7ff ff85 	bl	8009734 <sim7600_reset_all_state>

  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800982a:	2102      	movs	r1, #2
 800982c:	480c      	ldr	r0, [pc, #48]	; (8009860 <sim7600_restart+0xb4>)
 800982e:	f7fd ff1d 	bl	800766c <LL_DMA_EnableStream>
  while (!LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 8009832:	bf00      	nop
 8009834:	2102      	movs	r1, #2
 8009836:	480a      	ldr	r0, [pc, #40]	; (8009860 <sim7600_restart+0xb4>)
 8009838:	f7fd ff58 	bl	80076ec <LL_DMA_IsEnabledStream>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0f8      	beq.n	8009834 <sim7600_restart+0x88>
    ; //wait until En bit == 1

  //change baud rate to default
  sim7600_change_baud(SIM7600_BAUDRATE_DEFAULT); // in this function usart is enable again
 8009842:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8009846:	f7ff ff57 	bl	80096f8 <sim7600_change_baud>
  LL_USART_Enable(USART1);
 800984a:	4804      	ldr	r0, [pc, #16]	; (800985c <sim7600_restart+0xb0>)
 800984c:	f7fe f944 	bl	8007ad8 <LL_USART_Enable>

  //power on again
  sim7600_powerON();
 8009850:	f7fe fb9e 	bl	8007f90 <sim7600_powerON>

  //resume all task
}
 8009854:	bf00      	nop
 8009856:	bd80      	pop	{r7, pc}
 8009858:	080234b4 	.word	0x080234b4
 800985c:	40011000 	.word	0x40011000
 8009860:	40026400 	.word	0x40026400
 8009864:	20000628 	.word	0x20000628
 8009868:	02932e00 	.word	0x02932e00

0800986c <TCP_UDP_Notify>:
} connectType;

osEventFlagsId_t TCP_UDP_StackEventID;
//notify to ethernet or sim7600 stack
void TCP_UDP_Notify(int flagsEnum)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  LOG_WRITE("tcpUdpNotify %d\n", flagsEnum);
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4808      	ldr	r0, [pc, #32]	; (8009898 <TCP_UDP_Notify+0x2c>)
 8009878:	f017 fe18 	bl	80214ac <iprintf>
  osEventFlagsSet(TCP_UDP_StackEventID, 1 << flagsEnum);
 800987c:	4b07      	ldr	r3, [pc, #28]	; (800989c <TCP_UDP_Notify+0x30>)
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	2101      	movs	r1, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	fa01 f303 	lsl.w	r3, r1, r3
 8009888:	4619      	mov	r1, r3
 800988a:	4610      	mov	r0, r2
 800988c:	f002 fa60 	bl	800bd50 <osEventFlagsSet>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	080234d0 	.word	0x080234d0
 800989c:	20010290 	.word	0x20010290

080098a0 <TCP_UDP_Send>:

//payload : 1-tcp, 2-udp
bool TCP_UDP_Send(int type, uint8_t *data, int len)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  LOG_WRITE("tcpUdpSend %d\n", type);
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	480c      	ldr	r0, [pc, #48]	; (80098e0 <TCP_UDP_Send+0x40>)
 80098b0:	f017 fdfc 	bl	80214ac <iprintf>
  if (connectType == connectTypeSim7600)
 80098b4:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <TCP_UDP_Send+0x44>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d106      	bne.n	80098ca <TCP_UDP_Send+0x2a>
  {
    return sim7600_IP(type, data, len);
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7fe ffa9 	bl	8008818 <sim7600_IP>
 80098c6:	4603      	mov	r3, r0
 80098c8:	e005      	b.n	80098d6 <TCP_UDP_Send+0x36>
  }
  else
  {
    return ethSendIP(type, data, len);
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7fd f96c 	bl	8006bac <ethSendIP>
 80098d4:	4603      	mov	r3, r0
  }
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	080234e4 	.word	0x080234e4
 80098e4:	2001028c 	.word	0x2001028c

080098e8 <AudioPacketHandle>:

MP3Struct *mp3Packet;
bool AudioPacketHandle(uint8_t *data, int len)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  mp3Packet = (MP3Struct*)data;
 80098f2:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <AudioPacketHandle+0x78>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6013      	str	r3, [r2, #0]

  //decrypt 16B next with old aes key to get new key
  if(AES_Decrypt_Packet(data + 16, 16) > 0)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3310      	adds	r3, #16
 80098fc:	2110      	movs	r1, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fc f822 	bl	8005948 <AES_Decrypt_Packet>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	dd21      	ble.n	800994e <AudioPacketHandle+0x66>
  {
    //decrypt with mp3 key, from volume
    int lenPacketDecrypt = len - MP3_PACKET_HEADER_LEN_BEFORE_VOLUME;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	3b15      	subs	r3, #21
 800990e:	60fb      	str	r3, [r7, #12]
    lenPacketDecrypt -=  (lenPacketDecrypt % 16); //make sure it is multiple of 16 aes block len
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	425a      	negs	r2, r3
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	f002 020f 	and.w	r2, r2, #15
 800991c:	bf58      	it	pl
 800991e:	4253      	negpl	r3, r2
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	60fb      	str	r3, [r7, #12]
    if(AES_Decrypt_Packet_Key(&(mp3Packet->volume), lenPacketDecrypt, mp3Packet->aesMP3key) > 0)
 8009926:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <AudioPacketHandle+0x78>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f103 0015 	add.w	r0, r3, #21
 800992e:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <AudioPacketHandle+0x78>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3305      	adds	r3, #5
 8009934:	461a      	mov	r2, r3
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	f7fc f834 	bl	80059a4 <AES_Decrypt_Packet_Key>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	dd05      	ble.n	800994e <AudioPacketHandle+0x66>
    {
      mp3GetFrame(data, len);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fd fae1 	bl	8006f0c <mp3GetFrame>
      return true;
 800994a:	2301      	movs	r3, #1
 800994c:	e003      	b.n	8009956 <AudioPacketHandle+0x6e>
    }
  }
  //wrong mp3 packet
  LOG_WRITE("mp3 packet error\n");
 800994e:	4805      	ldr	r0, [pc, #20]	; (8009964 <AudioPacketHandle+0x7c>)
 8009950:	f017 fe48 	bl	80215e4 <puts>
  return false;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20010280 	.word	0x20010280
 8009964:	080234f4 	.word	0x080234f4

08009968 <TCP_Packet_Handle>:

int realPacketLen; //len payload , not including md5
int totalTCPBytes = 0;
void TCP_Packet_Handle()
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b08b      	sub	sp, #44	; 0x2c
 800996c:	af02      	add	r7, sp, #8
  LOG_WRITE("tcpPacketHdl\n");
 800996e:	48a9      	ldr	r0, [pc, #676]	; (8009c14 <TCP_Packet_Handle+0x2ac>)
 8009970:	f017 fe38 	bl	80215e4 <puts>
  ISError = true;
 8009974:	4ba8      	ldr	r3, [pc, #672]	; (8009c18 <TCP_Packet_Handle+0x2b0>)
 8009976:	2201      	movs	r2, #1
 8009978:	701a      	strb	r2, [r3, #0]
  PacketTCPStruct *packetTcpHeader = (PacketTCPStruct *)TcpBuff;
 800997a:	4ba8      	ldr	r3, [pc, #672]	; (8009c1c <TCP_Packet_Handle+0x2b4>)
 800997c:	61bb      	str	r3, [r7, #24]
  totalTCPBytes += packetTcpHeader->len;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	4ba6      	ldr	r3, [pc, #664]	; (8009c20 <TCP_Packet_Handle+0x2b8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4413      	add	r3, r2
 800998c:	4aa4      	ldr	r2, [pc, #656]	; (8009c20 <TCP_Packet_Handle+0x2b8>)
 800998e:	6013      	str	r3, [r2, #0]
  realPacketLen = packetTcpHeader->len - SIZE_OF_MD5;
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b10      	subs	r3, #16
 8009998:	4aa2      	ldr	r2, [pc, #648]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 800999a:	6013      	str	r3, [r2, #0]
  if (!IsTLSHanshaked)
 800999c:	4ba2      	ldr	r3, [pc, #648]	; (8009c28 <TCP_Packet_Handle+0x2c0>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f083 0301 	eor.w	r3, r3, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80ea 	beq.w	8009b80 <TCP_Packet_Handle+0x218>
  {
    if (TCPConnectStatus == 0 && realPacketLen == SIZE_OF_PUBKEY)
 80099ac:	4b9f      	ldr	r3, [pc, #636]	; (8009c2c <TCP_Packet_Handle+0x2c4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f040 80a3 	bne.w	8009afc <TCP_Packet_Handle+0x194>
 80099b6:	4b9b      	ldr	r3, [pc, #620]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099be:	f040 809d 	bne.w	8009afc <TCP_Packet_Handle+0x194>
    {
      //check MD5
      if (CheckMD5(packetTcpHeader))
 80099c2:	69b8      	ldr	r0, [r7, #24]
 80099c4:	f000 fd1c 	bl	800a400 <CheckMD5>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 810e 	beq.w	8009bec <TCP_Packet_Handle+0x284>
      {
        PacketTCPStruct *rsaPacketHeader = (PacketTCPStruct *)RSA_Packet;
 80099d0:	4b97      	ldr	r3, [pc, #604]	; (8009c30 <TCP_Packet_Handle+0x2c8>)
 80099d2:	60bb      	str	r3, [r7, #8]

        //copy salt first
        srand(time(0));
 80099d4:	2000      	movs	r0, #0
 80099d6:	f017 ff7d 	bl	80218d4 <time>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4613      	mov	r3, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f017 fe07 	bl	80215f4 <srand>
        int j;
        for (j = 0; j < saltLen; j++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	61fb      	str	r3, [r7, #28]
 80099ea:	e019      	b.n	8009a20 <TCP_Packet_Handle+0xb8>
        {
          rsaPacketHeader->payload[j] = (uint8_t)rand();
 80099ec:	f017 fe30 	bl	8021650 <rand>
 80099f0:	4603      	mov	r3, r0
 80099f2:	b2d9      	uxtb	r1, r3
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	3312      	adds	r3, #18
 80099fc:	460a      	mov	r2, r1
 80099fe:	701a      	strb	r2, [r3, #0]
          salt[j] = rsaPacketHeader->payload[j] & 0x7F;
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	3312      	adds	r3, #18
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	4b8a      	ldr	r3, [pc, #552]	; (8009c34 <TCP_Packet_Handle+0x2cc>)
 8009a0c:	6819      	ldr	r1, [r3, #0]
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	440b      	add	r3, r1
 8009a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < saltLen; j++)
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	61fb      	str	r3, [r7, #28]
 8009a20:	4b85      	ldr	r3, [pc, #532]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69fa      	ldr	r2, [r7, #28]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	dbe0      	blt.n	80099ec <TCP_Packet_Handle+0x84>
        }
        //copy next ID
        memcpy(rsaPacketHeader->payload + saltLen, DeviceID, saltLen);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	3312      	adds	r3, #18
 8009a2e:	4a82      	ldr	r2, [pc, #520]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a30:	6812      	ldr	r2, [r2, #0]
 8009a32:	4413      	add	r3, r2
 8009a34:	4a81      	ldr	r2, [pc, #516]	; (8009c3c <TCP_Packet_Handle+0x2d4>)
 8009a36:	6811      	ldr	r1, [r2, #0]
 8009a38:	4a7f      	ldr	r2, [pc, #508]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a3a:	6812      	ldr	r2, [r2, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f017 fc4b 	bl	80212d8 <memcpy>
        //convert text with salt
        ConvertTextWithSalt(rsaPacketHeader->payload, saltLen, saltLen, Add);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f103 0012 	add.w	r0, r3, #18
 8009a48:	4b7b      	ldr	r3, [pc, #492]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a4a:	6819      	ldr	r1, [r3, #0]
 8009a4c:	4b7a      	ldr	r3, [pc, #488]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	2300      	movs	r3, #0
 8009a52:	f000 fd17 	bl	800a484 <ConvertTextWithSalt>

        //then AES key
        AES_Generate_Rand_Key();
 8009a56:	f7fb fcb5 	bl	80053c4 <AES_Generate_Rand_Key>
        memcpy(rsaPacketHeader->payload + saltLen + saltLen, AES_Get_Key(), AES128_KEY_LEN);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f103 0212 	add.w	r2, r3, #18
 8009a60:	4b75      	ldr	r3, [pc, #468]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	18d4      	adds	r4, r2, r3
 8009a68:	f7fb fcd2 	bl	8005410 <AES_Get_Key>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2210      	movs	r2, #16
 8009a70:	4619      	mov	r1, r3
 8009a72:	4620      	mov	r0, r4
 8009a74:	f017 fc30 	bl	80212d8 <memcpy>

        //caculate md5
        uint8_t *md5sum = md5hash(rsaPacketHeader->payload, saltLen + saltLen + AES128_KEY_LEN);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f103 0212 	add.w	r2, r3, #18
 8009a7e:	4b6e      	ldr	r3, [pc, #440]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f7fd f8bf 	bl	8006c0c <md5hash>
 8009a8e:	6078      	str	r0, [r7, #4]
        memcpy(rsaPacketHeader->md5, md5sum, MD5_LEN);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3302      	adds	r3, #2
 8009a94:	2210      	movs	r2, #16
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f017 fc1d 	bl	80212d8 <memcpy>

        //next encrypt from md5
        if (RSA2048_Pubkey_Encrypt(packetTcpHeader->payload, RSA_MAX_MODULUS_LEN, rsaPacketHeader->md5, SIZE_OF_MD5 + saltLen + saltLen + AES128_KEY_LEN, rsaPacketHeader->md5) > 0)
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	f103 0012 	add.w	r0, r3, #18
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	1c99      	adds	r1, r3, #2
 8009aa8:	4b63      	ldr	r3, [pc, #396]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f103 0210 	add.w	r2, r3, #16
 8009ab0:	4b61      	ldr	r3, [pc, #388]	; (8009c38 <TCP_Packet_Handle+0x2d0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f103 0210 	add.w	r2, r3, #16
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	3302      	adds	r3, #2
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	460a      	mov	r2, r1
 8009ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ac8:	f7fd fd58 	bl	800757c <RSA2048_Pubkey_Encrypt>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f340 808c 	ble.w	8009bec <TCP_Packet_Handle+0x284>
        {
          rsaPacketHeader->len = RSA_BLOCK_LEN;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f042 0201 	orr.w	r2, r2, #1
 8009ae0:	705a      	strb	r2, [r3, #1]
          TCPConnectStatus = 1;
 8009ae2:	4b52      	ldr	r3, [pc, #328]	; (8009c2c <TCP_Packet_Handle+0x2c4>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]
          TCP_UDP_Send(1, RSA_Packet, RSA_PACKET_LEN);
 8009ae8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009aec:	4950      	ldr	r1, [pc, #320]	; (8009c30 <TCP_Packet_Handle+0x2c8>)
 8009aee:	2001      	movs	r0, #1
 8009af0:	f7ff fed6 	bl	80098a0 <TCP_UDP_Send>
          ISError = false;
 8009af4:	4b48      	ldr	r3, [pc, #288]	; (8009c18 <TCP_Packet_Handle+0x2b0>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
      if (CheckMD5(packetTcpHeader))
 8009afa:	e077      	b.n	8009bec <TCP_Packet_Handle+0x284>
        }
      }
    }
    else if (TCPConnectStatus == 1 && realPacketLen >= AES128_BLOCK_LEN && (realPacketLen % AES128_BLOCK_LEN) == 0)
 8009afc:	4b4b      	ldr	r3, [pc, #300]	; (8009c2c <TCP_Packet_Handle+0x2c4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d174      	bne.n	8009bee <TCP_Packet_Handle+0x286>
 8009b04:	4b47      	ldr	r3, [pc, #284]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b0f      	cmp	r3, #15
 8009b0a:	dd70      	ble.n	8009bee <TCP_Packet_Handle+0x286>
 8009b0c:	4b45      	ldr	r3, [pc, #276]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 030f 	and.w	r3, r3, #15
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d16a      	bne.n	8009bee <TCP_Packet_Handle+0x286>
    {
      if (CheckMD5(packetTcpHeader))
 8009b18:	69b8      	ldr	r0, [r7, #24]
 8009b1a:	f000 fc71 	bl	800a400 <CheckMD5>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d064      	beq.n	8009bee <TCP_Packet_Handle+0x286>
      {
        if (AES_Decrypt_Packet(packetTcpHeader->payload, realPacketLen) == realPacketLen)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3312      	adds	r3, #18
 8009b28:	4a3e      	ldr	r2, [pc, #248]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009b2a:	6812      	ldr	r2, [r2, #0]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fb ff0a 	bl	8005948 <AES_Decrypt_Packet>
 8009b34:	4602      	mov	r2, r0
 8009b36:	4b3b      	ldr	r3, [pc, #236]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d157      	bne.n	8009bee <TCP_Packet_Handle+0x286>
        {
          //check salt ACK
          if (CheckSaltACK(packetTcpHeader->payload, realPacketLen))
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	3312      	adds	r3, #18
 8009b42:	4a38      	ldr	r2, [pc, #224]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fd09 	bl	800a560 <CheckSaltACK>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d04c      	beq.n	8009bee <TCP_Packet_Handle+0x286>
          {
            TCP_UDP_Notify(TCP_UDP_Flag.Success); //notify connect task success, then to open UDP connect
 8009b54:	4b3a      	ldr	r3, [pc, #232]	; (8009c40 <TCP_Packet_Handle+0x2d8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff fe87 	bl	800986c <TCP_UDP_Notify>
            TCPConnectStatus = 2;
 8009b5e:	4b33      	ldr	r3, [pc, #204]	; (8009c2c <TCP_Packet_Handle+0x2c4>)
 8009b60:	2202      	movs	r2, #2
 8009b62:	601a      	str	r2, [r3, #0]
            IsTLSHanshaked = true;
 8009b64:	4b30      	ldr	r3, [pc, #192]	; (8009c28 <TCP_Packet_Handle+0x2c0>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
            //successful, delete timer osTimerStop, reset connectToHostCount, change Domain2 <-> Domain1 if neccessary
            osTimerStart(TCPTimerOnceID, TIMER_INTERVAL);
 8009b6a:	4b36      	ldr	r3, [pc, #216]	; (8009c44 <TCP_Packet_Handle+0x2dc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f002 f848 	bl	800bc08 <osTimerStart>
            ISError = false;
 8009b78:	4b27      	ldr	r3, [pc, #156]	; (8009c18 <TCP_Packet_Handle+0x2b0>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e036      	b.n	8009bee <TCP_Packet_Handle+0x286>
      }
    }
  }
  else //handle TLS packet
  {
    ISError = false;
 8009b80:	4b25      	ldr	r3, [pc, #148]	; (8009c18 <TCP_Packet_Handle+0x2b0>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]

    //debug
    int *order = (int*)(TcpBuff + 4);
 8009b86:	4b30      	ldr	r3, [pc, #192]	; (8009c48 <TCP_Packet_Handle+0x2e0>)
 8009b88:	617b      	str	r3, [r7, #20]
    int llen = packetTcpHeader->len + 4; // + 4B len
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	3304      	adds	r3, #4
 8009b92:	613b      	str	r3, [r7, #16]
    LOG_WRITE("mp3 len:%d\n", llen - 4);
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	3b04      	subs	r3, #4
 8009b98:	4619      	mov	r1, r3
 8009b9a:	482c      	ldr	r0, [pc, #176]	; (8009c4c <TCP_Packet_Handle+0x2e4>)
 8009b9c:	f017 fc86 	bl	80214ac <iprintf>
    // if(packetTcpHeader->len < 1000)
    // {
    //   LOG_WRITE("error tcp packet len:%d\n", packetTcpHeader->len);
    // }

    if(CheckMD5(packetTcpHeader))
 8009ba0:	69b8      	ldr	r0, [r7, #24]
 8009ba2:	f000 fc2d 	bl	800a400 <CheckMD5>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d020      	beq.n	8009bee <TCP_Packet_Handle+0x286>
    {
      //check payload has at least 16B (1 AES block)
      if(realPacketLen >= AES128_BLOCK_LEN)
 8009bac:	4b1d      	ldr	r3, [pc, #116]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b0f      	cmp	r3, #15
 8009bb2:	dd1c      	ble.n	8009bee <TCP_Packet_Handle+0x286>
      {
        //decrype first 16B to check type of packet
        if(AES_Decrypt_Packet(packetTcpHeader->payload, AES128_BLOCK_LEN) > 0)
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	3312      	adds	r3, #18
 8009bb8:	2110      	movs	r1, #16
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fb fec4 	bl	8005948 <AES_Decrypt_Packet>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dd13      	ble.n	8009bee <TCP_Packet_Handle+0x286>
        {
          uint8_t typeOfPacket = packetTcpHeader->payload[0];
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	7c9b      	ldrb	r3, [r3, #18]
 8009bca:	73fb      	strb	r3, [r7, #15]
          if(typeOfPacket == mp3PacketEnum && realPacketLen > MP3_PACKET_HEADER_LEN)
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d10d      	bne.n	8009bee <TCP_Packet_Handle+0x286>
 8009bd2:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b28      	cmp	r3, #40	; 0x28
 8009bd8:	dd09      	ble.n	8009bee <TCP_Packet_Handle+0x286>
          {
        	  AudioPacketHandle(packetTcpHeader->payload, realPacketLen);
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	3312      	adds	r3, #18
 8009bde:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <TCP_Packet_Handle+0x2bc>)
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fe7f 	bl	80098e8 <AudioPacketHandle>
 8009bea:	e000      	b.n	8009bee <TCP_Packet_Handle+0x286>
      if (CheckMD5(packetTcpHeader))
 8009bec:	bf00      	nop
        }
      }
    }
  }
  
  if (ISError)
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <TCP_Packet_Handle+0x2b0>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <TCP_Packet_Handle+0x2a4>
  {
    LOG_WRITE("TCP_Packet_Handle recv error\n");
 8009bf6:	4816      	ldr	r0, [pc, #88]	; (8009c50 <TCP_Packet_Handle+0x2e8>)
 8009bf8:	f017 fcf4 	bl	80215e4 <puts>
    TCP_UDP_Notify(TCP_UDP_Flag.Error);
 8009bfc:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <TCP_Packet_Handle+0x2d8>)
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff fe33 	bl	800986c <TCP_UDP_Notify>
    ISError = false;
 8009c06:	4b04      	ldr	r3, [pc, #16]	; (8009c18 <TCP_Packet_Handle+0x2b0>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	3724      	adds	r7, #36	; 0x24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd90      	pop	{r4, r7, pc}
 8009c14:	08023508 	.word	0x08023508
 8009c18:	20000651 	.word	0x20000651
 8009c1c:	2000d948 	.word	0x2000d948
 8009c20:	20000664 	.word	0x20000664
 8009c24:	200102c0 	.word	0x200102c0
 8009c28:	20000650 	.word	0x20000650
 8009c2c:	2000064c 	.word	0x2000064c
 8009c30:	20010078 	.word	0x20010078
 8009c34:	20010074 	.word	0x20010074
 8009c38:	20010288 	.word	0x20010288
 8009c3c:	20000004 	.word	0x20000004
 8009c40:	20010058 	.word	0x20010058
 8009c44:	20005784 	.word	0x20005784
 8009c48:	2000d94c 	.word	0x2000d94c
 8009c4c:	08023518 	.word	0x08023518
 8009c50:	08023524 	.word	0x08023524

08009c54 <HexStringToByteArray>:
//convert hex string to byte array, auto override. return len of byte array if success, else return -1
uint8_t hexStringMap[255];
bool bHexStringMapFrist = true;

int HexStringToByteArray()
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
  //initialize
  if(bHexStringMapFrist)
 8009c5a:	4b3a      	ldr	r3, [pc, #232]	; (8009d44 <HexStringToByteArray+0xf0>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d040      	beq.n	8009ce4 <HexStringToByteArray+0x90>
  {
    bHexStringMapFrist = false;
 8009c62:	4b38      	ldr	r3, [pc, #224]	; (8009d44 <HexStringToByteArray+0xf0>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e037      	b.n	8009cde <HexStringToByteArray+0x8a>
    {
      if(i >= '0' && i <= '9')
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b2f      	cmp	r3, #47	; 0x2f
 8009c72:	dd0c      	ble.n	8009c8e <HexStringToByteArray+0x3a>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b39      	cmp	r3, #57	; 0x39
 8009c78:	dc09      	bgt.n	8009c8e <HexStringToByteArray+0x3a>
      {
        hexStringMap[i] = i - '0';
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	3b30      	subs	r3, #48	; 0x30
 8009c80:	b2d9      	uxtb	r1, r3
 8009c82:	4a31      	ldr	r2, [pc, #196]	; (8009d48 <HexStringToByteArray+0xf4>)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	460a      	mov	r2, r1
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	e024      	b.n	8009cd8 <HexStringToByteArray+0x84>
      }
      else if(i >= 'A' && i <= 'F')
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	dd0c      	ble.n	8009cae <HexStringToByteArray+0x5a>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b46      	cmp	r3, #70	; 0x46
 8009c98:	dc09      	bgt.n	8009cae <HexStringToByteArray+0x5a>
      {
        hexStringMap[i] = i - 'A' + 10;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	3b37      	subs	r3, #55	; 0x37
 8009ca0:	b2d9      	uxtb	r1, r3
 8009ca2:	4a29      	ldr	r2, [pc, #164]	; (8009d48 <HexStringToByteArray+0xf4>)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	460a      	mov	r2, r1
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	e014      	b.n	8009cd8 <HexStringToByteArray+0x84>
      }
      else if(i >= 'a' && i <= 'f')
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b60      	cmp	r3, #96	; 0x60
 8009cb2:	dd0c      	ble.n	8009cce <HexStringToByteArray+0x7a>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b66      	cmp	r3, #102	; 0x66
 8009cb8:	dc09      	bgt.n	8009cce <HexStringToByteArray+0x7a>
      {
        hexStringMap[i] = i - 'a' + 10;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	3b57      	subs	r3, #87	; 0x57
 8009cc0:	b2d9      	uxtb	r1, r3
 8009cc2:	4a21      	ldr	r2, [pc, #132]	; (8009d48 <HexStringToByteArray+0xf4>)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	460a      	mov	r2, r1
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	e004      	b.n	8009cd8 <HexStringToByteArray+0x84>
      }
      else
      {
        hexStringMap[i] = 0;
 8009cce:	4a1e      	ldr	r2, [pc, #120]	; (8009d48 <HexStringToByteArray+0xf4>)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2bfe      	cmp	r3, #254	; 0xfe
 8009ce2:	ddc4      	ble.n	8009c6e <HexStringToByteArray+0x1a>
      }
    }
  }

  int i, j; //i for hex string, j for byte array
  for(i = 0, j = 0; i < TcpBuffOffset; i+=2, j++)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60bb      	str	r3, [r7, #8]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	607b      	str	r3, [r7, #4]
 8009cec:	e01e      	b.n	8009d2c <HexStringToByteArray+0xd8>
  {
    uint8_t tmpByte = (hexStringMap[TcpBuff[i]] << 4) | hexStringMap[TcpBuff[i+1]];
 8009cee:	4a17      	ldr	r2, [pc, #92]	; (8009d4c <HexStringToByteArray+0xf8>)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <HexStringToByteArray+0xf4>)
 8009cfa:	5c9b      	ldrb	r3, [r3, r2]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	b25a      	sxtb	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3301      	adds	r3, #1
 8009d04:	4911      	ldr	r1, [pc, #68]	; (8009d4c <HexStringToByteArray+0xf8>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <HexStringToByteArray+0xf4>)
 8009d0c:	5c5b      	ldrb	r3, [r3, r1]
 8009d0e:	b25b      	sxtb	r3, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	b25b      	sxtb	r3, r3
 8009d14:	70fb      	strb	r3, [r7, #3]
    TcpBuff[j] = tmpByte;
 8009d16:	4a0d      	ldr	r2, [pc, #52]	; (8009d4c <HexStringToByteArray+0xf8>)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	701a      	strb	r2, [r3, #0]
  for(i = 0, j = 0; i < TcpBuffOffset; i+=2, j++)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3302      	adds	r3, #2
 8009d24:	60bb      	str	r3, [r7, #8]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	607b      	str	r3, [r7, #4]
 8009d2c:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <HexStringToByteArray+0xfc>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	dbdb      	blt.n	8009cee <HexStringToByteArray+0x9a>
  }
  return j;
 8009d36:	687b      	ldr	r3, [r7, #4]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	20000338 	.word	0x20000338
 8009d48:	20010180 	.word	0x20010180
 8009d4c:	2000d948 	.word	0x2000d948
 8009d50:	20000654 	.word	0x20000654

08009d54 <HexStringToByteArrayUDP>:

//retrun >0 ~ successful, -1~fail
uint8_t UdpBuff[UDP_BUFF_LEN];
int HexStringToByteArrayUDP(uint8_t *data, int len)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  if(len != UDP_PACKET_LEN) return -1;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b1c      	cmp	r3, #28
 8009d62:	d002      	beq.n	8009d6a <HexStringToByteArrayUDP+0x16>
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	e06e      	b.n	8009e48 <HexStringToByteArrayUDP+0xf4>
  //initialize map table
  if(bHexStringMapFrist)
 8009d6a:	4b3a      	ldr	r3, [pc, #232]	; (8009e54 <HexStringToByteArrayUDP+0x100>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d040      	beq.n	8009df4 <HexStringToByteArrayUDP+0xa0>
  {
    bHexStringMapFrist = false;
 8009d72:	4b38      	ldr	r3, [pc, #224]	; (8009e54 <HexStringToByteArrayUDP+0x100>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	e037      	b.n	8009dee <HexStringToByteArrayUDP+0x9a>
    {
      if(i >= '0' && i <= '9')
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b2f      	cmp	r3, #47	; 0x2f
 8009d82:	dd0c      	ble.n	8009d9e <HexStringToByteArrayUDP+0x4a>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b39      	cmp	r3, #57	; 0x39
 8009d88:	dc09      	bgt.n	8009d9e <HexStringToByteArrayUDP+0x4a>
      {
        hexStringMap[i] = i - '0';
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	3b30      	subs	r3, #48	; 0x30
 8009d90:	b2d9      	uxtb	r1, r3
 8009d92:	4a31      	ldr	r2, [pc, #196]	; (8009e58 <HexStringToByteArrayUDP+0x104>)
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4413      	add	r3, r2
 8009d98:	460a      	mov	r2, r1
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e024      	b.n	8009de8 <HexStringToByteArrayUDP+0x94>
      }
      else if(i >= 'A' && i <= 'F')
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b40      	cmp	r3, #64	; 0x40
 8009da2:	dd0c      	ble.n	8009dbe <HexStringToByteArrayUDP+0x6a>
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b46      	cmp	r3, #70	; 0x46
 8009da8:	dc09      	bgt.n	8009dbe <HexStringToByteArrayUDP+0x6a>
      {
        hexStringMap[i] = i - 'A' + 10;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	3b37      	subs	r3, #55	; 0x37
 8009db0:	b2d9      	uxtb	r1, r3
 8009db2:	4a29      	ldr	r2, [pc, #164]	; (8009e58 <HexStringToByteArrayUDP+0x104>)
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4413      	add	r3, r2
 8009db8:	460a      	mov	r2, r1
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	e014      	b.n	8009de8 <HexStringToByteArrayUDP+0x94>
      }
      else if(i >= 'a' && i <= 'f')
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b60      	cmp	r3, #96	; 0x60
 8009dc2:	dd0c      	ble.n	8009dde <HexStringToByteArrayUDP+0x8a>
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b66      	cmp	r3, #102	; 0x66
 8009dc8:	dc09      	bgt.n	8009dde <HexStringToByteArrayUDP+0x8a>
      {
        hexStringMap[i] = i - 'a' + 10;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	3b57      	subs	r3, #87	; 0x57
 8009dd0:	b2d9      	uxtb	r1, r3
 8009dd2:	4a21      	ldr	r2, [pc, #132]	; (8009e58 <HexStringToByteArrayUDP+0x104>)
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	460a      	mov	r2, r1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e004      	b.n	8009de8 <HexStringToByteArrayUDP+0x94>
      }
      else
      {
        hexStringMap[i] = 0;
 8009dde:	4a1e      	ldr	r2, [pc, #120]	; (8009e58 <HexStringToByteArrayUDP+0x104>)
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	4413      	add	r3, r2
 8009de4:	2200      	movs	r2, #0
 8009de6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	3301      	adds	r3, #1
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2bfe      	cmp	r3, #254	; 0xfe
 8009df2:	ddc4      	ble.n	8009d7e <HexStringToByteArrayUDP+0x2a>
      }
    }
  }

  int i, j; //i for hex string, j for byte array
  for(i = 0, j = 0; i < len; i+=2, j++)
 8009df4:	2300      	movs	r3, #0
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e01f      	b.n	8009e3e <HexStringToByteArrayUDP+0xea>
  {
    UdpBuff[j] = (hexStringMap[data[i]] << 4) | hexStringMap[data[i+1]];
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	4413      	add	r3, r2
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	4b13      	ldr	r3, [pc, #76]	; (8009e58 <HexStringToByteArrayUDP+0x104>)
 8009e0a:	5c9b      	ldrb	r3, [r3, r2]
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	b25a      	sxtb	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	3301      	adds	r3, #1
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	440b      	add	r3, r1
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4b0e      	ldr	r3, [pc, #56]	; (8009e58 <HexStringToByteArrayUDP+0x104>)
 8009e1e:	5c5b      	ldrb	r3, [r3, r1]
 8009e20:	b25b      	sxtb	r3, r3
 8009e22:	4313      	orrs	r3, r2
 8009e24:	b25b      	sxtb	r3, r3
 8009e26:	b2d9      	uxtb	r1, r3
 8009e28:	4a0c      	ldr	r2, [pc, #48]	; (8009e5c <HexStringToByteArrayUDP+0x108>)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	460a      	mov	r2, r1
 8009e30:	701a      	strb	r2, [r3, #0]
  for(i = 0, j = 0; i < len; i+=2, j++)
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	3302      	adds	r3, #2
 8009e36:	613b      	str	r3, [r7, #16]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	dbdb      	blt.n	8009dfe <HexStringToByteArrayUDP+0xaa>
  }
  return j;
 8009e46:	68fb      	ldr	r3, [r7, #12]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	20000338 	.word	0x20000338
 8009e58:	20010180 	.word	0x20010180
 8009e5c:	20010064 	.word	0x20010064

08009e60 <TCP_Packet_Analyze>:

//packet string hex
void TCP_Packet_Analyze(uint8_t *recvData, int length)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  int upper = length;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	613b      	str	r3, [r7, #16]
  int offset = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
  while (length > 0)
 8009e72:	e078      	b.n	8009f66 <TCP_Packet_Analyze+0x106>
  {
    int eofPackIndx = -1;
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295
 8009e78:	61bb      	str	r3, [r7, #24]

    for (int i = offset; i < upper; i++)
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e00b      	b.n	8009e98 <TCP_Packet_Analyze+0x38>
    {
      if (recvData[i] == '#')
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b23      	cmp	r3, #35	; 0x23
 8009e8a:	d102      	bne.n	8009e92 <TCP_Packet_Analyze+0x32>
      {
        eofPackIndx = i;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	61bb      	str	r3, [r7, #24]
        break;
 8009e90:	e006      	b.n	8009ea0 <TCP_Packet_Analyze+0x40>
    for (int i = offset; i < upper; i++)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	3301      	adds	r3, #1
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	dbef      	blt.n	8009e80 <TCP_Packet_Analyze+0x20>
      }
    }
    if (eofPackIndx == -1) //not find "#"
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea6:	d11c      	bne.n	8009ee2 <TCP_Packet_Analyze+0x82>
    {
      if (TcpBuffOffset + length < TCP_BUFF_LEN)
 8009ea8:	4b33      	ldr	r3, [pc, #204]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	dc56      	bgt.n	8009f66 <TCP_Packet_Analyze+0x106>
      {
        // System.Buffer.BlockCopy(recvData, offset, Tcpbuff, TcpbuffOffset, length);
        memcpy(TcpBuff + TcpBuffOffset, recvData + offset, length);
 8009eb8:	4b2f      	ldr	r3, [pc, #188]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4b2f      	ldr	r3, [pc, #188]	; (8009f7c <TCP_Packet_Analyze+0x11c>)
 8009ec0:	18d0      	adds	r0, r2, r3
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	f017 fa04 	bl	80212d8 <memcpy>
        TcpBuffOffset += length;
 8009ed0:	4b29      	ldr	r3, [pc, #164]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	4a27      	ldr	r2, [pc, #156]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009eda:	6013      	str	r3, [r2, #0]
        length = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	e041      	b.n	8009f66 <TCP_Packet_Analyze+0x106>
      }
    }
    else
    {
      int lenTmp = eofPackIndx - offset; // 0 1 2 3 4
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	60fb      	str	r3, [r7, #12]
      if (lenTmp > 0 && TcpBuffOffset + lenTmp < TCP_BUFF_LEN)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd19      	ble.n	8009f24 <TCP_Packet_Analyze+0xc4>
 8009ef0:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f242 720f 	movw	r2, #9999	; 0x270f
 8009efc:	4293      	cmp	r3, r2
 8009efe:	dc11      	bgt.n	8009f24 <TCP_Packet_Analyze+0xc4>
      {
        // System.Buffer.BlockCopy(recvData, offset, Tcpbuff, TcpbuffOffset, lenTmp);
        memcpy(TcpBuff + TcpBuffOffset, recvData + offset, lenTmp);
 8009f00:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	461a      	mov	r2, r3
 8009f06:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <TCP_Packet_Analyze+0x11c>)
 8009f08:	18d0      	adds	r0, r2, r3
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	4413      	add	r3, r2
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4619      	mov	r1, r3
 8009f14:	f017 f9e0 	bl	80212d8 <memcpy>
        TcpBuffOffset += lenTmp;
 8009f18:	4b17      	ldr	r3, [pc, #92]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f22:	6013      	str	r3, [r2, #0]
      }
      offset = eofPackIndx + 1; //+1 for "#"
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	3301      	adds	r3, #1
 8009f28:	61fb      	str	r3, [r7, #28]
      length -= (lenTmp + 1);     // +1 for "#"
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	603b      	str	r3, [r7, #0]

      //handle tcp packet
      if (TcpBuffOffset % 2 == 0) //byte to hex string -> double length of packet
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10f      	bne.n	8009f60 <TCP_Packet_Analyze+0x100>
      {
        //TcpbuffOffset ~ length of Tcp packet
        //convert hex string to byte array
        TcpBuffOffset = HexStringToByteArray();
 8009f40:	f7ff fe88 	bl	8009c54 <HexStringToByteArray>
 8009f44:	4603      	mov	r3, r0
 8009f46:	4a0c      	ldr	r2, [pc, #48]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f48:	6013      	str	r3, [r2, #0]

        //check length field
        int lenOfPacket = (int)(*(uint16_t *)TcpBuff);
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <TCP_Packet_Analyze+0x11c>)
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	60bb      	str	r3, [r7, #8]
        if (lenOfPacket == TcpBuffOffset - 2) //2 byte of length field
 8009f50:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3b02      	subs	r3, #2
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d101      	bne.n	8009f60 <TCP_Packet_Analyze+0x100>
        {
//          curPacketSize = lenOfPacket;s
          TCP_Packet_Handle();
 8009f5c:	f7ff fd04 	bl	8009968 <TCP_Packet_Handle>
        }
      }
      TcpBuffOffset = 0;
 8009f60:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <TCP_Packet_Analyze+0x118>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
  while (length > 0)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dc83      	bgt.n	8009e74 <TCP_Packet_Analyze+0x14>
    }
  }
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	3720      	adds	r7, #32
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20000654 	.word	0x20000654
 8009f7c:	2000d948 	.word	0x2000d948

08009f80 <checkSum>:

uint16_t checkSum(uint8_t *ptr, int length)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	uint32_t checksum = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
	while (length > 1) //cong het cac byte16 lai
 8009f8e:	e00f      	b.n	8009fb0 <checkSum+0x30>
	{
		checksum += ((uint32_t)*ptr << 8) | (uint32_t) *(ptr + 1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	3201      	adds	r2, #1
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
		ptr += 2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	607b      	str	r3, [r7, #4]
		length -= 2;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	3b02      	subs	r3, #2
 8009fae:	603b      	str	r3, [r7, #0]
	while (length > 1) //cong het cac byte16 lai
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	dcec      	bgt.n	8009f90 <checkSum+0x10>
	}
	if (length)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00c      	beq.n	8009fd6 <checkSum+0x56>
	{
		checksum += ((uint32_t)*ptr) << 8; //neu con le 1 byte
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
	}
	while (checksum >> 16)
 8009fc8:	e005      	b.n	8009fd6 <checkSum+0x56>
	{
		checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	0c1b      	lsrs	r3, r3, #16
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
	while (checksum >> 16)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	0c1b      	lsrs	r3, r3, #16
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1f5      	bne.n	8009fca <checkSum+0x4a>
	}
	//nghich dao bit
	checksum = ~checksum;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	43db      	mvns	r3, r3
 8009fe2:	60fb      	str	r3, [r7, #12]

	return (uint16_t)checksum;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	b29b      	uxth	r3, r3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <UDP_Packet_Analyze>:

uint32_t rtt;
int64_t ntpTime = 0, ntpStart; //ntpstart = timer of stm32 when receive ntpTime
void UDP_Packet_Analyze(uint8_t *data, int len)
{
 8009ff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  LOG_WRITE("udpPacketAnalyze\n");
 800a000:	4834      	ldr	r0, [pc, #208]	; (800a0d4 <UDP_Packet_Analyze+0xe0>)
 800a002:	f017 faef 	bl	80215e4 <puts>
  //ntp packet
  if (len == UDP_PACKET_LEN)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b1c      	cmp	r3, #28
 800a00a:	d15f      	bne.n	800a0cc <UDP_Packet_Analyze+0xd8>
  {
    if(HexStringToByteArrayUDP(data, len) != UDP_BUFF_LEN) return;
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fea0 	bl	8009d54 <HexStringToByteArrayUDP>
 800a014:	4603      	mov	r3, r0
 800a016:	2b0e      	cmp	r3, #14
 800a018:	d155      	bne.n	800a0c6 <UDP_Packet_Analyze+0xd2>

    NTPStruct2 *ntpPack = (NTPStruct2 *)UdpBuff;
 800a01a:	4b2f      	ldr	r3, [pc, #188]	; (800a0d8 <UDP_Packet_Analyze+0xe4>)
 800a01c:	60fb      	str	r3, [r7, #12]

    if(checkSum((uint8_t*)UdpBuff, UDP_BUFF_LEN - 2) != ntpPack->checksum) return; //-2B checksum
 800a01e:	210c      	movs	r1, #12
 800a020:	482d      	ldr	r0, [pc, #180]	; (800a0d8 <UDP_Packet_Analyze+0xe4>)
 800a022:	f7ff ffad 	bl	8009f80 <checkSum>
 800a026:	4603      	mov	r3, r0
 800a028:	461a      	mov	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	899b      	ldrh	r3, [r3, #12]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	429a      	cmp	r2, r3
 800a032:	d14a      	bne.n	800a0ca <UDP_Packet_Analyze+0xd6>

    uint32_t recvNTPTime = TIM_NTP->CNT;
 800a034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	60bb      	str	r3, [r7, #8]
    rtt = (recvNTPTime - ntpPack->clientTime) >> 1; // >> 1 ~ / 2 (since TIM_NTP tick 0.5ms)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	085b      	lsrs	r3, r3, #1
 800a046:	4a25      	ldr	r2, [pc, #148]	; (800a0dc <UDP_Packet_Analyze+0xe8>)
 800a048:	6013      	str	r3, [r2, #0]

    //the first time, get as soon as posible
    if (ntpTime == 0)
 800a04a:	4b25      	ldr	r3, [pc, #148]	; (800a0e0 <UDP_Packet_Analyze+0xec>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	4313      	orrs	r3, r2
 800a052:	d117      	bne.n	800a084 <UDP_Packet_Analyze+0x90>
    {
      ntpTime = ntpPack->serverTime + rtt / 2;
 800a054:	68f9      	ldr	r1, [r7, #12]
 800a056:	680a      	ldr	r2, [r1, #0]
 800a058:	684b      	ldr	r3, [r1, #4]
 800a05a:	4920      	ldr	r1, [pc, #128]	; (800a0dc <UDP_Packet_Analyze+0xe8>)
 800a05c:	6809      	ldr	r1, [r1, #0]
 800a05e:	0849      	lsrs	r1, r1, #1
 800a060:	4608      	mov	r0, r1
 800a062:	f04f 0100 	mov.w	r1, #0
 800a066:	eb12 0800 	adds.w	r8, r2, r0
 800a06a:	eb43 0901 	adc.w	r9, r3, r1
 800a06e:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <UDP_Packet_Analyze+0xec>)
 800a070:	e9c3 8900 	strd	r8, r9, [r3]
      ntpStart = recvNTPTime >> 1; // /2 since TIMER tick 0.5ms
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	085b      	lsrs	r3, r3, #1
 800a078:	461a      	mov	r2, r3
 800a07a:	f04f 0300 	mov.w	r3, #0
 800a07e:	4919      	ldr	r1, [pc, #100]	; (800a0e4 <UDP_Packet_Analyze+0xf0>)
 800a080:	e9c1 2300 	strd	r2, r3, [r1]
    }

    //get until enough percious
    if (rtt < RTT_NTP_MAX)
 800a084:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <UDP_Packet_Analyze+0xe8>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b63      	cmp	r3, #99	; 0x63
 800a08a:	d81f      	bhi.n	800a0cc <UDP_Packet_Analyze+0xd8>
    {
      udpTimerCount++;
 800a08c:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <UDP_Packet_Analyze+0xf4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	4a15      	ldr	r2, [pc, #84]	; (800a0e8 <UDP_Packet_Analyze+0xf4>)
 800a094:	6013      	str	r3, [r2, #0]
      ntpTime = ntpPack->serverTime + rtt / 2;
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	680a      	ldr	r2, [r1, #0]
 800a09a:	684b      	ldr	r3, [r1, #4]
 800a09c:	490f      	ldr	r1, [pc, #60]	; (800a0dc <UDP_Packet_Analyze+0xe8>)
 800a09e:	6809      	ldr	r1, [r1, #0]
 800a0a0:	0849      	lsrs	r1, r1, #1
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	f04f 0100 	mov.w	r1, #0
 800a0a8:	1814      	adds	r4, r2, r0
 800a0aa:	eb43 0501 	adc.w	r5, r3, r1
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <UDP_Packet_Analyze+0xec>)
 800a0b0:	e9c3 4500 	strd	r4, r5, [r3]
      ntpStart = recvNTPTime >> 1; // >> 1 ~ /2 since TIMER tick 0.5ms
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	085b      	lsrs	r3, r3, #1
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	4909      	ldr	r1, [pc, #36]	; (800a0e4 <UDP_Packet_Analyze+0xf0>)
 800a0c0:	e9c1 2300 	strd	r2, r3, [r1]
 800a0c4:	e002      	b.n	800a0cc <UDP_Packet_Analyze+0xd8>
    if(HexStringToByteArrayUDP(data, len) != UDP_BUFF_LEN) return;
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <UDP_Packet_Analyze+0xd8>
    if(checkSum((uint8_t*)UdpBuff, UDP_BUFF_LEN - 2) != ntpPack->checksum) return; //-2B checksum
 800a0ca:	bf00      	nop
    }
  }
}
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a0d4:	08023544 	.word	0x08023544
 800a0d8:	20010064 	.word	0x20010064
 800a0dc:	20010284 	.word	0x20010284
 800a0e0:	20000668 	.word	0x20000668
 800a0e4:	20010298 	.word	0x20010298
 800a0e8:	20000660 	.word	0x20000660

0800a0ec <TCP_UDP_GetNtpTime>:

//get UTC NTP time
int64_t TCP_UDP_GetNtpTime()
{
 800a0ec:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
  if(ntpTime == 0) return 0; //don't have ntp time
 800a0f4:	4b18      	ldr	r3, [pc, #96]	; (800a158 <TCP_UDP_GetNtpTime+0x6c>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d104      	bne.n	800a108 <TCP_UDP_GetNtpTime+0x1c>
 800a0fe:	f04f 0800 	mov.w	r8, #0
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	e01e      	b.n	800a146 <TCP_UDP_GetNtpTime+0x5a>
  int64_t curTime = TIM_NTP->CNT;
 800a108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	461a      	mov	r2, r3
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	e9c7 2300 	strd	r2, r3, [r7]
  return ntpTime + (curTime >> 1) - ntpStart; //  >> 1 ~ /2 since TIMER tick 0.5ms
 800a118:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	f04f 0300 	mov.w	r3, #0
 800a124:	0862      	lsrs	r2, r4, #1
 800a126:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800a12a:	106b      	asrs	r3, r5, #1
 800a12c:	4c0a      	ldr	r4, [pc, #40]	; (800a158 <TCP_UDP_GetNtpTime+0x6c>)
 800a12e:	e9d4 4500 	ldrd	r4, r5, [r4]
 800a132:	1910      	adds	r0, r2, r4
 800a134:	eb43 0105 	adc.w	r1, r3, r5
 800a138:	4b08      	ldr	r3, [pc, #32]	; (800a15c <TCP_UDP_GetNtpTime+0x70>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	ebb0 0802 	subs.w	r8, r0, r2
 800a142:	eb61 0903 	sbc.w	r9, r1, r3
 800a146:	4642      	mov	r2, r8
 800a148:	464b      	mov	r3, r9
}
 800a14a:	4610      	mov	r0, r2
 800a14c:	4619      	mov	r1, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800a156:	4770      	bx	lr
 800a158:	20000668 	.word	0x20000668
 800a15c:	20010298 	.word	0x20010298

0800a160 <TCP_UDP_Stack_Init>:
//   }
// }

//init after TCP three-way handshake, but before RSA-AES handshake
void TCP_UDP_Stack_Init(osEventFlagsId_t eventID, int successFlag, int errorFlag, bool IsETH)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	70fb      	strb	r3, [r7, #3]
  LOG_WRITE("tcpUdpInit\n");
 800a16e:	482e      	ldr	r0, [pc, #184]	; (800a228 <TCP_UDP_Stack_Init+0xc8>)
 800a170:	f017 fa38 	bl	80215e4 <puts>
  //only one time after reboot
  if (salt == NULL)
 800a174:	4b2d      	ldr	r3, [pc, #180]	; (800a22c <TCP_UDP_Stack_Init+0xcc>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d118      	bne.n	800a1ae <TCP_UDP_Stack_Init+0x4e>
  {
    saltLen = strlen(DeviceID);
 800a17c:	4b2c      	ldr	r3, [pc, #176]	; (800a230 <TCP_UDP_Stack_Init+0xd0>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4618      	mov	r0, r3
 800a182:	f7f6 f825 	bl	80001d0 <strlen>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	4b2a      	ldr	r3, [pc, #168]	; (800a234 <TCP_UDP_Stack_Init+0xd4>)
 800a18c:	601a      	str	r2, [r3, #0]
    if (saltLen > DEVICE_LEN_MAX)
 800a18e:	4b29      	ldr	r3, [pc, #164]	; (800a234 <TCP_UDP_Stack_Init+0xd4>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b32      	cmp	r3, #50	; 0x32
 800a194:	dd02      	ble.n	800a19c <TCP_UDP_Stack_Init+0x3c>
      saltLen = DEVICE_LEN_MAX;
 800a196:	4b27      	ldr	r3, [pc, #156]	; (800a234 <TCP_UDP_Stack_Init+0xd4>)
 800a198:	2232      	movs	r2, #50	; 0x32
 800a19a:	601a      	str	r2, [r3, #0]
    salt = (uint8_t *)malloc(saltLen);
 800a19c:	4b25      	ldr	r3, [pc, #148]	; (800a234 <TCP_UDP_Stack_Init+0xd4>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f017 f87b 	bl	802129c <malloc>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b20      	ldr	r3, [pc, #128]	; (800a22c <TCP_UDP_Stack_Init+0xcc>)
 800a1ac:	601a      	str	r2, [r3, #0]
  }

  TCPConnectStatus = 0;
 800a1ae:	4b22      	ldr	r3, [pc, #136]	; (800a238 <TCP_UDP_Stack_Init+0xd8>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
  IsTLSHanshaked = false;
 800a1b4:	4b21      	ldr	r3, [pc, #132]	; (800a23c <TCP_UDP_Stack_Init+0xdc>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
  ISError = false;
 800a1ba:	4b21      	ldr	r3, [pc, #132]	; (800a240 <TCP_UDP_Stack_Init+0xe0>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	701a      	strb	r2, [r3, #0]

  TcpBuffOffset = 0;
 800a1c0:	4b20      	ldr	r3, [pc, #128]	; (800a244 <TCP_UDP_Stack_Init+0xe4>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
  bIsPending = false;
 800a1c6:	4b20      	ldr	r3, [pc, #128]	; (800a248 <TCP_UDP_Stack_Init+0xe8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
  remainData = 0;
 800a1cc:	4b1f      	ldr	r3, [pc, #124]	; (800a24c <TCP_UDP_Stack_Init+0xec>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]

  udpTimerCount = 0;
 800a1d2:	4b1f      	ldr	r3, [pc, #124]	; (800a250 <TCP_UDP_Stack_Init+0xf0>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
  tcpTimerCount = 1;
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <TCP_UDP_Stack_Init+0xf4>)
 800a1da:	2201      	movs	r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
  ntpTime = 0;
 800a1de:	491e      	ldr	r1, [pc, #120]	; (800a258 <TCP_UDP_Stack_Init+0xf8>)
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	f04f 0300 	mov.w	r3, #0
 800a1e8:	e9c1 2300 	strd	r2, r3, [r1]

  if (IsETH)
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <TCP_UDP_Stack_Init+0x9a>
  {
    connectType = connectTypeETH;
 800a1f2:	4b1a      	ldr	r3, [pc, #104]	; (800a25c <TCP_UDP_Stack_Init+0xfc>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	e002      	b.n	800a200 <TCP_UDP_Stack_Init+0xa0>
  }
  else
  {
    connectType = connectTypeSim7600;
 800a1fa:	4b18      	ldr	r3, [pc, #96]	; (800a25c <TCP_UDP_Stack_Init+0xfc>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
  }

  TCP_UDP_StackEventID = eventID;
 800a200:	4a17      	ldr	r2, [pc, #92]	; (800a260 <TCP_UDP_Stack_Init+0x100>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6013      	str	r3, [r2, #0]
  TCP_UDP_Flag.Success = successFlag; //successful TLS handshake
 800a206:	4a17      	ldr	r2, [pc, #92]	; (800a264 <TCP_UDP_Stack_Init+0x104>)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6013      	str	r3, [r2, #0]
  TCP_UDP_Flag.Error = errorFlag;
 800a20c:	4a15      	ldr	r2, [pc, #84]	; (800a264 <TCP_UDP_Stack_Init+0x104>)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6093      	str	r3, [r2, #8]

  //send request rsa-pubkey
  //  TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN);

  //init timer time-out tcp connect (max time before recv "ACK"))
  osTimerStart(TCPTimerOnceID, TLS_HANDSHAKE_TIMEOUT);
 800a212:	4b15      	ldr	r3, [pc, #84]	; (800a268 <TCP_UDP_Stack_Init+0x108>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fcf4 	bl	800bc08 <osTimerStart>
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	08023558 	.word	0x08023558
 800a22c:	20010074 	.word	0x20010074
 800a230:	20000004 	.word	0x20000004
 800a234:	20010288 	.word	0x20010288
 800a238:	2000064c 	.word	0x2000064c
 800a23c:	20000650 	.word	0x20000650
 800a240:	20000651 	.word	0x20000651
 800a244:	20000654 	.word	0x20000654
 800a248:	20000658 	.word	0x20000658
 800a24c:	2000065c 	.word	0x2000065c
 800a250:	20000660 	.word	0x20000660
 800a254:	20000334 	.word	0x20000334
 800a258:	20000668 	.word	0x20000668
 800a25c:	2001028c 	.word	0x2001028c
 800a260:	20010290 	.word	0x20010290
 800a264:	20010058 	.word	0x20010058
 800a268:	20005784 	.word	0x20005784

0800a26c <TCP_UDP_Stack_Release>:

//stop timer before re-connect
void TCP_UDP_Stack_Release()
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  LOG_WRITE("tcpUdpRelease\n");
 800a270:	4806      	ldr	r0, [pc, #24]	; (800a28c <TCP_UDP_Stack_Release+0x20>)
 800a272:	f017 f9b7 	bl	80215e4 <puts>
  osTimerStop(TCPTimerOnceID);
 800a276:	4b06      	ldr	r3, [pc, #24]	; (800a290 <TCP_UDP_Stack_Release+0x24>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fcf2 	bl	800bc64 <osTimerStop>
  IsTLSHanshaked = false;
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <TCP_UDP_Stack_Release+0x28>)
 800a282:	2200      	movs	r2, #0
 800a284:	701a      	strb	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	08023564 	.word	0x08023564
 800a290:	20005784 	.word	0x20005784
 800a294:	20000650 	.word	0x20000650

0800a298 <TCP_Timer_Callback>:

// osTimerStop(TCPTimerOnceID);
//time-out -> recconnect TCP/UDP
void TCP_Timer_Callback(void *argument)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  LOG_WRITE("tcpTimerCallb\n");
 800a2a0:	4844      	ldr	r0, [pc, #272]	; (800a3b4 <TCP_Timer_Callback+0x11c>)
 800a2a2:	f017 f99f 	bl	80215e4 <puts>
  (void)argument;
  if (!IsTLSHanshaked)
 800a2a6:	4b44      	ldr	r3, [pc, #272]	; (800a3b8 <TCP_Timer_Callback+0x120>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	f083 0301 	eor.w	r3, r3, #1
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <TCP_Timer_Callback+0x28>
  {
    TCP_UDP_Notify(TCP_UDP_Flag.Error);
 800a2b4:	4b41      	ldr	r3, [pc, #260]	; (800a3bc <TCP_Timer_Callback+0x124>)
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fad7 	bl	800986c <TCP_UDP_Notify>
    return;
 800a2be:	e076      	b.n	800a3ae <TCP_Timer_Callback+0x116>
  }

  if (tcpTimerCount % SEND_STAUS_INTERVAL == 0)
 800a2c0:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	4b3f      	ldr	r3, [pc, #252]	; (800a3c4 <TCP_Timer_Callback+0x12c>)
 800a2c6:	fb83 1302 	smull	r1, r3, r3, r2
 800a2ca:	1159      	asrs	r1, r3, #5
 800a2cc:	17d3      	asrs	r3, r2, #31
 800a2ce:	1acb      	subs	r3, r1, r3
 800a2d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800a2d4:	fb01 f303 	mul.w	r3, r1, r3
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d113      	bne.n	800a306 <TCP_Timer_Callback+0x6e>
  {
    int diffStatus = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]
    memcpy(Status_Packet + 2, (uint8_t *)(&diffStatus), 4);
 800a2e2:	4a39      	ldr	r2, [pc, #228]	; (800a3c8 <TCP_Timer_Callback+0x130>)
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	6013      	str	r3, [r2, #0]
    if (TCP_UDP_Send(1, Status_Packet, Status_Packet_LEN))
 800a2e8:	2306      	movs	r3, #6
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	4937      	ldr	r1, [pc, #220]	; (800a3cc <TCP_Timer_Callback+0x134>)
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	f7ff fad6 	bl	80098a0 <TCP_UDP_Send>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d028      	beq.n	800a34c <TCP_Timer_Callback+0xb4>
    {
      tcpTimerCount++;
 800a2fa:	4b31      	ldr	r3, [pc, #196]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3301      	adds	r3, #1
 800a300:	4a2f      	ldr	r2, [pc, #188]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	e022      	b.n	800a34c <TCP_Timer_Callback+0xb4>
    }
  }
  else if (tcpTimerCount % KEEP_ALIVE_INTERVAL == 0)
 800a306:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a308:	6819      	ldr	r1, [r3, #0]
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <TCP_Timer_Callback+0x138>)
 800a30c:	fb83 2301 	smull	r2, r3, r3, r1
 800a310:	10da      	asrs	r2, r3, #3
 800a312:	17cb      	asrs	r3, r1, #31
 800a314:	1ad2      	subs	r2, r2, r3
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	1aca      	subs	r2, r1, r3
 800a320:	2a00      	cmp	r2, #0
 800a322:	d10e      	bne.n	800a342 <TCP_Timer_Callback+0xaa>
  {
    if (TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN))
 800a324:	2303      	movs	r3, #3
 800a326:	461a      	mov	r2, r3
 800a328:	492a      	ldr	r1, [pc, #168]	; (800a3d4 <TCP_Timer_Callback+0x13c>)
 800a32a:	2001      	movs	r0, #1
 800a32c:	f7ff fab8 	bl	80098a0 <TCP_UDP_Send>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <TCP_Timer_Callback+0xb4>
    {
      tcpTimerCount++;
 800a336:	4b22      	ldr	r3, [pc, #136]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3301      	adds	r3, #1
 800a33c:	4a20      	ldr	r2, [pc, #128]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	e004      	b.n	800a34c <TCP_Timer_Callback+0xb4>
    }
  }
  else
    tcpTimerCount++;
 800a342:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <TCP_Timer_Callback+0x128>)
 800a34a:	6013      	str	r3, [r2, #0]

  if (udpTimerCount % NTP_INTERVAL == 0)
 800a34c:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <TCP_Timer_Callback+0x140>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <TCP_Timer_Callback+0x12c>)
 800a352:	fb83 1302 	smull	r1, r3, r3, r2
 800a356:	1159      	asrs	r1, r3, #5
 800a358:	17d3      	asrs	r3, r2, #31
 800a35a:	1acb      	subs	r3, r1, r3
 800a35c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d115      	bne.n	800a396 <TCP_Timer_Callback+0xfe>
    // memcpy(NTP_Packet, md5Sum, MD5_LEN);
    // //encrypt md5 sum
    // AES_Encrypt_Packet_Key(NTP_Packet, 16, (uint8_t*)ntpAESkey);

    // TCP_UDP_Send(2, NTP_Packet, NTP_PACKET_LEN);
    uint32_t curT = TIM_NTP->CNT;
 800a36a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	693b      	ldr	r3, [r7, #16]
    memcpy(NTP_Packet, (uint8_t *)(&curT), 4);
 800a374:	4a19      	ldr	r2, [pc, #100]	; (800a3dc <TCP_Timer_Callback+0x144>)
 800a376:	6013      	str	r3, [r2, #0]
    uint16_t _checksum = checkSum(NTP_Packet, 4);
 800a378:	2104      	movs	r1, #4
 800a37a:	4818      	ldr	r0, [pc, #96]	; (800a3dc <TCP_Timer_Callback+0x144>)
 800a37c:	f7ff fe00 	bl	8009f80 <checkSum>
 800a380:	4603      	mov	r3, r0
 800a382:	81fb      	strh	r3, [r7, #14]
    memcpy(NTP_Packet + 4, (uint8_t*)(&_checksum), 2);
 800a384:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <TCP_Timer_Callback+0x148>)
 800a386:	89fb      	ldrh	r3, [r7, #14]
 800a388:	8013      	strh	r3, [r2, #0]
    TCP_UDP_Send(2, NTP_Packet, 6);
 800a38a:	2206      	movs	r2, #6
 800a38c:	4913      	ldr	r1, [pc, #76]	; (800a3dc <TCP_Timer_Callback+0x144>)
 800a38e:	2002      	movs	r0, #2
 800a390:	f7ff fa86 	bl	80098a0 <TCP_UDP_Send>
 800a394:	e004      	b.n	800a3a0 <TCP_Timer_Callback+0x108>
  }
  else
  {
    udpTimerCount++;
 800a396:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <TCP_Timer_Callback+0x140>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	4a0e      	ldr	r2, [pc, #56]	; (800a3d8 <TCP_Timer_Callback+0x140>)
 800a39e:	6013      	str	r3, [r2, #0]
  }
  
  osTimerStart(TCPTimerOnceID, TIMER_INTERVAL);
 800a3a0:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <TCP_Timer_Callback+0x14c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f001 fc2d 	bl	800bc08 <osTimerStart>
}
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	08023574 	.word	0x08023574
 800a3b8:	20000650 	.word	0x20000650
 800a3bc:	20010058 	.word	0x20010058
 800a3c0:	20000334 	.word	0x20000334
 800a3c4:	1b4e81b5 	.word	0x1b4e81b5
 800a3c8:	2000032e 	.word	0x2000032e
 800a3cc:	2000032c 	.word	0x2000032c
 800a3d0:	66666667 	.word	0x66666667
 800a3d4:	20000328 	.word	0x20000328
 800a3d8:	20000660 	.word	0x20000660
 800a3dc:	200102a0 	.word	0x200102a0
 800a3e0:	200102a4 	.word	0x200102a4
 800a3e4:	20005784 	.word	0x20005784

0800a3e8 <TCP_Request>:

//request rsa pub key
void TCP_Request()
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
  TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN);
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	4902      	ldr	r1, [pc, #8]	; (800a3fc <TCP_Request+0x14>)
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	f7ff fa54 	bl	80098a0 <TCP_UDP_Send>
}
 800a3f8:	bf00      	nop
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	20000328 	.word	0x20000328

0800a400 <CheckMD5>:

bool Is_TCP_LTSHanshake_Connected() { return IsTLSHanshaked; }

//with pubkey packet (first packet), not necessary to decrypt md5
bool CheckMD5(PacketTCPStruct *packet)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  LOG_WRITE("chkMD5\n");
 800a408:	481b      	ldr	r0, [pc, #108]	; (800a478 <CheckMD5+0x78>)
 800a40a:	f017 f8eb 	bl	80215e4 <puts>
  if (TCPConnectStatus != 0) // >=1
 800a40e:	4b1b      	ldr	r3, [pc, #108]	; (800a47c <CheckMD5+0x7c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00c      	beq.n	800a430 <CheckMD5+0x30>
  {
    int res = AES_Decrypt_Packet(packet->md5, SIZE_OF_MD5);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3302      	adds	r3, #2
 800a41a:	2110      	movs	r1, #16
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fb fa93 	bl	8005948 <AES_Decrypt_Packet>
 800a422:	6138      	str	r0, [r7, #16]
    if (res == -1)
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d101      	bne.n	800a430 <CheckMD5+0x30>
      return false;
 800a42c:	2300      	movs	r3, #0
 800a42e:	e01f      	b.n	800a470 <CheckMD5+0x70>
  }
  uint8_t *md5Sum = md5hash(packet->payload, realPacketLen);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3312      	adds	r3, #18
 800a434:	4a12      	ldr	r2, [pc, #72]	; (800a480 <CheckMD5+0x80>)
 800a436:	6812      	ldr	r2, [r2, #0]
 800a438:	4611      	mov	r1, r2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fc fbe6 	bl	8006c0c <md5hash>
 800a440:	60f8      	str	r0, [r7, #12]
  int i;
  for (i = 0; i < SIZE_OF_MD5; i++)
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e00f      	b.n	800a468 <CheckMD5+0x68>
  {
    if (packet->md5[i] != md5Sum[i])
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	4413      	add	r3, r2
 800a44e:	3302      	adds	r3, #2
 800a450:	781a      	ldrb	r2, [r3, #0]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	68f9      	ldr	r1, [r7, #12]
 800a456:	440b      	add	r3, r1
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d001      	beq.n	800a462 <CheckMD5+0x62>
      return false;
 800a45e:	2300      	movs	r3, #0
 800a460:	e006      	b.n	800a470 <CheckMD5+0x70>
  for (i = 0; i < SIZE_OF_MD5; i++)
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	3301      	adds	r3, #1
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2b0f      	cmp	r3, #15
 800a46c:	ddec      	ble.n	800a448 <CheckMD5+0x48>
  }
  return true;
 800a46e:	2301      	movs	r3, #1
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	08023584 	.word	0x08023584
 800a47c:	2000064c 	.word	0x2000064c
 800a480:	200102c0 	.word	0x200102c0

0800a484 <ConvertTextWithSalt>:

void ConvertTextWithSalt(uint8_t *data, int offset, int len, enum SaltEnum saltType)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	70fb      	strb	r3, [r7, #3]
  LOG_WRITE("convertTextSalt\n");
 800a492:	4830      	ldr	r0, [pc, #192]	; (800a554 <ConvertTextWithSalt+0xd0>)
 800a494:	f017 f8a6 	bl	80215e4 <puts>
  if (salt == NULL)
 800a498:	4b2f      	ldr	r3, [pc, #188]	; (800a558 <ConvertTextWithSalt+0xd4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d055      	beq.n	800a54c <ConvertTextWithSalt+0xc8>
    return; //something wrong ???

  int i = 0, j = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	613b      	str	r3, [r7, #16]
  if (saltType == Add)
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d149      	bne.n	800a542 <ConvertTextWithSalt+0xbe>
  {
    while (j < len)
 800a4ae:	e021      	b.n	800a4f4 <ConvertTextWithSalt+0x70>
    {
      data[j + offset] += salt[i];
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	7819      	ldrb	r1, [r3, #0]
 800a4be:	4b26      	ldr	r3, [pc, #152]	; (800a558 <ConvertTextWithSalt+0xd4>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	6938      	ldr	r0, [r7, #16]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	4403      	add	r3, r0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4403      	add	r3, r0
 800a4d4:	440a      	add	r2, r1
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]
      j++;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
      i++;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	617b      	str	r3, [r7, #20]
      if (i == saltLen)
 800a4e6:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <ConvertTextWithSalt+0xd8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d101      	bne.n	800a4f4 <ConvertTextWithSalt+0x70>
        i = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
    while (j < len)
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	dbd9      	blt.n	800a4b0 <ConvertTextWithSalt+0x2c>
 800a4fc:	e027      	b.n	800a54e <ConvertTextWithSalt+0xca>
  }
  else //sub
  {
    while (j < len)
    {
      data[j + offset] -= salt[i];
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	4413      	add	r3, r2
 800a504:	461a      	mov	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4413      	add	r3, r2
 800a50a:	7819      	ldrb	r1, [r3, #0]
 800a50c:	4b12      	ldr	r3, [pc, #72]	; (800a558 <ConvertTextWithSalt+0xd4>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	781a      	ldrb	r2, [r3, #0]
 800a516:	6938      	ldr	r0, [r7, #16]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	4403      	add	r3, r0
 800a51c:	4618      	mov	r0, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4403      	add	r3, r0
 800a522:	1a8a      	subs	r2, r1, r2
 800a524:	b2d2      	uxtb	r2, r2
 800a526:	701a      	strb	r2, [r3, #0]
      j++;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3301      	adds	r3, #1
 800a52c:	613b      	str	r3, [r7, #16]
      i++;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	3301      	adds	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
      if (i == saltLen)
 800a534:	4b09      	ldr	r3, [pc, #36]	; (800a55c <ConvertTextWithSalt+0xd8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d101      	bne.n	800a542 <ConvertTextWithSalt+0xbe>
        i = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
    while (j < len)
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	429a      	cmp	r2, r3
 800a548:	dbd9      	blt.n	800a4fe <ConvertTextWithSalt+0x7a>
 800a54a:	e000      	b.n	800a54e <ConvertTextWithSalt+0xca>
    return; //something wrong ???
 800a54c:	bf00      	nop
    }
  }
}
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	0802358c 	.word	0x0802358c
 800a558:	20010074 	.word	0x20010074
 800a55c:	20010288 	.word	0x20010288

0800a560 <CheckSaltACK>:

//check data is the same with salt
bool CheckSaltACK(uint8_t *data, int len)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  LOG_WRITE("chkSaltACK\n");
 800a56a:	4814      	ldr	r0, [pc, #80]	; (800a5bc <CheckSaltACK+0x5c>)
 800a56c:	f017 f83a 	bl	80215e4 <puts>
  if (len >= saltLen)
 800a570:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <CheckSaltACK+0x60>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	db1b      	blt.n	800a5b2 <CheckSaltACK+0x52>
  {
    int i;
    for (i = 0; i < saltLen; i++)
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e011      	b.n	800a5a4 <CheckSaltACK+0x44>
    {
      if ((data[i] & 0x7F) != salt[i])
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	4413      	add	r3, r2
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a58c:	4a0d      	ldr	r2, [pc, #52]	; (800a5c4 <CheckSaltACK+0x64>)
 800a58e:	6811      	ldr	r1, [r2, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	440a      	add	r2, r1
 800a594:	7812      	ldrb	r2, [r2, #0]
 800a596:	4293      	cmp	r3, r2
 800a598:	d001      	beq.n	800a59e <CheckSaltACK+0x3e>
        return false;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e00a      	b.n	800a5b4 <CheckSaltACK+0x54>
    for (i = 0; i < saltLen; i++)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <CheckSaltACK+0x60>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	dbe8      	blt.n	800a580 <CheckSaltACK+0x20>
    }
    return true;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e000      	b.n	800a5b4 <CheckSaltACK+0x54>
  }
  return false;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	0802359c 	.word	0x0802359c
 800a5c0:	20010288 	.word	0x20010288
 800a5c4:	20010074 	.word	0x20010074

0800a5c8 <LL_GPIO_IsOutputPinSet>:
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	695a      	ldr	r2, [r3, #20]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	bf0c      	ite	eq
 800a5e0:	2301      	moveq	r3, #1
 800a5e2:	2300      	movne	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <VS1063_SPI_ReadByte>:
uint8_t muteFrameData[] = {0xFF, 0xF3, 0x14, 0xC4, 0x00, 0x00, 0x00, 0x03, 0x48, 
0x00, 0x00, 0x00, 0x00, 0x4C, 0x41, 0x4D, 0x45, 0x33, 0x2E, 0x31, 0x30, 0x30, 
0x4C, 0x41};

static uint8_t VS1063_SPI_ReadByte(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
	uint8_t rxData;

	HAL_StatusTypeDef res = HAL_SPI_Receive(&spiAudio, &rxData, 1, SPI_TIMEOUT_BYTE);
 800a5fa:	1db9      	adds	r1, r7, #6
 800a5fc:	2332      	movs	r3, #50	; 0x32
 800a5fe:	2201      	movs	r2, #1
 800a600:	4809      	ldr	r0, [pc, #36]	; (800a628 <VS1063_SPI_ReadByte+0x34>)
 800a602:	f7f9 f906 	bl	8003812 <HAL_SPI_Receive>
 800a606:	4603      	mov	r3, r0
 800a608:	71fb      	strb	r3, [r7, #7]
	if (res != HAL_OK)
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d005      	beq.n	800a61c <VS1063_SPI_ReadByte+0x28>
	{
		VSLOG_WRITE("HAL_SPI_Receive Error\n");
 800a610:	4806      	ldr	r0, [pc, #24]	; (800a62c <VS1063_SPI_ReadByte+0x38>)
 800a612:	f016 ffe7 	bl	80215e4 <puts>
		errorVS1063A = true;
 800a616:	4b06      	ldr	r3, [pc, #24]	; (800a630 <VS1063_SPI_ReadByte+0x3c>)
 800a618:	2201      	movs	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
	}

	return rxData;
 800a61c:	79bb      	ldrb	r3, [r7, #6]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	200056e4 	.word	0x200056e4
 800a62c:	080235a8 	.word	0x080235a8
 800a630:	20000339 	.word	0x20000339

0800a634 <VS1063_SPI_WriteByte>:

static void VS1063_SPI_WriteByte(uint8_t TxData)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res = HAL_SPI_Transmit(&spiAudio, &TxData, 1, SPI_TIMEOUT_BYTE);
 800a63e:	1df9      	adds	r1, r7, #7
 800a640:	2332      	movs	r3, #50	; 0x32
 800a642:	2201      	movs	r2, #1
 800a644:	4808      	ldr	r0, [pc, #32]	; (800a668 <VS1063_SPI_WriteByte+0x34>)
 800a646:	f7f8 ffa8 	bl	800359a <HAL_SPI_Transmit>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <VS1063_SPI_WriteByte+0x2c>
	{
		VSLOG_WRITE("HAL_SPI_Transmit Error\n");
 800a654:	4805      	ldr	r0, [pc, #20]	; (800a66c <VS1063_SPI_WriteByte+0x38>)
 800a656:	f016 ffc5 	bl	80215e4 <puts>
		errorVS1063A = true;
 800a65a:	4b05      	ldr	r3, [pc, #20]	; (800a670 <VS1063_SPI_WriteByte+0x3c>)
 800a65c:	2201      	movs	r2, #1
 800a65e:	701a      	strb	r2, [r3, #0]
	}
}
 800a660:	bf00      	nop
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	200056e4 	.word	0x200056e4
 800a66c:	080235c0 	.word	0x080235c0
 800a670:	20000339 	.word	0x20000339

0800a674 <VS1063_SPI_WriteArray>:

static void VS1063_SPI_WriteArray(uint8_t *TxData, int len)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	// VSLOG_WRITE("VS1063_SPI_WriteArray\n");
	HAL_StatusTypeDef res = HAL_SPI_Transmit(&spiAudio, TxData, len, SPI_TIMEOUT_ARRAY);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	b29a      	uxth	r2, r3
 800a682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4808      	ldr	r0, [pc, #32]	; (800a6ac <VS1063_SPI_WriteArray+0x38>)
 800a68a:	f7f8 ff86 	bl	800359a <HAL_SPI_Transmit>
 800a68e:	4603      	mov	r3, r0
 800a690:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <VS1063_SPI_WriteArray+0x30>
	{
		VSLOG_WRITE("HAL_SPI_Transmit Error\n");
 800a698:	4805      	ldr	r0, [pc, #20]	; (800a6b0 <VS1063_SPI_WriteArray+0x3c>)
 800a69a:	f016 ffa3 	bl	80215e4 <puts>
		errorVS1063A = true;
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <VS1063_SPI_WriteArray+0x40>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	701a      	strb	r2, [r3, #0]
	}
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200056e4 	.word	0x200056e4
 800a6b0:	080235c0 	.word	0x080235c0
 800a6b4:	20000339 	.word	0x20000339

0800a6b8 <waitMp3DREQ>:

//return 1 ~ success, 0 ~ , wait until MP3_DREQ == 1
int waitMp3DREQ()
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	VSLOG_WRITE("waitMp3DREQ ");
 800a6be:	4814      	ldr	r0, [pc, #80]	; (800a710 <waitMp3DREQ+0x58>)
 800a6c0:	f016 fef4 	bl	80214ac <iprintf>
	int try = MP3_DREQ_WAIT_CLKS;
 800a6c4:	4b13      	ldr	r3, [pc, #76]	; (800a714 <waitMp3DREQ+0x5c>)
 800a6c6:	607b      	str	r3, [r7, #4]
	while (try-- && MP3_DREQ == 0)
 800a6c8:	bf00      	nop
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	1e5a      	subs	r2, r3, #1
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <waitMp3DREQ+0x2c>
 800a6d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6d8:	480f      	ldr	r0, [pc, #60]	; (800a718 <waitMp3DREQ+0x60>)
 800a6da:	f7f8 fe37 	bl	800334c <HAL_GPIO_ReadPin>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0f2      	beq.n	800a6ca <waitMp3DREQ+0x12>
		;

	VSLOG_WRITE("%d clks\n", MP3_DREQ_WAIT_CLKS - try);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f5c3 2392 	rsb	r3, r3, #299008	; 0x49000
 800a6ea:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	480a      	ldr	r0, [pc, #40]	; (800a71c <waitMp3DREQ+0x64>)
 800a6f2:	f016 fedb 	bl	80214ac <iprintf>

	if (try <= 0)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	dc04      	bgt.n	800a706 <waitMp3DREQ+0x4e>
	{
		errorVS1063A = true;
 800a6fc:	4b08      	ldr	r3, [pc, #32]	; (800a720 <waitMp3DREQ+0x68>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
		return 0;
 800a702:	2300      	movs	r3, #0
 800a704:	e000      	b.n	800a708 <waitMp3DREQ+0x50>
	}

	return 1;
 800a706:	2301      	movs	r3, #1
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	080235d8 	.word	0x080235d8
 800a714:	000493e0 	.word	0x000493e0
 800a718:	40021000 	.word	0x40021000
 800a71c:	080235e8 	.word	0x080235e8
 800a720:	20000339 	.word	0x20000339

0800a724 <VS1063_WriteReg>:

void VS1063_WriteReg(uint8_t reg, uint16_t value)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	460a      	mov	r2, r1
 800a72e:	71fb      	strb	r3, [r7, #7]
 800a730:	4613      	mov	r3, r2
 800a732:	80bb      	strh	r3, [r7, #4]
	VSLOG_WRITE("VS1063_WriteReg\n");
 800a734:	4819      	ldr	r0, [pc, #100]	; (800a79c <VS1063_WriteReg+0x78>)
 800a736:	f016 ff55 	bl	80215e4 <puts>
	waitMp3DREQ();
 800a73a:	f7ff ffbd 	bl	800a6b8 <waitMp3DREQ>

	SCI_ENABLE
 800a73e:	2200      	movs	r2, #0
 800a740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a744:	4816      	ldr	r0, [pc, #88]	; (800a7a0 <VS1063_WriteReg+0x7c>)
 800a746:	f7f8 fe19 	bl	800337c <HAL_GPIO_WritePin>
 800a74a:	2201      	movs	r2, #1
 800a74c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a750:	4813      	ldr	r0, [pc, #76]	; (800a7a0 <VS1063_WriteReg+0x7c>)
 800a752:	f7f8 fe13 	bl	800337c <HAL_GPIO_WritePin>

	VS1063_SPI_WriteByte(VS_WRITE_COMMAND);
 800a756:	2002      	movs	r0, #2
 800a758:	f7ff ff6c 	bl	800a634 <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(reg);
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff ff68 	bl	800a634 <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(value >> 8);
 800a764:	88bb      	ldrh	r3, [r7, #4]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	b29b      	uxth	r3, r3
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff ff61 	bl	800a634 <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(value);
 800a772:	88bb      	ldrh	r3, [r7, #4]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff ff5c 	bl	800a634 <VS1063_SPI_WriteByte>

	SCI_DISABLE
 800a77c:	2201      	movs	r2, #1
 800a77e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a782:	4807      	ldr	r0, [pc, #28]	; (800a7a0 <VS1063_WriteReg+0x7c>)
 800a784:	f7f8 fdfa 	bl	800337c <HAL_GPIO_WritePin>
 800a788:	2200      	movs	r2, #0
 800a78a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a78e:	4804      	ldr	r0, [pc, #16]	; (800a7a0 <VS1063_WriteReg+0x7c>)
 800a790:	f7f8 fdf4 	bl	800337c <HAL_GPIO_WritePin>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	080235f4 	.word	0x080235f4
 800a7a0:	40021000 	.word	0x40021000

0800a7a4 <VS1063_ReadReg>:

uint16_t VS1063_ReadReg(uint8_t reg)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	71fb      	strb	r3, [r7, #7]
	uint16_t value;
	VSLOG_WRITE("VS1063_ReadReg\n");
 800a7ae:	481b      	ldr	r0, [pc, #108]	; (800a81c <VS1063_ReadReg+0x78>)
 800a7b0:	f016 ff18 	bl	80215e4 <puts>

	waitMp3DREQ();
 800a7b4:	f7ff ff80 	bl	800a6b8 <waitMp3DREQ>

	SCI_ENABLE
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7be:	4818      	ldr	r0, [pc, #96]	; (800a820 <VS1063_ReadReg+0x7c>)
 800a7c0:	f7f8 fddc 	bl	800337c <HAL_GPIO_WritePin>
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7ca:	4815      	ldr	r0, [pc, #84]	; (800a820 <VS1063_ReadReg+0x7c>)
 800a7cc:	f7f8 fdd6 	bl	800337c <HAL_GPIO_WritePin>

	VS1063_SPI_WriteByte(VS_READ_COMMAND);
 800a7d0:	2003      	movs	r0, #3
 800a7d2:	f7ff ff2f 	bl	800a634 <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(reg);
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff ff2b 	bl	800a634 <VS1063_SPI_WriteByte>
	value = VS1063_SPI_ReadByte();
 800a7de:	f7ff ff09 	bl	800a5f4 <VS1063_SPI_ReadByte>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	81fb      	strh	r3, [r7, #14]
	value = value << 8;
 800a7e6:	89fb      	ldrh	r3, [r7, #14]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	81fb      	strh	r3, [r7, #14]
	value |= VS1063_SPI_ReadByte();
 800a7ec:	f7ff ff02 	bl	800a5f4 <VS1063_SPI_ReadByte>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	89fb      	ldrh	r3, [r7, #14]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	81fb      	strh	r3, [r7, #14]

	SCI_DISABLE
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a800:	4807      	ldr	r0, [pc, #28]	; (800a820 <VS1063_ReadReg+0x7c>)
 800a802:	f7f8 fdbb 	bl	800337c <HAL_GPIO_WritePin>
 800a806:	2200      	movs	r2, #0
 800a808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a80c:	4804      	ldr	r0, [pc, #16]	; (800a820 <VS1063_ReadReg+0x7c>)
 800a80e:	f7f8 fdb5 	bl	800337c <HAL_GPIO_WritePin>

	return value;
 800a812:	89fb      	ldrh	r3, [r7, #14]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	08023604 	.word	0x08023604
 800a820:	40021000 	.word	0x40021000

0800a824 <readDREQ>:

int readDREQ()
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
	int dreq;
	VS1063_WriteReg(SPI_WRAMADDR, 0xC012); // Send address of DREQ register
 800a82a:	f24c 0112 	movw	r1, #49170	; 0xc012
 800a82e:	2007      	movs	r0, #7
 800a830:	f7ff ff78 	bl	800a724 <VS1063_WriteReg>
	dreq = VS1063_ReadReg(SPI_WRAM) & 1; // Read value of DREQ (in bit 0)
 800a834:	2006      	movs	r0, #6
 800a836:	f7ff ffb5 	bl	800a7a4 <VS1063_ReadReg>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	607b      	str	r3, [r7, #4]
	return dreq;
 800a842:	687b      	ldr	r3, [r7, #4]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <VS1063A_WriteRAM>:
	VS1063_WriteReg(SPI_WRAMADDR, addr); // Send address
	return VS1063_ReadReg(SPI_WRAM); // Read value
}

void VS1063A_WriteRAM(uint16_t addr, uint16_t data)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	460a      	mov	r2, r1
 800a856:	80fb      	strh	r3, [r7, #6]
 800a858:	4613      	mov	r3, r2
 800a85a:	80bb      	strh	r3, [r7, #4]
	VS1063_WriteReg(SPI_WRAMADDR, addr); // Send address
 800a85c:	88fb      	ldrh	r3, [r7, #6]
 800a85e:	4619      	mov	r1, r3
 800a860:	2007      	movs	r0, #7
 800a862:	f7ff ff5f 	bl	800a724 <VS1063_WriteReg>
	VS1063_WriteReg(SPI_WRAM, data); // write to this address
 800a866:	88bb      	ldrh	r3, [r7, #4]
 800a868:	4619      	mov	r1, r3
 800a86a:	2006      	movs	r0, #6
 800a86c:	f7ff ff5a 	bl	800a724 <VS1063_WriteReg>
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <VS1063_SetVol>:
	}
}

//input vol 0-100 ~ %, convert 0-100 ~ 0xFE-0x00
void VS1063_SetVol(int vol)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
	vol = vol * volMul / 100;
 800a880:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <VS1063_SetVol+0x7c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	fb02 f303 	mul.w	r3, r2, r3
 800a88a:	4a1b      	ldr	r2, [pc, #108]	; (800a8f8 <VS1063_SetVol+0x80>)
 800a88c:	fb82 1203 	smull	r1, r2, r2, r3
 800a890:	1152      	asrs	r2, r2, #5
 800a892:	17db      	asrs	r3, r3, #31
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	607b      	str	r3, [r7, #4]
	if (vol >= 100)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b63      	cmp	r3, #99	; 0x63
 800a89c:	dd02      	ble.n	800a8a4 <VS1063_SetVol+0x2c>
	{
		vol = 0x00;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	607b      	str	r3, [r7, #4]
 800a8a2:	e013      	b.n	800a8cc <VS1063_SetVol+0x54>
	}
	else if (vol <= 0)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc02      	bgt.n	800a8b0 <VS1063_SetVol+0x38>
	{
		vol = 0xFE;
 800a8aa:	23fe      	movs	r3, #254	; 0xfe
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	e00d      	b.n	800a8cc <VS1063_SetVol+0x54>
	}
	else
	{
		vol = (100 - vol) * 0xFE / 100;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	01db      	lsls	r3, r3, #7
 800a8ba:	1a9b      	subs	r3, r3, r2
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	4a0e      	ldr	r2, [pc, #56]	; (800a8f8 <VS1063_SetVol+0x80>)
 800a8c0:	fb82 1203 	smull	r1, r2, r2, r3
 800a8c4:	1152      	asrs	r2, r2, #5
 800a8c6:	17db      	asrs	r3, r3, #31
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	607b      	str	r3, [r7, #4]
	}
	vol = vol | (vol << 8); //convert to 2 channels
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	607b      	str	r3, [r7, #4]
	VSLOG_WRITE("vs1063 set vol %X", vol);
 800a8d6:	6879      	ldr	r1, [r7, #4]
 800a8d8:	4808      	ldr	r0, [pc, #32]	; (800a8fc <VS1063_SetVol+0x84>)
 800a8da:	f016 fde7 	bl	80214ac <iprintf>
	VS1063_WriteReg(SPI_VOL, vol);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	200b      	movs	r0, #11
 800a8e6:	f7ff ff1d 	bl	800a724 <VS1063_WriteReg>
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000033c 	.word	0x2000033c
 800a8f8:	51eb851f 	.word	0x51eb851f
 800a8fc:	08023670 	.word	0x08023670

0800a900 <VS1063_Init>:
// 	    }
// }
//

void VS1063_Init(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
	if (!errorVS1063A)
 800a906:	4b37      	ldr	r3, [pc, #220]	; (800a9e4 <VS1063_Init+0xe4>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	f083 0301 	eor.w	r3, r3, #1
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d162      	bne.n	800a9da <VS1063_Init+0xda>
		return;

	VSLOG_WRITE("VS1063_Init\n");
 800a914:	4834      	ldr	r0, [pc, #208]	; (800a9e8 <VS1063_Init+0xe8>)
 800a916:	f016 fe65 	bl	80215e4 <puts>

	//change spi baud
	spiAudio.Init.BaudRatePrescaler = SPI_AUDIO_PRESCLE_RESET;
 800a91a:	4b34      	ldr	r3, [pc, #208]	; (800a9ec <VS1063_Init+0xec>)
 800a91c:	2230      	movs	r2, #48	; 0x30
 800a91e:	61da      	str	r2, [r3, #28]
	if (HAL_SPI_Init(&spiAudio) != HAL_OK)
 800a920:	4832      	ldr	r0, [pc, #200]	; (800a9ec <VS1063_Init+0xec>)
 800a922:	f7f8 fdb1 	bl	8003488 <HAL_SPI_Init>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <VS1063_Init+0x30>
	{
		Error_Handler();
 800a92c:	f7f6 fe28 	bl	8001580 <Error_Handler>
	}

	MP3_Reset(0);
 800a930:	2200      	movs	r2, #0
 800a932:	2180      	movs	r1, #128	; 0x80
 800a934:	482e      	ldr	r0, [pc, #184]	; (800a9f0 <VS1063_Init+0xf0>)
 800a936:	f7f8 fd21 	bl	800337c <HAL_GPIO_WritePin>
	vs1063Delay(100);
 800a93a:	2064      	movs	r0, #100	; 0x64
 800a93c:	f001 f8b7 	bl	800baae <osDelay>
	MP3_Reset(1);
 800a940:	2201      	movs	r2, #1
 800a942:	2180      	movs	r1, #128	; 0x80
 800a944:	482a      	ldr	r0, [pc, #168]	; (800a9f0 <VS1063_Init+0xf0>)
 800a946:	f7f8 fd19 	bl	800337c <HAL_GPIO_WritePin>

	MP3_DCS(1);
 800a94a:	2201      	movs	r2, #1
 800a94c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a950:	4827      	ldr	r0, [pc, #156]	; (800a9f0 <VS1063_Init+0xf0>)
 800a952:	f7f8 fd13 	bl	800337c <HAL_GPIO_WritePin>
	MP3_CCS(1);
 800a956:	2201      	movs	r2, #1
 800a958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a95c:	4824      	ldr	r0, [pc, #144]	; (800a9f0 <VS1063_Init+0xf0>)
 800a95e:	f7f8 fd0d 	bl	800337c <HAL_GPIO_WritePin>

	vs1063Delay(100);
 800a962:	2064      	movs	r0, #100	; 0x64
 800a964:	f001 f8a3 	bl	800baae <osDelay>

	//config
	 VS1063_WriteReg(SPI_MODE, SM_SDINEW | SM_RESET); /* */
 800a968:	f640 0104 	movw	r1, #2052	; 0x804
 800a96c:	2000      	movs	r0, #0
 800a96e:	f7ff fed9 	bl	800a724 <VS1063_WriteReg>
//	osDelay(2);										 /* 1.35ms */

	waitMp3DREQ();
 800a972:	f7ff fea1 	bl	800a6b8 <waitMp3DREQ>

	int retry = 5;
 800a976:	2305      	movs	r3, #5
 800a978:	607b      	str	r3, [r7, #4]
	while (VS1063_ReadReg(SPI_CLOCKF) != CONFIG_SPI_CLOCKF)
 800a97a:	e013      	b.n	800a9a4 <VS1063_Init+0xa4>
	{
		VS1063_WriteReg(SPI_CLOCKF, CONFIG_SPI_CLOCKF);
 800a97c:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800a980:	2003      	movs	r0, #3
 800a982:	f7ff fecf 	bl	800a724 <VS1063_WriteReg>
		osDelay(1);
 800a986:	2001      	movs	r0, #1
 800a988:	f001 f891 	bl	800baae <osDelay>
		if (retry-- < 0)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	1e5a      	subs	r2, r3, #1
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	da06      	bge.n	800a9a4 <VS1063_Init+0xa4>
		{
			printf("SPI_CLOCKF Set Error\r\n");
 800a996:	4817      	ldr	r0, [pc, #92]	; (800a9f4 <VS1063_Init+0xf4>)
 800a998:	f016 fe24 	bl	80215e4 <puts>
			errorVS1063A = true;
 800a99c:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <VS1063_Init+0xe4>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	701a      	strb	r2, [r3, #0]
			return;
 800a9a2:	e01b      	b.n	800a9dc <VS1063_Init+0xdc>
	while (VS1063_ReadReg(SPI_CLOCKF) != CONFIG_SPI_CLOCKF)
 800a9a4:	2003      	movs	r0, #3
 800a9a6:	f7ff fefd 	bl	800a7a4 <VS1063_ReadReg>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 800a9b0:	d1e4      	bne.n	800a97c <VS1063_Init+0x7c>
		}
	}

	// change spi baud
	spiAudio.Init.BaudRatePrescaler = SPI_AUDIO_PRESCLE_MAIN;
 800a9b2:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <VS1063_Init+0xec>)
 800a9b4:	2218      	movs	r2, #24
 800a9b6:	61da      	str	r2, [r3, #28]
	if (HAL_SPI_Init(&spiAudio) != HAL_OK)
 800a9b8:	480c      	ldr	r0, [pc, #48]	; (800a9ec <VS1063_Init+0xec>)
 800a9ba:	f7f8 fd65 	bl	8003488 <HAL_SPI_Init>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <VS1063_Init+0xc8>
	{
		Error_Handler();
 800a9c4:	f7f6 fddc 	bl	8001580 <Error_Handler>
	}

	VS1063_SetVol(mainVol);
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <VS1063_Init+0xf8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7ff ff53 	bl	800a878 <VS1063_SetVol>
	errorVS1063A = false;
 800a9d2:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <VS1063_Init+0xe4>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	e000      	b.n	800a9dc <VS1063_Init+0xdc>
		return;
 800a9da:	bf00      	nop
}
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000339 	.word	0x20000339
 800a9e8:	08023684 	.word	0x08023684
 800a9ec:	200056e4 	.word	0x200056e4
 800a9f0:	40021000 	.word	0x40021000
 800a9f4:	08023658 	.word	0x08023658
 800a9f8:	20000340 	.word	0x20000340

0800a9fc <VS1063_PlayMP3>:
// 	SDI_DISABLE
// }

//send len byte of data frame to vs1063
void VS1063_PlayMP3(uint8_t *data, int len)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
	SDI_ENABLE
 800aa06:	2200      	movs	r2, #0
 800aa08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa0c:	480e      	ldr	r0, [pc, #56]	; (800aa48 <VS1063_PlayMP3+0x4c>)
 800aa0e:	f7f8 fcb5 	bl	800337c <HAL_GPIO_WritePin>
 800aa12:	2201      	movs	r2, #1
 800aa14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa18:	480b      	ldr	r0, [pc, #44]	; (800aa48 <VS1063_PlayMP3+0x4c>)
 800aa1a:	f7f8 fcaf 	bl	800337c <HAL_GPIO_WritePin>

	VS1063_SPI_WriteArray(data, len);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff fe27 	bl	800a674 <VS1063_SPI_WriteArray>

	SDI_DISABLE
 800aa26:	2201      	movs	r2, #1
 800aa28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa2c:	4806      	ldr	r0, [pc, #24]	; (800aa48 <VS1063_PlayMP3+0x4c>)
 800aa2e:	f7f8 fca5 	bl	800337c <HAL_GPIO_WritePin>
 800aa32:	2200      	movs	r2, #0
 800aa34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa38:	4803      	ldr	r0, [pc, #12]	; (800aa48 <VS1063_PlayMP3+0x4c>)
 800aa3a:	f7f8 fc9f 	bl	800337c <HAL_GPIO_WritePin>
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	40021000 	.word	0x40021000

0800aa4c <VS1063_PlayMp3Frame>:
bool bRunningVS1063 = false;
int64_t startPlayTimeVS1063;
uint32_t curFrameIdVs1063 = 0;
int missFrame = 0;
void VS1063_PlayMp3Frame()
{
 800aa4c:	b590      	push	{r4, r7, lr}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
	static int remainData = 0;
	// static int missFrame = 0; //lien tuc


	static FrameStruct *curFrame = NULL;
	VSLOG_WRITE("* %d %d", MP3_DREQ, readDREQ());
 800aa52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa56:	488b      	ldr	r0, [pc, #556]	; (800ac84 <VS1063_PlayMp3Frame+0x238>)
 800aa58:	f7f8 fc78 	bl	800334c <HAL_GPIO_ReadPin>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	461c      	mov	r4, r3
 800aa60:	f7ff fee0 	bl	800a824 <readDREQ>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4887      	ldr	r0, [pc, #540]	; (800ac88 <VS1063_PlayMp3Frame+0x23c>)
 800aa6c:	f016 fd1e 	bl	80214ac <iprintf>
	for (;;)
	{
		if(missFrame > 50) //~1s
 800aa70:	4b86      	ldr	r3, [pc, #536]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b32      	cmp	r3, #50	; 0x32
 800aa76:	dd05      	ble.n	800aa84 <VS1063_PlayMp3Frame+0x38>
		{
			missFrame = 0;
 800aa78:	4b84      	ldr	r3, [pc, #528]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
			bRunningVS1063 = false;
 800aa7e:	4b84      	ldr	r3, [pc, #528]	; (800ac90 <VS1063_PlayMp3Frame+0x244>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
			//soft reset
//			VS1063_SoftReset(); //delete all fifo
		}

		if (!bRunningVS1063 && curFrame == NULL)
 800aa84:	4b82      	ldr	r3, [pc, #520]	; (800ac90 <VS1063_PlayMp3Frame+0x244>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f083 0301 	eor.w	r3, r3, #1
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d015      	beq.n	800aabe <VS1063_PlayMp3Frame+0x72>
 800aa92:	4b80      	ldr	r3, [pc, #512]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d111      	bne.n	800aabe <VS1063_PlayMp3Frame+0x72>
		{
			curFrame = mp3GetNewFrame();
 800aa9a:	f7fc fc1d 	bl	80072d8 <mp3GetNewFrame>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4a7c      	ldr	r2, [pc, #496]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aaa2:	6013      	str	r3, [r2, #0]
			if(curFrame == NULL)
 800aaa4:	4b7b      	ldr	r3, [pc, #492]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 812f 	beq.w	800ad0c <VS1063_PlayMp3Frame+0x2c0>
				return;
			else
			{
				curFrameIdVs1063 = curFrame->id;
 800aaae:	4b79      	ldr	r3, [pc, #484]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695b      	ldr	r3, [r3, #20]
 800aab4:	4a78      	ldr	r2, [pc, #480]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800aab6:	6013      	str	r3, [r2, #0]
				remainData = 0;
 800aab8:	4b78      	ldr	r3, [pc, #480]	; (800ac9c <VS1063_PlayMp3Frame+0x250>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	601a      	str	r2, [r3, #0]

		// if (curFrame == NULL)
		// 	return; //have noting to play

		//have valid frame, begin push 2048B to FIFO vs1063a
		if (!bRunningVS1063 && curFrame != NULL)
 800aabe:	4b74      	ldr	r3, [pc, #464]	; (800ac90 <VS1063_PlayMp3Frame+0x244>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	f083 0301 	eor.w	r3, r3, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d070      	beq.n	800abae <VS1063_PlayMp3Frame+0x162>
 800aacc:	4b71      	ldr	r3, [pc, #452]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d06c      	beq.n	800abae <VS1063_PlayMp3Frame+0x162>
		{
			if (remainData + curFrame->len < 2000)
 800aad4:	4b6f      	ldr	r3, [pc, #444]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	691a      	ldr	r2, [r3, #16]
 800aada:	4b70      	ldr	r3, [pc, #448]	; (800ac9c <VS1063_PlayMp3Frame+0x250>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4413      	add	r3, r2
 800aae0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aae4:	da59      	bge.n	800ab9a <VS1063_PlayMp3Frame+0x14e>
			{
				remainData += curFrame->len;
 800aae6:	4b6b      	ldr	r3, [pc, #428]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	691a      	ldr	r2, [r3, #16]
 800aaec:	4b6b      	ldr	r3, [pc, #428]	; (800ac9c <VS1063_PlayMp3Frame+0x250>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	4a6a      	ldr	r2, [pc, #424]	; (800ac9c <VS1063_PlayMp3Frame+0x250>)
 800aaf4:	6013      	str	r3, [r2, #0]
				VS1063_PlayMP3(curFrame->data, curFrame->len);
 800aaf6:	4b67      	ldr	r3, [pc, #412]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6a1a      	ldr	r2, [r3, #32]
 800aafc:	4b65      	ldr	r3, [pc, #404]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	4619      	mov	r1, r3
 800ab04:	4610      	mov	r0, r2
 800ab06:	f7ff ff79 	bl	800a9fc <VS1063_PlayMP3>

				if(curFrame != &muteFrame)
 800ab0a:	4b62      	ldr	r3, [pc, #392]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a64      	ldr	r2, [pc, #400]	; (800aca0 <VS1063_PlayMp3Frame+0x254>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d004      	beq.n	800ab1e <VS1063_PlayMp3Frame+0xd2>
					mp3RemoveFrame(curFrame);
 800ab14:	4b5f      	ldr	r3, [pc, #380]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fc fc09 	bl	8007330 <mp3RemoveFrame>

				curFrame = mp3GetHeadFrame();
 800ab1e:	f7fc fbcf 	bl	80072c0 <mp3GetHeadFrame>
 800ab22:	4603      	mov	r3, r0
 800ab24:	4a5b      	ldr	r2, [pc, #364]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab26:	6013      	str	r3, [r2, #0]
				if(curFrame == NULL || curFrame->id > (curFrameIdVs1063 + 1))
 800ab28:	4b5a      	ldr	r3, [pc, #360]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <VS1063_PlayMp3Frame+0xf4>
 800ab30:	4b58      	ldr	r3, [pc, #352]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	695a      	ldr	r2, [r3, #20]
 800ab36:	4b58      	ldr	r3, [pc, #352]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d916      	bls.n	800ab6e <VS1063_PlayMp3Frame+0x122>
				{
					curFrame = &muteFrame;
 800ab40:	4b54      	ldr	r3, [pc, #336]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab42:	4a57      	ldr	r2, [pc, #348]	; (800aca0 <VS1063_PlayMp3Frame+0x254>)
 800ab44:	601a      	str	r2, [r3, #0]
					curFrame->id = curFrameIdVs1063 + 1;
 800ab46:	4b54      	ldr	r3, [pc, #336]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b52      	ldr	r3, [pc, #328]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3201      	adds	r2, #1
 800ab50:	615a      	str	r2, [r3, #20]
					curFrame->len = sizeof(muteFrameData);
 800ab52:	4b50      	ldr	r3, [pc, #320]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2218      	movs	r2, #24
 800ab58:	611a      	str	r2, [r3, #16]
					curFrame->data = muteFrameData;
 800ab5a:	4b4e      	ldr	r3, [pc, #312]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a51      	ldr	r2, [pc, #324]	; (800aca4 <VS1063_PlayMp3Frame+0x258>)
 800ab60:	621a      	str	r2, [r3, #32]
					missFrame++;
 800ab62:	4b4a      	ldr	r3, [pc, #296]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a48      	ldr	r2, [pc, #288]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	e00f      	b.n	800ab8e <VS1063_PlayMp3Frame+0x142>
				}
				else
				{
					if(curFrame->id < (curFrameIdVs1063 + 1)) //new session
 800ab6e:	4b49      	ldr	r3, [pc, #292]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	695a      	ldr	r2, [r3, #20]
 800ab74:	4b48      	ldr	r3, [pc, #288]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d204      	bcs.n	800ab88 <VS1063_PlayMp3Frame+0x13c>
					{
						curFrameIdVs1063 = curFrame->id;
 800ab7e:	4b45      	ldr	r3, [pc, #276]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	4a44      	ldr	r2, [pc, #272]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ab86:	6013      	str	r3, [r2, #0]
					}
					missFrame = 0;
 800ab88:	4b40      	ldr	r3, [pc, #256]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
				}
				curFrameIdVs1063++;
 800ab8e:	4b42      	ldr	r3, [pc, #264]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a40      	ldr	r2, [pc, #256]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ab96:	6013      	str	r3, [r2, #0]
				continue;
 800ab98:	e0b7      	b.n	800ad0a <VS1063_PlayMp3Frame+0x2be>
			}
			else
			{
				bRunningVS1063 = true;
 800ab9a:	4b3d      	ldr	r3, [pc, #244]	; (800ac90 <VS1063_PlayMp3Frame+0x244>)
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	701a      	strb	r2, [r3, #0]
				startPlayTimeVS1063 = TCP_UDP_GetNtpTime();
 800aba0:	f7ff faa4 	bl	800a0ec <TCP_UDP_GetNtpTime>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	493f      	ldr	r1, [pc, #252]	; (800aca8 <VS1063_PlayMp3Frame+0x25c>)
 800abaa:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if(bRunningVS1063) // in running
 800abae:	4b38      	ldr	r3, [pc, #224]	; (800ac90 <VS1063_PlayMp3Frame+0x244>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f43f af5c 	beq.w	800aa70 <VS1063_PlayMp3Frame+0x24>
		{
			//check real-time, if pendingOffset == 0
			if (pendingOffset == 0 && curFrame == NULL)
 800abb8:	4b3c      	ldr	r3, [pc, #240]	; (800acac <VS1063_PlayMp3Frame+0x260>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d13b      	bne.n	800ac38 <VS1063_PlayMp3Frame+0x1ec>
 800abc0:	4b34      	ldr	r3, [pc, #208]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d137      	bne.n	800ac38 <VS1063_PlayMp3Frame+0x1ec>
			{
				curFrame = mp3GetHeadFrame();
 800abc8:	f7fc fb7a 	bl	80072c0 <mp3GetHeadFrame>
 800abcc:	4603      	mov	r3, r0
 800abce:	4a31      	ldr	r2, [pc, #196]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abd0:	6013      	str	r3, [r2, #0]
				if(curFrame == NULL || curFrame->id > (curFrameIdVs1063 + 1))
 800abd2:	4b30      	ldr	r3, [pc, #192]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <VS1063_PlayMp3Frame+0x19e>
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	695a      	ldr	r2, [r3, #20]
 800abe0:	4b2d      	ldr	r3, [pc, #180]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3301      	adds	r3, #1
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d916      	bls.n	800ac18 <VS1063_PlayMp3Frame+0x1cc>
				{
					curFrame = &muteFrame;
 800abea:	4b2a      	ldr	r3, [pc, #168]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abec:	4a2c      	ldr	r2, [pc, #176]	; (800aca0 <VS1063_PlayMp3Frame+0x254>)
 800abee:	601a      	str	r2, [r3, #0]
					curFrame->id = curFrameIdVs1063 + 1;
 800abf0:	4b29      	ldr	r3, [pc, #164]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	4b27      	ldr	r3, [pc, #156]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3201      	adds	r2, #1
 800abfa:	615a      	str	r2, [r3, #20]
					curFrame->len = sizeof(muteFrameData);
 800abfc:	4b25      	ldr	r3, [pc, #148]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2218      	movs	r2, #24
 800ac02:	611a      	str	r2, [r3, #16]
					curFrame->data = muteFrameData;
 800ac04:	4b23      	ldr	r3, [pc, #140]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a26      	ldr	r2, [pc, #152]	; (800aca4 <VS1063_PlayMp3Frame+0x258>)
 800ac0a:	621a      	str	r2, [r3, #32]
					missFrame++;
 800ac0c:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3301      	adds	r3, #1
 800ac12:	4a1e      	ldr	r2, [pc, #120]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	e00f      	b.n	800ac38 <VS1063_PlayMp3Frame+0x1ec>
				}
				else
				{
					if(curFrame->id < (curFrameIdVs1063 + 1)) //new session
 800ac18:	4b1e      	ldr	r3, [pc, #120]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	695a      	ldr	r2, [r3, #20]
 800ac1e:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3301      	adds	r3, #1
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d204      	bcs.n	800ac32 <VS1063_PlayMp3Frame+0x1e6>
					{
						curFrameIdVs1063 = curFrame->id;
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	4a1a      	ldr	r2, [pc, #104]	; (800ac98 <VS1063_PlayMp3Frame+0x24c>)
 800ac30:	6013      	str	r3, [r2, #0]
					}
					missFrame = 0;
 800ac32:	4b16      	ldr	r3, [pc, #88]	; (800ac8c <VS1063_PlayMp3Frame+0x240>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
				}
			}

			if (MP3_DREQ) //can send data
 800ac38:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac3c:	4811      	ldr	r0, [pc, #68]	; (800ac84 <VS1063_PlayMp3Frame+0x238>)
 800ac3e:	f7f8 fb85 	bl	800334c <HAL_GPIO_ReadPin>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d063      	beq.n	800ad10 <VS1063_PlayMp3Frame+0x2c4>
			{
				VSLOG_WRITE("+");
 800ac48:	202b      	movs	r0, #43	; 0x2b
 800ac4a:	f016 fc47 	bl	80214dc <putchar>
				int remainLen = curFrame->len - pendingOffset;
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	691a      	ldr	r2, [r3, #16]
 800ac54:	4b15      	ldr	r3, [pc, #84]	; (800acac <VS1063_PlayMp3Frame+0x260>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	607b      	str	r3, [r7, #4]
				if (remainLen >= 32)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b1f      	cmp	r3, #31
 800ac60:	dd26      	ble.n	800acb0 <VS1063_PlayMp3Frame+0x264>
				{
					VS1063_PlayMP3(curFrame->data + pendingOffset, 32);
 800ac62:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <VS1063_PlayMp3Frame+0x248>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	4a10      	ldr	r2, [pc, #64]	; (800acac <VS1063_PlayMp3Frame+0x260>)
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	2120      	movs	r1, #32
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fec3 	bl	800a9fc <VS1063_PlayMP3>
					pendingOffset += 32;
 800ac76:	4b0d      	ldr	r3, [pc, #52]	; (800acac <VS1063_PlayMp3Frame+0x260>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3320      	adds	r3, #32
 800ac7c:	4a0b      	ldr	r2, [pc, #44]	; (800acac <VS1063_PlayMp3Frame+0x260>)
 800ac7e:	6013      	str	r3, [r2, #0]
				{
					errorVS1063A = true;
					VSLOG_WRITE("VS1063_PlayMp3Frame error\n");
					return;
				}
				continue;
 800ac80:	e043      	b.n	800ad0a <VS1063_PlayMp3Frame+0x2be>
 800ac82:	bf00      	nop
 800ac84:	40021000 	.word	0x40021000
 800ac88:	08023690 	.word	0x08023690
 800ac8c:	20000678 	.word	0x20000678
 800ac90:	20000670 	.word	0x20000670
 800ac94:	2000067c 	.word	0x2000067c
 800ac98:	20000674 	.word	0x20000674
 800ac9c:	20000684 	.word	0x20000684
 800aca0:	20000688 	.word	0x20000688
 800aca4:	20000344 	.word	0x20000344
 800aca8:	200102c8 	.word	0x200102c8
 800acac:	200006b0 	.word	0x200006b0
				else if (remainLen >= 0)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	db22      	blt.n	800acfc <VS1063_PlayMp3Frame+0x2b0>
					if (remainLen > 0)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dd09      	ble.n	800acd0 <VS1063_PlayMp3Frame+0x284>
						VS1063_PlayMP3(curFrame->data + pendingOffset, remainLen);
 800acbc:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <VS1063_PlayMp3Frame+0x2cc>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	4a16      	ldr	r2, [pc, #88]	; (800ad1c <VS1063_PlayMp3Frame+0x2d0>)
 800acc4:	6812      	ldr	r2, [r2, #0]
 800acc6:	4413      	add	r3, r2
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff fe96 	bl	800a9fc <VS1063_PlayMP3>
					pendingOffset = 0;
 800acd0:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <VS1063_PlayMp3Frame+0x2d0>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
					if(curFrame != &muteFrame)
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <VS1063_PlayMp3Frame+0x2cc>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a11      	ldr	r2, [pc, #68]	; (800ad20 <VS1063_PlayMp3Frame+0x2d4>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d004      	beq.n	800acea <VS1063_PlayMp3Frame+0x29e>
						mp3RemoveFrame(curFrame);
 800ace0:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <VS1063_PlayMp3Frame+0x2cc>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fc fb23 	bl	8007330 <mp3RemoveFrame>
					curFrame = NULL;
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <VS1063_PlayMp3Frame+0x2cc>)
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]
					curFrameIdVs1063++;
 800acf0:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <VS1063_PlayMp3Frame+0x2d8>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	4a0b      	ldr	r2, [pc, #44]	; (800ad24 <VS1063_PlayMp3Frame+0x2d8>)
 800acf8:	6013      	str	r3, [r2, #0]
				continue;
 800acfa:	e006      	b.n	800ad0a <VS1063_PlayMp3Frame+0x2be>
					errorVS1063A = true;
 800acfc:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <VS1063_PlayMp3Frame+0x2dc>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	701a      	strb	r2, [r3, #0]
					VSLOG_WRITE("VS1063_PlayMp3Frame error\n");
 800ad02:	480a      	ldr	r0, [pc, #40]	; (800ad2c <VS1063_PlayMp3Frame+0x2e0>)
 800ad04:	f016 fc6e 	bl	80215e4 <puts>
					return;
 800ad08:	e003      	b.n	800ad12 <VS1063_PlayMp3Frame+0x2c6>
		if(missFrame > 50) //~1s
 800ad0a:	e6b1      	b.n	800aa70 <VS1063_PlayMp3Frame+0x24>
				return;
 800ad0c:	bf00      	nop
 800ad0e:	e000      	b.n	800ad12 <VS1063_PlayMp3Frame+0x2c6>
			}
			else
			{
				return;
 800ad10:	bf00      	nop
			}
		}
	}
}
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd90      	pop	{r4, r7, pc}
 800ad18:	2000067c 	.word	0x2000067c
 800ad1c:	200006b0 	.word	0x200006b0
 800ad20:	20000688 	.word	0x20000688
 800ad24:	20000674 	.word	0x20000674
 800ad28:	20000339 	.word	0x20000339
 800ad2c:	08023698 	.word	0x08023698

0800ad30 <VS1063_ConfigOutput>:

int state = 0;  // 2:mic, 1:fm, 0:mp3
void VS1063_ConfigOutput()
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
	if(!MIC_SIGNAL && state != 2)
 800ad36:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad3a:	4862      	ldr	r0, [pc, #392]	; (800aec4 <VS1063_ConfigOutput+0x194>)
 800ad3c:	f7f8 fb06 	bl	800334c <HAL_GPIO_ReadPin>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d125      	bne.n	800ad92 <VS1063_ConfigOutput+0x62>
 800ad46:	4b60      	ldr	r3, [pc, #384]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d021      	beq.n	800ad92 <VS1063_ConfigOutput+0x62>
	{
		if(state == 0)
 800ad4e:	4b5e      	ldr	r3, [pc, #376]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d107      	bne.n	800ad66 <VS1063_ConfigOutput+0x36>
		{
			VS1063A_WriteRAM(PLAYMOD_ADDR, PLAYMOD_MIC_FM);
 800ad56:	2109      	movs	r1, #9
 800ad58:	f24c 00c9 	movw	r0, #49353	; 0xc0c9
 800ad5c:	f7ff fd76 	bl	800a84c <VS1063A_WriteRAM>
			//turn off volume
			VS1063_SetVol(0);
 800ad60:	2000      	movs	r0, #0
 800ad62:	f7ff fd89 	bl	800a878 <VS1063_SetVol>
		}
		//set left channel
		uint16_t tmp = VS1063_ReadReg(SPI_AICTRL3);
 800ad66:	200f      	movs	r0, #15
 800ad68:	f7ff fd1c 	bl	800a7a4 <VS1063_ReadReg>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	80fb      	strh	r3, [r7, #6]
		VS1063_WriteReg(SPI_AICTRL3, (tmp & AICTRL3_ADC_MASK) | AICTRL3_ADC_LEFT);
 800ad70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad74:	f023 0307 	bic.w	r3, r3, #7
 800ad78:	b21b      	sxth	r3, r3
 800ad7a:	f043 0302 	orr.w	r3, r3, #2
 800ad7e:	b21b      	sxth	r3, r3
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	4619      	mov	r1, r3
 800ad84:	200f      	movs	r0, #15
 800ad86:	f7ff fccd 	bl	800a724 <VS1063_WriteReg>

		state = 2;
 800ad8a:	4b4f      	ldr	r3, [pc, #316]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	601a      	str	r2, [r3, #0]
	{
 800ad90:	e04e      	b.n	800ae30 <VS1063_ConfigOutput+0x100>
	}
	else if(FM_SIGNAL && state != 1)
 800ad92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad96:	484d      	ldr	r0, [pc, #308]	; (800aecc <VS1063_ConfigOutput+0x19c>)
 800ad98:	f7f8 fad8 	bl	800334c <HAL_GPIO_ReadPin>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d025      	beq.n	800adee <VS1063_ConfigOutput+0xbe>
 800ada2:	4b49      	ldr	r3, [pc, #292]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d021      	beq.n	800adee <VS1063_ConfigOutput+0xbe>
	{
		if(state == 0)
 800adaa:	4b47      	ldr	r3, [pc, #284]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d107      	bne.n	800adc2 <VS1063_ConfigOutput+0x92>
		{
			VS1063A_WriteRAM(PLAYMOD_ADDR, PLAYMOD_MIC_FM);
 800adb2:	2109      	movs	r1, #9
 800adb4:	f24c 00c9 	movw	r0, #49353	; 0xc0c9
 800adb8:	f7ff fd48 	bl	800a84c <VS1063A_WriteRAM>
			//turn off volume
			VS1063_SetVol(0);
 800adbc:	2000      	movs	r0, #0
 800adbe:	f7ff fd5b 	bl	800a878 <VS1063_SetVol>
		}
		//set right channel
		uint16_t tmp = VS1063_ReadReg(SPI_AICTRL3);
 800adc2:	200f      	movs	r0, #15
 800adc4:	f7ff fcee 	bl	800a7a4 <VS1063_ReadReg>
 800adc8:	4603      	mov	r3, r0
 800adca:	80bb      	strh	r3, [r7, #4]
		VS1063_WriteReg(SPI_AICTRL3, (tmp & AICTRL3_ADC_MASK) | AICTRL3_ADC_RIGHT);
 800adcc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800add0:	f023 0307 	bic.w	r3, r3, #7
 800add4:	b21b      	sxth	r3, r3
 800add6:	f043 0303 	orr.w	r3, r3, #3
 800adda:	b21b      	sxth	r3, r3
 800addc:	b29b      	uxth	r3, r3
 800adde:	4619      	mov	r1, r3
 800ade0:	200f      	movs	r0, #15
 800ade2:	f7ff fc9f 	bl	800a724 <VS1063_WriteReg>

		state = 1;
 800ade6:	4b38      	ldr	r3, [pc, #224]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ade8:	2201      	movs	r2, #1
 800adea:	601a      	str	r2, [r3, #0]
	{
 800adec:	e020      	b.n	800ae30 <VS1063_ConfigOutput+0x100>
	}
	else if(MIC_SIGNAL && !FM_SIGNAL && state != 0)
 800adee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800adf2:	4834      	ldr	r0, [pc, #208]	; (800aec4 <VS1063_ConfigOutput+0x194>)
 800adf4:	f7f8 faaa 	bl	800334c <HAL_GPIO_ReadPin>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d018      	beq.n	800ae30 <VS1063_ConfigOutput+0x100>
 800adfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae02:	4832      	ldr	r0, [pc, #200]	; (800aecc <VS1063_ConfigOutput+0x19c>)
 800ae04:	f7f8 faa2 	bl	800334c <HAL_GPIO_ReadPin>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d110      	bne.n	800ae30 <VS1063_ConfigOutput+0x100>
 800ae0e:	4b2e      	ldr	r3, [pc, #184]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00c      	beq.n	800ae30 <VS1063_ConfigOutput+0x100>
	{
		VS1063A_WriteRAM(PLAYMOD_ADDR, PLAYMOD_MP3);
 800ae16:	2101      	movs	r1, #1
 800ae18:	f24c 00c9 	movw	r0, #49353	; 0xc0c9
 800ae1c:	f7ff fd16 	bl	800a84c <VS1063A_WriteRAM>
		VS1063_SetVol(mainVol);
 800ae20:	4b2b      	ldr	r3, [pc, #172]	; (800aed0 <VS1063_ConfigOutput+0x1a0>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff fd27 	bl	800a878 <VS1063_SetVol>

		state = 0;
 800ae2a:	4b27      	ldr	r3, [pc, #156]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]
	}

	//config vol
	if (state == 0 && mp3GetVol() != mainVol)
 800ae30:	4b25      	ldr	r3, [pc, #148]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d110      	bne.n	800ae5a <VS1063_ConfigOutput+0x12a>
 800ae38:	f7fc fa36 	bl	80072a8 <mp3GetVol>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <VS1063_ConfigOutput+0x1a0>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d009      	beq.n	800ae5a <VS1063_ConfigOutput+0x12a>
	{
		mainVol = mp3GetVol();
 800ae46:	f7fc fa2f 	bl	80072a8 <mp3GetVol>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	4a20      	ldr	r2, [pc, #128]	; (800aed0 <VS1063_ConfigOutput+0x1a0>)
 800ae4e:	6013      	str	r3, [r2, #0]
		VS1063_SetVol(mainVol);
 800ae50:	4b1f      	ldr	r3, [pc, #124]	; (800aed0 <VS1063_ConfigOutput+0x1a0>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff fd0f 	bl	800a878 <VS1063_SetVol>
	}

	//check state to enable amplifier
	if(!AMPLI_IS_ON && ((state == 0 && bRunningVS1063) || state != 0))
 800ae5a:	2120      	movs	r1, #32
 800ae5c:	4819      	ldr	r0, [pc, #100]	; (800aec4 <VS1063_ConfigOutput+0x194>)
 800ae5e:	f7ff fbb3 	bl	800a5c8 <LL_GPIO_IsOutputPinSet>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d111      	bne.n	800ae8c <VS1063_ConfigOutput+0x15c>
 800ae68:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <VS1063_ConfigOutput+0x148>
 800ae70:	4b18      	ldr	r3, [pc, #96]	; (800aed4 <VS1063_ConfigOutput+0x1a4>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d103      	bne.n	800ae80 <VS1063_ConfigOutput+0x150>
 800ae78:	4b13      	ldr	r3, [pc, #76]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <VS1063_ConfigOutput+0x15c>
	{
		AMPLI_ON;
 800ae80:	2201      	movs	r2, #1
 800ae82:	2120      	movs	r1, #32
 800ae84:	480f      	ldr	r0, [pc, #60]	; (800aec4 <VS1063_ConfigOutput+0x194>)
 800ae86:	f7f8 fa79 	bl	800337c <HAL_GPIO_WritePin>
	}
	else if(AMPLI_IS_ON && state == 0 && !bRunningVS1063)
	{
		AMPLI_OFF;
	}
}
 800ae8a:	e016      	b.n	800aeba <VS1063_ConfigOutput+0x18a>
	else if(AMPLI_IS_ON && state == 0 && !bRunningVS1063)
 800ae8c:	2120      	movs	r1, #32
 800ae8e:	480d      	ldr	r0, [pc, #52]	; (800aec4 <VS1063_ConfigOutput+0x194>)
 800ae90:	f7ff fb9a 	bl	800a5c8 <LL_GPIO_IsOutputPinSet>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00f      	beq.n	800aeba <VS1063_ConfigOutput+0x18a>
 800ae9a:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <VS1063_ConfigOutput+0x198>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10b      	bne.n	800aeba <VS1063_ConfigOutput+0x18a>
 800aea2:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <VS1063_ConfigOutput+0x1a4>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f083 0301 	eor.w	r3, r3, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <VS1063_ConfigOutput+0x18a>
		AMPLI_OFF;
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2120      	movs	r1, #32
 800aeb4:	4803      	ldr	r0, [pc, #12]	; (800aec4 <VS1063_ConfigOutput+0x194>)
 800aeb6:	f7f8 fa61 	bl	800337c <HAL_GPIO_WritePin>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	40021000 	.word	0x40021000
 800aec8:	20000680 	.word	0x20000680
 800aecc:	40020800 	.word	0x40020800
 800aed0:	20000340 	.word	0x20000340
 800aed4:	20000670 	.word	0x20000670

0800aed8 <VS1063_PlayMP3_Task>:

void VS1063_PlayMP3_Task()
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
	for (;;)
	{
		//init , reset if has error
		VS1063_Init();
 800aedc:	f7ff fd10 	bl	800a900 <VS1063_Init>

		//read pin MIC, FM signal, config input audio
		VS1063_ConfigOutput();
 800aee0:	f7ff ff26 	bl	800ad30 <VS1063_ConfigOutput>
//		tmp = VS1063A_ReadRAM(ADD_MIXER_CONFIG_ADDR);
		// VS1063A_WriteRAM(ADD_MIXER_GAIN_ADDR, 5);


		//play mp3
		 VS1063_PlayMp3Frame();
 800aee4:	f7ff fdb2 	bl	800aa4c <VS1063_PlayMp3Frame>
//		VS1063_PlayBuff();
//		VS1063_PrintBuff();

				// VS1063_PlayBeep();

		osDelay(VS1063_TASK_INTERVAL);
 800aee8:	200a      	movs	r0, #10
 800aeea:	f000 fde0 	bl	800baae <osDelay>
		VS1063_Init();
 800aeee:	e7f5      	b.n	800aedc <VS1063_PlayMP3_Task+0x4>

0800aef0 <MX_LWIP_checkIsystem_ip_addr>:
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
int MX_LWIP_checkIsystem_ip_addr()
{
 800aef0:	b480      	push	{r7}
 800aef2:	af00      	add	r7, sp, #0
	if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 800aef4:	4b09      	ldr	r3, [pc, #36]	; (800af1c <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d007      	beq.n	800af0c <MX_LWIP_checkIsystem_ip_addr+0x1c>
 800aefc:	4b07      	ldr	r3, [pc, #28]	; (800af1c <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <MX_LWIP_checkIsystem_ip_addr+0x1c>
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <MX_LWIP_checkIsystem_ip_addr+0x20>
	{
	   return 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e000      	b.n	800af12 <MX_LWIP_checkIsystem_ip_addr+0x22>
	}
	return 1;
 800af10:	2301      	movs	r3, #1
}
 800af12:	4618      	mov	r0, r3
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	200102fc 	.word	0x200102fc

0800af20 <MX_LWIP_getIP>:
// uint8_t ipDHCP[4];
uint8_t *MX_LWIP_getIP()
{
 800af20:	b480      	push	{r7}
 800af22:	af00      	add	r7, sp, #0
  if (gnetif.ip_addr.addr != 0)
 800af24:	4b05      	ldr	r3, [pc, #20]	; (800af3c <MX_LWIP_getIP+0x1c>)
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <MX_LWIP_getIP+0x10>
  {
    return (uint8_t*)(&gnetif.ip_addr.addr);
 800af2c:	4b04      	ldr	r3, [pc, #16]	; (800af40 <MX_LWIP_getIP+0x20>)
 800af2e:	e000      	b.n	800af32 <MX_LWIP_getIP+0x12>
  }
  else
  {
    return NULL;
 800af30:	2300      	movs	r3, #0
  }
}
 800af32:	4618      	mov	r0, r3
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	200102fc 	.word	0x200102fc
 800af40:	20010300 	.word	0x20010300

0800af44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800af4a:	2100      	movs	r1, #0
 800af4c:	2000      	movs	r0, #0
 800af4e:	f007 fcab 	bl	80128a8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800af52:	4b2a      	ldr	r3, [pc, #168]	; (800affc <MX_LWIP_Init+0xb8>)
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800af58:	4b29      	ldr	r3, [pc, #164]	; (800b000 <MX_LWIP_Init+0xbc>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800af5e:	4b29      	ldr	r3, [pc, #164]	; (800b004 <MX_LWIP_Init+0xc0>)
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800af64:	4b28      	ldr	r3, [pc, #160]	; (800b008 <MX_LWIP_Init+0xc4>)
 800af66:	9302      	str	r3, [sp, #8]
 800af68:	4b28      	ldr	r3, [pc, #160]	; (800b00c <MX_LWIP_Init+0xc8>)
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	2300      	movs	r3, #0
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	4b24      	ldr	r3, [pc, #144]	; (800b004 <MX_LWIP_Init+0xc0>)
 800af72:	4a23      	ldr	r2, [pc, #140]	; (800b000 <MX_LWIP_Init+0xbc>)
 800af74:	4921      	ldr	r1, [pc, #132]	; (800affc <MX_LWIP_Init+0xb8>)
 800af76:	4826      	ldr	r0, [pc, #152]	; (800b010 <MX_LWIP_Init+0xcc>)
 800af78:	f009 f9f0 	bl	801435c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800af7c:	4824      	ldr	r0, [pc, #144]	; (800b010 <MX_LWIP_Init+0xcc>)
 800af7e:	f009 fba7 	bl	80146d0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800af82:	4b23      	ldr	r3, [pc, #140]	; (800b010 <MX_LWIP_Init+0xcc>)
 800af84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af88:	089b      	lsrs	r3, r3, #2
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d003      	beq.n	800af9c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800af94:	481e      	ldr	r0, [pc, #120]	; (800b010 <MX_LWIP_Init+0xcc>)
 800af96:	f009 fbab 	bl	80146f0 <netif_set_up>
 800af9a:	e002      	b.n	800afa2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800af9c:	481c      	ldr	r0, [pc, #112]	; (800b010 <MX_LWIP_Init+0xcc>)
 800af9e:	f009 fc13 	bl	80147c8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800afa2:	491c      	ldr	r1, [pc, #112]	; (800b014 <MX_LWIP_Init+0xd0>)
 800afa4:	481a      	ldr	r0, [pc, #104]	; (800b010 <MX_LWIP_Init+0xcc>)
 800afa6:	f009 fca9 	bl	80148fc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800afaa:	2200      	movs	r2, #0
 800afac:	2101      	movs	r1, #1
 800afae:	2001      	movs	r0, #1
 800afb0:	f001 f8d9 	bl	800c166 <osSemaphoreNew>
 800afb4:	4603      	mov	r3, r0
 800afb6:	4a18      	ldr	r2, [pc, #96]	; (800b018 <MX_LWIP_Init+0xd4>)
 800afb8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800afba:	4b18      	ldr	r3, [pc, #96]	; (800b01c <MX_LWIP_Init+0xd8>)
 800afbc:	4a14      	ldr	r2, [pc, #80]	; (800b010 <MX_LWIP_Init+0xcc>)
 800afbe:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800afc0:	4b15      	ldr	r3, [pc, #84]	; (800b018 <MX_LWIP_Init+0xd4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a15      	ldr	r2, [pc, #84]	; (800b01c <MX_LWIP_Init+0xd8>)
 800afc6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800afc8:	2224      	movs	r2, #36	; 0x24
 800afca:	2100      	movs	r1, #0
 800afcc:	4814      	ldr	r0, [pc, #80]	; (800b020 <MX_LWIP_Init+0xdc>)
 800afce:	f016 f9ab 	bl	8021328 <memset>
  attributes.name = "LinkThr";
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <MX_LWIP_Init+0xdc>)
 800afd4:	4a13      	ldr	r2, [pc, #76]	; (800b024 <MX_LWIP_Init+0xe0>)
 800afd6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800afd8:	4b11      	ldr	r3, [pc, #68]	; (800b020 <MX_LWIP_Init+0xdc>)
 800afda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afde:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <MX_LWIP_Init+0xdc>)
 800afe2:	2210      	movs	r2, #16
 800afe4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800afe6:	4a0e      	ldr	r2, [pc, #56]	; (800b020 <MX_LWIP_Init+0xdc>)
 800afe8:	490c      	ldr	r1, [pc, #48]	; (800b01c <MX_LWIP_Init+0xd8>)
 800afea:	480f      	ldr	r0, [pc, #60]	; (800b028 <MX_LWIP_Init+0xe4>)
 800afec:	f000 fccd 	bl	800b98a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800aff0:	4807      	ldr	r0, [pc, #28]	; (800b010 <MX_LWIP_Init+0xcc>)
 800aff2:	f011 ff25 	bl	801ce40 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800aff6:	bf00      	nop
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20010334 	.word	0x20010334
 800b000:	20010338 	.word	0x20010338
 800b004:	2001033c 	.word	0x2001033c
 800b008:	080127b9 	.word	0x080127b9
 800b00c:	0800b655 	.word	0x0800b655
 800b010:	200102fc 	.word	0x200102fc
 800b014:	0800b739 	.word	0x0800b739
 800b018:	200006b4 	.word	0x200006b4
 800b01c:	200102d0 	.word	0x200102d0
 800b020:	200102d8 	.word	0x200102d8
 800b024:	080236c8 	.word	0x080236c8
 800b028:	0800b6c1 	.word	0x0800b6c1

0800b02c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08e      	sub	sp, #56	; 0x38
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	609a      	str	r2, [r3, #8]
 800b040:	60da      	str	r2, [r3, #12]
 800b042:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a4a      	ldr	r2, [pc, #296]	; (800b174 <HAL_ETH_MspInit+0x148>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	f040 808d 	bne.w	800b16a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b050:	2300      	movs	r3, #0
 800b052:	623b      	str	r3, [r7, #32]
 800b054:	4b48      	ldr	r3, [pc, #288]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	4a47      	ldr	r2, [pc, #284]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b05a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b05e:	6313      	str	r3, [r2, #48]	; 0x30
 800b060:	4b45      	ldr	r3, [pc, #276]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	2300      	movs	r3, #0
 800b06e:	61fb      	str	r3, [r7, #28]
 800b070:	4b41      	ldr	r3, [pc, #260]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b074:	4a40      	ldr	r2, [pc, #256]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b07a:	6313      	str	r3, [r2, #48]	; 0x30
 800b07c:	4b3e      	ldr	r3, [pc, #248]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	2300      	movs	r3, #0
 800b08a:	61bb      	str	r3, [r7, #24]
 800b08c:	4b3a      	ldr	r3, [pc, #232]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	4a39      	ldr	r2, [pc, #228]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b092:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b096:	6313      	str	r3, [r2, #48]	; 0x30
 800b098:	4b37      	ldr	r3, [pc, #220]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0a0:	61bb      	str	r3, [r7, #24]
 800b0a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	4b33      	ldr	r3, [pc, #204]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ac:	4a32      	ldr	r2, [pc, #200]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0ae:	f043 0304 	orr.w	r3, r3, #4
 800b0b2:	6313      	str	r3, [r2, #48]	; 0x30
 800b0b4:	4b30      	ldr	r3, [pc, #192]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	4b2c      	ldr	r3, [pc, #176]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	4a2b      	ldr	r2, [pc, #172]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0ca:	f043 0301 	orr.w	r3, r3, #1
 800b0ce:	6313      	str	r3, [r2, #48]	; 0x30
 800b0d0:	4b29      	ldr	r3, [pc, #164]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	613b      	str	r3, [r7, #16]
 800b0da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	4b25      	ldr	r3, [pc, #148]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e4:	4a24      	ldr	r2, [pc, #144]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0e6:	f043 0302 	orr.w	r3, r3, #2
 800b0ea:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ec:	4b22      	ldr	r3, [pc, #136]	; (800b178 <HAL_ETH_MspInit+0x14c>)
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b0f8:	2332      	movs	r3, #50	; 0x32
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b100:	2300      	movs	r3, #0
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b104:	2303      	movs	r3, #3
 800b106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b108:	230b      	movs	r3, #11
 800b10a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b110:	4619      	mov	r1, r3
 800b112:	481a      	ldr	r0, [pc, #104]	; (800b17c <HAL_ETH_MspInit+0x150>)
 800b114:	f7f7 ff7e 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b118:	2386      	movs	r3, #134	; 0x86
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11c:	2302      	movs	r3, #2
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b120:	2300      	movs	r3, #0
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b124:	2303      	movs	r3, #3
 800b126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b128:	230b      	movs	r3, #11
 800b12a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b12c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b130:	4619      	mov	r1, r3
 800b132:	4813      	ldr	r0, [pc, #76]	; (800b180 <HAL_ETH_MspInit+0x154>)
 800b134:	f7f7 ff6e 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800b138:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13e:	2302      	movs	r3, #2
 800b140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b142:	2300      	movs	r3, #0
 800b144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b146:	2303      	movs	r3, #3
 800b148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b14a:	230b      	movs	r3, #11
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b152:	4619      	mov	r1, r3
 800b154:	480b      	ldr	r0, [pc, #44]	; (800b184 <HAL_ETH_MspInit+0x158>)
 800b156:	f7f7 ff5d 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b15a:	2200      	movs	r2, #0
 800b15c:	2105      	movs	r1, #5
 800b15e:	203d      	movs	r0, #61	; 0x3d
 800b160:	f7f6 fd88 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b164:	203d      	movs	r0, #61	; 0x3d
 800b166:	f7f6 fda1 	bl	8001cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b16a:	bf00      	nop
 800b16c:	3738      	adds	r7, #56	; 0x38
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	40028000 	.word	0x40028000
 800b178:	40023800 	.word	0x40023800
 800b17c:	40020800 	.word	0x40020800
 800b180:	40020000 	.word	0x40020000
 800b184:	40020400 	.word	0x40020400

0800b188 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800b190:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <HAL_ETH_RxCpltCallback+0x1c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f001 f8c1 	bl	800c31c <osSemaphoreRelease>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200006b8 	.word	0x200006b8

0800b1a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b090      	sub	sp, #64	; 0x40
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b1b4:	4b5d      	ldr	r3, [pc, #372]	; (800b32c <low_level_init+0x184>)
 800b1b6:	4a5e      	ldr	r2, [pc, #376]	; (800b330 <low_level_init+0x188>)
 800b1b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b1ba:	4b5c      	ldr	r3, [pc, #368]	; (800b32c <low_level_init+0x184>)
 800b1bc:	2201      	movs	r2, #1
 800b1be:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b1c0:	4b5a      	ldr	r3, [pc, #360]	; (800b32c <low_level_init+0x184>)
 800b1c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1c6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b1c8:	4b58      	ldr	r3, [pc, #352]	; (800b32c <low_level_init+0x184>)
 800b1ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1ce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b1d0:	4b56      	ldr	r3, [pc, #344]	; (800b32c <low_level_init+0x184>)
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800b1da:	2380      	movs	r3, #128	; 0x80
 800b1dc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800b1de:	23e1      	movs	r3, #225	; 0xe1
 800b1e0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800b1ee:	4a4f      	ldr	r2, [pc, #316]	; (800b32c <low_level_init+0x184>)
 800b1f0:	f107 030c 	add.w	r3, r7, #12
 800b1f4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b1f6:	4b4d      	ldr	r3, [pc, #308]	; (800b32c <low_level_init+0x184>)
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b1fc:	4b4b      	ldr	r3, [pc, #300]	; (800b32c <low_level_init+0x184>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b202:	4b4a      	ldr	r3, [pc, #296]	; (800b32c <low_level_init+0x184>)
 800b204:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b208:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b20a:	4848      	ldr	r0, [pc, #288]	; (800b32c <low_level_init+0x184>)
 800b20c:	f7f6 fd5c 	bl	8001cc8 <HAL_ETH_Init>
 800b210:	4603      	mov	r3, r0
 800b212:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800b216:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d108      	bne.n	800b230 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b224:	f043 0304 	orr.w	r3, r3, #4
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b230:	2304      	movs	r3, #4
 800b232:	4a40      	ldr	r2, [pc, #256]	; (800b334 <low_level_init+0x18c>)
 800b234:	4940      	ldr	r1, [pc, #256]	; (800b338 <low_level_init+0x190>)
 800b236:	483d      	ldr	r0, [pc, #244]	; (800b32c <low_level_init+0x184>)
 800b238:	f7f6 fee2 	bl	8002000 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b23c:	2304      	movs	r3, #4
 800b23e:	4a3f      	ldr	r2, [pc, #252]	; (800b33c <low_level_init+0x194>)
 800b240:	493f      	ldr	r1, [pc, #252]	; (800b340 <low_level_init+0x198>)
 800b242:	483a      	ldr	r0, [pc, #232]	; (800b32c <low_level_init+0x184>)
 800b244:	f7f6 ff45 	bl	80020d2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2206      	movs	r2, #6
 800b24c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b250:	4b36      	ldr	r3, [pc, #216]	; (800b32c <low_level_init+0x184>)
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	781a      	ldrb	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b25c:	4b33      	ldr	r3, [pc, #204]	; (800b32c <low_level_init+0x184>)
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	785a      	ldrb	r2, [r3, #1]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b268:	4b30      	ldr	r3, [pc, #192]	; (800b32c <low_level_init+0x184>)
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	789a      	ldrb	r2, [r3, #2]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b274:	4b2d      	ldr	r3, [pc, #180]	; (800b32c <low_level_init+0x184>)
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	78da      	ldrb	r2, [r3, #3]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b280:	4b2a      	ldr	r3, [pc, #168]	; (800b32c <low_level_init+0x184>)
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	791a      	ldrb	r2, [r3, #4]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b28c:	4b27      	ldr	r3, [pc, #156]	; (800b32c <low_level_init+0x184>)
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	795a      	ldrb	r2, [r3, #5]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b29e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2a6:	f043 030a 	orr.w	r3, r3, #10
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	f000 ff55 	bl	800c166 <osSemaphoreNew>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	4a21      	ldr	r2, [pc, #132]	; (800b344 <low_level_init+0x19c>)
 800b2c0:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b2c2:	f107 0314 	add.w	r3, r7, #20
 800b2c6:	2224      	movs	r2, #36	; 0x24
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f016 f82c 	bl	8021328 <memset>
  attributes.name = "EthIf";
 800b2d0:	4b1d      	ldr	r3, [pc, #116]	; (800b348 <low_level_init+0x1a0>)
 800b2d2:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b2d4:	f240 2326 	movw	r3, #550	; 0x226
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800b2da:	2330      	movs	r3, #48	; 0x30
 800b2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800b2de:	f107 0314 	add.w	r3, r7, #20
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	6879      	ldr	r1, [r7, #4]
 800b2e6:	4819      	ldr	r0, [pc, #100]	; (800b34c <low_level_init+0x1a4>)
 800b2e8:	f000 fb4f 	bl	800b98a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b2ec:	480f      	ldr	r0, [pc, #60]	; (800b32c <low_level_init+0x184>)
 800b2ee:	f7f7 fa18 	bl	8002722 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b2f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	211d      	movs	r1, #29
 800b2fa:	480c      	ldr	r0, [pc, #48]	; (800b32c <low_level_init+0x184>)
 800b2fc:	f7f7 f943 	bl	8002586 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	f043 030b 	orr.w	r3, r3, #11
 800b306:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	461a      	mov	r2, r3
 800b30c:	211d      	movs	r1, #29
 800b30e:	4807      	ldr	r0, [pc, #28]	; (800b32c <low_level_init+0x184>)
 800b310:	f7f7 f9a1 	bl	8002656 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b314:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b318:	461a      	mov	r2, r3
 800b31a:	211d      	movs	r1, #29
 800b31c:	4803      	ldr	r0, [pc, #12]	; (800b32c <low_level_init+0x184>)
 800b31e:	f7f7 f932 	bl	8002586 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b322:	bf00      	nop
 800b324:	3740      	adds	r7, #64	; 0x40
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20011c10 	.word	0x20011c10
 800b330:	40028000 	.word	0x40028000
 800b334:	20011c58 	.word	0x20011c58
 800b338:	20010340 	.word	0x20010340
 800b33c:	200103c0 	.word	0x200103c0
 800b340:	20011b90 	.word	0x20011b90
 800b344:	200006b8 	.word	0x200006b8
 800b348:	080236d0 	.word	0x080236d0
 800b34c:	0800b5f5 	.word	0x0800b5f5

0800b350 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08a      	sub	sp, #40	; 0x28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b35a:	4b4b      	ldr	r3, [pc, #300]	; (800b488 <low_level_output+0x138>)
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b372:	4b45      	ldr	r3, [pc, #276]	; (800b488 <low_level_output+0x138>)
 800b374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b376:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	623b      	str	r3, [r7, #32]
 800b380:	e05a      	b.n	800b438 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	da03      	bge.n	800b392 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b38a:	23f8      	movs	r3, #248	; 0xf8
 800b38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b390:	e05c      	b.n	800b44c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	895b      	ldrh	r3, [r3, #10]
 800b396:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b39c:	e02f      	b.n	800b3fe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	18d0      	adds	r0, r2, r3
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	18d1      	adds	r1, r2, r3
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	f015 ff8f 	bl	80212d8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	da03      	bge.n	800b3d0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b3c8:	23f8      	movs	r3, #248	; 0xf8
 800b3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b3ce:	e03d      	b.n	800b44c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b3e0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b3ec:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b3f8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	4413      	add	r3, r2
 800b404:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b408:	4293      	cmp	r3, r2
 800b40a:	d8c8      	bhi.n	800b39e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	18d0      	adds	r0, r2, r3
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4413      	add	r3, r2
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4619      	mov	r1, r3
 800b41e:	f015 ff5b 	bl	80212d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4413      	add	r3, r2
 800b428:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	623b      	str	r3, [r7, #32]
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1a1      	bne.n	800b382 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b43e:	6979      	ldr	r1, [r7, #20]
 800b440:	4811      	ldr	r0, [pc, #68]	; (800b488 <low_level_output+0x138>)
 800b442:	f7f6 feb3 	bl	80021ac <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b44c:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <low_level_output+0x138>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b454:	3314      	adds	r3, #20
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00d      	beq.n	800b47c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b460:	4b09      	ldr	r3, [pc, #36]	; (800b488 <low_level_output+0x138>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b468:	3314      	adds	r3, #20
 800b46a:	2220      	movs	r2, #32
 800b46c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b46e:	4b06      	ldr	r3, [pc, #24]	; (800b488 <low_level_output+0x138>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b476:	3304      	adds	r3, #4
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b47c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b480:	4618      	mov	r0, r3
 800b482:	3728      	adds	r7, #40	; 0x28
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20011c10 	.word	0x20011c10

0800b48c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08c      	sub	sp, #48	; 0x30
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b4b0:	484f      	ldr	r0, [pc, #316]	; (800b5f0 <low_level_input+0x164>)
 800b4b2:	f7f6 ff65 	bl	8002380 <HAL_ETH_GetReceivedFrame_IT>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <low_level_input+0x34>

    return NULL;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e092      	b.n	800b5e6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b4c0:	4b4b      	ldr	r3, [pc, #300]	; (800b5f0 <low_level_input+0x164>)
 800b4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b4c6:	4b4a      	ldr	r3, [pc, #296]	; (800b5f0 <low_level_input+0x164>)
 800b4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800b4cc:	89fb      	ldrh	r3, [r7, #14]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d007      	beq.n	800b4e2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b4d2:	89fb      	ldrh	r3, [r7, #14]
 800b4d4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b4d8:	4619      	mov	r1, r3
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f009 fad8 	bl	8014a90 <pbuf_alloc>
 800b4e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d04b      	beq.n	800b580 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b4e8:	4b41      	ldr	r3, [pc, #260]	; (800b5f0 <low_level_input+0x164>)
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ec:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4f6:	e040      	b.n	800b57a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	895b      	ldrh	r3, [r3, #10]
 800b4fc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b502:	e021      	b.n	800b548 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	18d0      	adds	r0, r2, r3
 800b50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	18d1      	adds	r1, r2, r3
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b518:	3304      	adds	r3, #4
 800b51a:	461a      	mov	r2, r3
 800b51c:	f015 fedc 	bl	80212d8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	4413      	add	r3, r2
 800b532:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b536:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b538:	69ba      	ldr	r2, [r7, #24]
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b542:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	4413      	add	r3, r2
 800b54e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b552:	4293      	cmp	r3, r2
 800b554:	d8d6      	bhi.n	800b504 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	18d0      	adds	r0, r2, r3
 800b55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	4413      	add	r3, r2
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	4619      	mov	r1, r3
 800b568:	f015 feb6 	bl	80212d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	4413      	add	r3, r2
 800b572:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	62bb      	str	r3, [r7, #40]	; 0x28
 800b57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1bb      	bne.n	800b4f8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b580:	4b1b      	ldr	r3, [pc, #108]	; (800b5f0 <low_level_input+0x164>)
 800b582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b584:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b586:	2300      	movs	r3, #0
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	e00b      	b.n	800b5a4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	613b      	str	r3, [r7, #16]
 800b5a4:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <low_level_input+0x164>)
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d3ee      	bcc.n	800b58c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b5ae:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <low_level_input+0x164>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b5b4:	4b0e      	ldr	r3, [pc, #56]	; (800b5f0 <low_level_input+0x164>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5bc:	3314      	adds	r3, #20
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00d      	beq.n	800b5e4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <low_level_input+0x164>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d0:	3314      	adds	r3, #20
 800b5d2:	2280      	movs	r2, #128	; 0x80
 800b5d4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b5d6:	4b06      	ldr	r3, [pc, #24]	; (800b5f0 <low_level_input+0x164>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5de:	3308      	adds	r3, #8
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3730      	adds	r7, #48	; 0x30
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20011c10 	.word	0x20011c10

0800b5f4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b600:	4b12      	ldr	r3, [pc, #72]	; (800b64c <ethernetif_input+0x58>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f04f 31ff 	mov.w	r1, #4294967295
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fe35 	bl	800c278 <osSemaphoreAcquire>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1f5      	bne.n	800b600 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800b614:	480e      	ldr	r0, [pc, #56]	; (800b650 <ethernetif_input+0x5c>)
 800b616:	f015 fcc1 	bl	8020f9c <sys_mutex_lock>
        p = low_level_input( netif );
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff ff36 	bl	800b48c <low_level_input>
 800b620:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	68f9      	ldr	r1, [r7, #12]
 800b62e:	68b8      	ldr	r0, [r7, #8]
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800b638:	68b8      	ldr	r0, [r7, #8]
 800b63a:	f009 fd0d 	bl	8015058 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800b63e:	4804      	ldr	r0, [pc, #16]	; (800b650 <ethernetif_input+0x5c>)
 800b640:	f015 fcbb 	bl	8020fba <sys_mutex_unlock>
      } while(p!=NULL);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e4      	bne.n	800b614 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b64a:	e7d9      	b.n	800b600 <ethernetif_input+0xc>
 800b64c:	200006b8 	.word	0x200006b8
 800b650:	20013468 	.word	0x20013468

0800b654 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <ethernetif_init+0x1c>
 800b662:	4b0e      	ldr	r3, [pc, #56]	; (800b69c <ethernetif_init+0x48>)
 800b664:	f44f 720c 	mov.w	r2, #560	; 0x230
 800b668:	490d      	ldr	r1, [pc, #52]	; (800b6a0 <ethernetif_init+0x4c>)
 800b66a:	480e      	ldr	r0, [pc, #56]	; (800b6a4 <ethernetif_init+0x50>)
 800b66c:	f015 ff1e 	bl	80214ac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2273      	movs	r2, #115	; 0x73
 800b674:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2274      	movs	r2, #116	; 0x74
 800b67c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a09      	ldr	r2, [pc, #36]	; (800b6a8 <ethernetif_init+0x54>)
 800b684:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <ethernetif_init+0x58>)
 800b68a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff fd8b 	bl	800b1a8 <low_level_init>

  return ERR_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	080236d8 	.word	0x080236d8
 800b6a0:	080236f4 	.word	0x080236f4
 800b6a4:	08023704 	.word	0x08023704
 800b6a8:	0801ed6d 	.word	0x0801ed6d
 800b6ac:	0800b351 	.word	0x0800b351

0800b6b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b6b4:	f7f6 f9f6 	bl	8001aa4 <HAL_GetTick>
 800b6b8:	4603      	mov	r3, r0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b6d0:	f107 0308 	add.w	r3, r7, #8
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	4816      	ldr	r0, [pc, #88]	; (800b734 <ethernetif_set_link+0x74>)
 800b6da:	f7f6 ff54 	bl	8002586 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f003 0304 	and.w	r3, r3, #4
 800b6e4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d108      	bne.n	800b708 <ethernetif_set_link+0x48>
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d005      	beq.n	800b708 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	f009 f893 	bl	801482c <netif_set_link_up>
 800b706:	e011      	b.n	800b72c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b710:	089b      	lsrs	r3, r3, #2
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d007      	beq.n	800b72c <ethernetif_set_link+0x6c>
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d104      	bne.n	800b72c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4618      	mov	r0, r3
 800b728:	f009 f8b8 	bl	801489c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800b72c:	20c8      	movs	r0, #200	; 0xc8
 800b72e:	f000 f9be 	bl	800baae <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b732:	e7cd      	b.n	800b6d0 <ethernetif_set_link+0x10>
 800b734:	20011c10 	.word	0x20011c10

0800b738 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b74e:	089b      	lsrs	r3, r3, #2
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d05d      	beq.n	800b816 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b75a:	4b34      	ldr	r3, [pc, #208]	; (800b82c <ethernetif_update_config+0xf4>)
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d03f      	beq.n	800b7e2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b766:	2100      	movs	r1, #0
 800b768:	4830      	ldr	r0, [pc, #192]	; (800b82c <ethernetif_update_config+0xf4>)
 800b76a:	f7f6 ff74 	bl	8002656 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b76e:	f7f6 f999 	bl	8001aa4 <HAL_GetTick>
 800b772:	4603      	mov	r3, r0
 800b774:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b776:	f107 0308 	add.w	r3, r7, #8
 800b77a:	461a      	mov	r2, r3
 800b77c:	2101      	movs	r1, #1
 800b77e:	482b      	ldr	r0, [pc, #172]	; (800b82c <ethernetif_update_config+0xf4>)
 800b780:	f7f6 ff01 	bl	8002586 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b784:	f7f6 f98e 	bl	8001aa4 <HAL_GetTick>
 800b788:	4602      	mov	r2, r0
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b792:	d828      	bhi.n	800b7e6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f003 0320 	and.w	r3, r3, #32
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0eb      	beq.n	800b776 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	2110      	movs	r1, #16
 800b7a6:	4821      	ldr	r0, [pc, #132]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7a8:	f7f6 feed 	bl	8002586 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f003 0304 	and.w	r3, r3, #4
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d004      	beq.n	800b7c0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b7b6:	4b1d      	ldr	r3, [pc, #116]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7bc:	60da      	str	r2, [r3, #12]
 800b7be:	e002      	b.n	800b7c6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b7c0:	4b1a      	ldr	r3, [pc, #104]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f003 0302 	and.w	r3, r3, #2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b7d0:	4b16      	ldr	r3, [pc, #88]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	609a      	str	r2, [r3, #8]
 800b7d6:	e016      	b.n	800b806 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b7d8:	4b14      	ldr	r3, [pc, #80]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7de:	609a      	str	r2, [r3, #8]
 800b7e0:	e011      	b.n	800b806 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b7e2:	bf00      	nop
 800b7e4:	e000      	b.n	800b7e8 <ethernetif_update_config+0xb0>
          goto error;
 800b7e6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b7e8:	4b10      	ldr	r3, [pc, #64]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	08db      	lsrs	r3, r3, #3
 800b7ee:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b7f0:	4b0e      	ldr	r3, [pc, #56]	; (800b82c <ethernetif_update_config+0xf4>)
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	085b      	lsrs	r3, r3, #1
 800b7f6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	2100      	movs	r1, #0
 800b800:	480a      	ldr	r0, [pc, #40]	; (800b82c <ethernetif_update_config+0xf4>)
 800b802:	f7f6 ff28 	bl	8002656 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b806:	2100      	movs	r1, #0
 800b808:	4808      	ldr	r0, [pc, #32]	; (800b82c <ethernetif_update_config+0xf4>)
 800b80a:	f7f6 ffe9 	bl	80027e0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b80e:	4807      	ldr	r0, [pc, #28]	; (800b82c <ethernetif_update_config+0xf4>)
 800b810:	f7f6 ff87 	bl	8002722 <HAL_ETH_Start>
 800b814:	e002      	b.n	800b81c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b816:	4805      	ldr	r0, [pc, #20]	; (800b82c <ethernetif_update_config+0xf4>)
 800b818:	f7f6 ffb2 	bl	8002780 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f807 	bl	800b830 <ethernetif_notify_conn_changed>
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20011c10 	.word	0x20011c10

0800b830 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <__NVIC_SetPriority>:
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	6039      	str	r1, [r7, #0]
 800b84e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b854:	2b00      	cmp	r3, #0
 800b856:	db0a      	blt.n	800b86e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	490c      	ldr	r1, [pc, #48]	; (800b890 <__NVIC_SetPriority+0x4c>)
 800b85e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b862:	0112      	lsls	r2, r2, #4
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	440b      	add	r3, r1
 800b868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b86c:	e00a      	b.n	800b884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	b2da      	uxtb	r2, r3
 800b872:	4908      	ldr	r1, [pc, #32]	; (800b894 <__NVIC_SetPriority+0x50>)
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	f003 030f 	and.w	r3, r3, #15
 800b87a:	3b04      	subs	r3, #4
 800b87c:	0112      	lsls	r2, r2, #4
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	440b      	add	r3, r1
 800b882:	761a      	strb	r2, [r3, #24]
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	e000e100 	.word	0xe000e100
 800b894:	e000ed00 	.word	0xe000ed00

0800b898 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b89c:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <SysTick_Handler+0x1c>)
 800b89e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b8a0:	f003 faf0 	bl	800ee84 <xTaskGetSchedulerState>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d001      	beq.n	800b8ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b8aa:	f004 faf5 	bl	800fe98 <xPortSysTickHandler>
  }
}
 800b8ae:	bf00      	nop
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	e000e010 	.word	0xe000e010

0800b8b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b8bc:	2100      	movs	r1, #0
 800b8be:	f06f 0004 	mvn.w	r0, #4
 800b8c2:	f7ff ffbf 	bl	800b844 <__NVIC_SetPriority>
#endif
}
 800b8c6:	bf00      	nop
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8d2:	f3ef 8305 	mrs	r3, IPSR
 800b8d6:	603b      	str	r3, [r7, #0]
  return(result);
 800b8d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b8de:	f06f 0305 	mvn.w	r3, #5
 800b8e2:	607b      	str	r3, [r7, #4]
 800b8e4:	e00c      	b.n	800b900 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b8e6:	4b0a      	ldr	r3, [pc, #40]	; (800b910 <osKernelInitialize+0x44>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d105      	bne.n	800b8fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b8ee:	4b08      	ldr	r3, [pc, #32]	; (800b910 <osKernelInitialize+0x44>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	e002      	b.n	800b900 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b900:	687b      	ldr	r3, [r7, #4]
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	200006bc 	.word	0x200006bc

0800b914 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b91a:	f3ef 8305 	mrs	r3, IPSR
 800b91e:	603b      	str	r3, [r7, #0]
  return(result);
 800b920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b922:	2b00      	cmp	r3, #0
 800b924:	d003      	beq.n	800b92e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b926:	f06f 0305 	mvn.w	r3, #5
 800b92a:	607b      	str	r3, [r7, #4]
 800b92c:	e010      	b.n	800b950 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b92e:	4b0b      	ldr	r3, [pc, #44]	; (800b95c <osKernelStart+0x48>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d109      	bne.n	800b94a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b936:	f7ff ffbf 	bl	800b8b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b93a:	4b08      	ldr	r3, [pc, #32]	; (800b95c <osKernelStart+0x48>)
 800b93c:	2202      	movs	r2, #2
 800b93e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b940:	f002 fd66 	bl	800e410 <vTaskStartScheduler>
      stat = osOK;
 800b944:	2300      	movs	r3, #0
 800b946:	607b      	str	r3, [r7, #4]
 800b948:	e002      	b.n	800b950 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b94a:	f04f 33ff 	mov.w	r3, #4294967295
 800b94e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b950:	687b      	ldr	r3, [r7, #4]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	200006bc 	.word	0x200006bc

0800b960 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b966:	f3ef 8305 	mrs	r3, IPSR
 800b96a:	603b      	str	r3, [r7, #0]
  return(result);
 800b96c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b972:	f002 fe7b 	bl	800e66c <xTaskGetTickCountFromISR>
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	e002      	b.n	800b980 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b97a:	f002 fe67 	bl	800e64c <xTaskGetTickCount>
 800b97e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b980:	687b      	ldr	r3, [r7, #4]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b08e      	sub	sp, #56	; 0x38
 800b98e:	af04      	add	r7, sp, #16
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b99a:	f3ef 8305 	mrs	r3, IPSR
 800b99e:	617b      	str	r3, [r7, #20]
  return(result);
 800b9a0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d17e      	bne.n	800baa4 <osThreadNew+0x11a>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d07b      	beq.n	800baa4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b9ac:	2380      	movs	r3, #128	; 0x80
 800b9ae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b9b0:	2318      	movs	r3, #24
 800b9b2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d045      	beq.n	800ba50 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <osThreadNew+0x48>
        name = attr->name;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <osThreadNew+0x6e>
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	2b38      	cmp	r3, #56	; 0x38
 800b9ea:	d805      	bhi.n	800b9f8 <osThreadNew+0x6e>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <osThreadNew+0x72>
        return (NULL);
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e054      	b.n	800baa6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	089b      	lsrs	r3, r3, #2
 800ba0a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00e      	beq.n	800ba32 <osThreadNew+0xa8>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	2bc3      	cmp	r3, #195	; 0xc3
 800ba1a:	d90a      	bls.n	800ba32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d006      	beq.n	800ba32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	695b      	ldr	r3, [r3, #20]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <osThreadNew+0xa8>
        mem = 1;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	e010      	b.n	800ba54 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10c      	bne.n	800ba54 <osThreadNew+0xca>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d108      	bne.n	800ba54 <osThreadNew+0xca>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <osThreadNew+0xca>
          mem = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	61bb      	str	r3, [r7, #24]
 800ba4e:	e001      	b.n	800ba54 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d110      	bne.n	800ba7c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba62:	9202      	str	r2, [sp, #8]
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	6a3a      	ldr	r2, [r7, #32]
 800ba6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f002 fadb 	bl	800e02c <xTaskCreateStatic>
 800ba76:	4603      	mov	r3, r0
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	e013      	b.n	800baa4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d110      	bne.n	800baa4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	f107 0310 	add.w	r3, r7, #16
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f002 fb26 	bl	800e0e6 <xTaskCreate>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d001      	beq.n	800baa4 <osThreadNew+0x11a>
            hTask = NULL;
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800baa4:	693b      	ldr	r3, [r7, #16]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3728      	adds	r7, #40	; 0x28
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bab6:	f3ef 8305 	mrs	r3, IPSR
 800baba:	60bb      	str	r3, [r7, #8]
  return(result);
 800babc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <osDelay+0x1c>
    stat = osErrorISR;
 800bac2:	f06f 0305 	mvn.w	r3, #5
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	e007      	b.n	800bada <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800baca:	2300      	movs	r3, #0
 800bacc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <osDelay+0x2c>
      vTaskDelay(ticks);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f002 fc67 	bl	800e3a8 <vTaskDelay>
    }
  }

  return (stat);
 800bada:	68fb      	ldr	r3, [r7, #12]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f003 ffd0 	bl	800fa92 <pvTimerGetTimerID>
 800baf2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d005      	beq.n	800bb06 <TimerCallback+0x22>
    callb->func (callb->arg);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	6852      	ldr	r2, [r2, #4]
 800bb02:	4610      	mov	r0, r2
 800bb04:	4798      	blx	r3
  }
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08c      	sub	sp, #48	; 0x30
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	607a      	str	r2, [r7, #4]
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800bb20:	2300      	movs	r3, #0
 800bb22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb24:	f3ef 8305 	mrs	r3, IPSR
 800bb28:	613b      	str	r3, [r7, #16]
  return(result);
 800bb2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d163      	bne.n	800bbf8 <osTimerNew+0xe8>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d060      	beq.n	800bbf8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800bb36:	2008      	movs	r0, #8
 800bb38:	f004 fa3e 	bl	800ffb8 <pvPortMalloc>
 800bb3c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d059      	beq.n	800bbf8 <osTimerNew+0xe8>
      callb->func = func;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800bb50:	7afb      	ldrb	r3, [r7, #11]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <osTimerNew+0x4c>
        reload = pdFALSE;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	e001      	b.n	800bb60 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800bb60:	f04f 33ff 	mov.w	r3, #4294967295
 800bb64:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d01c      	beq.n	800bbaa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <osTimerNew+0x6e>
          name = attr->name;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d006      	beq.n	800bb94 <osTimerNew+0x84>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	2b2b      	cmp	r3, #43	; 0x2b
 800bb8c:	d902      	bls.n	800bb94 <osTimerNew+0x84>
          mem = 1;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	61bb      	str	r3, [r7, #24]
 800bb92:	e00c      	b.n	800bbae <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d108      	bne.n	800bbae <osTimerNew+0x9e>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d104      	bne.n	800bbae <osTimerNew+0x9e>
            mem = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	61bb      	str	r3, [r7, #24]
 800bba8:	e001      	b.n	800bbae <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d10c      	bne.n	800bbce <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	9301      	str	r3, [sp, #4]
 800bbba:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <osTimerNew+0xf4>)
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	69fa      	ldr	r2, [r7, #28]
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbc6:	f003 fbbc 	bl	800f342 <xTimerCreateStatic>
 800bbca:	6238      	str	r0, [r7, #32]
 800bbcc:	e00b      	b.n	800bbe6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d108      	bne.n	800bbe6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800bbd4:	4b0b      	ldr	r3, [pc, #44]	; (800bc04 <osTimerNew+0xf4>)
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	2101      	movs	r1, #1
 800bbde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbe0:	f003 fb8e 	bl	800f300 <xTimerCreate>
 800bbe4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d105      	bne.n	800bbf8 <osTimerNew+0xe8>
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d002      	beq.n	800bbf8 <osTimerNew+0xe8>
        vPortFree (callb);
 800bbf2:	6978      	ldr	r0, [r7, #20]
 800bbf4:	f004 faac 	bl	8010150 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3728      	adds	r7, #40	; 0x28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	0800bae5 	.word	0x0800bae5

0800bc08 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc16:	f3ef 8305 	mrs	r3, IPSR
 800bc1a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <osTimerStart+0x22>
    stat = osErrorISR;
 800bc22:	f06f 0305 	mvn.w	r3, #5
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e017      	b.n	800bc5a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <osTimerStart+0x30>
    stat = osErrorParameter;
 800bc30:	f06f 0303 	mvn.w	r3, #3
 800bc34:	617b      	str	r3, [r7, #20]
 800bc36:	e010      	b.n	800bc5a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	2104      	movs	r1, #4
 800bc42:	6938      	ldr	r0, [r7, #16]
 800bc44:	f003 fbf6 	bl	800f434 <xTimerGenericCommand>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d102      	bne.n	800bc54 <osTimerStart+0x4c>
      stat = osOK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	e002      	b.n	800bc5a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800bc54:	f06f 0302 	mvn.w	r3, #2
 800bc58:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bc5a:	697b      	ldr	r3, [r7, #20]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc70:	f3ef 8305 	mrs	r3, IPSR
 800bc74:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc76:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <osTimerStop+0x20>
    stat = osErrorISR;
 800bc7c:	f06f 0305 	mvn.w	r3, #5
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	e021      	b.n	800bcc8 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d103      	bne.n	800bc92 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800bc8a:	f06f 0303 	mvn.w	r3, #3
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e01a      	b.n	800bcc8 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800bc92:	6938      	ldr	r0, [r7, #16]
 800bc94:	f003 fed4 	bl	800fa40 <xTimerIsTimerActive>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d103      	bne.n	800bca6 <osTimerStop+0x42>
      stat = osErrorResource;
 800bc9e:	f06f 0302 	mvn.w	r3, #2
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	e010      	b.n	800bcc8 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800bca6:	2300      	movs	r3, #0
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2200      	movs	r2, #0
 800bcae:	2103      	movs	r1, #3
 800bcb0:	6938      	ldr	r0, [r7, #16]
 800bcb2:	f003 fbbf 	bl	800f434 <xTimerGenericCommand>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d102      	bne.n	800bcc2 <osTimerStop+0x5e>
        stat = osOK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	617b      	str	r3, [r7, #20]
 800bcc0:	e002      	b.n	800bcc8 <osTimerStop+0x64>
      } else {
        stat = osError;
 800bcc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bcc8:	697b      	ldr	r3, [r7, #20]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcde:	f3ef 8305 	mrs	r3, IPSR
 800bce2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bce4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d12d      	bne.n	800bd46 <osEventFlagsNew+0x74>
    mem = -1;
 800bcea:	f04f 33ff 	mov.w	r3, #4294967295
 800bcee:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d015      	beq.n	800bd22 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d006      	beq.n	800bd0c <osEventFlagsNew+0x3a>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	2b1f      	cmp	r3, #31
 800bd04:	d902      	bls.n	800bd0c <osEventFlagsNew+0x3a>
        mem = 1;
 800bd06:	2301      	movs	r3, #1
 800bd08:	613b      	str	r3, [r7, #16]
 800bd0a:	e00c      	b.n	800bd26 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d108      	bne.n	800bd26 <osEventFlagsNew+0x54>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d104      	bne.n	800bd26 <osEventFlagsNew+0x54>
          mem = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	e001      	b.n	800bd26 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d106      	bne.n	800bd3a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fd27 	bl	800c784 <xEventGroupCreateStatic>
 800bd36:	6178      	str	r0, [r7, #20]
 800bd38:	e005      	b.n	800bd46 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800bd40:	f000 fd57 	bl	800c7f2 <xEventGroupCreate>
 800bd44:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800bd46:	697b      	ldr	r3, [r7, #20]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d004      	beq.n	800bd6e <osEventFlagsSet+0x1e>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800bd6e:	f06f 0303 	mvn.w	r3, #3
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e028      	b.n	800bdc8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd76:	f3ef 8305 	mrs	r3, IPSR
 800bd7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01d      	beq.n	800bdbe <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bd86:	f107 0308 	add.w	r3, r7, #8
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6938      	ldr	r0, [r7, #16]
 800bd90:	f000 ff84 	bl	800cc9c <xEventGroupSetBitsFromISR>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d103      	bne.n	800bda2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800bd9a:	f06f 0302 	mvn.w	r3, #2
 800bd9e:	617b      	str	r3, [r7, #20]
 800bda0:	e012      	b.n	800bdc8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00d      	beq.n	800bdc8 <osEventFlagsSet+0x78>
 800bdac:	4b09      	ldr	r3, [pc, #36]	; (800bdd4 <osEventFlagsSet+0x84>)
 800bdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	e004      	b.n	800bdc8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6938      	ldr	r0, [r7, #16]
 800bdc2:	f000 fe6f 	bl	800caa4 <xEventGroupSetBits>
 800bdc6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800bdc8:	697b      	ldr	r3, [r7, #20]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3718      	adds	r7, #24
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	e000ed04 	.word	0xe000ed04

0800bdd8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d004      	beq.n	800bdf6 <osEventFlagsClear+0x1e>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800bdf6:	f06f 0303 	mvn.w	r3, #3
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	e019      	b.n	800be32 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdfe:	f3ef 8305 	mrs	r3, IPSR
 800be02:	60fb      	str	r3, [r7, #12]
  return(result);
 800be04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00e      	beq.n	800be28 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800be0a:	6938      	ldr	r0, [r7, #16]
 800be0c:	f000 fe26 	bl	800ca5c <xEventGroupGetBitsFromISR>
 800be10:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6938      	ldr	r0, [r7, #16]
 800be16:	f000 fe0d 	bl	800ca34 <xEventGroupClearBitsFromISR>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d108      	bne.n	800be32 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800be20:	f06f 0302 	mvn.w	r3, #2
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e004      	b.n	800be32 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6938      	ldr	r0, [r7, #16]
 800be2c:	f000 fdca 	bl	800c9c4 <xEventGroupClearBits>
 800be30:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800be32:	697b      	ldr	r3, [r7, #20]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08c      	sub	sp, #48	; 0x30
 800be40:	af02      	add	r7, sp, #8
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d004      	beq.n	800be5e <osEventFlagsWait+0x22>
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800be5e:	f06f 0303 	mvn.w	r3, #3
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e04b      	b.n	800befe <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be66:	f3ef 8305 	mrs	r3, IPSR
 800be6a:	617b      	str	r3, [r7, #20]
  return(result);
 800be6c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800be72:	f06f 0305 	mvn.w	r3, #5
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	e041      	b.n	800befe <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800be84:	2301      	movs	r3, #1
 800be86:	627b      	str	r3, [r7, #36]	; 0x24
 800be88:	e001      	b.n	800be8e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800be8a:	2300      	movs	r3, #0
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800be98:	2300      	movs	r3, #0
 800be9a:	623b      	str	r3, [r7, #32]
 800be9c:	e001      	b.n	800bea2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800be9e:	2301      	movs	r3, #1
 800bea0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	6a3a      	ldr	r2, [r7, #32]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	69b8      	ldr	r0, [r7, #24]
 800beae:	f000 fcbb 	bl	800c828 <xEventGroupWaitBits>
 800beb2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d010      	beq.n	800bee0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	4013      	ands	r3, r2
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d019      	beq.n	800befe <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d003      	beq.n	800bed8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800bed0:	f06f 0301 	mvn.w	r3, #1
 800bed4:	61fb      	str	r3, [r7, #28]
 800bed6:	e012      	b.n	800befe <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bed8:	f06f 0302 	mvn.w	r3, #2
 800bedc:	61fb      	str	r3, [r7, #28]
 800bede:	e00e      	b.n	800befe <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	4013      	ands	r3, r2
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800bef0:	f06f 0301 	mvn.w	r3, #1
 800bef4:	61fb      	str	r3, [r7, #28]
 800bef6:	e002      	b.n	800befe <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bef8:	f06f 0302 	mvn.w	r3, #2
 800befc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800befe:	69fb      	ldr	r3, [r7, #28]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3728      	adds	r7, #40	; 0x28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf14:	f3ef 8305 	mrs	r3, IPSR
 800bf18:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <osEventFlagsDelete+0x20>
    stat = osErrorISR;
 800bf20:	f06f 0305 	mvn.w	r3, #5
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	e00b      	b.n	800bf40 <osEventFlagsDelete+0x38>
  }
  else if (hEventGroup == NULL) {
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d103      	bne.n	800bf36 <osEventFlagsDelete+0x2e>
    stat = osErrorParameter;
 800bf2e:	f06f 0303 	mvn.w	r3, #3
 800bf32:	617b      	str	r3, [r7, #20]
 800bf34:	e004      	b.n	800bf40 <osEventFlagsDelete+0x38>
  }
  else {
    stat = osOK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 800bf3a:	6938      	ldr	r0, [r7, #16]
 800bf3c:	f000 fe3d 	bl	800cbba <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bf40:	697b      	ldr	r3, [r7, #20]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <osMutexNew>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b088      	sub	sp, #32
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf56:	f3ef 8305 	mrs	r3, IPSR
 800bf5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf5c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d174      	bne.n	800c04c <osMutexNew+0x102>
    if (attr != NULL) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	e001      	b.n	800bf74 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <osMutexNew+0x3a>
      rmtx = 1U;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	617b      	str	r3, [r7, #20]
 800bf82:	e001      	b.n	800bf88 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bf84:	2300      	movs	r3, #0
 800bf86:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	f003 0308 	and.w	r3, r3, #8
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d15c      	bne.n	800c04c <osMutexNew+0x102>
      mem = -1;
 800bf92:	f04f 33ff 	mov.w	r3, #4294967295
 800bf96:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d015      	beq.n	800bfca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <osMutexNew+0x6a>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	2b4f      	cmp	r3, #79	; 0x4f
 800bfac:	d902      	bls.n	800bfb4 <osMutexNew+0x6a>
          mem = 1;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	613b      	str	r3, [r7, #16]
 800bfb2:	e00c      	b.n	800bfce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d108      	bne.n	800bfce <osMutexNew+0x84>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d104      	bne.n	800bfce <osMutexNew+0x84>
            mem = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	613b      	str	r3, [r7, #16]
 800bfc8:	e001      	b.n	800bfce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d112      	bne.n	800bffa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d007      	beq.n	800bfea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	2004      	movs	r0, #4
 800bfe2:	f001 f892 	bl	800d10a <xQueueCreateMutexStatic>
 800bfe6:	61f8      	str	r0, [r7, #28]
 800bfe8:	e016      	b.n	800c018 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	4619      	mov	r1, r3
 800bff0:	2001      	movs	r0, #1
 800bff2:	f001 f88a 	bl	800d10a <xQueueCreateMutexStatic>
 800bff6:	61f8      	str	r0, [r7, #28]
 800bff8:	e00e      	b.n	800c018 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10b      	bne.n	800c018 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d004      	beq.n	800c010 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c006:	2004      	movs	r0, #4
 800c008:	f001 f867 	bl	800d0da <xQueueCreateMutex>
 800c00c:	61f8      	str	r0, [r7, #28]
 800c00e:	e003      	b.n	800c018 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c010:	2001      	movs	r0, #1
 800c012:	f001 f862 	bl	800d0da <xQueueCreateMutex>
 800c016:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00c      	beq.n	800c038 <osMutexNew+0xee>
        if (attr != NULL) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d003      	beq.n	800c02c <osMutexNew+0xe2>
          name = attr->name;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	e001      	b.n	800c030 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c030:	68f9      	ldr	r1, [r7, #12]
 800c032:	69f8      	ldr	r0, [r7, #28]
 800c034:	f001 ff72 	bl	800df1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d006      	beq.n	800c04c <osMutexNew+0x102>
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d003      	beq.n	800c04c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	f043 0301 	orr.w	r3, r3, #1
 800c04a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c04c:	69fb      	ldr	r3, [r7, #28]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3720      	adds	r7, #32
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c056:	b580      	push	{r7, lr}
 800c058:	b086      	sub	sp, #24
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f023 0301 	bic.w	r3, r3, #1
 800c066:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c070:	2300      	movs	r3, #0
 800c072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c074:	f3ef 8305 	mrs	r3, IPSR
 800c078:	60bb      	str	r3, [r7, #8]
  return(result);
 800c07a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d003      	beq.n	800c088 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c080:	f06f 0305 	mvn.w	r3, #5
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	e02c      	b.n	800c0e2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d103      	bne.n	800c096 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c08e:	f06f 0303 	mvn.w	r3, #3
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	e025      	b.n	800c0e2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d011      	beq.n	800c0c0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6938      	ldr	r0, [r7, #16]
 800c0a0:	f001 f882 	bl	800d1a8 <xQueueTakeMutexRecursive>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d01b      	beq.n	800c0e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c0b0:	f06f 0301 	mvn.w	r3, #1
 800c0b4:	617b      	str	r3, [r7, #20]
 800c0b6:	e014      	b.n	800c0e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c0b8:	f06f 0302 	mvn.w	r3, #2
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	e010      	b.n	800c0e2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	6938      	ldr	r0, [r7, #16]
 800c0c4:	f001 fc16 	bl	800d8f4 <xQueueSemaphoreTake>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d009      	beq.n	800c0e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d003      	beq.n	800c0dc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c0d4:	f06f 0301 	mvn.w	r3, #1
 800c0d8:	617b      	str	r3, [r7, #20]
 800c0da:	e002      	b.n	800c0e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c0dc:	f06f 0302 	mvn.w	r3, #2
 800c0e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c0e2:	697b      	ldr	r3, [r7, #20]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f023 0301 	bic.w	r3, r3, #1
 800c0fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c104:	2300      	movs	r3, #0
 800c106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c108:	f3ef 8305 	mrs	r3, IPSR
 800c10c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c10e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c110:	2b00      	cmp	r3, #0
 800c112:	d003      	beq.n	800c11c <osMutexRelease+0x30>
    stat = osErrorISR;
 800c114:	f06f 0305 	mvn.w	r3, #5
 800c118:	617b      	str	r3, [r7, #20]
 800c11a:	e01f      	b.n	800c15c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d103      	bne.n	800c12a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c122:	f06f 0303 	mvn.w	r3, #3
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	e018      	b.n	800c15c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d009      	beq.n	800c144 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c130:	6938      	ldr	r0, [r7, #16]
 800c132:	f001 f805 	bl	800d140 <xQueueGiveMutexRecursive>
 800c136:	4603      	mov	r3, r0
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d00f      	beq.n	800c15c <osMutexRelease+0x70>
        stat = osErrorResource;
 800c13c:	f06f 0302 	mvn.w	r3, #2
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	e00b      	b.n	800c15c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c144:	2300      	movs	r3, #0
 800c146:	2200      	movs	r2, #0
 800c148:	2100      	movs	r1, #0
 800c14a:	6938      	ldr	r0, [r7, #16]
 800c14c:	f001 f8cc 	bl	800d2e8 <xQueueGenericSend>
 800c150:	4603      	mov	r3, r0
 800c152:	2b01      	cmp	r3, #1
 800c154:	d002      	beq.n	800c15c <osMutexRelease+0x70>
        stat = osErrorResource;
 800c156:	f06f 0302 	mvn.w	r3, #2
 800c15a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c15c:	697b      	ldr	r3, [r7, #20]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c166:	b580      	push	{r7, lr}
 800c168:	b08a      	sub	sp, #40	; 0x28
 800c16a:	af02      	add	r7, sp, #8
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c176:	f3ef 8305 	mrs	r3, IPSR
 800c17a:	613b      	str	r3, [r7, #16]
  return(result);
 800c17c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d175      	bne.n	800c26e <osSemaphoreNew+0x108>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d072      	beq.n	800c26e <osSemaphoreNew+0x108>
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d86e      	bhi.n	800c26e <osSemaphoreNew+0x108>
    mem = -1;
 800c190:	f04f 33ff 	mov.w	r3, #4294967295
 800c194:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d015      	beq.n	800c1c8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d006      	beq.n	800c1b2 <osSemaphoreNew+0x4c>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	2b4f      	cmp	r3, #79	; 0x4f
 800c1aa:	d902      	bls.n	800c1b2 <osSemaphoreNew+0x4c>
        mem = 1;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	e00c      	b.n	800c1cc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d108      	bne.n	800c1cc <osSemaphoreNew+0x66>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d104      	bne.n	800c1cc <osSemaphoreNew+0x66>
          mem = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	61bb      	str	r3, [r7, #24]
 800c1c6:	e001      	b.n	800c1cc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d04c      	beq.n	800c26e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d128      	bne.n	800c22c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d10a      	bne.n	800c1f6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	9200      	str	r2, [sp, #0]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f000 fe85 	bl	800cefc <xQueueGenericCreateStatic>
 800c1f2:	61f8      	str	r0, [r7, #28]
 800c1f4:	e005      	b.n	800c202 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	f000 fef6 	bl	800cfec <xQueueGenericCreate>
 800c200:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d022      	beq.n	800c24e <osSemaphoreNew+0xe8>
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d01f      	beq.n	800c24e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c20e:	2300      	movs	r3, #0
 800c210:	2200      	movs	r2, #0
 800c212:	2100      	movs	r1, #0
 800c214:	69f8      	ldr	r0, [r7, #28]
 800c216:	f001 f867 	bl	800d2e8 <xQueueGenericSend>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d016      	beq.n	800c24e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c220:	69f8      	ldr	r0, [r7, #28]
 800c222:	f001 fd2f 	bl	800dc84 <vQueueDelete>
            hSemaphore = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
 800c22a:	e010      	b.n	800c24e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d108      	bne.n	800c244 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	461a      	mov	r2, r3
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 ffea 	bl	800d214 <xQueueCreateCountingSemaphoreStatic>
 800c240:	61f8      	str	r0, [r7, #28]
 800c242:	e004      	b.n	800c24e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f001 f81b 	bl	800d282 <xQueueCreateCountingSemaphore>
 800c24c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00c      	beq.n	800c26e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	617b      	str	r3, [r7, #20]
 800c260:	e001      	b.n	800c266 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c266:	6979      	ldr	r1, [r7, #20]
 800c268:	69f8      	ldr	r0, [r7, #28]
 800c26a:	f001 fe57 	bl	800df1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c26e:	69fb      	ldr	r3, [r7, #28]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c286:	2300      	movs	r3, #0
 800c288:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d103      	bne.n	800c298 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c290:	f06f 0303 	mvn.w	r3, #3
 800c294:	617b      	str	r3, [r7, #20]
 800c296:	e039      	b.n	800c30c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c298:	f3ef 8305 	mrs	r3, IPSR
 800c29c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c29e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d022      	beq.n	800c2ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c2aa:	f06f 0303 	mvn.w	r3, #3
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	e02c      	b.n	800c30c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c2b6:	f107 0308 	add.w	r3, r7, #8
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6938      	ldr	r0, [r7, #16]
 800c2c0:	f001 fc24 	bl	800db0c <xQueueReceiveFromISR>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d003      	beq.n	800c2d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c2ca:	f06f 0302 	mvn.w	r3, #2
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e01c      	b.n	800c30c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d019      	beq.n	800c30c <osSemaphoreAcquire+0x94>
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <osSemaphoreAcquire+0xa0>)
 800c2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	e010      	b.n	800c30c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6938      	ldr	r0, [r7, #16]
 800c2ee:	f001 fb01 	bl	800d8f4 <xQueueSemaphoreTake>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d009      	beq.n	800c30c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c2fe:	f06f 0301 	mvn.w	r3, #1
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	e002      	b.n	800c30c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c306:	f06f 0302 	mvn.w	r3, #2
 800c30a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c30c:	697b      	ldr	r3, [r7, #20]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c328:	2300      	movs	r3, #0
 800c32a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d103      	bne.n	800c33a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c332:	f06f 0303 	mvn.w	r3, #3
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	e02c      	b.n	800c394 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c33a:	f3ef 8305 	mrs	r3, IPSR
 800c33e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c340:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c342:	2b00      	cmp	r3, #0
 800c344:	d01a      	beq.n	800c37c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c346:	2300      	movs	r3, #0
 800c348:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c34a:	f107 0308 	add.w	r3, r7, #8
 800c34e:	4619      	mov	r1, r3
 800c350:	6938      	ldr	r0, [r7, #16]
 800c352:	f001 f962 	bl	800d61a <xQueueGiveFromISR>
 800c356:	4603      	mov	r3, r0
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d003      	beq.n	800c364 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c35c:	f06f 0302 	mvn.w	r3, #2
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	e017      	b.n	800c394 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d014      	beq.n	800c394 <osSemaphoreRelease+0x78>
 800c36a:	4b0d      	ldr	r3, [pc, #52]	; (800c3a0 <osSemaphoreRelease+0x84>)
 800c36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	e00b      	b.n	800c394 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c37c:	2300      	movs	r3, #0
 800c37e:	2200      	movs	r2, #0
 800c380:	2100      	movs	r1, #0
 800c382:	6938      	ldr	r0, [r7, #16]
 800c384:	f000 ffb0 	bl	800d2e8 <xQueueGenericSend>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d002      	beq.n	800c394 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c38e:	f06f 0302 	mvn.w	r3, #2
 800c392:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c394:	697b      	ldr	r3, [r7, #20]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3b0:	f3ef 8305 	mrs	r3, IPSR
 800c3b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c3bc:	f06f 0305 	mvn.w	r3, #5
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	e00e      	b.n	800c3e2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d103      	bne.n	800c3d2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c3ca:	f06f 0303 	mvn.w	r3, #3
 800c3ce:	617b      	str	r3, [r7, #20]
 800c3d0:	e007      	b.n	800c3e2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c3d2:	6938      	ldr	r0, [r7, #16]
 800c3d4:	f001 fdcc 	bl	800df70 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c3dc:	6938      	ldr	r0, [r7, #16]
 800c3de:	f001 fc51 	bl	800dc84 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c3e2:	697b      	ldr	r3, [r7, #20]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3718      	adds	r7, #24
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08a      	sub	sp, #40	; 0x28
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3fc:	f3ef 8305 	mrs	r3, IPSR
 800c400:	613b      	str	r3, [r7, #16]
  return(result);
 800c402:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c404:	2b00      	cmp	r3, #0
 800c406:	d15f      	bne.n	800c4c8 <osMessageQueueNew+0xdc>
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d05c      	beq.n	800c4c8 <osMessageQueueNew+0xdc>
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d059      	beq.n	800c4c8 <osMessageQueueNew+0xdc>
    mem = -1;
 800c414:	f04f 33ff 	mov.w	r3, #4294967295
 800c418:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d029      	beq.n	800c474 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d012      	beq.n	800c44e <osMessageQueueNew+0x62>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	2b4f      	cmp	r3, #79	; 0x4f
 800c42e:	d90e      	bls.n	800c44e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	695a      	ldr	r2, [r3, #20]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68b9      	ldr	r1, [r7, #8]
 800c440:	fb01 f303 	mul.w	r3, r1, r3
 800c444:	429a      	cmp	r2, r3
 800c446:	d302      	bcc.n	800c44e <osMessageQueueNew+0x62>
        mem = 1;
 800c448:	2301      	movs	r3, #1
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	e014      	b.n	800c478 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d110      	bne.n	800c478 <osMessageQueueNew+0x8c>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10c      	bne.n	800c478 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c462:	2b00      	cmp	r3, #0
 800c464:	d108      	bne.n	800c478 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d104      	bne.n	800c478 <osMessageQueueNew+0x8c>
          mem = 0;
 800c46e:	2300      	movs	r3, #0
 800c470:	61bb      	str	r3, [r7, #24]
 800c472:	e001      	b.n	800c478 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d10b      	bne.n	800c496 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	691a      	ldr	r2, [r3, #16]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	2100      	movs	r1, #0
 800c488:	9100      	str	r1, [sp, #0]
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 fd35 	bl	800cefc <xQueueGenericCreateStatic>
 800c492:	61f8      	str	r0, [r7, #28]
 800c494:	e008      	b.n	800c4a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d105      	bne.n	800c4a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c49c:	2200      	movs	r2, #0
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fda3 	bl	800cfec <xQueueGenericCreate>
 800c4a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00c      	beq.n	800c4c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <osMessageQueueNew+0xd0>
        name = attr->name;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	617b      	str	r3, [r7, #20]
 800c4ba:	e001      	b.n	800c4c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c4c0:	6979      	ldr	r1, [r7, #20]
 800c4c2:	69f8      	ldr	r0, [r7, #28]
 800c4c4:	f001 fd2a 	bl	800df1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c4c8:	69fb      	ldr	r3, [r7, #28]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4ec:	f3ef 8305 	mrs	r3, IPSR
 800c4f0:	617b      	str	r3, [r7, #20]
  return(result);
 800c4f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d028      	beq.n	800c54a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <osMessageQueuePut+0x36>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <osMessageQueuePut+0x36>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c50a:	f06f 0303 	mvn.w	r3, #3
 800c50e:	61fb      	str	r3, [r7, #28]
 800c510:	e038      	b.n	800c584 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c516:	f107 0210 	add.w	r2, r7, #16
 800c51a:	2300      	movs	r3, #0
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	69b8      	ldr	r0, [r7, #24]
 800c520:	f000 ffe0 	bl	800d4e4 <xQueueGenericSendFromISR>
 800c524:	4603      	mov	r3, r0
 800c526:	2b01      	cmp	r3, #1
 800c528:	d003      	beq.n	800c532 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c52a:	f06f 0302 	mvn.w	r3, #2
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	e028      	b.n	800c584 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d025      	beq.n	800c584 <osMessageQueuePut+0xb0>
 800c538:	4b15      	ldr	r3, [pc, #84]	; (800c590 <osMessageQueuePut+0xbc>)
 800c53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	e01c      	b.n	800c584 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <osMessageQueuePut+0x82>
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c556:	f06f 0303 	mvn.w	r3, #3
 800c55a:	61fb      	str	r3, [r7, #28]
 800c55c:	e012      	b.n	800c584 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c55e:	2300      	movs	r3, #0
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	68b9      	ldr	r1, [r7, #8]
 800c564:	69b8      	ldr	r0, [r7, #24]
 800c566:	f000 febf 	bl	800d2e8 <xQueueGenericSend>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d009      	beq.n	800c584 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c576:	f06f 0301 	mvn.w	r3, #1
 800c57a:	61fb      	str	r3, [r7, #28]
 800c57c:	e002      	b.n	800c584 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c57e:	f06f 0302 	mvn.w	r3, #2
 800c582:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c584:	69fb      	ldr	r3, [r7, #28]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3720      	adds	r7, #32
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5aa:	f3ef 8305 	mrs	r3, IPSR
 800c5ae:	617b      	str	r3, [r7, #20]
  return(result);
 800c5b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d028      	beq.n	800c608 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d005      	beq.n	800c5c8 <osMessageQueueGet+0x34>
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <osMessageQueueGet+0x34>
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d003      	beq.n	800c5d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c5c8:	f06f 0303 	mvn.w	r3, #3
 800c5cc:	61fb      	str	r3, [r7, #28]
 800c5ce:	e037      	b.n	800c640 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c5d4:	f107 0310 	add.w	r3, r7, #16
 800c5d8:	461a      	mov	r2, r3
 800c5da:	68b9      	ldr	r1, [r7, #8]
 800c5dc:	69b8      	ldr	r0, [r7, #24]
 800c5de:	f001 fa95 	bl	800db0c <xQueueReceiveFromISR>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d003      	beq.n	800c5f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c5e8:	f06f 0302 	mvn.w	r3, #2
 800c5ec:	61fb      	str	r3, [r7, #28]
 800c5ee:	e027      	b.n	800c640 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d024      	beq.n	800c640 <osMessageQueueGet+0xac>
 800c5f6:	4b15      	ldr	r3, [pc, #84]	; (800c64c <osMessageQueueGet+0xb8>)
 800c5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	e01b      	b.n	800c640 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <osMessageQueueGet+0x80>
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d103      	bne.n	800c61c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c614:	f06f 0303 	mvn.w	r3, #3
 800c618:	61fb      	str	r3, [r7, #28]
 800c61a:	e011      	b.n	800c640 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	69b8      	ldr	r0, [r7, #24]
 800c622:	f001 f887 	bl	800d734 <xQueueReceive>
 800c626:	4603      	mov	r3, r0
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d009      	beq.n	800c640 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c632:	f06f 0301 	mvn.w	r3, #1
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	e002      	b.n	800c640 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c63a:	f06f 0302 	mvn.w	r3, #2
 800c63e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c640:	69fb      	ldr	r3, [r7, #28]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3720      	adds	r7, #32
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	e000ed04 	.word	0xe000ed04

0800c650 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <osMessageQueueGetCount+0x18>
    count = 0U;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]
 800c666:	e00e      	b.n	800c686 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c668:	f3ef 8305 	mrs	r3, IPSR
 800c66c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c66e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800c674:	6938      	ldr	r0, [r7, #16]
 800c676:	f001 fae7 	bl	800dc48 <uxQueueMessagesWaitingFromISR>
 800c67a:	6178      	str	r0, [r7, #20]
 800c67c:	e003      	b.n	800c686 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	f001 fac4 	bl	800dc0c <uxQueueMessagesWaiting>
 800c684:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800c686:	697b      	ldr	r3, [r7, #20]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c69c:	f3ef 8305 	mrs	r3, IPSR
 800c6a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800c6a8:	f06f 0305 	mvn.w	r3, #5
 800c6ac:	617b      	str	r3, [r7, #20]
 800c6ae:	e00c      	b.n	800c6ca <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800c6b6:	f06f 0303 	mvn.w	r3, #3
 800c6ba:	617b      	str	r3, [r7, #20]
 800c6bc:	e005      	b.n	800c6ca <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	6938      	ldr	r0, [r7, #16]
 800c6c6:	f000 fbb1 	bl	800ce2c <xQueueGenericReset>
  }

  return (stat);
 800c6ca:	697b      	ldr	r3, [r7, #20]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <osMessageQueueDelete>:

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6e0:	f3ef 8305 	mrs	r3, IPSR
 800c6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800c6ec:	f06f 0305 	mvn.w	r3, #5
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	e00e      	b.n	800c712 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d103      	bne.n	800c702 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800c6fa:	f06f 0303 	mvn.w	r3, #3
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	e007      	b.n	800c712 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800c702:	6938      	ldr	r0, [r7, #16]
 800c704:	f001 fc34 	bl	800df70 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c708:	2300      	movs	r3, #0
 800c70a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800c70c:	6938      	ldr	r0, [r7, #16]
 800c70e:	f001 fab9 	bl	800dc84 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c712:	697b      	ldr	r3, [r7, #20]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3718      	adds	r7, #24
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4a07      	ldr	r2, [pc, #28]	; (800c748 <vApplicationGetIdleTaskMemory+0x2c>)
 800c72c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4a06      	ldr	r2, [pc, #24]	; (800c74c <vApplicationGetIdleTaskMemory+0x30>)
 800c732:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2280      	movs	r2, #128	; 0x80
 800c738:	601a      	str	r2, [r3, #0]
}
 800c73a:	bf00      	nop
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	200006c0 	.word	0x200006c0
 800c74c:	20000784 	.word	0x20000784

0800c750 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4a07      	ldr	r2, [pc, #28]	; (800c77c <vApplicationGetTimerTaskMemory+0x2c>)
 800c760:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	4a06      	ldr	r2, [pc, #24]	; (800c780 <vApplicationGetTimerTaskMemory+0x30>)
 800c766:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c76e:	601a      	str	r2, [r3, #0]
}
 800c770:	bf00      	nop
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr
 800c77c:	20000984 	.word	0x20000984
 800c780:	20000a48 	.word	0x20000a48

0800c784 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10a      	bne.n	800c7a8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7a4:	bf00      	nop
 800c7a6:	e7fe      	b.n	800c7a6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b20      	cmp	r3, #32
 800c7b0:	d00a      	beq.n	800c7c8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	60fb      	str	r3, [r7, #12]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00a      	beq.n	800c7e8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 fa71 	bl	800ccc4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c7e8:	697b      	ldr	r3, [r7, #20]
	}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3718      	adds	r7, #24
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c7f8:	2020      	movs	r0, #32
 800c7fa:	f003 fbdd 	bl	800ffb8 <pvPortMalloc>
 800c7fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3304      	adds	r3, #4
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fa57 	bl	800ccc4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c81c:	687b      	ldr	r3, [r7, #4]
	}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b090      	sub	sp, #64	; 0x40
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c83e:	2300      	movs	r3, #0
 800c840:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <xEventGroupWaitBits+0x36>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	623b      	str	r3, [r7, #32]
}
 800c85a:	bf00      	nop
 800c85c:	e7fe      	b.n	800c85c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00a      	beq.n	800c87e <xEventGroupWaitBits+0x56>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	61fb      	str	r3, [r7, #28]
}
 800c87a:	bf00      	nop
 800c87c:	e7fe      	b.n	800c87c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10a      	bne.n	800c89a <xEventGroupWaitBits+0x72>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	61bb      	str	r3, [r7, #24]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c89a:	f002 faf3 	bl	800ee84 <xTaskGetSchedulerState>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d102      	bne.n	800c8aa <xEventGroupWaitBits+0x82>
 800c8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <xEventGroupWaitBits+0x86>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <xEventGroupWaitBits+0x88>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	617b      	str	r3, [r7, #20]
}
 800c8c6:	bf00      	nop
 800c8c8:	e7fe      	b.n	800c8c8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c8ca:	f001 fe13 	bl	800e4f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8da:	f000 f9bd 	bl	800cc58 <prvTestWaitCondition>
 800c8de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00e      	beq.n	800c904 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d028      	beq.n	800c946 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	43db      	mvns	r3, r3
 800c8fc:	401a      	ands	r2, r3
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	e020      	b.n	800c946 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c906:	2b00      	cmp	r3, #0
 800c908:	d104      	bne.n	800c914 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c90e:	2301      	movs	r3, #1
 800c910:	633b      	str	r3, [r7, #48]	; 0x30
 800c912:	e018      	b.n	800c946 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c920:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c92e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c932:	1d18      	adds	r0, r3, #4
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c938:	4313      	orrs	r3, r2
 800c93a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c93c:	4619      	mov	r1, r3
 800c93e:	f002 f805 	bl	800e94c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c946:	f001 fde3 	bl	800e510 <xTaskResumeAll>
 800c94a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d031      	beq.n	800c9b6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	2b00      	cmp	r3, #0
 800c956:	d107      	bne.n	800c968 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c958:	4b19      	ldr	r3, [pc, #100]	; (800c9c0 <xEventGroupWaitBits+0x198>)
 800c95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c968:	f002 fc02 	bl	800f170 <uxTaskResetEventItemValue>
 800c96c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d11a      	bne.n	800c9ae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c978:	f003 f9fc 	bl	800fd74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	68b9      	ldr	r1, [r7, #8]
 800c986:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c988:	f000 f966 	bl	800cc58 <prvTestWaitCondition>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d009      	beq.n	800c9a6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	43db      	mvns	r3, r3
 800c9a0:	401a      	ands	r2, r3
 800c9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c9aa:	f003 fa13 	bl	800fdd4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3740      	adds	r7, #64	; 0x40
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	e000ed04 	.word	0xe000ed04

0800c9c4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <xEventGroupClearBits+0x2a>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	60fb      	str	r3, [r7, #12]
}
 800c9ea:	bf00      	nop
 800c9ec:	e7fe      	b.n	800c9ec <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00a      	beq.n	800ca0e <xEventGroupClearBits+0x4a>
	__asm volatile
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	60bb      	str	r3, [r7, #8]
}
 800ca0a:	bf00      	nop
 800ca0c:	e7fe      	b.n	800ca0c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800ca0e:	f003 f9b1 	bl	800fd74 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	43db      	mvns	r3, r3
 800ca20:	401a      	ands	r2, r3
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800ca26:	f003 f9d5 	bl	800fdd4 <vPortExitCritical>

	return uxReturn;
 800ca2a:	693b      	ldr	r3, [r7, #16]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ca3e:	2300      	movs	r3, #0
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	4804      	ldr	r0, [pc, #16]	; (800ca58 <xEventGroupClearBitsFromISR+0x24>)
 800ca46:	f003 f845 	bl	800fad4 <xTimerPendFunctionCallFromISR>
 800ca4a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
	}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	0800cc3f 	.word	0x0800cc3f

0800ca5c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b089      	sub	sp, #36	; 0x24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca68:	f3ef 8211 	mrs	r2, BASEPRI
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	60fa      	str	r2, [r7, #12]
 800ca7e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ca80:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca82:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	617b      	str	r3, [r7, #20]
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca94:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800ca96:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3724      	adds	r7, #36	; 0x24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08e      	sub	sp, #56	; 0x38
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800caae:	2300      	movs	r3, #0
 800cab0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800cab6:	2300      	movs	r3, #0
 800cab8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10a      	bne.n	800cad6 <xEventGroupSetBits+0x32>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	613b      	str	r3, [r7, #16]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00a      	beq.n	800caf6 <xEventGroupSetBits+0x52>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	3304      	adds	r3, #4
 800cafa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	3308      	adds	r3, #8
 800cb00:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800cb02:	f001 fcf7 	bl	800e4f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	431a      	orrs	r2, r3
 800cb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb16:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800cb18:	e03c      	b.n	800cb94 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800cb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800cb26:	2300      	movs	r3, #0
 800cb28:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cb30:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb38:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d108      	bne.n	800cb56 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00b      	beq.n	800cb68 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800cb50:	2301      	movs	r3, #1
 800cb52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb54:	e008      	b.n	800cb68 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	69ba      	ldr	r2, [r7, #24]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d101      	bne.n	800cb68 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d010      	beq.n	800cb90 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d003      	beq.n	800cb80 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800cb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cb8c:	f001 ffaa 	bl	800eae4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800cb94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d1be      	bne.n	800cb1a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	43db      	mvns	r3, r3
 800cba4:	401a      	ands	r2, r3
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800cbaa:	f001 fcb1 	bl	800e510 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	681b      	ldr	r3, [r3, #0]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3738      	adds	r7, #56	; 0x38
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b086      	sub	sp, #24
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 800cbcc:	f001 fc92 	bl	800e4f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800cbd0:	e017      	b.n	800cc02 <vEventGroupDelete+0x48>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	68da      	ldr	r2, [r3, #12]
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3308      	adds	r3, #8
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d10a      	bne.n	800cbf4 <vEventGroupDelete+0x3a>
	__asm volatile
 800cbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	60fb      	str	r3, [r7, #12]
}
 800cbf0:	bf00      	nop
 800cbf2:	e7fe      	b.n	800cbf2 <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f001 ff71 	bl	800eae4 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e3      	bne.n	800cbd2 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	7f1b      	ldrb	r3, [r3, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d102      	bne.n	800cc18 <vEventGroupDelete+0x5e>
			{
				vPortFree( pxEventBits );
 800cc12:	6978      	ldr	r0, [r7, #20]
 800cc14:	f003 fa9c 	bl	8010150 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 800cc18:	f001 fc7a 	bl	800e510 <xTaskResumeAll>
}
 800cc1c:	bf00      	nop
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff ff37 	bl	800caa4 <xEventGroupSetBits>
}
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7ff feba 	bl	800c9c4 <xEventGroupClearBits>
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800cc64:	2300      	movs	r3, #0
 800cc66:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d107      	bne.n	800cc7e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	4013      	ands	r3, r2
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00a      	beq.n	800cc8e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	617b      	str	r3, [r7, #20]
 800cc7c:	e007      	b.n	800cc8e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	4013      	ands	r3, r2
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d101      	bne.n	800cc8e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cc8e:	697b      	ldr	r3, [r7, #20]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	68f9      	ldr	r1, [r7, #12]
 800ccae:	4804      	ldr	r0, [pc, #16]	; (800ccc0 <xEventGroupSetBitsFromISR+0x24>)
 800ccb0:	f002 ff10 	bl	800fad4 <xTimerPendFunctionCallFromISR>
 800ccb4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800ccb6:	697b      	ldr	r3, [r7, #20]
	}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	0800cc25 	.word	0x0800cc25

0800ccc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f103 0208 	add.w	r2, r3, #8
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f103 0208 	add.w	r2, r3, #8
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f103 0208 	add.w	r2, r3, #8
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccf8:	bf00      	nop
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd12:	bf00      	nop
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b085      	sub	sp, #20
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	689a      	ldr	r2, [r3, #8]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	601a      	str	r2, [r3, #0]
}
 800cd5a:	bf00      	nop
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd66:	b480      	push	{r7}
 800cd68:	b085      	sub	sp, #20
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7c:	d103      	bne.n	800cd86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	e00c      	b.n	800cda0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	e002      	b.n	800cd94 <vListInsert+0x2e>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d2f6      	bcs.n	800cd8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	601a      	str	r2, [r3, #0]
}
 800cdcc:	bf00      	nop
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	6892      	ldr	r2, [r2, #8]
 800cdee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6852      	ldr	r2, [r2, #4]
 800cdf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d103      	bne.n	800ce0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689a      	ldr	r2, [r3, #8]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	1e5a      	subs	r2, r3, #1
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <xQueueGenericReset+0x2a>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	60bb      	str	r3, [r7, #8]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce56:	f002 ff8d 	bl	800fd74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce66:	fb01 f303 	mul.w	r3, r1, r3
 800ce6a:	441a      	add	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce86:	3b01      	subs	r3, #1
 800ce88:	68f9      	ldr	r1, [r7, #12]
 800ce8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce8c:	fb01 f303 	mul.w	r3, r1, r3
 800ce90:	441a      	add	r2, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	22ff      	movs	r2, #255	; 0xff
 800ce9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	22ff      	movs	r2, #255	; 0xff
 800cea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d114      	bne.n	800ced6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01a      	beq.n	800ceea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	3310      	adds	r3, #16
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f001 fdaf 	bl	800ea1c <xTaskRemoveFromEventList>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d012      	beq.n	800ceea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <xQueueGenericReset+0xcc>)
 800cec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	e009      	b.n	800ceea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3310      	adds	r3, #16
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff fef2 	bl	800ccc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3324      	adds	r3, #36	; 0x24
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff feed 	bl	800ccc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ceea:	f002 ff73 	bl	800fdd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ceee:	2301      	movs	r3, #1
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08e      	sub	sp, #56	; 0x38
 800cf00:	af02      	add	r7, sp, #8
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf22:	bf00      	nop
 800cf24:	e7fe      	b.n	800cf24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10a      	bne.n	800cf42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf3e:	bf00      	nop
 800cf40:	e7fe      	b.n	800cf40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <xQueueGenericCreateStatic+0x52>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <xQueueGenericCreateStatic+0x56>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <xQueueGenericCreateStatic+0x58>
 800cf52:	2300      	movs	r3, #0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10a      	bne.n	800cf6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	623b      	str	r3, [r7, #32]
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d102      	bne.n	800cf7a <xQueueGenericCreateStatic+0x7e>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <xQueueGenericCreateStatic+0x82>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e000      	b.n	800cf80 <xQueueGenericCreateStatic+0x84>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10a      	bne.n	800cf9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	61fb      	str	r3, [r7, #28]
}
 800cf96:	bf00      	nop
 800cf98:	e7fe      	b.n	800cf98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf9a:	2350      	movs	r3, #80	; 0x50
 800cf9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2b50      	cmp	r3, #80	; 0x50
 800cfa2:	d00a      	beq.n	800cfba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	61bb      	str	r3, [r7, #24]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00d      	beq.n	800cfe2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	68b9      	ldr	r1, [r7, #8]
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f000 f83f 	bl	800d060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3730      	adds	r7, #48	; 0x30
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08a      	sub	sp, #40	; 0x28
 800cff0:	af02      	add	r7, sp, #8
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	613b      	str	r3, [r7, #16]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	fb02 f303 	mul.w	r3, r2, r3
 800d01e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	3350      	adds	r3, #80	; 0x50
 800d024:	4618      	mov	r0, r3
 800d026:	f002 ffc7 	bl	800ffb8 <pvPortMalloc>
 800d02a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d011      	beq.n	800d056 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	3350      	adds	r3, #80	; 0x50
 800d03a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d044:	79fa      	ldrb	r2, [r7, #7]
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	4613      	mov	r3, r2
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	68b9      	ldr	r1, [r7, #8]
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 f805 	bl	800d060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d056:	69bb      	ldr	r3, [r7, #24]
	}
 800d058:	4618      	mov	r0, r3
 800d05a:	3720      	adds	r7, #32
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
 800d06c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d103      	bne.n	800d07c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	69ba      	ldr	r2, [r7, #24]
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	e002      	b.n	800d082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d08e:	2101      	movs	r1, #1
 800d090:	69b8      	ldr	r0, [r7, #24]
 800d092:	f7ff fecb 	bl	800ce2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b082      	sub	sp, #8
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00e      	beq.n	800d0d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f90b 	bl	800d2e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d0d2:	bf00      	nop
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b086      	sub	sp, #24
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	617b      	str	r3, [r7, #20]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6939      	ldr	r1, [r7, #16]
 800d0f2:	6978      	ldr	r0, [r7, #20]
 800d0f4:	f7ff ff7a 	bl	800cfec <xQueueGenericCreate>
 800d0f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff ffd3 	bl	800d0a6 <prvInitialiseMutex>

		return xNewQueue;
 800d100:	68fb      	ldr	r3, [r7, #12]
	}
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b088      	sub	sp, #32
 800d10e:	af02      	add	r7, sp, #8
 800d110:	4603      	mov	r3, r0
 800d112:	6039      	str	r1, [r7, #0]
 800d114:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d116:	2301      	movs	r3, #1
 800d118:	617b      	str	r3, [r7, #20]
 800d11a:	2300      	movs	r3, #0
 800d11c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d11e:	79fb      	ldrb	r3, [r7, #7]
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2200      	movs	r2, #0
 800d126:	6939      	ldr	r1, [r7, #16]
 800d128:	6978      	ldr	r0, [r7, #20]
 800d12a:	f7ff fee7 	bl	800cefc <xQueueGenericCreateStatic>
 800d12e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff ffb8 	bl	800d0a6 <prvInitialiseMutex>

		return xNewQueue;
 800d136:	68fb      	ldr	r3, [r7, #12]
	}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10a      	bne.n	800d168 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	60fb      	str	r3, [r7, #12]
}
 800d164:	bf00      	nop
 800d166:	e7fe      	b.n	800d166 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	689c      	ldr	r4, [r3, #8]
 800d16c:	f001 fe7a 	bl	800ee64 <xTaskGetCurrentTaskHandle>
 800d170:	4603      	mov	r3, r0
 800d172:	429c      	cmp	r4, r3
 800d174:	d111      	bne.n	800d19a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	1e5a      	subs	r2, r3, #1
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d105      	bne.n	800d194 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d188:	2300      	movs	r3, #0
 800d18a:	2200      	movs	r2, #0
 800d18c:	2100      	movs	r1, #0
 800d18e:	6938      	ldr	r0, [r7, #16]
 800d190:	f000 f8aa 	bl	800d2e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d194:	2301      	movs	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
 800d198:	e001      	b.n	800d19e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d19e:	697b      	ldr	r3, [r7, #20]
	}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	371c      	adds	r7, #28
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd90      	pop	{r4, r7, pc}

0800d1a8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d1a8:	b590      	push	{r4, r7, lr}
 800d1aa:	b087      	sub	sp, #28
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	60fb      	str	r3, [r7, #12]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	689c      	ldr	r4, [r3, #8]
 800d1d6:	f001 fe45 	bl	800ee64 <xTaskGetCurrentTaskHandle>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	429c      	cmp	r4, r3
 800d1de:	d107      	bne.n	800d1f0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	617b      	str	r3, [r7, #20]
 800d1ee:	e00c      	b.n	800d20a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d1f0:	6839      	ldr	r1, [r7, #0]
 800d1f2:	6938      	ldr	r0, [r7, #16]
 800d1f4:	f000 fb7e 	bl	800d8f4 <xQueueSemaphoreTake>
 800d1f8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d20a:	697b      	ldr	r3, [r7, #20]
	}
 800d20c:	4618      	mov	r0, r3
 800d20e:	371c      	adds	r7, #28
 800d210:	46bd      	mov	sp, r7
 800d212:	bd90      	pop	{r4, r7, pc}

0800d214 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08a      	sub	sp, #40	; 0x28
 800d218:	af02      	add	r7, sp, #8
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10a      	bne.n	800d23c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	61bb      	str	r3, [r7, #24]
}
 800d238:	bf00      	nop
 800d23a:	e7fe      	b.n	800d23a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	429a      	cmp	r2, r3
 800d242:	d90a      	bls.n	800d25a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	617b      	str	r3, [r7, #20]
}
 800d256:	bf00      	nop
 800d258:	e7fe      	b.n	800d258 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d25a:	2302      	movs	r3, #2
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	2100      	movs	r1, #0
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff fe49 	bl	800cefc <xQueueGenericCreateStatic>
 800d26a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	68ba      	ldr	r2, [r7, #8]
 800d276:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d278:	69fb      	ldr	r3, [r7, #28]
	}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3720      	adds	r7, #32
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	613b      	str	r3, [r7, #16]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d90a      	bls.n	800d2c6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	60fb      	str	r3, [r7, #12]
}
 800d2c2:	bf00      	nop
 800d2c4:	e7fe      	b.n	800d2c4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7ff fe8e 	bl	800cfec <xQueueGenericCreate>
 800d2d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	683a      	ldr	r2, [r7, #0]
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d2de:	697b      	ldr	r3, [r7, #20]
	}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08e      	sub	sp, #56	; 0x38
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xQueueGenericSend+0x32>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d103      	bne.n	800d328 <xQueueGenericSend+0x40>
 800d320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	d101      	bne.n	800d32c <xQueueGenericSend+0x44>
 800d328:	2301      	movs	r3, #1
 800d32a:	e000      	b.n	800d32e <xQueueGenericSend+0x46>
 800d32c:	2300      	movs	r3, #0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10a      	bne.n	800d348 <xQueueGenericSend+0x60>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d344:	bf00      	nop
 800d346:	e7fe      	b.n	800d346 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d103      	bne.n	800d356 <xQueueGenericSend+0x6e>
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d352:	2b01      	cmp	r3, #1
 800d354:	d101      	bne.n	800d35a <xQueueGenericSend+0x72>
 800d356:	2301      	movs	r3, #1
 800d358:	e000      	b.n	800d35c <xQueueGenericSend+0x74>
 800d35a:	2300      	movs	r3, #0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10a      	bne.n	800d376 <xQueueGenericSend+0x8e>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	623b      	str	r3, [r7, #32]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d376:	f001 fd85 	bl	800ee84 <xTaskGetSchedulerState>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d102      	bne.n	800d386 <xQueueGenericSend+0x9e>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d101      	bne.n	800d38a <xQueueGenericSend+0xa2>
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <xQueueGenericSend+0xa4>
 800d38a:	2300      	movs	r3, #0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10a      	bne.n	800d3a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	61fb      	str	r3, [r7, #28]
}
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3a6:	f002 fce5 	bl	800fd74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d302      	bcc.n	800d3bc <xQueueGenericSend+0xd4>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d129      	bne.n	800d410 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3bc:	683a      	ldr	r2, [r7, #0]
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3c2:	f000 fc9a 	bl	800dcfa <prvCopyDataToQueue>
 800d3c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d010      	beq.n	800d3f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	3324      	adds	r3, #36	; 0x24
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f001 fb21 	bl	800ea1c <xTaskRemoveFromEventList>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d013      	beq.n	800d408 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3e0:	4b3f      	ldr	r3, [pc, #252]	; (800d4e0 <xQueueGenericSend+0x1f8>)
 800d3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	e00a      	b.n	800d408 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d007      	beq.n	800d408 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3f8:	4b39      	ldr	r3, [pc, #228]	; (800d4e0 <xQueueGenericSend+0x1f8>)
 800d3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d408:	f002 fce4 	bl	800fdd4 <vPortExitCritical>
				return pdPASS;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e063      	b.n	800d4d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d103      	bne.n	800d41e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d416:	f002 fcdd 	bl	800fdd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d41a:	2300      	movs	r3, #0
 800d41c:	e05c      	b.n	800d4d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d420:	2b00      	cmp	r3, #0
 800d422:	d106      	bne.n	800d432 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d424:	f107 0314 	add.w	r3, r7, #20
 800d428:	4618      	mov	r0, r3
 800d42a:	f001 fbbd 	bl	800eba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d42e:	2301      	movs	r3, #1
 800d430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d432:	f002 fccf 	bl	800fdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d436:	f001 f85d 	bl	800e4f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d43a:	f002 fc9b 	bl	800fd74 <vPortEnterCritical>
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d444:	b25b      	sxtb	r3, r3
 800d446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44a:	d103      	bne.n	800d454 <xQueueGenericSend+0x16c>
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d45a:	b25b      	sxtb	r3, r3
 800d45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d460:	d103      	bne.n	800d46a <xQueueGenericSend+0x182>
 800d462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d46a:	f002 fcb3 	bl	800fdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d46e:	1d3a      	adds	r2, r7, #4
 800d470:	f107 0314 	add.w	r3, r7, #20
 800d474:	4611      	mov	r1, r2
 800d476:	4618      	mov	r0, r3
 800d478:	f001 fbac 	bl	800ebd4 <xTaskCheckForTimeOut>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d124      	bne.n	800d4cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d484:	f000 fd31 	bl	800deea <prvIsQueueFull>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d018      	beq.n	800d4c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	3310      	adds	r3, #16
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f001 fa34 	bl	800e904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d49e:	f000 fcbc 	bl	800de1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d4a2:	f001 f835 	bl	800e510 <xTaskResumeAll>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f47f af7c 	bne.w	800d3a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d4ae:	4b0c      	ldr	r3, [pc, #48]	; (800d4e0 <xQueueGenericSend+0x1f8>)
 800d4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	e772      	b.n	800d3a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4c2:	f000 fcaa 	bl	800de1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4c6:	f001 f823 	bl	800e510 <xTaskResumeAll>
 800d4ca:	e76c      	b.n	800d3a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ce:	f000 fca4 	bl	800de1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4d2:	f001 f81d 	bl	800e510 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d4d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3738      	adds	r7, #56	; 0x38
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	e000ed04 	.word	0xe000ed04

0800d4e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b090      	sub	sp, #64	; 0x40
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d103      	bne.n	800d520 <xQueueGenericSendFromISR+0x3c>
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <xQueueGenericSendFromISR+0x40>
 800d520:	2301      	movs	r3, #1
 800d522:	e000      	b.n	800d526 <xQueueGenericSendFromISR+0x42>
 800d524:	2300      	movs	r3, #0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10a      	bne.n	800d540 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d103      	bne.n	800d54e <xQueueGenericSendFromISR+0x6a>
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d101      	bne.n	800d552 <xQueueGenericSendFromISR+0x6e>
 800d54e:	2301      	movs	r3, #1
 800d550:	e000      	b.n	800d554 <xQueueGenericSendFromISR+0x70>
 800d552:	2300      	movs	r3, #0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10a      	bne.n	800d56e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	623b      	str	r3, [r7, #32]
}
 800d56a:	bf00      	nop
 800d56c:	e7fe      	b.n	800d56c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d56e:	f002 fce3 	bl	800ff38 <vPortValidateInterruptPriority>
	__asm volatile
 800d572:	f3ef 8211 	mrs	r2, BASEPRI
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	61fa      	str	r2, [r7, #28]
 800d588:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d58a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d58c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d596:	429a      	cmp	r2, r3
 800d598:	d302      	bcc.n	800d5a0 <xQueueGenericSendFromISR+0xbc>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d12f      	bne.n	800d600 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5b6:	f000 fba0 	bl	800dcfa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c2:	d112      	bne.n	800d5ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d016      	beq.n	800d5fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	3324      	adds	r3, #36	; 0x24
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f001 fa23 	bl	800ea1c <xTaskRemoveFromEventList>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00e      	beq.n	800d5fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00b      	beq.n	800d5fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	e007      	b.n	800d5fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	b25a      	sxtb	r2, r3
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d5fe:	e001      	b.n	800d604 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d600:	2300      	movs	r3, #0
 800d602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d606:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	f383 8811 	msr	BASEPRI, r3
}
 800d60e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d612:	4618      	mov	r0, r3
 800d614:	3740      	adds	r7, #64	; 0x40
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b08e      	sub	sp, #56	; 0x38
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10a      	bne.n	800d644 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	623b      	str	r3, [r7, #32]
}
 800d640:	bf00      	nop
 800d642:	e7fe      	b.n	800d642 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00a      	beq.n	800d662 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	61fb      	str	r3, [r7, #28]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d103      	bne.n	800d672 <xQueueGiveFromISR+0x58>
 800d66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <xQueueGiveFromISR+0x5c>
 800d672:	2301      	movs	r3, #1
 800d674:	e000      	b.n	800d678 <xQueueGiveFromISR+0x5e>
 800d676:	2300      	movs	r3, #0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10a      	bne.n	800d692 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	61bb      	str	r3, [r7, #24]
}
 800d68e:	bf00      	nop
 800d690:	e7fe      	b.n	800d690 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d692:	f002 fc51 	bl	800ff38 <vPortValidateInterruptPriority>
	__asm volatile
 800d696:	f3ef 8211 	mrs	r2, BASEPRI
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	617a      	str	r2, [r7, #20]
 800d6ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d6ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d22b      	bcs.n	800d71a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	1c5a      	adds	r2, r3, #1
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6dc:	d112      	bne.n	800d704 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d016      	beq.n	800d714 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	3324      	adds	r3, #36	; 0x24
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f001 f996 	bl	800ea1c <xTaskRemoveFromEventList>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00e      	beq.n	800d714 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00b      	beq.n	800d714 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2201      	movs	r2, #1
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	e007      	b.n	800d714 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d708:	3301      	adds	r3, #1
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	b25a      	sxtb	r2, r3
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d714:	2301      	movs	r3, #1
 800d716:	637b      	str	r3, [r7, #52]	; 0x34
 800d718:	e001      	b.n	800d71e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	637b      	str	r3, [r7, #52]	; 0x34
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f383 8811 	msr	BASEPRI, r3
}
 800d728:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3738      	adds	r7, #56	; 0x38
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b08c      	sub	sp, #48	; 0x30
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d740:	2300      	movs	r3, #0
 800d742:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10a      	bne.n	800d764 <xQueueReceive+0x30>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	623b      	str	r3, [r7, #32]
}
 800d760:	bf00      	nop
 800d762:	e7fe      	b.n	800d762 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d103      	bne.n	800d772 <xQueueReceive+0x3e>
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d101      	bne.n	800d776 <xQueueReceive+0x42>
 800d772:	2301      	movs	r3, #1
 800d774:	e000      	b.n	800d778 <xQueueReceive+0x44>
 800d776:	2300      	movs	r3, #0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10a      	bne.n	800d792 <xQueueReceive+0x5e>
	__asm volatile
 800d77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d780:	f383 8811 	msr	BASEPRI, r3
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	61fb      	str	r3, [r7, #28]
}
 800d78e:	bf00      	nop
 800d790:	e7fe      	b.n	800d790 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d792:	f001 fb77 	bl	800ee84 <xTaskGetSchedulerState>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d102      	bne.n	800d7a2 <xQueueReceive+0x6e>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d101      	bne.n	800d7a6 <xQueueReceive+0x72>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e000      	b.n	800d7a8 <xQueueReceive+0x74>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10a      	bne.n	800d7c2 <xQueueReceive+0x8e>
	__asm volatile
 800d7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	61bb      	str	r3, [r7, #24]
}
 800d7be:	bf00      	nop
 800d7c0:	e7fe      	b.n	800d7c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7c2:	f002 fad7 	bl	800fd74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d01f      	beq.n	800d812 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7d2:	68b9      	ldr	r1, [r7, #8]
 800d7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7d6:	f000 fafa 	bl	800ddce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	1e5a      	subs	r2, r3, #1
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00f      	beq.n	800d80a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ec:	3310      	adds	r3, #16
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f001 f914 	bl	800ea1c <xTaskRemoveFromEventList>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d007      	beq.n	800d80a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7fa:	4b3d      	ldr	r3, [pc, #244]	; (800d8f0 <xQueueReceive+0x1bc>)
 800d7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d80a:	f002 fae3 	bl	800fdd4 <vPortExitCritical>
				return pdPASS;
 800d80e:	2301      	movs	r3, #1
 800d810:	e069      	b.n	800d8e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d818:	f002 fadc 	bl	800fdd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d81c:	2300      	movs	r3, #0
 800d81e:	e062      	b.n	800d8e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d826:	f107 0310 	add.w	r3, r7, #16
 800d82a:	4618      	mov	r0, r3
 800d82c:	f001 f9bc 	bl	800eba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d830:	2301      	movs	r3, #1
 800d832:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d834:	f002 face 	bl	800fdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d838:	f000 fe5c 	bl	800e4f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d83c:	f002 fa9a 	bl	800fd74 <vPortEnterCritical>
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d846:	b25b      	sxtb	r3, r3
 800d848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84c:	d103      	bne.n	800d856 <xQueueReceive+0x122>
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d85c:	b25b      	sxtb	r3, r3
 800d85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d862:	d103      	bne.n	800d86c <xQueueReceive+0x138>
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d86c:	f002 fab2 	bl	800fdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d870:	1d3a      	adds	r2, r7, #4
 800d872:	f107 0310 	add.w	r3, r7, #16
 800d876:	4611      	mov	r1, r2
 800d878:	4618      	mov	r0, r3
 800d87a:	f001 f9ab 	bl	800ebd4 <xTaskCheckForTimeOut>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d123      	bne.n	800d8cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d886:	f000 fb1a 	bl	800debe <prvIsQueueEmpty>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d017      	beq.n	800d8c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d892:	3324      	adds	r3, #36	; 0x24
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f001 f833 	bl	800e904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a0:	f000 fabb 	bl	800de1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8a4:	f000 fe34 	bl	800e510 <xTaskResumeAll>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d189      	bne.n	800d7c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d8ae:	4b10      	ldr	r3, [pc, #64]	; (800d8f0 <xQueueReceive+0x1bc>)
 800d8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	e780      	b.n	800d7c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8c2:	f000 faaa 	bl	800de1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8c6:	f000 fe23 	bl	800e510 <xTaskResumeAll>
 800d8ca:	e77a      	b.n	800d7c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8ce:	f000 faa4 	bl	800de1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8d2:	f000 fe1d 	bl	800e510 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8d8:	f000 faf1 	bl	800debe <prvIsQueueEmpty>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f43f af6f 	beq.w	800d7c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3730      	adds	r7, #48	; 0x30
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	e000ed04 	.word	0xe000ed04

0800d8f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08e      	sub	sp, #56	; 0x38
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8fe:	2300      	movs	r3, #0
 800d900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d906:	2300      	movs	r3, #0
 800d908:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10a      	bne.n	800d926 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	623b      	str	r3, [r7, #32]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	61fb      	str	r3, [r7, #28]
}
 800d940:	bf00      	nop
 800d942:	e7fe      	b.n	800d942 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d944:	f001 fa9e 	bl	800ee84 <xTaskGetSchedulerState>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <xQueueSemaphoreTake+0x60>
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <xQueueSemaphoreTake+0x64>
 800d954:	2301      	movs	r3, #1
 800d956:	e000      	b.n	800d95a <xQueueSemaphoreTake+0x66>
 800d958:	2300      	movs	r3, #0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	61bb      	str	r3, [r7, #24]
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d974:	f002 f9fe 	bl	800fd74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d980:	2b00      	cmp	r3, #0
 800d982:	d024      	beq.n	800d9ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d986:	1e5a      	subs	r2, r3, #1
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d104      	bne.n	800d99e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d994:	f001 fc04 	bl	800f1a0 <pvTaskIncrementMutexHeldCount>
 800d998:	4602      	mov	r2, r0
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00f      	beq.n	800d9c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	3310      	adds	r3, #16
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f001 f836 	bl	800ea1c <xTaskRemoveFromEventList>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d007      	beq.n	800d9c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9b6:	4b54      	ldr	r3, [pc, #336]	; (800db08 <xQueueSemaphoreTake+0x214>)
 800d9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9c6:	f002 fa05 	bl	800fdd4 <vPortExitCritical>
				return pdPASS;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e097      	b.n	800dafe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d111      	bne.n	800d9f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	617b      	str	r3, [r7, #20]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d9f0:	f002 f9f0 	bl	800fdd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	e082      	b.n	800dafe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d106      	bne.n	800da0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	4618      	mov	r0, r3
 800da04:	f001 f8d0 	bl	800eba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da08:	2301      	movs	r3, #1
 800da0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da0c:	f002 f9e2 	bl	800fdd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da10:	f000 fd70 	bl	800e4f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da14:	f002 f9ae 	bl	800fd74 <vPortEnterCritical>
 800da18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da1e:	b25b      	sxtb	r3, r3
 800da20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da24:	d103      	bne.n	800da2e <xQueueSemaphoreTake+0x13a>
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da34:	b25b      	sxtb	r3, r3
 800da36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3a:	d103      	bne.n	800da44 <xQueueSemaphoreTake+0x150>
 800da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da44:	f002 f9c6 	bl	800fdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da48:	463a      	mov	r2, r7
 800da4a:	f107 030c 	add.w	r3, r7, #12
 800da4e:	4611      	mov	r1, r2
 800da50:	4618      	mov	r0, r3
 800da52:	f001 f8bf 	bl	800ebd4 <xTaskCheckForTimeOut>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d132      	bne.n	800dac2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da5e:	f000 fa2e 	bl	800debe <prvIsQueueEmpty>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d026      	beq.n	800dab6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d109      	bne.n	800da84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800da70:	f002 f980 	bl	800fd74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	4618      	mov	r0, r3
 800da7a:	f001 fa21 	bl	800eec0 <xTaskPriorityInherit>
 800da7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da80:	f002 f9a8 	bl	800fdd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	3324      	adds	r3, #36	; 0x24
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	4611      	mov	r1, r2
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 ff39 	bl	800e904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da94:	f000 f9c1 	bl	800de1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da98:	f000 fd3a 	bl	800e510 <xTaskResumeAll>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f47f af68 	bne.w	800d974 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800daa4:	4b18      	ldr	r3, [pc, #96]	; (800db08 <xQueueSemaphoreTake+0x214>)
 800daa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	e75e      	b.n	800d974 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dab8:	f000 f9af 	bl	800de1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dabc:	f000 fd28 	bl	800e510 <xTaskResumeAll>
 800dac0:	e758      	b.n	800d974 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dac4:	f000 f9a9 	bl	800de1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dac8:	f000 fd22 	bl	800e510 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dacc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dace:	f000 f9f6 	bl	800debe <prvIsQueueEmpty>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f43f af4d 	beq.w	800d974 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00d      	beq.n	800dafc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dae0:	f002 f948 	bl	800fd74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dae6:	f000 f8f0 	bl	800dcca <prvGetDisinheritPriorityAfterTimeout>
 800daea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf2:	4618      	mov	r0, r3
 800daf4:	f001 faba 	bl	800f06c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800daf8:	f002 f96c 	bl	800fdd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dafc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3738      	adds	r7, #56	; 0x38
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08e      	sub	sp, #56	; 0x38
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10a      	bne.n	800db38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	623b      	str	r3, [r7, #32]
}
 800db34:	bf00      	nop
 800db36:	e7fe      	b.n	800db36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <xQueueReceiveFromISR+0x3a>
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <xQueueReceiveFromISR+0x3e>
 800db46:	2301      	movs	r3, #1
 800db48:	e000      	b.n	800db4c <xQueueReceiveFromISR+0x40>
 800db4a:	2300      	movs	r3, #0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10a      	bne.n	800db66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	61fb      	str	r3, [r7, #28]
}
 800db62:	bf00      	nop
 800db64:	e7fe      	b.n	800db64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db66:	f002 f9e7 	bl	800ff38 <vPortValidateInterruptPriority>
	__asm volatile
 800db6a:	f3ef 8211 	mrs	r2, BASEPRI
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	61ba      	str	r2, [r7, #24]
 800db80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d02f      	beq.n	800dbf2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db9c:	68b9      	ldr	r1, [r7, #8]
 800db9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dba0:	f000 f915 	bl	800ddce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	1e5a      	subs	r2, r3, #1
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dbac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb4:	d112      	bne.n	800dbdc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d016      	beq.n	800dbec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	3310      	adds	r3, #16
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f000 ff2a 	bl	800ea1c <xTaskRemoveFromEventList>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00e      	beq.n	800dbec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00b      	beq.n	800dbec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	e007      	b.n	800dbec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	b25a      	sxtb	r2, r3
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dbec:	2301      	movs	r3, #1
 800dbee:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf0:	e001      	b.n	800dbf6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f383 8811 	msr	BASEPRI, r3
}
 800dc00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3738      	adds	r7, #56	; 0x38
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10a      	bne.n	800dc30 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	60bb      	str	r3, [r7, #8]
}
 800dc2c:	bf00      	nop
 800dc2e:	e7fe      	b.n	800dc2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800dc30:	f002 f8a0 	bl	800fd74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800dc3a:	f002 f8cb 	bl	800fdd4 <vPortExitCritical>

	return uxReturn;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10a      	bne.n	800dc70 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800dc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	60fb      	str	r3, [r7, #12]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc74:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800dc76:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc78:	4618      	mov	r0, r3
 800dc7a:	371c      	adds	r7, #28
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10a      	bne.n	800dcac <vQueueDelete+0x28>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	60bb      	str	r3, [r7, #8]
}
 800dca8:	bf00      	nop
 800dcaa:	e7fe      	b.n	800dcaa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f000 f95f 	bl	800df70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f002 fa47 	bl	8010150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dcc2:	bf00      	nop
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dcca:	b480      	push	{r7}
 800dccc:	b085      	sub	sp, #20
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d006      	beq.n	800dce8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	e001      	b.n	800dcec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dce8:	2300      	movs	r3, #0
 800dcea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dcec:	68fb      	ldr	r3, [r7, #12]
	}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b086      	sub	sp, #24
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10d      	bne.n	800dd34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d14d      	bne.n	800ddbc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f001 f933 	bl	800ef90 <xTaskPriorityDisinherit>
 800dd2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	609a      	str	r2, [r3, #8]
 800dd32:	e043      	b.n	800ddbc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d119      	bne.n	800dd6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6858      	ldr	r0, [r3, #4]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd42:	461a      	mov	r2, r3
 800dd44:	68b9      	ldr	r1, [r7, #8]
 800dd46:	f013 fac7 	bl	80212d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd52:	441a      	add	r2, r3
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d32b      	bcc.n	800ddbc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	605a      	str	r2, [r3, #4]
 800dd6c:	e026      	b.n	800ddbc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	68d8      	ldr	r0, [r3, #12]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd76:	461a      	mov	r2, r3
 800dd78:	68b9      	ldr	r1, [r7, #8]
 800dd7a:	f013 faad 	bl	80212d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	68da      	ldr	r2, [r3, #12]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd86:	425b      	negs	r3, r3
 800dd88:	441a      	add	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	68da      	ldr	r2, [r3, #12]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d207      	bcs.n	800ddaa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	689a      	ldr	r2, [r3, #8]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda2:	425b      	negs	r3, r3
 800dda4:	441a      	add	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d105      	bne.n	800ddbc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ddc4:	697b      	ldr	r3, [r7, #20]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b082      	sub	sp, #8
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d018      	beq.n	800de12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	68da      	ldr	r2, [r3, #12]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde8:	441a      	add	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	68da      	ldr	r2, [r3, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d303      	bcc.n	800de02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68d9      	ldr	r1, [r3, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de0a:	461a      	mov	r2, r3
 800de0c:	6838      	ldr	r0, [r7, #0]
 800de0e:	f013 fa63 	bl	80212d8 <memcpy>
	}
}
 800de12:	bf00      	nop
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de22:	f001 ffa7 	bl	800fd74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de2e:	e011      	b.n	800de54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	2b00      	cmp	r3, #0
 800de36:	d012      	beq.n	800de5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	3324      	adds	r3, #36	; 0x24
 800de3c:	4618      	mov	r0, r3
 800de3e:	f000 fded 	bl	800ea1c <xTaskRemoveFromEventList>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de48:	f000 ff26 	bl	800ec98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	3b01      	subs	r3, #1
 800de50:	b2db      	uxtb	r3, r3
 800de52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	dce9      	bgt.n	800de30 <prvUnlockQueue+0x16>
 800de5c:	e000      	b.n	800de60 <prvUnlockQueue+0x46>
					break;
 800de5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	22ff      	movs	r2, #255	; 0xff
 800de64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de68:	f001 ffb4 	bl	800fdd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de6c:	f001 ff82 	bl	800fd74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de78:	e011      	b.n	800de9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d012      	beq.n	800dea8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	3310      	adds	r3, #16
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fdc8 	bl	800ea1c <xTaskRemoveFromEventList>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de92:	f000 ff01 	bl	800ec98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de96:	7bbb      	ldrb	r3, [r7, #14]
 800de98:	3b01      	subs	r3, #1
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	dce9      	bgt.n	800de7a <prvUnlockQueue+0x60>
 800dea6:	e000      	b.n	800deaa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dea8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	22ff      	movs	r2, #255	; 0xff
 800deae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800deb2:	f001 ff8f 	bl	800fdd4 <vPortExitCritical>
}
 800deb6:	bf00      	nop
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b084      	sub	sp, #16
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dec6:	f001 ff55 	bl	800fd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d102      	bne.n	800ded8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ded2:	2301      	movs	r3, #1
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	e001      	b.n	800dedc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dedc:	f001 ff7a 	bl	800fdd4 <vPortExitCritical>

	return xReturn;
 800dee0:	68fb      	ldr	r3, [r7, #12]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b084      	sub	sp, #16
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800def2:	f001 ff3f 	bl	800fd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800defe:	429a      	cmp	r2, r3
 800df00:	d102      	bne.n	800df08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df02:	2301      	movs	r3, #1
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	e001      	b.n	800df0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df0c:	f001 ff62 	bl	800fdd4 <vPortExitCritical>

	return xReturn;
 800df10:	68fb      	ldr	r3, [r7, #12]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
	...

0800df1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df26:	2300      	movs	r3, #0
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	e014      	b.n	800df56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df2c:	4a0f      	ldr	r2, [pc, #60]	; (800df6c <vQueueAddToRegistry+0x50>)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10b      	bne.n	800df50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df38:	490c      	ldr	r1, [pc, #48]	; (800df6c <vQueueAddToRegistry+0x50>)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df42:	4a0a      	ldr	r2, [pc, #40]	; (800df6c <vQueueAddToRegistry+0x50>)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	4413      	add	r3, r2
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df4e:	e006      	b.n	800df5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3301      	adds	r3, #1
 800df54:	60fb      	str	r3, [r7, #12]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b07      	cmp	r3, #7
 800df5a:	d9e7      	bls.n	800df2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20013428 	.word	0x20013428

0800df70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	e016      	b.n	800dfac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800df7e:	4a10      	ldr	r2, [pc, #64]	; (800dfc0 <vQueueUnregisterQueue+0x50>)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	4413      	add	r3, r2
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d10b      	bne.n	800dfa6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800df8e:	4a0c      	ldr	r2, [pc, #48]	; (800dfc0 <vQueueUnregisterQueue+0x50>)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2100      	movs	r1, #0
 800df94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800df98:	4a09      	ldr	r2, [pc, #36]	; (800dfc0 <vQueueUnregisterQueue+0x50>)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	4413      	add	r3, r2
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	605a      	str	r2, [r3, #4]
				break;
 800dfa4:	e006      	b.n	800dfb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	60fb      	str	r3, [r7, #12]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b07      	cmp	r3, #7
 800dfb0:	d9e5      	bls.n	800df7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20013428 	.word	0x20013428

0800dfc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dfd4:	f001 fece 	bl	800fd74 <vPortEnterCritical>
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfde:	b25b      	sxtb	r3, r3
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe4:	d103      	bne.n	800dfee <vQueueWaitForMessageRestricted+0x2a>
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dff4:	b25b      	sxtb	r3, r3
 800dff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffa:	d103      	bne.n	800e004 <vQueueWaitForMessageRestricted+0x40>
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e004:	f001 fee6 	bl	800fdd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d106      	bne.n	800e01e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	3324      	adds	r3, #36	; 0x24
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	68b9      	ldr	r1, [r7, #8]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fcd3 	bl	800e9c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	f7ff fefb 	bl	800de1a <prvUnlockQueue>
	}
 800e024:	bf00      	nop
 800e026:	3718      	adds	r7, #24
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08e      	sub	sp, #56	; 0x38
 800e030:	af04      	add	r7, sp, #16
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
 800e038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	623b      	str	r3, [r7, #32]
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <xTaskCreateStatic+0x46>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	61fb      	str	r3, [r7, #28]
}
 800e06e:	bf00      	nop
 800e070:	e7fe      	b.n	800e070 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e072:	23c4      	movs	r3, #196	; 0xc4
 800e074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	2bc4      	cmp	r3, #196	; 0xc4
 800e07a:	d00a      	beq.n	800e092 <xTaskCreateStatic+0x66>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	61bb      	str	r3, [r7, #24]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e092:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e096:	2b00      	cmp	r3, #0
 800e098:	d01e      	beq.n	800e0d8 <xTaskCreateStatic+0xac>
 800e09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d01b      	beq.n	800e0d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	2202      	movs	r2, #2
 800e0ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	9303      	str	r3, [sp, #12]
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	9302      	str	r3, [sp, #8]
 800e0ba:	f107 0314 	add.w	r3, r7, #20
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 f850 	bl	800e170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0d2:	f000 f8f9 	bl	800e2c8 <prvAddNewTaskToReadyList>
 800e0d6:	e001      	b.n	800e0dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0dc:	697b      	ldr	r3, [r7, #20]
	}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3728      	adds	r7, #40	; 0x28
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b08c      	sub	sp, #48	; 0x30
 800e0ea:	af04      	add	r7, sp, #16
 800e0ec:	60f8      	str	r0, [r7, #12]
 800e0ee:	60b9      	str	r1, [r7, #8]
 800e0f0:	603b      	str	r3, [r7, #0]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e0f6:	88fb      	ldrh	r3, [r7, #6]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 ff5c 	bl	800ffb8 <pvPortMalloc>
 800e100:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00e      	beq.n	800e126 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e108:	20c4      	movs	r0, #196	; 0xc4
 800e10a:	f001 ff55 	bl	800ffb8 <pvPortMalloc>
 800e10e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d003      	beq.n	800e11e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	631a      	str	r2, [r3, #48]	; 0x30
 800e11c:	e005      	b.n	800e12a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e11e:	6978      	ldr	r0, [r7, #20]
 800e120:	f002 f816 	bl	8010150 <vPortFree>
 800e124:	e001      	b.n	800e12a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e126:	2300      	movs	r3, #0
 800e128:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d017      	beq.n	800e160 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e138:	88fa      	ldrh	r2, [r7, #6]
 800e13a:	2300      	movs	r3, #0
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	9302      	str	r3, [sp, #8]
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	9301      	str	r3, [sp, #4]
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f000 f80e 	bl	800e170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e154:	69f8      	ldr	r0, [r7, #28]
 800e156:	f000 f8b7 	bl	800e2c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e15a:	2301      	movs	r3, #1
 800e15c:	61bb      	str	r3, [r7, #24]
 800e15e:	e002      	b.n	800e166 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e160:	f04f 33ff 	mov.w	r3, #4294967295
 800e164:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e166:	69bb      	ldr	r3, [r7, #24]
	}
 800e168:	4618      	mov	r0, r3
 800e16a:	3720      	adds	r7, #32
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	461a      	mov	r2, r3
 800e188:	21a5      	movs	r1, #165	; 0xa5
 800e18a:	f013 f8cd 	bl	8021328 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e198:	3b01      	subs	r3, #1
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	f023 0307 	bic.w	r3, r3, #7
 800e1a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	f003 0307 	and.w	r3, r3, #7
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00a      	beq.n	800e1c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	617b      	str	r3, [r7, #20]
}
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	69ba      	ldr	r2, [r7, #24]
 800e1cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d01f      	beq.n	800e214 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	61fb      	str	r3, [r7, #28]
 800e1d8:	e012      	b.n	800e200 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	4413      	add	r3, r2
 800e1e0:	7819      	ldrb	r1, [r3, #0]
 800e1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	3334      	adds	r3, #52	; 0x34
 800e1ea:	460a      	mov	r2, r1
 800e1ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d006      	beq.n	800e208 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	61fb      	str	r3, [r7, #28]
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	2b0f      	cmp	r3, #15
 800e204:	d9e9      	bls.n	800e1da <prvInitialiseNewTask+0x6a>
 800e206:	e000      	b.n	800e20a <prvInitialiseNewTask+0x9a>
			{
				break;
 800e208:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e212:	e003      	b.n	800e21c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21e:	2b37      	cmp	r3, #55	; 0x37
 800e220:	d901      	bls.n	800e226 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e222:	2337      	movs	r3, #55	; 0x37
 800e224:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e22a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e230:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	2200      	movs	r2, #0
 800e236:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23a:	3304      	adds	r3, #4
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fe fd61 	bl	800cd04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e244:	3318      	adds	r3, #24
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe fd5c 	bl	800cd04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e250:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e260:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	2200      	movs	r2, #0
 800e266:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	2200      	movs	r2, #0
 800e26c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	2200      	movs	r2, #0
 800e274:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27a:	335c      	adds	r3, #92	; 0x5c
 800e27c:	2260      	movs	r2, #96	; 0x60
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f013 f851 	bl	8021328 <memset>
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	4a0c      	ldr	r2, [pc, #48]	; (800e2bc <prvInitialiseNewTask+0x14c>)
 800e28a:	661a      	str	r2, [r3, #96]	; 0x60
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	4a0c      	ldr	r2, [pc, #48]	; (800e2c0 <prvInitialiseNewTask+0x150>)
 800e290:	665a      	str	r2, [r3, #100]	; 0x64
 800e292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e294:	4a0b      	ldr	r2, [pc, #44]	; (800e2c4 <prvInitialiseNewTask+0x154>)
 800e296:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	68f9      	ldr	r1, [r7, #12]
 800e29c:	69b8      	ldr	r0, [r7, #24]
 800e29e:	f001 fc39 	bl	800fb14 <pxPortInitialiseStack>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d002      	beq.n	800e2b4 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2b4:	bf00      	nop
 800e2b6:	3720      	adds	r7, #32
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	0802761c 	.word	0x0802761c
 800e2c0:	0802763c 	.word	0x0802763c
 800e2c4:	080275fc 	.word	0x080275fc

0800e2c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2d0:	f001 fd50 	bl	800fd74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2d4:	4b2d      	ldr	r3, [pc, #180]	; (800e38c <prvAddNewTaskToReadyList+0xc4>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	4a2c      	ldr	r2, [pc, #176]	; (800e38c <prvAddNewTaskToReadyList+0xc4>)
 800e2dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2de:	4b2c      	ldr	r3, [pc, #176]	; (800e390 <prvAddNewTaskToReadyList+0xc8>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d109      	bne.n	800e2fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2e6:	4a2a      	ldr	r2, [pc, #168]	; (800e390 <prvAddNewTaskToReadyList+0xc8>)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2ec:	4b27      	ldr	r3, [pc, #156]	; (800e38c <prvAddNewTaskToReadyList+0xc4>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d110      	bne.n	800e316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2f4:	f000 fcf4 	bl	800ece0 <prvInitialiseTaskLists>
 800e2f8:	e00d      	b.n	800e316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2fa:	4b26      	ldr	r3, [pc, #152]	; (800e394 <prvAddNewTaskToReadyList+0xcc>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d109      	bne.n	800e316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e302:	4b23      	ldr	r3, [pc, #140]	; (800e390 <prvAddNewTaskToReadyList+0xc8>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d802      	bhi.n	800e316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e310:	4a1f      	ldr	r2, [pc, #124]	; (800e390 <prvAddNewTaskToReadyList+0xc8>)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e316:	4b20      	ldr	r3, [pc, #128]	; (800e398 <prvAddNewTaskToReadyList+0xd0>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	3301      	adds	r3, #1
 800e31c:	4a1e      	ldr	r2, [pc, #120]	; (800e398 <prvAddNewTaskToReadyList+0xd0>)
 800e31e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e320:	4b1d      	ldr	r3, [pc, #116]	; (800e398 <prvAddNewTaskToReadyList+0xd0>)
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32c:	4b1b      	ldr	r3, [pc, #108]	; (800e39c <prvAddNewTaskToReadyList+0xd4>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d903      	bls.n	800e33c <prvAddNewTaskToReadyList+0x74>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e338:	4a18      	ldr	r2, [pc, #96]	; (800e39c <prvAddNewTaskToReadyList+0xd4>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4a15      	ldr	r2, [pc, #84]	; (800e3a0 <prvAddNewTaskToReadyList+0xd8>)
 800e34a:	441a      	add	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3304      	adds	r3, #4
 800e350:	4619      	mov	r1, r3
 800e352:	4610      	mov	r0, r2
 800e354:	f7fe fce3 	bl	800cd1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e358:	f001 fd3c 	bl	800fdd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e35c:	4b0d      	ldr	r3, [pc, #52]	; (800e394 <prvAddNewTaskToReadyList+0xcc>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00e      	beq.n	800e382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e364:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <prvAddNewTaskToReadyList+0xc8>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36e:	429a      	cmp	r2, r3
 800e370:	d207      	bcs.n	800e382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e372:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <prvAddNewTaskToReadyList+0xdc>)
 800e374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e382:	bf00      	nop
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	2000131c 	.word	0x2000131c
 800e390:	20000e48 	.word	0x20000e48
 800e394:	20001328 	.word	0x20001328
 800e398:	20001338 	.word	0x20001338
 800e39c:	20001324 	.word	0x20001324
 800e3a0:	20000e4c 	.word	0x20000e4c
 800e3a4:	e000ed04 	.word	0xe000ed04

0800e3a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d017      	beq.n	800e3ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e3ba:	4b13      	ldr	r3, [pc, #76]	; (800e408 <vTaskDelay+0x60>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00a      	beq.n	800e3d8 <vTaskDelay+0x30>
	__asm volatile
 800e3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c6:	f383 8811 	msr	BASEPRI, r3
 800e3ca:	f3bf 8f6f 	isb	sy
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	60bb      	str	r3, [r7, #8]
}
 800e3d4:	bf00      	nop
 800e3d6:	e7fe      	b.n	800e3d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e3d8:	f000 f88c 	bl	800e4f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3dc:	2100      	movs	r1, #0
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fef2 	bl	800f1c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e3e4:	f000 f894 	bl	800e510 <xTaskResumeAll>
 800e3e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d107      	bne.n	800e400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e3f0:	4b06      	ldr	r3, [pc, #24]	; (800e40c <vTaskDelay+0x64>)
 800e3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e400:	bf00      	nop
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	20001344 	.word	0x20001344
 800e40c:	e000ed04 	.word	0xe000ed04

0800e410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b08a      	sub	sp, #40	; 0x28
 800e414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e41e:	463a      	mov	r2, r7
 800e420:	1d39      	adds	r1, r7, #4
 800e422:	f107 0308 	add.w	r3, r7, #8
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe f978 	bl	800c71c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e42c:	6839      	ldr	r1, [r7, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	9202      	str	r2, [sp, #8]
 800e434:	9301      	str	r3, [sp, #4]
 800e436:	2300      	movs	r3, #0
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	2300      	movs	r3, #0
 800e43c:	460a      	mov	r2, r1
 800e43e:	4925      	ldr	r1, [pc, #148]	; (800e4d4 <vTaskStartScheduler+0xc4>)
 800e440:	4825      	ldr	r0, [pc, #148]	; (800e4d8 <vTaskStartScheduler+0xc8>)
 800e442:	f7ff fdf3 	bl	800e02c <xTaskCreateStatic>
 800e446:	4603      	mov	r3, r0
 800e448:	4a24      	ldr	r2, [pc, #144]	; (800e4dc <vTaskStartScheduler+0xcc>)
 800e44a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e44c:	4b23      	ldr	r3, [pc, #140]	; (800e4dc <vTaskStartScheduler+0xcc>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e454:	2301      	movs	r3, #1
 800e456:	617b      	str	r3, [r7, #20]
 800e458:	e001      	b.n	800e45e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e45a:	2300      	movs	r3, #0
 800e45c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d102      	bne.n	800e46a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e464:	f000 ff04 	bl	800f270 <xTimerCreateTimerTask>
 800e468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d11d      	bne.n	800e4ac <vTaskStartScheduler+0x9c>
	__asm volatile
 800e470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e474:	f383 8811 	msr	BASEPRI, r3
 800e478:	f3bf 8f6f 	isb	sy
 800e47c:	f3bf 8f4f 	dsb	sy
 800e480:	613b      	str	r3, [r7, #16]
}
 800e482:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e484:	4b16      	ldr	r3, [pc, #88]	; (800e4e0 <vTaskStartScheduler+0xd0>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	335c      	adds	r3, #92	; 0x5c
 800e48a:	4a16      	ldr	r2, [pc, #88]	; (800e4e4 <vTaskStartScheduler+0xd4>)
 800e48c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e48e:	4b16      	ldr	r3, [pc, #88]	; (800e4e8 <vTaskStartScheduler+0xd8>)
 800e490:	f04f 32ff 	mov.w	r2, #4294967295
 800e494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e496:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <vTaskStartScheduler+0xdc>)
 800e498:	2201      	movs	r2, #1
 800e49a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e49c:	4b14      	ldr	r3, [pc, #80]	; (800e4f0 <vTaskStartScheduler+0xe0>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e4a2:	f7f2 fc5d 	bl	8000d60 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4a6:	f001 fbc3 	bl	800fc30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4aa:	e00e      	b.n	800e4ca <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b2:	d10a      	bne.n	800e4ca <vTaskStartScheduler+0xba>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60fb      	str	r3, [r7, #12]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <vTaskStartScheduler+0xb8>
}
 800e4ca:	bf00      	nop
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	0802372c 	.word	0x0802372c
 800e4d8:	0800ecb1 	.word	0x0800ecb1
 800e4dc:	20001340 	.word	0x20001340
 800e4e0:	20000e48 	.word	0x20000e48
 800e4e4:	20000370 	.word	0x20000370
 800e4e8:	2000133c 	.word	0x2000133c
 800e4ec:	20001328 	.word	0x20001328
 800e4f0:	20001320 	.word	0x20001320

0800e4f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e4f8:	4b04      	ldr	r3, [pc, #16]	; (800e50c <vTaskSuspendAll+0x18>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	4a03      	ldr	r2, [pc, #12]	; (800e50c <vTaskSuspendAll+0x18>)
 800e500:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e502:	bf00      	nop
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	20001344 	.word	0x20001344

0800e510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e516:	2300      	movs	r3, #0
 800e518:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e51a:	2300      	movs	r3, #0
 800e51c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e51e:	4b42      	ldr	r3, [pc, #264]	; (800e628 <xTaskResumeAll+0x118>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <xTaskResumeAll+0x2c>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	603b      	str	r3, [r7, #0]
}
 800e538:	bf00      	nop
 800e53a:	e7fe      	b.n	800e53a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e53c:	f001 fc1a 	bl	800fd74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e540:	4b39      	ldr	r3, [pc, #228]	; (800e628 <xTaskResumeAll+0x118>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3b01      	subs	r3, #1
 800e546:	4a38      	ldr	r2, [pc, #224]	; (800e628 <xTaskResumeAll+0x118>)
 800e548:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e54a:	4b37      	ldr	r3, [pc, #220]	; (800e628 <xTaskResumeAll+0x118>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d162      	bne.n	800e618 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e552:	4b36      	ldr	r3, [pc, #216]	; (800e62c <xTaskResumeAll+0x11c>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d05e      	beq.n	800e618 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e55a:	e02f      	b.n	800e5bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e55c:	4b34      	ldr	r3, [pc, #208]	; (800e630 <xTaskResumeAll+0x120>)
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3318      	adds	r3, #24
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fc35 	bl	800cdd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	3304      	adds	r3, #4
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe fc30 	bl	800cdd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57c:	4b2d      	ldr	r3, [pc, #180]	; (800e634 <xTaskResumeAll+0x124>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	429a      	cmp	r2, r3
 800e582:	d903      	bls.n	800e58c <xTaskResumeAll+0x7c>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e588:	4a2a      	ldr	r2, [pc, #168]	; (800e634 <xTaskResumeAll+0x124>)
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e590:	4613      	mov	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4a27      	ldr	r2, [pc, #156]	; (800e638 <xTaskResumeAll+0x128>)
 800e59a:	441a      	add	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7fe fbbb 	bl	800cd1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ac:	4b23      	ldr	r3, [pc, #140]	; (800e63c <xTaskResumeAll+0x12c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d302      	bcc.n	800e5bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e5b6:	4b22      	ldr	r3, [pc, #136]	; (800e640 <xTaskResumeAll+0x130>)
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5bc:	4b1c      	ldr	r3, [pc, #112]	; (800e630 <xTaskResumeAll+0x120>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1cb      	bne.n	800e55c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5ca:	f000 fc2b 	bl	800ee24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5ce:	4b1d      	ldr	r3, [pc, #116]	; (800e644 <xTaskResumeAll+0x134>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d010      	beq.n	800e5fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5da:	f000 f859 	bl	800e690 <xTaskIncrementTick>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e5e4:	4b16      	ldr	r3, [pc, #88]	; (800e640 <xTaskResumeAll+0x130>)
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1f1      	bne.n	800e5da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e5f6:	4b13      	ldr	r3, [pc, #76]	; (800e644 <xTaskResumeAll+0x134>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e5fc:	4b10      	ldr	r3, [pc, #64]	; (800e640 <xTaskResumeAll+0x130>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e604:	2301      	movs	r3, #1
 800e606:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e608:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <xTaskResumeAll+0x138>)
 800e60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e618:	f001 fbdc 	bl	800fdd4 <vPortExitCritical>

	return xAlreadyYielded;
 800e61c:	68bb      	ldr	r3, [r7, #8]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	20001344 	.word	0x20001344
 800e62c:	2000131c 	.word	0x2000131c
 800e630:	200012dc 	.word	0x200012dc
 800e634:	20001324 	.word	0x20001324
 800e638:	20000e4c 	.word	0x20000e4c
 800e63c:	20000e48 	.word	0x20000e48
 800e640:	20001330 	.word	0x20001330
 800e644:	2000132c 	.word	0x2000132c
 800e648:	e000ed04 	.word	0xe000ed04

0800e64c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e652:	4b05      	ldr	r3, [pc, #20]	; (800e668 <xTaskGetTickCount+0x1c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e658:	687b      	ldr	r3, [r7, #4]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	20001320 	.word	0x20001320

0800e66c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e672:	f001 fc61 	bl	800ff38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e676:	2300      	movs	r3, #0
 800e678:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e67a:	4b04      	ldr	r3, [pc, #16]	; (800e68c <xTaskGetTickCountFromISR+0x20>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e680:	683b      	ldr	r3, [r7, #0]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	20001320 	.word	0x20001320

0800e690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e696:	2300      	movs	r3, #0
 800e698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e69a:	4b4f      	ldr	r3, [pc, #316]	; (800e7d8 <xTaskIncrementTick+0x148>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f040 808f 	bne.w	800e7c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6a4:	4b4d      	ldr	r3, [pc, #308]	; (800e7dc <xTaskIncrementTick+0x14c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6ac:	4a4b      	ldr	r2, [pc, #300]	; (800e7dc <xTaskIncrementTick+0x14c>)
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d120      	bne.n	800e6fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6b8:	4b49      	ldr	r3, [pc, #292]	; (800e7e0 <xTaskIncrementTick+0x150>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00a      	beq.n	800e6d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	603b      	str	r3, [r7, #0]
}
 800e6d4:	bf00      	nop
 800e6d6:	e7fe      	b.n	800e6d6 <xTaskIncrementTick+0x46>
 800e6d8:	4b41      	ldr	r3, [pc, #260]	; (800e7e0 <xTaskIncrementTick+0x150>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	60fb      	str	r3, [r7, #12]
 800e6de:	4b41      	ldr	r3, [pc, #260]	; (800e7e4 <xTaskIncrementTick+0x154>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a3f      	ldr	r2, [pc, #252]	; (800e7e0 <xTaskIncrementTick+0x150>)
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	4a3f      	ldr	r2, [pc, #252]	; (800e7e4 <xTaskIncrementTick+0x154>)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6013      	str	r3, [r2, #0]
 800e6ec:	4b3e      	ldr	r3, [pc, #248]	; (800e7e8 <xTaskIncrementTick+0x158>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	4a3d      	ldr	r2, [pc, #244]	; (800e7e8 <xTaskIncrementTick+0x158>)
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	f000 fb95 	bl	800ee24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6fa:	4b3c      	ldr	r3, [pc, #240]	; (800e7ec <xTaskIncrementTick+0x15c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	429a      	cmp	r2, r3
 800e702:	d349      	bcc.n	800e798 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e704:	4b36      	ldr	r3, [pc, #216]	; (800e7e0 <xTaskIncrementTick+0x150>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d104      	bne.n	800e718 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e70e:	4b37      	ldr	r3, [pc, #220]	; (800e7ec <xTaskIncrementTick+0x15c>)
 800e710:	f04f 32ff 	mov.w	r2, #4294967295
 800e714:	601a      	str	r2, [r3, #0]
					break;
 800e716:	e03f      	b.n	800e798 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e718:	4b31      	ldr	r3, [pc, #196]	; (800e7e0 <xTaskIncrementTick+0x150>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68db      	ldr	r3, [r3, #12]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d203      	bcs.n	800e738 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e730:	4a2e      	ldr	r2, [pc, #184]	; (800e7ec <xTaskIncrementTick+0x15c>)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e736:	e02f      	b.n	800e798 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	3304      	adds	r3, #4
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe fb4b 	bl	800cdd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e746:	2b00      	cmp	r3, #0
 800e748:	d004      	beq.n	800e754 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	3318      	adds	r3, #24
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fe fb42 	bl	800cdd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e758:	4b25      	ldr	r3, [pc, #148]	; (800e7f0 <xTaskIncrementTick+0x160>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d903      	bls.n	800e768 <xTaskIncrementTick+0xd8>
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e764:	4a22      	ldr	r2, [pc, #136]	; (800e7f0 <xTaskIncrementTick+0x160>)
 800e766:	6013      	str	r3, [r2, #0]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76c:	4613      	mov	r3, r2
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	4413      	add	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4a1f      	ldr	r2, [pc, #124]	; (800e7f4 <xTaskIncrementTick+0x164>)
 800e776:	441a      	add	r2, r3
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	3304      	adds	r3, #4
 800e77c:	4619      	mov	r1, r3
 800e77e:	4610      	mov	r0, r2
 800e780:	f7fe facd 	bl	800cd1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e788:	4b1b      	ldr	r3, [pc, #108]	; (800e7f8 <xTaskIncrementTick+0x168>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78e:	429a      	cmp	r2, r3
 800e790:	d3b8      	bcc.n	800e704 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e792:	2301      	movs	r3, #1
 800e794:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e796:	e7b5      	b.n	800e704 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e798:	4b17      	ldr	r3, [pc, #92]	; (800e7f8 <xTaskIncrementTick+0x168>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79e:	4915      	ldr	r1, [pc, #84]	; (800e7f4 <xTaskIncrementTick+0x164>)
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	440b      	add	r3, r1
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d901      	bls.n	800e7b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7b4:	4b11      	ldr	r3, [pc, #68]	; (800e7fc <xTaskIncrementTick+0x16c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d007      	beq.n	800e7cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e7bc:	2301      	movs	r3, #1
 800e7be:	617b      	str	r3, [r7, #20]
 800e7c0:	e004      	b.n	800e7cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7c2:	4b0f      	ldr	r3, [pc, #60]	; (800e800 <xTaskIncrementTick+0x170>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	; (800e800 <xTaskIncrementTick+0x170>)
 800e7ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7cc:	697b      	ldr	r3, [r7, #20]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20001344 	.word	0x20001344
 800e7dc:	20001320 	.word	0x20001320
 800e7e0:	200012d4 	.word	0x200012d4
 800e7e4:	200012d8 	.word	0x200012d8
 800e7e8:	20001334 	.word	0x20001334
 800e7ec:	2000133c 	.word	0x2000133c
 800e7f0:	20001324 	.word	0x20001324
 800e7f4:	20000e4c 	.word	0x20000e4c
 800e7f8:	20000e48 	.word	0x20000e48
 800e7fc:	20001330 	.word	0x20001330
 800e800:	2000132c 	.word	0x2000132c

0800e804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e80a:	4b36      	ldr	r3, [pc, #216]	; (800e8e4 <vTaskSwitchContext+0xe0>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e812:	4b35      	ldr	r3, [pc, #212]	; (800e8e8 <vTaskSwitchContext+0xe4>)
 800e814:	2201      	movs	r2, #1
 800e816:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e818:	e05f      	b.n	800e8da <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e81a:	4b33      	ldr	r3, [pc, #204]	; (800e8e8 <vTaskSwitchContext+0xe4>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e820:	f7f2 faac 	bl	8000d7c <getRunTimeCounterValue>
 800e824:	4603      	mov	r3, r0
 800e826:	4a31      	ldr	r2, [pc, #196]	; (800e8ec <vTaskSwitchContext+0xe8>)
 800e828:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e82a:	4b30      	ldr	r3, [pc, #192]	; (800e8ec <vTaskSwitchContext+0xe8>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	4b30      	ldr	r3, [pc, #192]	; (800e8f0 <vTaskSwitchContext+0xec>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d909      	bls.n	800e84a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e836:	4b2f      	ldr	r3, [pc, #188]	; (800e8f4 <vTaskSwitchContext+0xf0>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e83c:	4a2b      	ldr	r2, [pc, #172]	; (800e8ec <vTaskSwitchContext+0xe8>)
 800e83e:	6810      	ldr	r0, [r2, #0]
 800e840:	4a2b      	ldr	r2, [pc, #172]	; (800e8f0 <vTaskSwitchContext+0xec>)
 800e842:	6812      	ldr	r2, [r2, #0]
 800e844:	1a82      	subs	r2, r0, r2
 800e846:	440a      	add	r2, r1
 800e848:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e84a:	4b28      	ldr	r3, [pc, #160]	; (800e8ec <vTaskSwitchContext+0xe8>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a28      	ldr	r2, [pc, #160]	; (800e8f0 <vTaskSwitchContext+0xec>)
 800e850:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e852:	4b29      	ldr	r3, [pc, #164]	; (800e8f8 <vTaskSwitchContext+0xf4>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60fb      	str	r3, [r7, #12]
 800e858:	e010      	b.n	800e87c <vTaskSwitchContext+0x78>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10a      	bne.n	800e876 <vTaskSwitchContext+0x72>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	607b      	str	r3, [r7, #4]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <vTaskSwitchContext+0x70>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	3b01      	subs	r3, #1
 800e87a:	60fb      	str	r3, [r7, #12]
 800e87c:	491f      	ldr	r1, [pc, #124]	; (800e8fc <vTaskSwitchContext+0xf8>)
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	440b      	add	r3, r1
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d0e4      	beq.n	800e85a <vTaskSwitchContext+0x56>
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	4613      	mov	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4a18      	ldr	r2, [pc, #96]	; (800e8fc <vTaskSwitchContext+0xf8>)
 800e89c:	4413      	add	r3, r2
 800e89e:	60bb      	str	r3, [r7, #8]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	685a      	ldr	r2, [r3, #4]
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	605a      	str	r2, [r3, #4]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	685a      	ldr	r2, [r3, #4]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	3308      	adds	r3, #8
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d104      	bne.n	800e8c0 <vTaskSwitchContext+0xbc>
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	605a      	str	r2, [r3, #4]
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	4a0b      	ldr	r2, [pc, #44]	; (800e8f4 <vTaskSwitchContext+0xf0>)
 800e8c8:	6013      	str	r3, [r2, #0]
 800e8ca:	4a0b      	ldr	r2, [pc, #44]	; (800e8f8 <vTaskSwitchContext+0xf4>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e8d0:	4b08      	ldr	r3, [pc, #32]	; (800e8f4 <vTaskSwitchContext+0xf0>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	335c      	adds	r3, #92	; 0x5c
 800e8d6:	4a0a      	ldr	r2, [pc, #40]	; (800e900 <vTaskSwitchContext+0xfc>)
 800e8d8:	6013      	str	r3, [r2, #0]
}
 800e8da:	bf00      	nop
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20001344 	.word	0x20001344
 800e8e8:	20001330 	.word	0x20001330
 800e8ec:	2000134c 	.word	0x2000134c
 800e8f0:	20001348 	.word	0x20001348
 800e8f4:	20000e48 	.word	0x20000e48
 800e8f8:	20001324 	.word	0x20001324
 800e8fc:	20000e4c 	.word	0x20000e4c
 800e900:	20000370 	.word	0x20000370

0800e904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	60fb      	str	r3, [r7, #12]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e92a:	4b07      	ldr	r3, [pc, #28]	; (800e948 <vTaskPlaceOnEventList+0x44>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3318      	adds	r3, #24
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7fe fa17 	bl	800cd66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e938:	2101      	movs	r1, #1
 800e93a:	6838      	ldr	r0, [r7, #0]
 800e93c:	f000 fc44 	bl	800f1c8 <prvAddCurrentTaskToDelayedList>
}
 800e940:	bf00      	nop
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20000e48 	.word	0x20000e48

0800e94c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10a      	bne.n	800e974 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	617b      	str	r3, [r7, #20]
}
 800e970:	bf00      	nop
 800e972:	e7fe      	b.n	800e972 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e974:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <vTaskPlaceOnUnorderedEventList+0x70>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	613b      	str	r3, [r7, #16]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e992:	4b0b      	ldr	r3, [pc, #44]	; (800e9c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e99c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e99e:	4b08      	ldr	r3, [pc, #32]	; (800e9c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3318      	adds	r3, #24
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7fe f9b9 	bl	800cd1e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fc0a 	bl	800f1c8 <prvAddCurrentTaskToDelayedList>
}
 800e9b4:	bf00      	nop
 800e9b6:	3718      	adds	r7, #24
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20001344 	.word	0x20001344
 800e9c0:	20000e48 	.word	0x20000e48

0800e9c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10a      	bne.n	800e9ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	617b      	str	r3, [r7, #20]
}
 800e9e8:	bf00      	nop
 800e9ea:	e7fe      	b.n	800e9ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ea18 <vTaskPlaceOnEventListRestricted+0x54>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	3318      	adds	r3, #24
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7fe f992 	bl	800cd1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ea00:	f04f 33ff 	mov.w	r3, #4294967295
 800ea04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea06:	6879      	ldr	r1, [r7, #4]
 800ea08:	68b8      	ldr	r0, [r7, #8]
 800ea0a:	f000 fbdd 	bl	800f1c8 <prvAddCurrentTaskToDelayedList>
	}
 800ea0e:	bf00      	nop
 800ea10:	3718      	adds	r7, #24
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000e48 	.word	0x20000e48

0800ea1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10a      	bne.n	800ea48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea36:	f383 8811 	msr	BASEPRI, r3
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	60fb      	str	r3, [r7, #12]
}
 800ea44:	bf00      	nop
 800ea46:	e7fe      	b.n	800ea46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	3318      	adds	r3, #24
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe f9c3 	bl	800cdd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea52:	4b1e      	ldr	r3, [pc, #120]	; (800eacc <xTaskRemoveFromEventList+0xb0>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d11d      	bne.n	800ea96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	3304      	adds	r3, #4
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fe f9ba 	bl	800cdd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea68:	4b19      	ldr	r3, [pc, #100]	; (800ead0 <xTaskRemoveFromEventList+0xb4>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d903      	bls.n	800ea78 <xTaskRemoveFromEventList+0x5c>
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea74:	4a16      	ldr	r2, [pc, #88]	; (800ead0 <xTaskRemoveFromEventList+0xb4>)
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	4413      	add	r3, r2
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4a13      	ldr	r2, [pc, #76]	; (800ead4 <xTaskRemoveFromEventList+0xb8>)
 800ea86:	441a      	add	r2, r3
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4610      	mov	r0, r2
 800ea90:	f7fe f945 	bl	800cd1e <vListInsertEnd>
 800ea94:	e005      	b.n	800eaa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	3318      	adds	r3, #24
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	480e      	ldr	r0, [pc, #56]	; (800ead8 <xTaskRemoveFromEventList+0xbc>)
 800ea9e:	f7fe f93e 	bl	800cd1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa6:	4b0d      	ldr	r3, [pc, #52]	; (800eadc <xTaskRemoveFromEventList+0xc0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d905      	bls.n	800eabc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eab0:	2301      	movs	r3, #1
 800eab2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eab4:	4b0a      	ldr	r3, [pc, #40]	; (800eae0 <xTaskRemoveFromEventList+0xc4>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	e001      	b.n	800eac0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eabc:	2300      	movs	r3, #0
 800eabe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eac0:	697b      	ldr	r3, [r7, #20]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20001344 	.word	0x20001344
 800ead0:	20001324 	.word	0x20001324
 800ead4:	20000e4c 	.word	0x20000e4c
 800ead8:	200012dc 	.word	0x200012dc
 800eadc:	20000e48 	.word	0x20000e48
 800eae0:	20001330 	.word	0x20001330

0800eae4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800eaee:	4b29      	ldr	r3, [pc, #164]	; (800eb94 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10a      	bne.n	800eb0c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800eaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	613b      	str	r3, [r7, #16]
}
 800eb08:	bf00      	nop
 800eb0a:	e7fe      	b.n	800eb0a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10a      	bne.n	800eb38 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	60fb      	str	r3, [r7, #12]
}
 800eb34:	bf00      	nop
 800eb36:	e7fe      	b.n	800eb36 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7fe f94d 	bl	800cdd8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	3304      	adds	r3, #4
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe f948 	bl	800cdd8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4c:	4b12      	ldr	r3, [pc, #72]	; (800eb98 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d903      	bls.n	800eb5c <vTaskRemoveFromUnorderedEventList+0x78>
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb58:	4a0f      	ldr	r2, [pc, #60]	; (800eb98 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800eb5a:	6013      	str	r3, [r2, #0]
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb60:	4613      	mov	r3, r2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	4413      	add	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4a0c      	ldr	r2, [pc, #48]	; (800eb9c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800eb6a:	441a      	add	r2, r3
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	4619      	mov	r1, r3
 800eb72:	4610      	mov	r0, r2
 800eb74:	f7fe f8d3 	bl	800cd1e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb7c:	4b08      	ldr	r3, [pc, #32]	; (800eba0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d902      	bls.n	800eb8c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800eb86:	4b07      	ldr	r3, [pc, #28]	; (800eba4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800eb88:	2201      	movs	r2, #1
 800eb8a:	601a      	str	r2, [r3, #0]
	}
}
 800eb8c:	bf00      	nop
 800eb8e:	3718      	adds	r7, #24
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	20001344 	.word	0x20001344
 800eb98:	20001324 	.word	0x20001324
 800eb9c:	20000e4c 	.word	0x20000e4c
 800eba0:	20000e48 	.word	0x20000e48
 800eba4:	20001330 	.word	0x20001330

0800eba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebb0:	4b06      	ldr	r3, [pc, #24]	; (800ebcc <vTaskInternalSetTimeOutState+0x24>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebb8:	4b05      	ldr	r3, [pc, #20]	; (800ebd0 <vTaskInternalSetTimeOutState+0x28>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	605a      	str	r2, [r3, #4]
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	20001334 	.word	0x20001334
 800ebd0:	20001320 	.word	0x20001320

0800ebd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b088      	sub	sp, #32
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d10a      	bne.n	800ebfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ebe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe8:	f383 8811 	msr	BASEPRI, r3
 800ebec:	f3bf 8f6f 	isb	sy
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	613b      	str	r3, [r7, #16]
}
 800ebf6:	bf00      	nop
 800ebf8:	e7fe      	b.n	800ebf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10a      	bne.n	800ec16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ec00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	60fb      	str	r3, [r7, #12]
}
 800ec12:	bf00      	nop
 800ec14:	e7fe      	b.n	800ec14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ec16:	f001 f8ad 	bl	800fd74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec1a:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <xTaskCheckForTimeOut+0xbc>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	69ba      	ldr	r2, [r7, #24]
 800ec26:	1ad3      	subs	r3, r2, r3
 800ec28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec32:	d102      	bne.n	800ec3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec34:	2300      	movs	r3, #0
 800ec36:	61fb      	str	r3, [r7, #28]
 800ec38:	e023      	b.n	800ec82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	4b15      	ldr	r3, [pc, #84]	; (800ec94 <xTaskCheckForTimeOut+0xc0>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d007      	beq.n	800ec56 <xTaskCheckForTimeOut+0x82>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	69ba      	ldr	r2, [r7, #24]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d302      	bcc.n	800ec56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec50:	2301      	movs	r3, #1
 800ec52:	61fb      	str	r3, [r7, #28]
 800ec54:	e015      	b.n	800ec82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d20b      	bcs.n	800ec78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	1ad2      	subs	r2, r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff ff9b 	bl	800eba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec72:	2300      	movs	r3, #0
 800ec74:	61fb      	str	r3, [r7, #28]
 800ec76:	e004      	b.n	800ec82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec82:	f001 f8a7 	bl	800fdd4 <vPortExitCritical>

	return xReturn;
 800ec86:	69fb      	ldr	r3, [r7, #28]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3720      	adds	r7, #32
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	20001320 	.word	0x20001320
 800ec94:	20001334 	.word	0x20001334

0800ec98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec98:	b480      	push	{r7}
 800ec9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec9c:	4b03      	ldr	r3, [pc, #12]	; (800ecac <vTaskMissedYield+0x14>)
 800ec9e:	2201      	movs	r2, #1
 800eca0:	601a      	str	r2, [r3, #0]
}
 800eca2:	bf00      	nop
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	20001330 	.word	0x20001330

0800ecb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecb8:	f000 f852 	bl	800ed60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ecbc:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <prvIdleTask+0x28>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d9f9      	bls.n	800ecb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ecc4:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <prvIdleTask+0x2c>)
 800ecc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecd4:	e7f0      	b.n	800ecb8 <prvIdleTask+0x8>
 800ecd6:	bf00      	nop
 800ecd8:	20000e4c 	.word	0x20000e4c
 800ecdc:	e000ed04 	.word	0xe000ed04

0800ece0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ece6:	2300      	movs	r3, #0
 800ece8:	607b      	str	r3, [r7, #4]
 800ecea:	e00c      	b.n	800ed06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4a12      	ldr	r2, [pc, #72]	; (800ed40 <prvInitialiseTaskLists+0x60>)
 800ecf8:	4413      	add	r3, r2
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd ffe2 	bl	800ccc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	3301      	adds	r3, #1
 800ed04:	607b      	str	r3, [r7, #4]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b37      	cmp	r3, #55	; 0x37
 800ed0a:	d9ef      	bls.n	800ecec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed0c:	480d      	ldr	r0, [pc, #52]	; (800ed44 <prvInitialiseTaskLists+0x64>)
 800ed0e:	f7fd ffd9 	bl	800ccc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed12:	480d      	ldr	r0, [pc, #52]	; (800ed48 <prvInitialiseTaskLists+0x68>)
 800ed14:	f7fd ffd6 	bl	800ccc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed18:	480c      	ldr	r0, [pc, #48]	; (800ed4c <prvInitialiseTaskLists+0x6c>)
 800ed1a:	f7fd ffd3 	bl	800ccc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed1e:	480c      	ldr	r0, [pc, #48]	; (800ed50 <prvInitialiseTaskLists+0x70>)
 800ed20:	f7fd ffd0 	bl	800ccc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed24:	480b      	ldr	r0, [pc, #44]	; (800ed54 <prvInitialiseTaskLists+0x74>)
 800ed26:	f7fd ffcd 	bl	800ccc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed2a:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <prvInitialiseTaskLists+0x78>)
 800ed2c:	4a05      	ldr	r2, [pc, #20]	; (800ed44 <prvInitialiseTaskLists+0x64>)
 800ed2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <prvInitialiseTaskLists+0x7c>)
 800ed32:	4a05      	ldr	r2, [pc, #20]	; (800ed48 <prvInitialiseTaskLists+0x68>)
 800ed34:	601a      	str	r2, [r3, #0]
}
 800ed36:	bf00      	nop
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	20000e4c 	.word	0x20000e4c
 800ed44:	200012ac 	.word	0x200012ac
 800ed48:	200012c0 	.word	0x200012c0
 800ed4c:	200012dc 	.word	0x200012dc
 800ed50:	200012f0 	.word	0x200012f0
 800ed54:	20001308 	.word	0x20001308
 800ed58:	200012d4 	.word	0x200012d4
 800ed5c:	200012d8 	.word	0x200012d8

0800ed60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed66:	e019      	b.n	800ed9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed68:	f001 f804 	bl	800fd74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed6c:	4b10      	ldr	r3, [pc, #64]	; (800edb0 <prvCheckTasksWaitingTermination+0x50>)
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	3304      	adds	r3, #4
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fe f82d 	bl	800cdd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed7e:	4b0d      	ldr	r3, [pc, #52]	; (800edb4 <prvCheckTasksWaitingTermination+0x54>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	3b01      	subs	r3, #1
 800ed84:	4a0b      	ldr	r2, [pc, #44]	; (800edb4 <prvCheckTasksWaitingTermination+0x54>)
 800ed86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed88:	4b0b      	ldr	r3, [pc, #44]	; (800edb8 <prvCheckTasksWaitingTermination+0x58>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	4a0a      	ldr	r2, [pc, #40]	; (800edb8 <prvCheckTasksWaitingTermination+0x58>)
 800ed90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed92:	f001 f81f 	bl	800fdd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f810 	bl	800edbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed9c:	4b06      	ldr	r3, [pc, #24]	; (800edb8 <prvCheckTasksWaitingTermination+0x58>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1e1      	bne.n	800ed68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	200012f0 	.word	0x200012f0
 800edb4:	2000131c 	.word	0x2000131c
 800edb8:	20001304 	.word	0x20001304

0800edbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	335c      	adds	r3, #92	; 0x5c
 800edc8:	4618      	mov	r0, r3
 800edca:	f012 fc8f 	bl	80216ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d108      	bne.n	800edea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eddc:	4618      	mov	r0, r3
 800edde:	f001 f9b7 	bl	8010150 <vPortFree>
				vPortFree( pxTCB );
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f001 f9b4 	bl	8010150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ede8:	e018      	b.n	800ee1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d103      	bne.n	800edfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f001 f9ab 	bl	8010150 <vPortFree>
	}
 800edfa:	e00f      	b.n	800ee1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d00a      	beq.n	800ee1c <prvDeleteTCB+0x60>
	__asm volatile
 800ee06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0a:	f383 8811 	msr	BASEPRI, r3
 800ee0e:	f3bf 8f6f 	isb	sy
 800ee12:	f3bf 8f4f 	dsb	sy
 800ee16:	60fb      	str	r3, [r7, #12]
}
 800ee18:	bf00      	nop
 800ee1a:	e7fe      	b.n	800ee1a <prvDeleteTCB+0x5e>
	}
 800ee1c:	bf00      	nop
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee2a:	4b0c      	ldr	r3, [pc, #48]	; (800ee5c <prvResetNextTaskUnblockTime+0x38>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d104      	bne.n	800ee3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee34:	4b0a      	ldr	r3, [pc, #40]	; (800ee60 <prvResetNextTaskUnblockTime+0x3c>)
 800ee36:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee3c:	e008      	b.n	800ee50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee3e:	4b07      	ldr	r3, [pc, #28]	; (800ee5c <prvResetNextTaskUnblockTime+0x38>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	4a04      	ldr	r2, [pc, #16]	; (800ee60 <prvResetNextTaskUnblockTime+0x3c>)
 800ee4e:	6013      	str	r3, [r2, #0]
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	200012d4 	.word	0x200012d4
 800ee60:	2000133c 	.word	0x2000133c

0800ee64 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ee6a:	4b05      	ldr	r3, [pc, #20]	; (800ee80 <xTaskGetCurrentTaskHandle+0x1c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ee70:	687b      	ldr	r3, [r7, #4]
	}
 800ee72:	4618      	mov	r0, r3
 800ee74:	370c      	adds	r7, #12
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	20000e48 	.word	0x20000e48

0800ee84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee8a:	4b0b      	ldr	r3, [pc, #44]	; (800eeb8 <xTaskGetSchedulerState+0x34>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d102      	bne.n	800ee98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee92:	2301      	movs	r3, #1
 800ee94:	607b      	str	r3, [r7, #4]
 800ee96:	e008      	b.n	800eeaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee98:	4b08      	ldr	r3, [pc, #32]	; (800eebc <xTaskGetSchedulerState+0x38>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d102      	bne.n	800eea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eea0:	2302      	movs	r3, #2
 800eea2:	607b      	str	r3, [r7, #4]
 800eea4:	e001      	b.n	800eeaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eea6:	2300      	movs	r3, #0
 800eea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eeaa:	687b      	ldr	r3, [r7, #4]
	}
 800eeac:	4618      	mov	r0, r3
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr
 800eeb8:	20001328 	.word	0x20001328
 800eebc:	20001344 	.word	0x20001344

0800eec0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eecc:	2300      	movs	r3, #0
 800eece:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d051      	beq.n	800ef7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeda:	4b2a      	ldr	r3, [pc, #168]	; (800ef84 <xTaskPriorityInherit+0xc4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d241      	bcs.n	800ef68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	699b      	ldr	r3, [r3, #24]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	db06      	blt.n	800eefa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeec:	4b25      	ldr	r3, [pc, #148]	; (800ef84 <xTaskPriorityInherit+0xc4>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	6959      	ldr	r1, [r3, #20]
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef02:	4613      	mov	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	4413      	add	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4a1f      	ldr	r2, [pc, #124]	; (800ef88 <xTaskPriorityInherit+0xc8>)
 800ef0c:	4413      	add	r3, r2
 800ef0e:	4299      	cmp	r1, r3
 800ef10:	d122      	bne.n	800ef58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	3304      	adds	r3, #4
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fd ff5e 	bl	800cdd8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef1c:	4b19      	ldr	r3, [pc, #100]	; (800ef84 <xTaskPriorityInherit+0xc4>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef2a:	4b18      	ldr	r3, [pc, #96]	; (800ef8c <xTaskPriorityInherit+0xcc>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d903      	bls.n	800ef3a <xTaskPriorityInherit+0x7a>
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef36:	4a15      	ldr	r2, [pc, #84]	; (800ef8c <xTaskPriorityInherit+0xcc>)
 800ef38:	6013      	str	r3, [r2, #0]
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef3e:	4613      	mov	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	4413      	add	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4a10      	ldr	r2, [pc, #64]	; (800ef88 <xTaskPriorityInherit+0xc8>)
 800ef48:	441a      	add	r2, r3
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4610      	mov	r0, r2
 800ef52:	f7fd fee4 	bl	800cd1e <vListInsertEnd>
 800ef56:	e004      	b.n	800ef62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <xTaskPriorityInherit+0xc4>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef62:	2301      	movs	r3, #1
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	e008      	b.n	800ef7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <xTaskPriorityInherit+0xc4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d201      	bcs.n	800ef7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef76:	2301      	movs	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
	}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	20000e48 	.word	0x20000e48
 800ef88:	20000e4c 	.word	0x20000e4c
 800ef8c:	20001324 	.word	0x20001324

0800ef90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d056      	beq.n	800f054 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800efa6:	4b2e      	ldr	r3, [pc, #184]	; (800f060 <xTaskPriorityDisinherit+0xd0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	693a      	ldr	r2, [r7, #16]
 800efac:	429a      	cmp	r2, r3
 800efae:	d00a      	beq.n	800efc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	60fb      	str	r3, [r7, #12]
}
 800efc2:	bf00      	nop
 800efc4:	e7fe      	b.n	800efc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10a      	bne.n	800efe4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	60bb      	str	r3, [r7, #8]
}
 800efe0:	bf00      	nop
 800efe2:	e7fe      	b.n	800efe2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe8:	1e5a      	subs	r2, r3, #1
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d02c      	beq.n	800f054 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effe:	2b00      	cmp	r3, #0
 800f000:	d128      	bne.n	800f054 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	3304      	adds	r3, #4
 800f006:	4618      	mov	r0, r3
 800f008:	f7fd fee6 	bl	800cdd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f024:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <xTaskPriorityDisinherit+0xd4>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d903      	bls.n	800f034 <xTaskPriorityDisinherit+0xa4>
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f030:	4a0c      	ldr	r2, [pc, #48]	; (800f064 <xTaskPriorityDisinherit+0xd4>)
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f038:	4613      	mov	r3, r2
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	4413      	add	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4a09      	ldr	r2, [pc, #36]	; (800f068 <xTaskPriorityDisinherit+0xd8>)
 800f042:	441a      	add	r2, r3
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	3304      	adds	r3, #4
 800f048:	4619      	mov	r1, r3
 800f04a:	4610      	mov	r0, r2
 800f04c:	f7fd fe67 	bl	800cd1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f050:	2301      	movs	r3, #1
 800f052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f054:	697b      	ldr	r3, [r7, #20]
	}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20000e48 	.word	0x20000e48
 800f064:	20001324 	.word	0x20001324
 800f068:	20000e4c 	.word	0x20000e4c

0800f06c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f07a:	2301      	movs	r3, #1
 800f07c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d06a      	beq.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	60fb      	str	r3, [r7, #12]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a6:	683a      	ldr	r2, [r7, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d902      	bls.n	800f0b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	61fb      	str	r3, [r7, #28]
 800f0b0:	e002      	b.n	800f0b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0bc:	69fa      	ldr	r2, [r7, #28]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d04b      	beq.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d146      	bne.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f0cc:	4b25      	ldr	r3, [pc, #148]	; (800f164 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	69ba      	ldr	r2, [r7, #24]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d10a      	bne.n	800f0ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	60bb      	str	r3, [r7, #8]
}
 800f0e8:	bf00      	nop
 800f0ea:	e7fe      	b.n	800f0ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	69fa      	ldr	r2, [r7, #28]
 800f0f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	699b      	ldr	r3, [r3, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	db04      	blt.n	800f10a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	6959      	ldr	r1, [r3, #20]
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	4613      	mov	r3, r2
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4a13      	ldr	r2, [pc, #76]	; (800f168 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f11a:	4413      	add	r3, r2
 800f11c:	4299      	cmp	r1, r3
 800f11e:	d11c      	bne.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	3304      	adds	r3, #4
 800f124:	4618      	mov	r0, r3
 800f126:	f7fd fe57 	bl	800cdd8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f12e:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	429a      	cmp	r2, r3
 800f134:	d903      	bls.n	800f13e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13a:	4a0c      	ldr	r2, [pc, #48]	; (800f16c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f142:	4613      	mov	r3, r2
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	4413      	add	r3, r2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4a07      	ldr	r2, [pc, #28]	; (800f168 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f14c:	441a      	add	r2, r3
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	3304      	adds	r3, #4
 800f152:	4619      	mov	r1, r3
 800f154:	4610      	mov	r0, r2
 800f156:	f7fd fde2 	bl	800cd1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f15a:	bf00      	nop
 800f15c:	3720      	adds	r7, #32
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20000e48 	.word	0x20000e48
 800f168:	20000e4c 	.word	0x20000e4c
 800f16c:	20001324 	.word	0x20001324

0800f170 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f176:	4b09      	ldr	r3, [pc, #36]	; (800f19c <uxTaskResetEventItemValue+0x2c>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	699b      	ldr	r3, [r3, #24]
 800f17c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f17e:	4b07      	ldr	r3, [pc, #28]	; (800f19c <uxTaskResetEventItemValue+0x2c>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f184:	4b05      	ldr	r3, [pc, #20]	; (800f19c <uxTaskResetEventItemValue+0x2c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f18c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f18e:	687b      	ldr	r3, [r7, #4]
}
 800f190:	4618      	mov	r0, r3
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	20000e48 	.word	0x20000e48

0800f1a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f1a0:	b480      	push	{r7}
 800f1a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f1a4:	4b07      	ldr	r3, [pc, #28]	; (800f1c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d004      	beq.n	800f1b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f1ac:	4b05      	ldr	r3, [pc, #20]	; (800f1c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1b2:	3201      	adds	r2, #1
 800f1b4:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800f1b6:	4b03      	ldr	r3, [pc, #12]	; (800f1c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
	}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20000e48 	.word	0x20000e48

0800f1c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1d2:	4b21      	ldr	r3, [pc, #132]	; (800f258 <prvAddCurrentTaskToDelayedList+0x90>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1d8:	4b20      	ldr	r3, [pc, #128]	; (800f25c <prvAddCurrentTaskToDelayedList+0x94>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fd fdfa 	bl	800cdd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ea:	d10a      	bne.n	800f202 <prvAddCurrentTaskToDelayedList+0x3a>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d007      	beq.n	800f202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1f2:	4b1a      	ldr	r3, [pc, #104]	; (800f25c <prvAddCurrentTaskToDelayedList+0x94>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4819      	ldr	r0, [pc, #100]	; (800f260 <prvAddCurrentTaskToDelayedList+0x98>)
 800f1fc:	f7fd fd8f 	bl	800cd1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f200:	e026      	b.n	800f250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4413      	add	r3, r2
 800f208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f20a:	4b14      	ldr	r3, [pc, #80]	; (800f25c <prvAddCurrentTaskToDelayedList+0x94>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	429a      	cmp	r2, r3
 800f218:	d209      	bcs.n	800f22e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f21a:	4b12      	ldr	r3, [pc, #72]	; (800f264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	4b0f      	ldr	r3, [pc, #60]	; (800f25c <prvAddCurrentTaskToDelayedList+0x94>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3304      	adds	r3, #4
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7fd fd9d 	bl	800cd66 <vListInsert>
}
 800f22c:	e010      	b.n	800f250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f22e:	4b0e      	ldr	r3, [pc, #56]	; (800f268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	4b0a      	ldr	r3, [pc, #40]	; (800f25c <prvAddCurrentTaskToDelayedList+0x94>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3304      	adds	r3, #4
 800f238:	4619      	mov	r1, r3
 800f23a:	4610      	mov	r0, r2
 800f23c:	f7fd fd93 	bl	800cd66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f240:	4b0a      	ldr	r3, [pc, #40]	; (800f26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	429a      	cmp	r2, r3
 800f248:	d202      	bcs.n	800f250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f24a:	4a08      	ldr	r2, [pc, #32]	; (800f26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	6013      	str	r3, [r2, #0]
}
 800f250:	bf00      	nop
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20001320 	.word	0x20001320
 800f25c:	20000e48 	.word	0x20000e48
 800f260:	20001308 	.word	0x20001308
 800f264:	200012d8 	.word	0x200012d8
 800f268:	200012d4 	.word	0x200012d4
 800f26c:	2000133c 	.word	0x2000133c

0800f270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b08a      	sub	sp, #40	; 0x28
 800f274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f276:	2300      	movs	r3, #0
 800f278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f27a:	f000 fba1 	bl	800f9c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f27e:	4b1c      	ldr	r3, [pc, #112]	; (800f2f0 <xTimerCreateTimerTask+0x80>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d021      	beq.n	800f2ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f286:	2300      	movs	r3, #0
 800f288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f28a:	2300      	movs	r3, #0
 800f28c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f28e:	1d3a      	adds	r2, r7, #4
 800f290:	f107 0108 	add.w	r1, r7, #8
 800f294:	f107 030c 	add.w	r3, r7, #12
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fd fa59 	bl	800c750 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	9202      	str	r2, [sp, #8]
 800f2a6:	9301      	str	r3, [sp, #4]
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	9300      	str	r3, [sp, #0]
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	460a      	mov	r2, r1
 800f2b0:	4910      	ldr	r1, [pc, #64]	; (800f2f4 <xTimerCreateTimerTask+0x84>)
 800f2b2:	4811      	ldr	r0, [pc, #68]	; (800f2f8 <xTimerCreateTimerTask+0x88>)
 800f2b4:	f7fe feba 	bl	800e02c <xTaskCreateStatic>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	4a10      	ldr	r2, [pc, #64]	; (800f2fc <xTimerCreateTimerTask+0x8c>)
 800f2bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2be:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <xTimerCreateTimerTask+0x8c>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10a      	bne.n	800f2e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	613b      	str	r3, [r7, #16]
}
 800f2e2:	bf00      	nop
 800f2e4:	e7fe      	b.n	800f2e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2e6:	697b      	ldr	r3, [r7, #20]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3718      	adds	r7, #24
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	20001380 	.word	0x20001380
 800f2f4:	0802375c 	.word	0x0802375c
 800f2f8:	0800f569 	.word	0x0800f569
 800f2fc:	20001384 	.word	0x20001384

0800f300 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af02      	add	r7, sp, #8
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f30e:	202c      	movs	r0, #44	; 0x2c
 800f310:	f000 fe52 	bl	800ffb8 <pvPortMalloc>
 800f314:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00d      	beq.n	800f338 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	6a3b      	ldr	r3, [r7, #32]
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	68b9      	ldr	r1, [r7, #8]
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f000 f843 	bl	800f3be <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f338:	697b      	ldr	r3, [r7, #20]
	}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f342:	b580      	push	{r7, lr}
 800f344:	b08a      	sub	sp, #40	; 0x28
 800f346:	af02      	add	r7, sp, #8
 800f348:	60f8      	str	r0, [r7, #12]
 800f34a:	60b9      	str	r1, [r7, #8]
 800f34c:	607a      	str	r2, [r7, #4]
 800f34e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f350:	232c      	movs	r3, #44	; 0x2c
 800f352:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	2b2c      	cmp	r3, #44	; 0x2c
 800f358:	d00a      	beq.n	800f370 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35e:	f383 8811 	msr	BASEPRI, r3
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	f3bf 8f4f 	dsb	sy
 800f36a:	61bb      	str	r3, [r7, #24]
}
 800f36c:	bf00      	nop
 800f36e:	e7fe      	b.n	800f36e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f370:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10a      	bne.n	800f38e <xTimerCreateStatic+0x4c>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	617b      	str	r3, [r7, #20]
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00d      	beq.n	800f3b4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	2202      	movs	r2, #2
 800f39c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	9301      	str	r3, [sp, #4]
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	68b9      	ldr	r1, [r7, #8]
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f000 f805 	bl	800f3be <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f3b4:	69fb      	ldr	r3, [r7, #28]
	}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3720      	adds	r7, #32
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b086      	sub	sp, #24
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	60f8      	str	r0, [r7, #12]
 800f3c6:	60b9      	str	r1, [r7, #8]
 800f3c8:	607a      	str	r2, [r7, #4]
 800f3ca:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10a      	bne.n	800f3e8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d6:	f383 8811 	msr	BASEPRI, r3
 800f3da:	f3bf 8f6f 	isb	sy
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	617b      	str	r3, [r7, #20]
}
 800f3e4:	bf00      	nop
 800f3e6:	e7fe      	b.n	800f3e6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d01e      	beq.n	800f42c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3ee:	f000 fae7 	bl	800f9c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	683a      	ldr	r2, [r7, #0]
 800f402:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	6a3a      	ldr	r2, [r7, #32]
 800f408:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	3304      	adds	r3, #4
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fd fc78 	bl	800cd04 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d008      	beq.n	800f42c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f420:	f043 0304 	orr.w	r3, r3, #4
 800f424:	b2da      	uxtb	r2, r3
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f42c:	bf00      	nop
 800f42e:	3718      	adds	r7, #24
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b08a      	sub	sp, #40	; 0x28
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f442:	2300      	movs	r3, #0
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10a      	bne.n	800f462 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	623b      	str	r3, [r7, #32]
}
 800f45e:	bf00      	nop
 800f460:	e7fe      	b.n	800f460 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f462:	4b1a      	ldr	r3, [pc, #104]	; (800f4cc <xTimerGenericCommand+0x98>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d02a      	beq.n	800f4c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	2b05      	cmp	r3, #5
 800f47a:	dc18      	bgt.n	800f4ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f47c:	f7ff fd02 	bl	800ee84 <xTaskGetSchedulerState>
 800f480:	4603      	mov	r3, r0
 800f482:	2b02      	cmp	r3, #2
 800f484:	d109      	bne.n	800f49a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f486:	4b11      	ldr	r3, [pc, #68]	; (800f4cc <xTimerGenericCommand+0x98>)
 800f488:	6818      	ldr	r0, [r3, #0]
 800f48a:	f107 0110 	add.w	r1, r7, #16
 800f48e:	2300      	movs	r3, #0
 800f490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f492:	f7fd ff29 	bl	800d2e8 <xQueueGenericSend>
 800f496:	6278      	str	r0, [r7, #36]	; 0x24
 800f498:	e012      	b.n	800f4c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f49a:	4b0c      	ldr	r3, [pc, #48]	; (800f4cc <xTimerGenericCommand+0x98>)
 800f49c:	6818      	ldr	r0, [r3, #0]
 800f49e:	f107 0110 	add.w	r1, r7, #16
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f7fd ff1f 	bl	800d2e8 <xQueueGenericSend>
 800f4aa:	6278      	str	r0, [r7, #36]	; 0x24
 800f4ac:	e008      	b.n	800f4c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4ae:	4b07      	ldr	r3, [pc, #28]	; (800f4cc <xTimerGenericCommand+0x98>)
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	f107 0110 	add.w	r1, r7, #16
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	683a      	ldr	r2, [r7, #0]
 800f4ba:	f7fe f813 	bl	800d4e4 <xQueueGenericSendFromISR>
 800f4be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3728      	adds	r7, #40	; 0x28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20001380 	.word	0x20001380

0800f4d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b088      	sub	sp, #32
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4da:	4b22      	ldr	r3, [pc, #136]	; (800f564 <prvProcessExpiredTimer+0x94>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fd fc75 	bl	800cdd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f4:	f003 0304 	and.w	r3, r3, #4
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d022      	beq.n	800f542 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	699a      	ldr	r2, [r3, #24]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	18d1      	adds	r1, r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	6978      	ldr	r0, [r7, #20]
 800f50a:	f000 f8d1 	bl	800f6b0 <prvInsertTimerInActiveList>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d01f      	beq.n	800f554 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f514:	2300      	movs	r3, #0
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	2300      	movs	r3, #0
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	2100      	movs	r1, #0
 800f51e:	6978      	ldr	r0, [r7, #20]
 800f520:	f7ff ff88 	bl	800f434 <xTimerGenericCommand>
 800f524:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d113      	bne.n	800f554 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f530:	f383 8811 	msr	BASEPRI, r3
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	60fb      	str	r3, [r7, #12]
}
 800f53e:	bf00      	nop
 800f540:	e7fe      	b.n	800f540 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f548:	f023 0301 	bic.w	r3, r3, #1
 800f54c:	b2da      	uxtb	r2, r3
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	6978      	ldr	r0, [r7, #20]
 800f55a:	4798      	blx	r3
}
 800f55c:	bf00      	nop
 800f55e:	3718      	adds	r7, #24
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	20001378 	.word	0x20001378

0800f568 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f570:	f107 0308 	add.w	r3, r7, #8
 800f574:	4618      	mov	r0, r3
 800f576:	f000 f857 	bl	800f628 <prvGetNextExpireTime>
 800f57a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	4619      	mov	r1, r3
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 f803 	bl	800f58c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f586:	f000 f8d5 	bl	800f734 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f58a:	e7f1      	b.n	800f570 <prvTimerTask+0x8>

0800f58c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f596:	f7fe ffad 	bl	800e4f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f59a:	f107 0308 	add.w	r3, r7, #8
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 f866 	bl	800f670 <prvSampleTimeNow>
 800f5a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d130      	bne.n	800f60e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <prvProcessTimerOrBlockTask+0x3c>
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d806      	bhi.n	800f5c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5ba:	f7fe ffa9 	bl	800e510 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5be:	68f9      	ldr	r1, [r7, #12]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff ff85 	bl	800f4d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5c6:	e024      	b.n	800f612 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d008      	beq.n	800f5e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5ce:	4b13      	ldr	r3, [pc, #76]	; (800f61c <prvProcessTimerOrBlockTask+0x90>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d101      	bne.n	800f5dc <prvProcessTimerOrBlockTask+0x50>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e000      	b.n	800f5de <prvProcessTimerOrBlockTask+0x52>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5e0:	4b0f      	ldr	r3, [pc, #60]	; (800f620 <prvProcessTimerOrBlockTask+0x94>)
 800f5e2:	6818      	ldr	r0, [r3, #0]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	f7fe fce9 	bl	800dfc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5f2:	f7fe ff8d 	bl	800e510 <xTaskResumeAll>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10a      	bne.n	800f612 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5fc:	4b09      	ldr	r3, [pc, #36]	; (800f624 <prvProcessTimerOrBlockTask+0x98>)
 800f5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f602:	601a      	str	r2, [r3, #0]
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	f3bf 8f6f 	isb	sy
}
 800f60c:	e001      	b.n	800f612 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f60e:	f7fe ff7f 	bl	800e510 <xTaskResumeAll>
}
 800f612:	bf00      	nop
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	2000137c 	.word	0x2000137c
 800f620:	20001380 	.word	0x20001380
 800f624:	e000ed04 	.word	0xe000ed04

0800f628 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f630:	4b0e      	ldr	r3, [pc, #56]	; (800f66c <prvGetNextExpireTime+0x44>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <prvGetNextExpireTime+0x16>
 800f63a:	2201      	movs	r2, #1
 800f63c:	e000      	b.n	800f640 <prvGetNextExpireTime+0x18>
 800f63e:	2200      	movs	r2, #0
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d105      	bne.n	800f658 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f64c:	4b07      	ldr	r3, [pc, #28]	; (800f66c <prvGetNextExpireTime+0x44>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	60fb      	str	r3, [r7, #12]
 800f656:	e001      	b.n	800f65c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f658:	2300      	movs	r3, #0
 800f65a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f65c:	68fb      	ldr	r3, [r7, #12]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	20001378 	.word	0x20001378

0800f670 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f678:	f7fe ffe8 	bl	800e64c <xTaskGetTickCount>
 800f67c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f67e:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <prvSampleTimeNow+0x3c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	429a      	cmp	r2, r3
 800f686:	d205      	bcs.n	800f694 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f688:	f000 f936 	bl	800f8f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2201      	movs	r2, #1
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	e002      	b.n	800f69a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f69a:	4a04      	ldr	r2, [pc, #16]	; (800f6ac <prvSampleTimeNow+0x3c>)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20001388 	.word	0x20001388

0800f6b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
 800f6bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d812      	bhi.n	800f6fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	1ad2      	subs	r2, r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	699b      	ldr	r3, [r3, #24]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d302      	bcc.n	800f6ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	e01b      	b.n	800f722 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6ea:	4b10      	ldr	r3, [pc, #64]	; (800f72c <prvInsertTimerInActiveList+0x7c>)
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	f7fd fb36 	bl	800cd66 <vListInsert>
 800f6fa:	e012      	b.n	800f722 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	429a      	cmp	r2, r3
 800f702:	d206      	bcs.n	800f712 <prvInsertTimerInActiveList+0x62>
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d302      	bcc.n	800f712 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f70c:	2301      	movs	r3, #1
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	e007      	b.n	800f722 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f712:	4b07      	ldr	r3, [pc, #28]	; (800f730 <prvInsertTimerInActiveList+0x80>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3304      	adds	r3, #4
 800f71a:	4619      	mov	r1, r3
 800f71c:	4610      	mov	r0, r2
 800f71e:	f7fd fb22 	bl	800cd66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f722:	697b      	ldr	r3, [r7, #20]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	2000137c 	.word	0x2000137c
 800f730:	20001378 	.word	0x20001378

0800f734 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b08e      	sub	sp, #56	; 0x38
 800f738:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f73a:	e0ca      	b.n	800f8d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da18      	bge.n	800f774 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f742:	1d3b      	adds	r3, r7, #4
 800f744:	3304      	adds	r3, #4
 800f746:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10a      	bne.n	800f764 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	61fb      	str	r3, [r7, #28]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f76a:	6850      	ldr	r0, [r2, #4]
 800f76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f76e:	6892      	ldr	r2, [r2, #8]
 800f770:	4611      	mov	r1, r2
 800f772:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	f2c0 80aa 	blt.w	800f8d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	695b      	ldr	r3, [r3, #20]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d004      	beq.n	800f792 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78a:	3304      	adds	r3, #4
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd fb23 	bl	800cdd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f792:	463b      	mov	r3, r7
 800f794:	4618      	mov	r0, r3
 800f796:	f7ff ff6b 	bl	800f670 <prvSampleTimeNow>
 800f79a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2b09      	cmp	r3, #9
 800f7a0:	f200 8097 	bhi.w	800f8d2 <prvProcessReceivedCommands+0x19e>
 800f7a4:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <prvProcessReceivedCommands+0x78>)
 800f7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7aa:	bf00      	nop
 800f7ac:	0800f7d5 	.word	0x0800f7d5
 800f7b0:	0800f7d5 	.word	0x0800f7d5
 800f7b4:	0800f7d5 	.word	0x0800f7d5
 800f7b8:	0800f849 	.word	0x0800f849
 800f7bc:	0800f85d 	.word	0x0800f85d
 800f7c0:	0800f8a7 	.word	0x0800f8a7
 800f7c4:	0800f7d5 	.word	0x0800f7d5
 800f7c8:	0800f7d5 	.word	0x0800f7d5
 800f7cc:	0800f849 	.word	0x0800f849
 800f7d0:	0800f85d 	.word	0x0800f85d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7da:	f043 0301 	orr.w	r3, r3, #1
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7e6:	68ba      	ldr	r2, [r7, #8]
 800f7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ea:	699b      	ldr	r3, [r3, #24]
 800f7ec:	18d1      	adds	r1, r2, r3
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f4:	f7ff ff5c 	bl	800f6b0 <prvInsertTimerInActiveList>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d069      	beq.n	800f8d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f804:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f80c:	f003 0304 	and.w	r3, r3, #4
 800f810:	2b00      	cmp	r3, #0
 800f812:	d05e      	beq.n	800f8d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f818:	699b      	ldr	r3, [r3, #24]
 800f81a:	441a      	add	r2, r3
 800f81c:	2300      	movs	r3, #0
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	2300      	movs	r3, #0
 800f822:	2100      	movs	r1, #0
 800f824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f826:	f7ff fe05 	bl	800f434 <xTimerGenericCommand>
 800f82a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d14f      	bne.n	800f8d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	61bb      	str	r3, [r7, #24]
}
 800f844:	bf00      	nop
 800f846:	e7fe      	b.n	800f846 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f84e:	f023 0301 	bic.w	r3, r3, #1
 800f852:	b2da      	uxtb	r2, r3
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f85a:	e03a      	b.n	800f8d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f862:	f043 0301 	orr.w	r3, r3, #1
 800f866:	b2da      	uxtb	r2, r3
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f872:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d10a      	bne.n	800f892 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	617b      	str	r3, [r7, #20]
}
 800f88e:	bf00      	nop
 800f890:	e7fe      	b.n	800f890 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	699a      	ldr	r2, [r3, #24]
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	18d1      	adds	r1, r2, r3
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a0:	f7ff ff06 	bl	800f6b0 <prvInsertTimerInActiveList>
					break;
 800f8a4:	e015      	b.n	800f8d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8ac:	f003 0302 	and.w	r3, r3, #2
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d103      	bne.n	800f8bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8b6:	f000 fc4b 	bl	8010150 <vPortFree>
 800f8ba:	e00a      	b.n	800f8d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8c2:	f023 0301 	bic.w	r3, r3, #1
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8ce:	e000      	b.n	800f8d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f8d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8d2:	4b08      	ldr	r3, [pc, #32]	; (800f8f4 <prvProcessReceivedCommands+0x1c0>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	1d39      	adds	r1, r7, #4
 800f8d8:	2200      	movs	r2, #0
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fd ff2a 	bl	800d734 <xQueueReceive>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f47f af2a 	bne.w	800f73c <prvProcessReceivedCommands+0x8>
	}
}
 800f8e8:	bf00      	nop
 800f8ea:	bf00      	nop
 800f8ec:	3730      	adds	r7, #48	; 0x30
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	20001380 	.word	0x20001380

0800f8f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b088      	sub	sp, #32
 800f8fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8fe:	e048      	b.n	800f992 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f900:	4b2d      	ldr	r3, [pc, #180]	; (800f9b8 <prvSwitchTimerLists+0xc0>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f90a:	4b2b      	ldr	r3, [pc, #172]	; (800f9b8 <prvSwitchTimerLists+0xc0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	3304      	adds	r3, #4
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fd fa5d 	bl	800cdd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f92c:	f003 0304 	and.w	r3, r3, #4
 800f930:	2b00      	cmp	r3, #0
 800f932:	d02e      	beq.n	800f992 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	699b      	ldr	r3, [r3, #24]
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	4413      	add	r3, r2
 800f93c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	429a      	cmp	r2, r3
 800f944:	d90e      	bls.n	800f964 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f952:	4b19      	ldr	r3, [pc, #100]	; (800f9b8 <prvSwitchTimerLists+0xc0>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3304      	adds	r3, #4
 800f95a:	4619      	mov	r1, r3
 800f95c:	4610      	mov	r0, r2
 800f95e:	f7fd fa02 	bl	800cd66 <vListInsert>
 800f962:	e016      	b.n	800f992 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f964:	2300      	movs	r3, #0
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	2300      	movs	r3, #0
 800f96a:	693a      	ldr	r2, [r7, #16]
 800f96c:	2100      	movs	r1, #0
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f7ff fd60 	bl	800f434 <xTimerGenericCommand>
 800f974:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10a      	bne.n	800f992 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	603b      	str	r3, [r7, #0]
}
 800f98e:	bf00      	nop
 800f990:	e7fe      	b.n	800f990 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f992:	4b09      	ldr	r3, [pc, #36]	; (800f9b8 <prvSwitchTimerLists+0xc0>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1b1      	bne.n	800f900 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f99c:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <prvSwitchTimerLists+0xc0>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9a2:	4b06      	ldr	r3, [pc, #24]	; (800f9bc <prvSwitchTimerLists+0xc4>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a04      	ldr	r2, [pc, #16]	; (800f9b8 <prvSwitchTimerLists+0xc0>)
 800f9a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9aa:	4a04      	ldr	r2, [pc, #16]	; (800f9bc <prvSwitchTimerLists+0xc4>)
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	6013      	str	r3, [r2, #0]
}
 800f9b0:	bf00      	nop
 800f9b2:	3718      	adds	r7, #24
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	20001378 	.word	0x20001378
 800f9bc:	2000137c 	.word	0x2000137c

0800f9c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9c6:	f000 f9d5 	bl	800fd74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9ca:	4b15      	ldr	r3, [pc, #84]	; (800fa20 <prvCheckForValidListAndQueue+0x60>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d120      	bne.n	800fa14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9d2:	4814      	ldr	r0, [pc, #80]	; (800fa24 <prvCheckForValidListAndQueue+0x64>)
 800f9d4:	f7fd f976 	bl	800ccc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9d8:	4813      	ldr	r0, [pc, #76]	; (800fa28 <prvCheckForValidListAndQueue+0x68>)
 800f9da:	f7fd f973 	bl	800ccc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9de:	4b13      	ldr	r3, [pc, #76]	; (800fa2c <prvCheckForValidListAndQueue+0x6c>)
 800f9e0:	4a10      	ldr	r2, [pc, #64]	; (800fa24 <prvCheckForValidListAndQueue+0x64>)
 800f9e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f9e4:	4b12      	ldr	r3, [pc, #72]	; (800fa30 <prvCheckForValidListAndQueue+0x70>)
 800f9e6:	4a10      	ldr	r2, [pc, #64]	; (800fa28 <prvCheckForValidListAndQueue+0x68>)
 800f9e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	4b11      	ldr	r3, [pc, #68]	; (800fa34 <prvCheckForValidListAndQueue+0x74>)
 800f9f0:	4a11      	ldr	r2, [pc, #68]	; (800fa38 <prvCheckForValidListAndQueue+0x78>)
 800f9f2:	2110      	movs	r1, #16
 800f9f4:	200a      	movs	r0, #10
 800f9f6:	f7fd fa81 	bl	800cefc <xQueueGenericCreateStatic>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	4a08      	ldr	r2, [pc, #32]	; (800fa20 <prvCheckForValidListAndQueue+0x60>)
 800f9fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa00:	4b07      	ldr	r3, [pc, #28]	; (800fa20 <prvCheckForValidListAndQueue+0x60>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d005      	beq.n	800fa14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa08:	4b05      	ldr	r3, [pc, #20]	; (800fa20 <prvCheckForValidListAndQueue+0x60>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	490b      	ldr	r1, [pc, #44]	; (800fa3c <prvCheckForValidListAndQueue+0x7c>)
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fe fa84 	bl	800df1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa14:	f000 f9de 	bl	800fdd4 <vPortExitCritical>
}
 800fa18:	bf00      	nop
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	20001380 	.word	0x20001380
 800fa24:	20001350 	.word	0x20001350
 800fa28:	20001364 	.word	0x20001364
 800fa2c:	20001378 	.word	0x20001378
 800fa30:	2000137c 	.word	0x2000137c
 800fa34:	2000142c 	.word	0x2000142c
 800fa38:	2000138c 	.word	0x2000138c
 800fa3c:	08023764 	.word	0x08023764

0800fa40 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d10a      	bne.n	800fa68 <xTimerIsTimerActive+0x28>
	__asm volatile
 800fa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa56:	f383 8811 	msr	BASEPRI, r3
 800fa5a:	f3bf 8f6f 	isb	sy
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	60fb      	str	r3, [r7, #12]
}
 800fa64:	bf00      	nop
 800fa66:	e7fe      	b.n	800fa66 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800fa68:	f000 f984 	bl	800fd74 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa72:	f003 0301 	and.w	r3, r3, #1
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d102      	bne.n	800fa80 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	617b      	str	r3, [r7, #20]
 800fa7e:	e001      	b.n	800fa84 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800fa80:	2301      	movs	r3, #1
 800fa82:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fa84:	f000 f9a6 	bl	800fdd4 <vPortExitCritical>

	return xReturn;
 800fa88:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b086      	sub	sp, #24
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10a      	bne.n	800faba <pvTimerGetTimerID+0x28>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	60fb      	str	r3, [r7, #12]
}
 800fab6:	bf00      	nop
 800fab8:	e7fe      	b.n	800fab8 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800faba:	f000 f95b 	bl	800fd74 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	69db      	ldr	r3, [r3, #28]
 800fac2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800fac4:	f000 f986 	bl	800fdd4 <vPortExitCritical>

	return pvReturn;
 800fac8:	693b      	ldr	r3, [r7, #16]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3718      	adds	r7, #24
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
	...

0800fad4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b08a      	sub	sp, #40	; 0x28
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
 800fae0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fae2:	f06f 0301 	mvn.w	r3, #1
 800fae6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800faf4:	4b06      	ldr	r3, [pc, #24]	; (800fb10 <xTimerPendFunctionCallFromISR+0x3c>)
 800faf6:	6818      	ldr	r0, [r3, #0]
 800faf8:	f107 0114 	add.w	r1, r7, #20
 800fafc:	2300      	movs	r3, #0
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	f7fd fcf0 	bl	800d4e4 <xQueueGenericSendFromISR>
 800fb04:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3728      	adds	r7, #40	; 0x28
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	20001380 	.word	0x20001380

0800fb14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3b04      	subs	r3, #4
 800fb24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3b04      	subs	r3, #4
 800fb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	f023 0201 	bic.w	r2, r3, #1
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3b04      	subs	r3, #4
 800fb42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb44:	4a0c      	ldr	r2, [pc, #48]	; (800fb78 <pxPortInitialiseStack+0x64>)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3b14      	subs	r3, #20
 800fb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3b04      	subs	r3, #4
 800fb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f06f 0202 	mvn.w	r2, #2
 800fb62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	3b20      	subs	r3, #32
 800fb68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3714      	adds	r7, #20
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr
 800fb78:	0800fb7d 	.word	0x0800fb7d

0800fb7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb86:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <prvTaskExitError+0x54>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8e:	d00a      	beq.n	800fba6 <prvTaskExitError+0x2a>
	__asm volatile
 800fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb94:	f383 8811 	msr	BASEPRI, r3
 800fb98:	f3bf 8f6f 	isb	sy
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	60fb      	str	r3, [r7, #12]
}
 800fba2:	bf00      	nop
 800fba4:	e7fe      	b.n	800fba4 <prvTaskExitError+0x28>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	60bb      	str	r3, [r7, #8]
}
 800fbb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fbba:	bf00      	nop
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d0fc      	beq.n	800fbbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fbc2:	bf00      	nop
 800fbc4:	bf00      	nop
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	2000035c 	.word	0x2000035c
	...

0800fbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbe0:	4b07      	ldr	r3, [pc, #28]	; (800fc00 <pxCurrentTCBConst2>)
 800fbe2:	6819      	ldr	r1, [r3, #0]
 800fbe4:	6808      	ldr	r0, [r1, #0]
 800fbe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbea:	f380 8809 	msr	PSP, r0
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f04f 0000 	mov.w	r0, #0
 800fbf6:	f380 8811 	msr	BASEPRI, r0
 800fbfa:	4770      	bx	lr
 800fbfc:	f3af 8000 	nop.w

0800fc00 <pxCurrentTCBConst2>:
 800fc00:	20000e48 	.word	0x20000e48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop

0800fc08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc08:	4808      	ldr	r0, [pc, #32]	; (800fc2c <prvPortStartFirstTask+0x24>)
 800fc0a:	6800      	ldr	r0, [r0, #0]
 800fc0c:	6800      	ldr	r0, [r0, #0]
 800fc0e:	f380 8808 	msr	MSP, r0
 800fc12:	f04f 0000 	mov.w	r0, #0
 800fc16:	f380 8814 	msr	CONTROL, r0
 800fc1a:	b662      	cpsie	i
 800fc1c:	b661      	cpsie	f
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	df00      	svc	0
 800fc28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc2a:	bf00      	nop
 800fc2c:	e000ed08 	.word	0xe000ed08

0800fc30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b086      	sub	sp, #24
 800fc34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc36:	4b46      	ldr	r3, [pc, #280]	; (800fd50 <xPortStartScheduler+0x120>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a46      	ldr	r2, [pc, #280]	; (800fd54 <xPortStartScheduler+0x124>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d10a      	bne.n	800fc56 <xPortStartScheduler+0x26>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	613b      	str	r3, [r7, #16]
}
 800fc52:	bf00      	nop
 800fc54:	e7fe      	b.n	800fc54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc56:	4b3e      	ldr	r3, [pc, #248]	; (800fd50 <xPortStartScheduler+0x120>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a3f      	ldr	r2, [pc, #252]	; (800fd58 <xPortStartScheduler+0x128>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d10a      	bne.n	800fc76 <xPortStartScheduler+0x46>
	__asm volatile
 800fc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc64:	f383 8811 	msr	BASEPRI, r3
 800fc68:	f3bf 8f6f 	isb	sy
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	60fb      	str	r3, [r7, #12]
}
 800fc72:	bf00      	nop
 800fc74:	e7fe      	b.n	800fc74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc76:	4b39      	ldr	r3, [pc, #228]	; (800fd5c <xPortStartScheduler+0x12c>)
 800fc78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	22ff      	movs	r2, #255	; 0xff
 800fc86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc90:	78fb      	ldrb	r3, [r7, #3]
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	4b31      	ldr	r3, [pc, #196]	; (800fd60 <xPortStartScheduler+0x130>)
 800fc9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc9e:	4b31      	ldr	r3, [pc, #196]	; (800fd64 <xPortStartScheduler+0x134>)
 800fca0:	2207      	movs	r2, #7
 800fca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fca4:	e009      	b.n	800fcba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fca6:	4b2f      	ldr	r3, [pc, #188]	; (800fd64 <xPortStartScheduler+0x134>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	4a2d      	ldr	r2, [pc, #180]	; (800fd64 <xPortStartScheduler+0x134>)
 800fcae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fcb0:	78fb      	ldrb	r3, [r7, #3]
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	005b      	lsls	r3, r3, #1
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcba:	78fb      	ldrb	r3, [r7, #3]
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcc2:	2b80      	cmp	r3, #128	; 0x80
 800fcc4:	d0ef      	beq.n	800fca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcc6:	4b27      	ldr	r3, [pc, #156]	; (800fd64 <xPortStartScheduler+0x134>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f1c3 0307 	rsb	r3, r3, #7
 800fcce:	2b04      	cmp	r3, #4
 800fcd0:	d00a      	beq.n	800fce8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd6:	f383 8811 	msr	BASEPRI, r3
 800fcda:	f3bf 8f6f 	isb	sy
 800fcde:	f3bf 8f4f 	dsb	sy
 800fce2:	60bb      	str	r3, [r7, #8]
}
 800fce4:	bf00      	nop
 800fce6:	e7fe      	b.n	800fce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fce8:	4b1e      	ldr	r3, [pc, #120]	; (800fd64 <xPortStartScheduler+0x134>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	021b      	lsls	r3, r3, #8
 800fcee:	4a1d      	ldr	r2, [pc, #116]	; (800fd64 <xPortStartScheduler+0x134>)
 800fcf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fcf2:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <xPortStartScheduler+0x134>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fcfa:	4a1a      	ldr	r2, [pc, #104]	; (800fd64 <xPortStartScheduler+0x134>)
 800fcfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd06:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <xPortStartScheduler+0x138>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a17      	ldr	r2, [pc, #92]	; (800fd68 <xPortStartScheduler+0x138>)
 800fd0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd12:	4b15      	ldr	r3, [pc, #84]	; (800fd68 <xPortStartScheduler+0x138>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a14      	ldr	r2, [pc, #80]	; (800fd68 <xPortStartScheduler+0x138>)
 800fd18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fd1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd1e:	f000 f8dd 	bl	800fedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd22:	4b12      	ldr	r3, [pc, #72]	; (800fd6c <xPortStartScheduler+0x13c>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd28:	f000 f8fc 	bl	800ff24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd2c:	4b10      	ldr	r3, [pc, #64]	; (800fd70 <xPortStartScheduler+0x140>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a0f      	ldr	r2, [pc, #60]	; (800fd70 <xPortStartScheduler+0x140>)
 800fd32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fd36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd38:	f7ff ff66 	bl	800fc08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd3c:	f7fe fd62 	bl	800e804 <vTaskSwitchContext>
	prvTaskExitError();
 800fd40:	f7ff ff1c 	bl	800fb7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	e000ed00 	.word	0xe000ed00
 800fd54:	410fc271 	.word	0x410fc271
 800fd58:	410fc270 	.word	0x410fc270
 800fd5c:	e000e400 	.word	0xe000e400
 800fd60:	2000147c 	.word	0x2000147c
 800fd64:	20001480 	.word	0x20001480
 800fd68:	e000ed20 	.word	0xe000ed20
 800fd6c:	2000035c 	.word	0x2000035c
 800fd70:	e000ef34 	.word	0xe000ef34

0800fd74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
	__asm volatile
 800fd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	607b      	str	r3, [r7, #4]
}
 800fd8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <vPortEnterCritical+0x58>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3301      	adds	r3, #1
 800fd94:	4a0d      	ldr	r2, [pc, #52]	; (800fdcc <vPortEnterCritical+0x58>)
 800fd96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd98:	4b0c      	ldr	r3, [pc, #48]	; (800fdcc <vPortEnterCritical+0x58>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d10f      	bne.n	800fdc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fda0:	4b0b      	ldr	r3, [pc, #44]	; (800fdd0 <vPortEnterCritical+0x5c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d00a      	beq.n	800fdc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdae:	f383 8811 	msr	BASEPRI, r3
 800fdb2:	f3bf 8f6f 	isb	sy
 800fdb6:	f3bf 8f4f 	dsb	sy
 800fdba:	603b      	str	r3, [r7, #0]
}
 800fdbc:	bf00      	nop
 800fdbe:	e7fe      	b.n	800fdbe <vPortEnterCritical+0x4a>
	}
}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	2000035c 	.word	0x2000035c
 800fdd0:	e000ed04 	.word	0xe000ed04

0800fdd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdda:	4b12      	ldr	r3, [pc, #72]	; (800fe24 <vPortExitCritical+0x50>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10a      	bne.n	800fdf8 <vPortExitCritical+0x24>
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde6:	f383 8811 	msr	BASEPRI, r3
 800fdea:	f3bf 8f6f 	isb	sy
 800fdee:	f3bf 8f4f 	dsb	sy
 800fdf2:	607b      	str	r3, [r7, #4]
}
 800fdf4:	bf00      	nop
 800fdf6:	e7fe      	b.n	800fdf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fdf8:	4b0a      	ldr	r3, [pc, #40]	; (800fe24 <vPortExitCritical+0x50>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	4a09      	ldr	r2, [pc, #36]	; (800fe24 <vPortExitCritical+0x50>)
 800fe00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe02:	4b08      	ldr	r3, [pc, #32]	; (800fe24 <vPortExitCritical+0x50>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d105      	bne.n	800fe16 <vPortExitCritical+0x42>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	f383 8811 	msr	BASEPRI, r3
}
 800fe14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe16:	bf00      	nop
 800fe18:	370c      	adds	r7, #12
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	2000035c 	.word	0x2000035c
	...

0800fe30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe30:	f3ef 8009 	mrs	r0, PSP
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	4b15      	ldr	r3, [pc, #84]	; (800fe90 <pxCurrentTCBConst>)
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	f01e 0f10 	tst.w	lr, #16
 800fe40:	bf08      	it	eq
 800fe42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4a:	6010      	str	r0, [r2, #0]
 800fe4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fe54:	f380 8811 	msr	BASEPRI, r0
 800fe58:	f3bf 8f4f 	dsb	sy
 800fe5c:	f3bf 8f6f 	isb	sy
 800fe60:	f7fe fcd0 	bl	800e804 <vTaskSwitchContext>
 800fe64:	f04f 0000 	mov.w	r0, #0
 800fe68:	f380 8811 	msr	BASEPRI, r0
 800fe6c:	bc09      	pop	{r0, r3}
 800fe6e:	6819      	ldr	r1, [r3, #0]
 800fe70:	6808      	ldr	r0, [r1, #0]
 800fe72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe76:	f01e 0f10 	tst.w	lr, #16
 800fe7a:	bf08      	it	eq
 800fe7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe80:	f380 8809 	msr	PSP, r0
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	f3af 8000 	nop.w

0800fe90 <pxCurrentTCBConst>:
 800fe90:	20000e48 	.word	0x20000e48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe94:	bf00      	nop
 800fe96:	bf00      	nop

0800fe98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	607b      	str	r3, [r7, #4]
}
 800feb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800feb2:	f7fe fbed 	bl	800e690 <xTaskIncrementTick>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d003      	beq.n	800fec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800febc:	4b06      	ldr	r3, [pc, #24]	; (800fed8 <xPortSysTickHandler+0x40>)
 800febe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	2300      	movs	r3, #0
 800fec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	f383 8811 	msr	BASEPRI, r3
}
 800fece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fed0:	bf00      	nop
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	e000ed04 	.word	0xe000ed04

0800fedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fedc:	b480      	push	{r7}
 800fede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fee0:	4b0b      	ldr	r3, [pc, #44]	; (800ff10 <vPortSetupTimerInterrupt+0x34>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fee6:	4b0b      	ldr	r3, [pc, #44]	; (800ff14 <vPortSetupTimerInterrupt+0x38>)
 800fee8:	2200      	movs	r2, #0
 800feea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800feec:	4b0a      	ldr	r3, [pc, #40]	; (800ff18 <vPortSetupTimerInterrupt+0x3c>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a0a      	ldr	r2, [pc, #40]	; (800ff1c <vPortSetupTimerInterrupt+0x40>)
 800fef2:	fba2 2303 	umull	r2, r3, r2, r3
 800fef6:	099b      	lsrs	r3, r3, #6
 800fef8:	4a09      	ldr	r2, [pc, #36]	; (800ff20 <vPortSetupTimerInterrupt+0x44>)
 800fefa:	3b01      	subs	r3, #1
 800fefc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fefe:	4b04      	ldr	r3, [pc, #16]	; (800ff10 <vPortSetupTimerInterrupt+0x34>)
 800ff00:	2207      	movs	r2, #7
 800ff02:	601a      	str	r2, [r3, #0]
}
 800ff04:	bf00      	nop
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	e000e010 	.word	0xe000e010
 800ff14:	e000e018 	.word	0xe000e018
 800ff18:	20000008 	.word	0x20000008
 800ff1c:	10624dd3 	.word	0x10624dd3
 800ff20:	e000e014 	.word	0xe000e014

0800ff24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ff34 <vPortEnableVFP+0x10>
 800ff28:	6801      	ldr	r1, [r0, #0]
 800ff2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ff2e:	6001      	str	r1, [r0, #0]
 800ff30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff32:	bf00      	nop
 800ff34:	e000ed88 	.word	0xe000ed88

0800ff38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff38:	b480      	push	{r7}
 800ff3a:	b085      	sub	sp, #20
 800ff3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff3e:	f3ef 8305 	mrs	r3, IPSR
 800ff42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b0f      	cmp	r3, #15
 800ff48:	d914      	bls.n	800ff74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff4a:	4a17      	ldr	r2, [pc, #92]	; (800ffa8 <vPortValidateInterruptPriority+0x70>)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	4413      	add	r3, r2
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff54:	4b15      	ldr	r3, [pc, #84]	; (800ffac <vPortValidateInterruptPriority+0x74>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	7afa      	ldrb	r2, [r7, #11]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d20a      	bcs.n	800ff74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	607b      	str	r3, [r7, #4]
}
 800ff70:	bf00      	nop
 800ff72:	e7fe      	b.n	800ff72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff74:	4b0e      	ldr	r3, [pc, #56]	; (800ffb0 <vPortValidateInterruptPriority+0x78>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff7c:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <vPortValidateInterruptPriority+0x7c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d90a      	bls.n	800ff9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ff84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff88:	f383 8811 	msr	BASEPRI, r3
 800ff8c:	f3bf 8f6f 	isb	sy
 800ff90:	f3bf 8f4f 	dsb	sy
 800ff94:	603b      	str	r3, [r7, #0]
}
 800ff96:	bf00      	nop
 800ff98:	e7fe      	b.n	800ff98 <vPortValidateInterruptPriority+0x60>
	}
 800ff9a:	bf00      	nop
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	e000e3f0 	.word	0xe000e3f0
 800ffac:	2000147c 	.word	0x2000147c
 800ffb0:	e000ed0c 	.word	0xe000ed0c
 800ffb4:	20001480 	.word	0x20001480

0800ffb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b08a      	sub	sp, #40	; 0x28
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffc4:	f7fe fa96 	bl	800e4f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffc8:	4b5b      	ldr	r3, [pc, #364]	; (8010138 <pvPortMalloc+0x180>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d101      	bne.n	800ffd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffd0:	f000 f920 	bl	8010214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffd4:	4b59      	ldr	r3, [pc, #356]	; (801013c <pvPortMalloc+0x184>)
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	4013      	ands	r3, r2
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f040 8093 	bne.w	8010108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d01d      	beq.n	8010024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ffe8:	2208      	movs	r2, #8
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4413      	add	r3, r2
 800ffee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f003 0307 	and.w	r3, r3, #7
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d014      	beq.n	8010024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f023 0307 	bic.w	r3, r3, #7
 8010000:	3308      	adds	r3, #8
 8010002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f003 0307 	and.w	r3, r3, #7
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00a      	beq.n	8010024 <pvPortMalloc+0x6c>
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	617b      	str	r3, [r7, #20]
}
 8010020:	bf00      	nop
 8010022:	e7fe      	b.n	8010022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d06e      	beq.n	8010108 <pvPortMalloc+0x150>
 801002a:	4b45      	ldr	r3, [pc, #276]	; (8010140 <pvPortMalloc+0x188>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d869      	bhi.n	8010108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010034:	4b43      	ldr	r3, [pc, #268]	; (8010144 <pvPortMalloc+0x18c>)
 8010036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010038:	4b42      	ldr	r3, [pc, #264]	; (8010144 <pvPortMalloc+0x18c>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801003e:	e004      	b.n	801004a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	429a      	cmp	r2, r3
 8010052:	d903      	bls.n	801005c <pvPortMalloc+0xa4>
 8010054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1f1      	bne.n	8010040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801005c:	4b36      	ldr	r3, [pc, #216]	; (8010138 <pvPortMalloc+0x180>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010062:	429a      	cmp	r2, r3
 8010064:	d050      	beq.n	8010108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010066:	6a3b      	ldr	r3, [r7, #32]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2208      	movs	r2, #8
 801006c:	4413      	add	r3, r2
 801006e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	6a3b      	ldr	r3, [r7, #32]
 8010076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007a:	685a      	ldr	r2, [r3, #4]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	1ad2      	subs	r2, r2, r3
 8010080:	2308      	movs	r3, #8
 8010082:	005b      	lsls	r3, r3, #1
 8010084:	429a      	cmp	r2, r3
 8010086:	d91f      	bls.n	80100c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4413      	add	r3, r2
 801008e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	f003 0307 	and.w	r3, r3, #7
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00a      	beq.n	80100b0 <pvPortMalloc+0xf8>
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	613b      	str	r3, [r7, #16]
}
 80100ac:	bf00      	nop
 80100ae:	e7fe      	b.n	80100ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b2:	685a      	ldr	r2, [r3, #4]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	1ad2      	subs	r2, r2, r3
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100c2:	69b8      	ldr	r0, [r7, #24]
 80100c4:	f000 f908 	bl	80102d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100c8:	4b1d      	ldr	r3, [pc, #116]	; (8010140 <pvPortMalloc+0x188>)
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	4a1b      	ldr	r2, [pc, #108]	; (8010140 <pvPortMalloc+0x188>)
 80100d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100d6:	4b1a      	ldr	r3, [pc, #104]	; (8010140 <pvPortMalloc+0x188>)
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	4b1b      	ldr	r3, [pc, #108]	; (8010148 <pvPortMalloc+0x190>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d203      	bcs.n	80100ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80100e2:	4b17      	ldr	r3, [pc, #92]	; (8010140 <pvPortMalloc+0x188>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a18      	ldr	r2, [pc, #96]	; (8010148 <pvPortMalloc+0x190>)
 80100e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	4b13      	ldr	r3, [pc, #76]	; (801013c <pvPortMalloc+0x184>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	431a      	orrs	r2, r3
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100fe:	4b13      	ldr	r3, [pc, #76]	; (801014c <pvPortMalloc+0x194>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	3301      	adds	r3, #1
 8010104:	4a11      	ldr	r2, [pc, #68]	; (801014c <pvPortMalloc+0x194>)
 8010106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010108:	f7fe fa02 	bl	800e510 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	f003 0307 	and.w	r3, r3, #7
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00a      	beq.n	801012c <pvPortMalloc+0x174>
	__asm volatile
 8010116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	60fb      	str	r3, [r7, #12]
}
 8010128:	bf00      	nop
 801012a:	e7fe      	b.n	801012a <pvPortMalloc+0x172>
	return pvReturn;
 801012c:	69fb      	ldr	r3, [r7, #28]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3728      	adds	r7, #40	; 0x28
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	2000508c 	.word	0x2000508c
 801013c:	200050a0 	.word	0x200050a0
 8010140:	20005090 	.word	0x20005090
 8010144:	20005084 	.word	0x20005084
 8010148:	20005094 	.word	0x20005094
 801014c:	20005098 	.word	0x20005098

08010150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d04d      	beq.n	80101fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010162:	2308      	movs	r3, #8
 8010164:	425b      	negs	r3, r3
 8010166:	697a      	ldr	r2, [r7, #20]
 8010168:	4413      	add	r3, r2
 801016a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	685a      	ldr	r2, [r3, #4]
 8010174:	4b24      	ldr	r3, [pc, #144]	; (8010208 <vPortFree+0xb8>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4013      	ands	r3, r2
 801017a:	2b00      	cmp	r3, #0
 801017c:	d10a      	bne.n	8010194 <vPortFree+0x44>
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	60fb      	str	r3, [r7, #12]
}
 8010190:	bf00      	nop
 8010192:	e7fe      	b.n	8010192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d00a      	beq.n	80101b2 <vPortFree+0x62>
	__asm volatile
 801019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a0:	f383 8811 	msr	BASEPRI, r3
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	60bb      	str	r3, [r7, #8]
}
 80101ae:	bf00      	nop
 80101b0:	e7fe      	b.n	80101b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	4b14      	ldr	r3, [pc, #80]	; (8010208 <vPortFree+0xb8>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4013      	ands	r3, r2
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d01e      	beq.n	80101fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d11a      	bne.n	80101fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	4b0e      	ldr	r3, [pc, #56]	; (8010208 <vPortFree+0xb8>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	43db      	mvns	r3, r3
 80101d2:	401a      	ands	r2, r3
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101d8:	f7fe f98c 	bl	800e4f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	685a      	ldr	r2, [r3, #4]
 80101e0:	4b0a      	ldr	r3, [pc, #40]	; (801020c <vPortFree+0xbc>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4413      	add	r3, r2
 80101e6:	4a09      	ldr	r2, [pc, #36]	; (801020c <vPortFree+0xbc>)
 80101e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80101ea:	6938      	ldr	r0, [r7, #16]
 80101ec:	f000 f874 	bl	80102d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80101f0:	4b07      	ldr	r3, [pc, #28]	; (8010210 <vPortFree+0xc0>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	3301      	adds	r3, #1
 80101f6:	4a06      	ldr	r2, [pc, #24]	; (8010210 <vPortFree+0xc0>)
 80101f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101fa:	f7fe f989 	bl	800e510 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101fe:	bf00      	nop
 8010200:	3718      	adds	r7, #24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	200050a0 	.word	0x200050a0
 801020c:	20005090 	.word	0x20005090
 8010210:	2000509c 	.word	0x2000509c

08010214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801021a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801021e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010220:	4b27      	ldr	r3, [pc, #156]	; (80102c0 <prvHeapInit+0xac>)
 8010222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f003 0307 	and.w	r3, r3, #7
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00c      	beq.n	8010248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	3307      	adds	r3, #7
 8010232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f023 0307 	bic.w	r3, r3, #7
 801023a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	4a1f      	ldr	r2, [pc, #124]	; (80102c0 <prvHeapInit+0xac>)
 8010244:	4413      	add	r3, r2
 8010246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801024c:	4a1d      	ldr	r2, [pc, #116]	; (80102c4 <prvHeapInit+0xb0>)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010252:	4b1c      	ldr	r3, [pc, #112]	; (80102c4 <prvHeapInit+0xb0>)
 8010254:	2200      	movs	r2, #0
 8010256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	4413      	add	r3, r2
 801025e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010260:	2208      	movs	r2, #8
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	1a9b      	subs	r3, r3, r2
 8010266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f023 0307 	bic.w	r3, r3, #7
 801026e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	4a15      	ldr	r2, [pc, #84]	; (80102c8 <prvHeapInit+0xb4>)
 8010274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010276:	4b14      	ldr	r3, [pc, #80]	; (80102c8 <prvHeapInit+0xb4>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2200      	movs	r2, #0
 801027c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801027e:	4b12      	ldr	r3, [pc, #72]	; (80102c8 <prvHeapInit+0xb4>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2200      	movs	r2, #0
 8010284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	1ad2      	subs	r2, r2, r3
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010294:	4b0c      	ldr	r3, [pc, #48]	; (80102c8 <prvHeapInit+0xb4>)
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	4a0a      	ldr	r2, [pc, #40]	; (80102cc <prvHeapInit+0xb8>)
 80102a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	4a09      	ldr	r2, [pc, #36]	; (80102d0 <prvHeapInit+0xbc>)
 80102aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102ac:	4b09      	ldr	r3, [pc, #36]	; (80102d4 <prvHeapInit+0xc0>)
 80102ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80102b2:	601a      	str	r2, [r3, #0]
}
 80102b4:	bf00      	nop
 80102b6:	3714      	adds	r7, #20
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr
 80102c0:	20001484 	.word	0x20001484
 80102c4:	20005084 	.word	0x20005084
 80102c8:	2000508c 	.word	0x2000508c
 80102cc:	20005094 	.word	0x20005094
 80102d0:	20005090 	.word	0x20005090
 80102d4:	200050a0 	.word	0x200050a0

080102d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80102e0:	4b28      	ldr	r3, [pc, #160]	; (8010384 <prvInsertBlockIntoFreeList+0xac>)
 80102e2:	60fb      	str	r3, [r7, #12]
 80102e4:	e002      	b.n	80102ec <prvInsertBlockIntoFreeList+0x14>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	60fb      	str	r3, [r7, #12]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d8f7      	bhi.n	80102e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	4413      	add	r3, r2
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	429a      	cmp	r2, r3
 8010306:	d108      	bne.n	801031a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	685a      	ldr	r2, [r3, #4]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	441a      	add	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	441a      	add	r2, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	429a      	cmp	r2, r3
 801032c:	d118      	bne.n	8010360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	4b15      	ldr	r3, [pc, #84]	; (8010388 <prvInsertBlockIntoFreeList+0xb0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	429a      	cmp	r2, r3
 8010338:	d00d      	beq.n	8010356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	685a      	ldr	r2, [r3, #4]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	441a      	add	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	601a      	str	r2, [r3, #0]
 8010354:	e008      	b.n	8010368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010356:	4b0c      	ldr	r3, [pc, #48]	; (8010388 <prvInsertBlockIntoFreeList+0xb0>)
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	601a      	str	r2, [r3, #0]
 801035e:	e003      	b.n	8010368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	429a      	cmp	r2, r3
 801036e:	d002      	beq.n	8010376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010376:	bf00      	nop
 8010378:	3714      	adds	r7, #20
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop
 8010384:	20005084 	.word	0x20005084
 8010388:	2000508c 	.word	0x2000508c

0801038c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	330c      	adds	r3, #12
 801039c:	461a      	mov	r2, r3
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f002 fa6b 	bl	801287c <tcpip_send_msg_wait_sem>
 80103a6:	4603      	mov	r3, r0
 80103a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80103aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d103      	bne.n	80103ba <netconn_apimsg+0x2e>
    return apimsg->err;
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80103b8:	e001      	b.n	80103be <netconn_apimsg+0x32>
  }
  return err;
 80103ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
	...

080103c8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b08c      	sub	sp, #48	; 0x30
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	4603      	mov	r3, r0
 80103d0:	603a      	str	r2, [r7, #0]
 80103d2:	71fb      	strb	r3, [r7, #7]
 80103d4:	460b      	mov	r3, r1
 80103d6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80103d8:	79fb      	ldrb	r3, [r7, #7]
 80103da:	6839      	ldr	r1, [r7, #0]
 80103dc:	4618      	mov	r0, r3
 80103de:	f001 f80b 	bl	80113f8 <netconn_alloc>
 80103e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d054      	beq.n	8010494 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80103ea:	79bb      	ldrb	r3, [r7, #6]
 80103ec:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80103f2:	f107 0308 	add.w	r3, r7, #8
 80103f6:	4619      	mov	r1, r3
 80103f8:	4829      	ldr	r0, [pc, #164]	; (80104a0 <netconn_new_with_proto_and_callback+0xd8>)
 80103fa:	f7ff ffc7 	bl	801038c <netconn_apimsg>
 80103fe:	4603      	mov	r3, r0
 8010400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010404:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010408:	2b00      	cmp	r3, #0
 801040a:	d043      	beq.n	8010494 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d005      	beq.n	8010420 <netconn_new_with_proto_and_callback+0x58>
 8010414:	4b23      	ldr	r3, [pc, #140]	; (80104a4 <netconn_new_with_proto_and_callback+0xdc>)
 8010416:	22a3      	movs	r2, #163	; 0xa3
 8010418:	4923      	ldr	r1, [pc, #140]	; (80104a8 <netconn_new_with_proto_and_callback+0xe0>)
 801041a:	4824      	ldr	r0, [pc, #144]	; (80104ac <netconn_new_with_proto_and_callback+0xe4>)
 801041c:	f011 f846 	bl	80214ac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010422:	3310      	adds	r3, #16
 8010424:	4618      	mov	r0, r3
 8010426:	f010 fceb 	bl	8020e00 <sys_mbox_valid>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d105      	bne.n	801043c <netconn_new_with_proto_and_callback+0x74>
 8010430:	4b1c      	ldr	r3, [pc, #112]	; (80104a4 <netconn_new_with_proto_and_callback+0xdc>)
 8010432:	22a4      	movs	r2, #164	; 0xa4
 8010434:	491e      	ldr	r1, [pc, #120]	; (80104b0 <netconn_new_with_proto_and_callback+0xe8>)
 8010436:	481d      	ldr	r0, [pc, #116]	; (80104ac <netconn_new_with_proto_and_callback+0xe4>)
 8010438:	f011 f838 	bl	80214ac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	3314      	adds	r3, #20
 8010440:	4618      	mov	r0, r3
 8010442:	f010 fcdd 	bl	8020e00 <sys_mbox_valid>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d005      	beq.n	8010458 <netconn_new_with_proto_and_callback+0x90>
 801044c:	4b15      	ldr	r3, [pc, #84]	; (80104a4 <netconn_new_with_proto_and_callback+0xdc>)
 801044e:	22a6      	movs	r2, #166	; 0xa6
 8010450:	4918      	ldr	r1, [pc, #96]	; (80104b4 <netconn_new_with_proto_and_callback+0xec>)
 8010452:	4816      	ldr	r0, [pc, #88]	; (80104ac <netconn_new_with_proto_and_callback+0xe4>)
 8010454:	f011 f82a 	bl	80214ac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	330c      	adds	r3, #12
 801045c:	4618      	mov	r0, r3
 801045e:	f010 fd5d 	bl	8020f1c <sys_sem_valid>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d105      	bne.n	8010474 <netconn_new_with_proto_and_callback+0xac>
 8010468:	4b0e      	ldr	r3, [pc, #56]	; (80104a4 <netconn_new_with_proto_and_callback+0xdc>)
 801046a:	22a9      	movs	r2, #169	; 0xa9
 801046c:	4912      	ldr	r1, [pc, #72]	; (80104b8 <netconn_new_with_proto_and_callback+0xf0>)
 801046e:	480f      	ldr	r0, [pc, #60]	; (80104ac <netconn_new_with_proto_and_callback+0xe4>)
 8010470:	f011 f81c 	bl	80214ac <iprintf>
      sys_sem_free(&conn->op_completed);
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010476:	330c      	adds	r3, #12
 8010478:	4618      	mov	r0, r3
 801047a:	f010 fd42 	bl	8020f02 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010480:	3310      	adds	r3, #16
 8010482:	4618      	mov	r0, r3
 8010484:	f010 fc48 	bl	8020d18 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801048a:	2007      	movs	r0, #7
 801048c:	f003 ff34 	bl	80142f8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010490:	2300      	movs	r3, #0
 8010492:	e000      	b.n	8010496 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010496:	4618      	mov	r0, r3
 8010498:	3730      	adds	r7, #48	; 0x30
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	080113cd 	.word	0x080113cd
 80104a4:	0802376c 	.word	0x0802376c
 80104a8:	080237a0 	.word	0x080237a0
 80104ac:	080237c4 	.word	0x080237c4
 80104b0:	080237ec 	.word	0x080237ec
 80104b4:	08023804 	.word	0x08023804
 80104b8:	08023828 	.word	0x08023828

080104bc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08c      	sub	sp, #48	; 0x30
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <netconn_prepare_delete+0x12>
    return ERR_OK;
 80104ca:	2300      	movs	r3, #0
 80104cc:	e014      	b.n	80104f8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80104d2:	2329      	movs	r3, #41	; 0x29
 80104d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4619      	mov	r1, r3
 80104dc:	4808      	ldr	r0, [pc, #32]	; (8010500 <netconn_prepare_delete+0x44>)
 80104de:	f7ff ff55 	bl	801038c <netconn_apimsg>
 80104e2:	4603      	mov	r3, r0
 80104e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80104e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <netconn_prepare_delete+0x3a>
    return err;
 80104f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80104f4:	e000      	b.n	80104f8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3730      	adds	r7, #48	; 0x30
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	08011931 	.word	0x08011931

08010504 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d101      	bne.n	8010516 <netconn_delete+0x12>
    return ERR_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	e00d      	b.n	8010532 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff ffd0 	bl	80104bc <netconn_prepare_delete>
 801051c:	4603      	mov	r3, r0
 801051e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d102      	bne.n	801052e <netconn_delete+0x2a>
    netconn_free(conn);
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 ffd3 	bl	80114d4 <netconn_free>
  }
  return err;
 801052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
	...

0801053c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08e      	sub	sp, #56	; 0x38
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	4613      	mov	r3, r2
 8010548:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d109      	bne.n	8010564 <netconn_connect+0x28>
 8010550:	4b11      	ldr	r3, [pc, #68]	; (8010598 <netconn_connect+0x5c>)
 8010552:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8010556:	4911      	ldr	r1, [pc, #68]	; (801059c <netconn_connect+0x60>)
 8010558:	4811      	ldr	r0, [pc, #68]	; (80105a0 <netconn_connect+0x64>)
 801055a:	f010 ffa7 	bl	80214ac <iprintf>
 801055e:	f06f 030f 	mvn.w	r3, #15
 8010562:	e015      	b.n	8010590 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d101      	bne.n	801056e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 801056a:	4b0e      	ldr	r3, [pc, #56]	; (80105a4 <netconn_connect+0x68>)
 801056c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010576:	88fb      	ldrh	r3, [r7, #6]
 8010578:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 801057a:	f107 0314 	add.w	r3, r7, #20
 801057e:	4619      	mov	r1, r3
 8010580:	4809      	ldr	r0, [pc, #36]	; (80105a8 <netconn_connect+0x6c>)
 8010582:	f7ff ff03 	bl	801038c <netconn_apimsg>
 8010586:	4603      	mov	r3, r0
 8010588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 801058c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010590:	4618      	mov	r0, r3
 8010592:	3738      	adds	r7, #56	; 0x38
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	0802376c 	.word	0x0802376c
 801059c:	080238e0 	.word	0x080238e0
 80105a0:	080237c4 	.word	0x080237c4
 80105a4:	080274e4 	.word	0x080274e4
 80105a8:	08011c19 	.word	0x08011c19

080105ac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b088      	sub	sp, #32
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	4613      	mov	r3, r2
 80105b8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80105ba:	2300      	movs	r3, #0
 80105bc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d109      	bne.n	80105d8 <netconn_recv_data+0x2c>
 80105c4:	4b58      	ldr	r3, [pc, #352]	; (8010728 <netconn_recv_data+0x17c>)
 80105c6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80105ca:	4958      	ldr	r1, [pc, #352]	; (801072c <netconn_recv_data+0x180>)
 80105cc:	4858      	ldr	r0, [pc, #352]	; (8010730 <netconn_recv_data+0x184>)
 80105ce:	f010 ff6d 	bl	80214ac <iprintf>
 80105d2:	f06f 030f 	mvn.w	r3, #15
 80105d6:	e0a2      	b.n	801071e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	2200      	movs	r2, #0
 80105dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d109      	bne.n	80105f8 <netconn_recv_data+0x4c>
 80105e4:	4b50      	ldr	r3, [pc, #320]	; (8010728 <netconn_recv_data+0x17c>)
 80105e6:	f240 224a 	movw	r2, #586	; 0x24a
 80105ea:	4952      	ldr	r1, [pc, #328]	; (8010734 <netconn_recv_data+0x188>)
 80105ec:	4850      	ldr	r0, [pc, #320]	; (8010730 <netconn_recv_data+0x184>)
 80105ee:	f010 ff5d 	bl	80214ac <iprintf>
 80105f2:	f06f 030f 	mvn.w	r3, #15
 80105f6:	e092      	b.n	801071e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	3310      	adds	r3, #16
 80105fc:	4618      	mov	r0, r3
 80105fe:	f010 fbff 	bl	8020e00 <sys_mbox_valid>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d10e      	bne.n	8010626 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f000 fad4 	bl	8010bb6 <netconn_err>
 801060e:	4603      	mov	r3, r0
 8010610:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010612:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d002      	beq.n	8010620 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801061a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801061e:	e07e      	b.n	801071e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010620:	f06f 030a 	mvn.w	r3, #10
 8010624:	e07b      	b.n	801071e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	7f1b      	ldrb	r3, [r3, #28]
 801062a:	f003 0302 	and.w	r3, r3, #2
 801062e:	2b00      	cmp	r3, #0
 8010630:	d10f      	bne.n	8010652 <netconn_recv_data+0xa6>
 8010632:	79fb      	ldrb	r3, [r7, #7]
 8010634:	f003 0304 	and.w	r3, r3, #4
 8010638:	2b00      	cmp	r3, #0
 801063a:	d10a      	bne.n	8010652 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	7f1b      	ldrb	r3, [r3, #28]
 8010640:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010644:	2b00      	cmp	r3, #0
 8010646:	d104      	bne.n	8010652 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d023      	beq.n	801069a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	3310      	adds	r3, #16
 8010656:	f107 0218 	add.w	r2, r7, #24
 801065a:	4611      	mov	r1, r2
 801065c:	4618      	mov	r0, r3
 801065e:	f010 fbb8 	bl	8020dd2 <sys_arch_mbox_tryfetch>
 8010662:	4603      	mov	r3, r0
 8010664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010668:	d11f      	bne.n	80106aa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f000 faa3 	bl	8010bb6 <netconn_err>
 8010670:	4603      	mov	r3, r0
 8010672:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010674:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 801067c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010680:	e04d      	b.n	801071e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	7f1b      	ldrb	r3, [r3, #28]
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	d002      	beq.n	8010694 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801068e:	f06f 030a 	mvn.w	r3, #10
 8010692:	e044      	b.n	801071e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8010694:	f06f 0306 	mvn.w	r3, #6
 8010698:	e041      	b.n	801071e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	3310      	adds	r3, #16
 801069e:	f107 0118 	add.w	r1, r7, #24
 80106a2:	2200      	movs	r2, #0
 80106a4:	4618      	mov	r0, r3
 80106a6:	f010 fb63 	bl	8020d70 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106b2:	2b10      	cmp	r3, #16
 80106b4:	d117      	bne.n	80106e6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	f107 0217 	add.w	r2, r7, #23
 80106bc:	4611      	mov	r1, r2
 80106be:	4618      	mov	r0, r3
 80106c0:	f000 fb26 	bl	8010d10 <lwip_netconn_is_err_msg>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d009      	beq.n	80106de <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80106ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106ce:	f113 0f0f 	cmn.w	r3, #15
 80106d2:	d101      	bne.n	80106d8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	e022      	b.n	801071e <netconn_recv_data+0x172>
      }
      return err;
 80106d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106dc:	e01f      	b.n	801071e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	891b      	ldrh	r3, [r3, #8]
 80106e2:	83fb      	strh	r3, [r7, #30]
 80106e4:	e00d      	b.n	8010702 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d106      	bne.n	80106fa <netconn_recv_data+0x14e>
 80106ec:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <netconn_recv_data+0x17c>)
 80106ee:	f240 2291 	movw	r2, #657	; 0x291
 80106f2:	4911      	ldr	r1, [pc, #68]	; (8010738 <netconn_recv_data+0x18c>)
 80106f4:	480e      	ldr	r0, [pc, #56]	; (8010730 <netconn_recv_data+0x184>)
 80106f6:	f010 fed9 	bl	80214ac <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	891b      	ldrh	r3, [r3, #8]
 8010700:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010706:	2b00      	cmp	r3, #0
 8010708:	d005      	beq.n	8010716 <netconn_recv_data+0x16a>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070e:	8bfa      	ldrh	r2, [r7, #30]
 8010710:	2101      	movs	r1, #1
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801071c:	2300      	movs	r3, #0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3720      	adds	r7, #32
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	0802376c 	.word	0x0802376c
 801072c:	08023984 	.word	0x08023984
 8010730:	080237c4 	.word	0x080237c4
 8010734:	080239a4 	.word	0x080239a4
 8010738:	080239c0 	.word	0x080239c0

0801073c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d005      	beq.n	801075a <netconn_tcp_recvd_msg+0x1e>
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010756:	2b10      	cmp	r3, #16
 8010758:	d009      	beq.n	801076e <netconn_tcp_recvd_msg+0x32>
 801075a:	4b0c      	ldr	r3, [pc, #48]	; (801078c <netconn_tcp_recvd_msg+0x50>)
 801075c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010760:	490b      	ldr	r1, [pc, #44]	; (8010790 <netconn_tcp_recvd_msg+0x54>)
 8010762:	480c      	ldr	r0, [pc, #48]	; (8010794 <netconn_tcp_recvd_msg+0x58>)
 8010764:	f010 fea2 	bl	80214ac <iprintf>
 8010768:	f06f 030f 	mvn.w	r3, #15
 801076c:	e00a      	b.n	8010784 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	68ba      	ldr	r2, [r7, #8]
 8010778:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801077a:	6879      	ldr	r1, [r7, #4]
 801077c:	4806      	ldr	r0, [pc, #24]	; (8010798 <netconn_tcp_recvd_msg+0x5c>)
 801077e:	f7ff fe05 	bl	801038c <netconn_apimsg>
 8010782:	4603      	mov	r3, r0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	0802376c 	.word	0x0802376c
 8010790:	080239cc 	.word	0x080239cc
 8010794:	080237c4 	.word	0x080237c4
 8010798:	08011d95 	.word	0x08011d95

0801079c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b090      	sub	sp, #64	; 0x40
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	60b9      	str	r1, [r7, #8]
 80107a6:	4613      	mov	r3, r2
 80107a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	3310      	adds	r3, #16
 80107ae:	4618      	mov	r0, r3
 80107b0:	f010 fb26 	bl	8020e00 <sys_mbox_valid>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d102      	bne.n	80107c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80107ba:	f06f 030a 	mvn.w	r3, #10
 80107be:	e06d      	b.n	801089c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	7f1b      	ldrb	r3, [r3, #28]
 80107c4:	b25b      	sxtb	r3, r3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	da07      	bge.n	80107da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	7f1b      	ldrb	r3, [r3, #28]
 80107ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107d2:	b2da      	uxtb	r2, r3
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80107d8:	e039      	b.n	801084e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80107da:	79fb      	ldrb	r3, [r7, #7]
 80107dc:	461a      	mov	r2, r3
 80107de:	68b9      	ldr	r1, [r7, #8]
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f7ff fee3 	bl	80105ac <netconn_recv_data>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80107ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80107f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80107f8:	e050      	b.n	801089c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010800:	79fb      	ldrb	r3, [r7, #7]
 8010802:	f003 0308 	and.w	r3, r3, #8
 8010806:	2b00      	cmp	r3, #0
 8010808:	d10e      	bne.n	8010828 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801080a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080c:	2b00      	cmp	r3, #0
 801080e:	d002      	beq.n	8010816 <netconn_recv_data_tcp+0x7a>
 8010810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010812:	891b      	ldrh	r3, [r3, #8]
 8010814:	e000      	b.n	8010818 <netconn_recv_data_tcp+0x7c>
 8010816:	2301      	movs	r3, #1
 8010818:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801081a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801081c:	f107 0214 	add.w	r2, r7, #20
 8010820:	4619      	mov	r1, r3
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff ff8a 	bl	801073c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082a:	2b00      	cmp	r3, #0
 801082c:	d134      	bne.n	8010898 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801082e:	79fb      	ldrb	r3, [r7, #7]
 8010830:	f003 0310 	and.w	r3, r3, #16
 8010834:	2b00      	cmp	r3, #0
 8010836:	d009      	beq.n	801084c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	7f1b      	ldrb	r3, [r3, #28]
 801083c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010840:	b2da      	uxtb	r2, r3
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8010846:	f06f 0306 	mvn.w	r3, #6
 801084a:	e027      	b.n	801089c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801084c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010852:	2b00      	cmp	r3, #0
 8010854:	d005      	beq.n	8010862 <netconn_recv_data_tcp+0xc6>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085a:	2200      	movs	r2, #0
 801085c:	2101      	movs	r1, #1
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10f      	bne.n	801088a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f000 f9a3 	bl	8010bb6 <netconn_err>
 8010870:	4603      	mov	r3, r0
 8010872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010876:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801087a:	2b00      	cmp	r3, #0
 801087c:	d002      	beq.n	8010884 <netconn_recv_data_tcp+0xe8>
          return err;
 801087e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010882:	e00b      	b.n	801089c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8010884:	f06f 030d 	mvn.w	r3, #13
 8010888:	e008      	b.n	801089c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801088a:	2101      	movs	r1, #1
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 f955 	bl	8010b3c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010892:	f06f 030e 	mvn.w	r3, #14
 8010896:	e001      	b.n	801089c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8010898:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801089c:	4618      	mov	r0, r3
 801089e:	3740      	adds	r7, #64	; 0x40
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80108ae:	2300      	movs	r3, #0
 80108b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d109      	bne.n	80108cc <netconn_recv+0x28>
 80108b8:	4b32      	ldr	r3, [pc, #200]	; (8010984 <netconn_recv+0xe0>)
 80108ba:	f240 3263 	movw	r2, #867	; 0x363
 80108be:	4932      	ldr	r1, [pc, #200]	; (8010988 <netconn_recv+0xe4>)
 80108c0:	4832      	ldr	r0, [pc, #200]	; (801098c <netconn_recv+0xe8>)
 80108c2:	f010 fdf3 	bl	80214ac <iprintf>
 80108c6:	f06f 030f 	mvn.w	r3, #15
 80108ca:	e056      	b.n	801097a <netconn_recv+0xd6>
  *new_buf = NULL;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	2200      	movs	r2, #0
 80108d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d109      	bne.n	80108ec <netconn_recv+0x48>
 80108d8:	4b2a      	ldr	r3, [pc, #168]	; (8010984 <netconn_recv+0xe0>)
 80108da:	f240 3265 	movw	r2, #869	; 0x365
 80108de:	492c      	ldr	r1, [pc, #176]	; (8010990 <netconn_recv+0xec>)
 80108e0:	482a      	ldr	r0, [pc, #168]	; (801098c <netconn_recv+0xe8>)
 80108e2:	f010 fde3 	bl	80214ac <iprintf>
 80108e6:	f06f 030f 	mvn.w	r3, #15
 80108ea:	e046      	b.n	801097a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108f4:	2b10      	cmp	r3, #16
 80108f6:	d13a      	bne.n	801096e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80108f8:	2300      	movs	r3, #0
 80108fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80108fc:	2006      	movs	r0, #6
 80108fe:	f003 fca9 	bl	8014254 <memp_malloc>
 8010902:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d102      	bne.n	8010910 <netconn_recv+0x6c>
      return ERR_MEM;
 801090a:	f04f 33ff 	mov.w	r3, #4294967295
 801090e:	e034      	b.n	801097a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010910:	f107 030c 	add.w	r3, r7, #12
 8010914:	2200      	movs	r2, #0
 8010916:	4619      	mov	r1, r3
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7ff ff3f 	bl	801079c <netconn_recv_data_tcp>
 801091e:	4603      	mov	r3, r0
 8010920:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010922:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d006      	beq.n	8010938 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801092a:	6979      	ldr	r1, [r7, #20]
 801092c:	2006      	movs	r0, #6
 801092e:	f003 fce3 	bl	80142f8 <memp_free>
      return err;
 8010932:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010936:	e020      	b.n	801097a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <netconn_recv+0xa8>
 801093e:	4b11      	ldr	r3, [pc, #68]	; (8010984 <netconn_recv+0xe0>)
 8010940:	f240 3279 	movw	r2, #889	; 0x379
 8010944:	4913      	ldr	r1, [pc, #76]	; (8010994 <netconn_recv+0xf0>)
 8010946:	4811      	ldr	r0, [pc, #68]	; (801098c <netconn_recv+0xe8>)
 8010948:	f010 fdb0 	bl	80214ac <iprintf>

    buf->p = p;
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010952:	68fa      	ldr	r2, [r7, #12]
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	2200      	movs	r2, #0
 801095c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2200      	movs	r2, #0
 8010962:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	697a      	ldr	r2, [r7, #20]
 8010968:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	e005      	b.n	801097a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801096e:	2200      	movs	r2, #0
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff fe1a 	bl	80105ac <netconn_recv_data>
 8010978:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801097a:	4618      	mov	r0, r3
 801097c:	3718      	adds	r7, #24
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	0802376c 	.word	0x0802376c
 8010988:	08023984 	.word	0x08023984
 801098c:	080237c4 	.word	0x080237c4
 8010990:	080239a4 	.word	0x080239a4
 8010994:	08023a1c 	.word	0x08023a1c

08010998 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b088      	sub	sp, #32
 801099c:	af02      	add	r7, sp, #8
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80109ae:	78fa      	ldrb	r2, [r7, #3]
 80109b0:	f107 0110 	add.w	r1, r7, #16
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	4613      	mov	r3, r2
 80109ba:	2201      	movs	r2, #1
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f000 f805 	bl	80109cc <netconn_write_vectors_partly>
 80109c2:	4603      	mov	r3, r0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3718      	adds	r7, #24
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b092      	sub	sp, #72	; 0x48
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	4611      	mov	r1, r2
 80109d8:	461a      	mov	r2, r3
 80109da:	460b      	mov	r3, r1
 80109dc:	80fb      	strh	r3, [r7, #6]
 80109de:	4613      	mov	r3, r2
 80109e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d109      	bne.n	80109fc <netconn_write_vectors_partly+0x30>
 80109e8:	4b4e      	ldr	r3, [pc, #312]	; (8010b24 <netconn_write_vectors_partly+0x158>)
 80109ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80109ee:	494e      	ldr	r1, [pc, #312]	; (8010b28 <netconn_write_vectors_partly+0x15c>)
 80109f0:	484e      	ldr	r0, [pc, #312]	; (8010b2c <netconn_write_vectors_partly+0x160>)
 80109f2:	f010 fd5b 	bl	80214ac <iprintf>
 80109f6:	f06f 030f 	mvn.w	r3, #15
 80109fa:	e08e      	b.n	8010b1a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a04:	2b10      	cmp	r3, #16
 8010a06:	d009      	beq.n	8010a1c <netconn_write_vectors_partly+0x50>
 8010a08:	4b46      	ldr	r3, [pc, #280]	; (8010b24 <netconn_write_vectors_partly+0x158>)
 8010a0a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8010a0e:	4948      	ldr	r1, [pc, #288]	; (8010b30 <netconn_write_vectors_partly+0x164>)
 8010a10:	4846      	ldr	r0, [pc, #280]	; (8010b2c <netconn_write_vectors_partly+0x160>)
 8010a12:	f010 fd4b 	bl	80214ac <iprintf>
 8010a16:	f06f 0305 	mvn.w	r3, #5
 8010a1a:	e07e      	b.n	8010b1a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	7f1b      	ldrb	r3, [r3, #28]
 8010a20:	f003 0302 	and.w	r3, r3, #2
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d104      	bne.n	8010a32 <netconn_write_vectors_partly+0x66>
 8010a28:	797b      	ldrb	r3, [r7, #5]
 8010a2a:	f003 0304 	and.w	r3, r3, #4
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <netconn_write_vectors_partly+0x6a>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e000      	b.n	8010a38 <netconn_write_vectors_partly+0x6c>
 8010a36:	2300      	movs	r3, #0
 8010a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8010a3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d005      	beq.n	8010a50 <netconn_write_vectors_partly+0x84>
 8010a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d102      	bne.n	8010a50 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8010a4a:	f06f 0305 	mvn.w	r3, #5
 8010a4e:	e064      	b.n	8010b1a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8010a50:	2300      	movs	r3, #0
 8010a52:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010a54:	2300      	movs	r3, #0
 8010a56:	643b      	str	r3, [r7, #64]	; 0x40
 8010a58:	e015      	b.n	8010a86 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8010a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a5c:	00db      	lsls	r3, r3, #3
 8010a5e:	68ba      	ldr	r2, [r7, #8]
 8010a60:	4413      	add	r3, r2
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a66:	4413      	add	r3, r2
 8010a68:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8010a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a6c:	00db      	lsls	r3, r3, #3
 8010a6e:	68ba      	ldr	r2, [r7, #8]
 8010a70:	4413      	add	r3, r2
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d202      	bcs.n	8010a80 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8010a7a:	f06f 0305 	mvn.w	r3, #5
 8010a7e:	e04c      	b.n	8010b1a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8010a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a82:	3301      	adds	r3, #1
 8010a84:	643b      	str	r3, [r7, #64]	; 0x40
 8010a86:	88fb      	ldrh	r3, [r7, #6]
 8010a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	dbe5      	blt.n	8010a5a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8010a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e040      	b.n	8010b1a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8010a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	da0a      	bge.n	8010ab4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8010a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d102      	bne.n	8010aaa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8010aa4:	f06f 0305 	mvn.w	r3, #5
 8010aa8:	e037      	b.n	8010b1a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8010aaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010aae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8010ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8010abc:	88fb      	ldrh	r3, [r7, #6]
 8010abe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010ac4:	797b      	ldrb	r3, [r7, #5]
 8010ac6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8010aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010acc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010ad2:	f107 0314 	add.w	r3, r7, #20
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	4816      	ldr	r0, [pc, #88]	; (8010b34 <netconn_write_vectors_partly+0x168>)
 8010ada:	f7ff fc57 	bl	801038c <netconn_apimsg>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8010ae4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d114      	bne.n	8010b16 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8010aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d002      	beq.n	8010af8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8010af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010af6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8010af8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d10a      	bne.n	8010b16 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8010b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d006      	beq.n	8010b16 <netconn_write_vectors_partly+0x14a>
 8010b08:	4b06      	ldr	r3, [pc, #24]	; (8010b24 <netconn_write_vectors_partly+0x158>)
 8010b0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010b0e:	490a      	ldr	r1, [pc, #40]	; (8010b38 <netconn_write_vectors_partly+0x16c>)
 8010b10:	4806      	ldr	r0, [pc, #24]	; (8010b2c <netconn_write_vectors_partly+0x160>)
 8010b12:	f010 fccb 	bl	80214ac <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8010b16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3748      	adds	r7, #72	; 0x48
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	0802376c 	.word	0x0802376c
 8010b28:	08023a44 	.word	0x08023a44
 8010b2c:	080237c4 	.word	0x080237c4
 8010b30:	08023a60 	.word	0x08023a60
 8010b34:	08012199 	.word	0x08012199
 8010b38:	08023a84 	.word	0x08023a84

08010b3c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b08c      	sub	sp, #48	; 0x30
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	460b      	mov	r3, r1
 8010b46:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d109      	bne.n	8010b62 <netconn_close_shutdown+0x26>
 8010b4e:	4b0f      	ldr	r3, [pc, #60]	; (8010b8c <netconn_close_shutdown+0x50>)
 8010b50:	f240 4247 	movw	r2, #1095	; 0x447
 8010b54:	490e      	ldr	r1, [pc, #56]	; (8010b90 <netconn_close_shutdown+0x54>)
 8010b56:	480f      	ldr	r0, [pc, #60]	; (8010b94 <netconn_close_shutdown+0x58>)
 8010b58:	f010 fca8 	bl	80214ac <iprintf>
 8010b5c:	f06f 030f 	mvn.w	r3, #15
 8010b60:	e010      	b.n	8010b84 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010b6a:	2329      	movs	r3, #41	; 0x29
 8010b6c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8010b6e:	f107 030c 	add.w	r3, r7, #12
 8010b72:	4619      	mov	r1, r3
 8010b74:	4808      	ldr	r0, [pc, #32]	; (8010b98 <netconn_close_shutdown+0x5c>)
 8010b76:	f7ff fc09 	bl	801038c <netconn_apimsg>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010b80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3730      	adds	r7, #48	; 0x30
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	0802376c 	.word	0x0802376c
 8010b90:	08023aa8 	.word	0x08023aa8
 8010b94:	080237c4 	.word	0x080237c4
 8010b98:	080122b1 	.word	0x080122b1

08010b9c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8010ba4:	2103      	movs	r1, #3
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f7ff ffc8 	bl	8010b3c <netconn_close_shutdown>
 8010bac:	4603      	mov	r3, r0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b084      	sub	sp, #16
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <netconn_err+0x12>
    return ERR_OK;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	e00d      	b.n	8010be4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8010bc8:	f010 fa24 	bl	8021014 <sys_arch_protect>
 8010bcc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	7a1b      	ldrb	r3, [r3, #8]
 8010bd2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f010 fa28 	bl	8021030 <sys_arch_unprotect>
  return err;
 8010be0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b08a      	sub	sp, #40	; 0x28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d109      	bne.n	8010c10 <netconn_gethostbyname+0x24>
 8010bfc:	4b24      	ldr	r3, [pc, #144]	; (8010c90 <netconn_gethostbyname+0xa4>)
 8010bfe:	f240 5204 	movw	r2, #1284	; 0x504
 8010c02:	4924      	ldr	r1, [pc, #144]	; (8010c94 <netconn_gethostbyname+0xa8>)
 8010c04:	4824      	ldr	r0, [pc, #144]	; (8010c98 <netconn_gethostbyname+0xac>)
 8010c06:	f010 fc51 	bl	80214ac <iprintf>
 8010c0a:	f06f 030f 	mvn.w	r3, #15
 8010c0e:	e03b      	b.n	8010c88 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d109      	bne.n	8010c2a <netconn_gethostbyname+0x3e>
 8010c16:	4b1e      	ldr	r3, [pc, #120]	; (8010c90 <netconn_gethostbyname+0xa4>)
 8010c18:	f240 5205 	movw	r2, #1285	; 0x505
 8010c1c:	491f      	ldr	r1, [pc, #124]	; (8010c9c <netconn_gethostbyname+0xb0>)
 8010c1e:	481e      	ldr	r0, [pc, #120]	; (8010c98 <netconn_gethostbyname+0xac>)
 8010c20:	f010 fc44 	bl	80214ac <iprintf>
 8010c24:	f06f 030f 	mvn.w	r3, #15
 8010c28:	e02e      	b.n	8010c88 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 8010c2a:	f107 030f 	add.w	r3, r7, #15
 8010c2e:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 8010c30:	f107 0310 	add.w	r3, r7, #16
 8010c34:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	2100      	movs	r1, #0
 8010c42:	4618      	mov	r0, r3
 8010c44:	f010 f8fa 	bl	8020e3c <sys_sem_new>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 8010c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c58:	e016      	b.n	8010c88 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 8010c5a:	69fa      	ldr	r2, [r7, #28]
 8010c5c:	f107 0314 	add.w	r3, r7, #20
 8010c60:	4619      	mov	r1, r3
 8010c62:	480f      	ldr	r0, [pc, #60]	; (8010ca0 <netconn_gethostbyname+0xb4>)
 8010c64:	f001 fe0a 	bl	801287c <tcpip_send_msg_wait_sem>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f010 f946 	bl	8020f02 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 8010c76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d002      	beq.n	8010c84 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 8010c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c82:	e001      	b.n	8010c88 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 8010c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3728      	adds	r7, #40	; 0x28
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	0802376c 	.word	0x0802376c
 8010c94:	08023ac4 	.word	0x08023ac4
 8010c98:	080237c4 	.word	0x080237c4
 8010c9c:	08023ae8 	.word	0x08023ae8
 8010ca0:	0801240d 	.word	0x0801240d

08010ca4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8010cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cb2:	f113 0f0d 	cmn.w	r3, #13
 8010cb6:	d009      	beq.n	8010ccc <lwip_netconn_err_to_msg+0x28>
 8010cb8:	f113 0f0d 	cmn.w	r3, #13
 8010cbc:	dc0c      	bgt.n	8010cd8 <lwip_netconn_err_to_msg+0x34>
 8010cbe:	f113 0f0f 	cmn.w	r3, #15
 8010cc2:	d007      	beq.n	8010cd4 <lwip_netconn_err_to_msg+0x30>
 8010cc4:	f113 0f0e 	cmn.w	r3, #14
 8010cc8:	d002      	beq.n	8010cd0 <lwip_netconn_err_to_msg+0x2c>
 8010cca:	e005      	b.n	8010cd8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010ccc:	4b0a      	ldr	r3, [pc, #40]	; (8010cf8 <lwip_netconn_err_to_msg+0x54>)
 8010cce:	e00e      	b.n	8010cee <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010cd0:	4b0a      	ldr	r3, [pc, #40]	; (8010cfc <lwip_netconn_err_to_msg+0x58>)
 8010cd2:	e00c      	b.n	8010cee <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <lwip_netconn_err_to_msg+0x5c>)
 8010cd6:	e00a      	b.n	8010cee <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d005      	beq.n	8010cec <lwip_netconn_err_to_msg+0x48>
 8010ce0:	4b08      	ldr	r3, [pc, #32]	; (8010d04 <lwip_netconn_err_to_msg+0x60>)
 8010ce2:	227d      	movs	r2, #125	; 0x7d
 8010ce4:	4908      	ldr	r1, [pc, #32]	; (8010d08 <lwip_netconn_err_to_msg+0x64>)
 8010ce6:	4809      	ldr	r0, [pc, #36]	; (8010d0c <lwip_netconn_err_to_msg+0x68>)
 8010ce8:	f010 fbe0 	bl	80214ac <iprintf>
      return NULL;
 8010cec:	2300      	movs	r3, #0
  }
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	080273a8 	.word	0x080273a8
 8010cfc:	080273a9 	.word	0x080273a9
 8010d00:	080273aa 	.word	0x080273aa
 8010d04:	08023b0c 	.word	0x08023b0c
 8010d08:	08023b40 	.word	0x08023b40
 8010d0c:	08023b50 	.word	0x08023b50

08010d10 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d105      	bne.n	8010d2c <lwip_netconn_is_err_msg+0x1c>
 8010d20:	4b12      	ldr	r3, [pc, #72]	; (8010d6c <lwip_netconn_is_err_msg+0x5c>)
 8010d22:	2285      	movs	r2, #133	; 0x85
 8010d24:	4912      	ldr	r1, [pc, #72]	; (8010d70 <lwip_netconn_is_err_msg+0x60>)
 8010d26:	4813      	ldr	r0, [pc, #76]	; (8010d74 <lwip_netconn_is_err_msg+0x64>)
 8010d28:	f010 fbc0 	bl	80214ac <iprintf>

  if (msg == &netconn_aborted) {
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4a12      	ldr	r2, [pc, #72]	; (8010d78 <lwip_netconn_is_err_msg+0x68>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d104      	bne.n	8010d3e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	22f3      	movs	r2, #243	; 0xf3
 8010d38:	701a      	strb	r2, [r3, #0]
    return 1;
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e012      	b.n	8010d64 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4a0e      	ldr	r2, [pc, #56]	; (8010d7c <lwip_netconn_is_err_msg+0x6c>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d104      	bne.n	8010d50 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	22f2      	movs	r2, #242	; 0xf2
 8010d4a:	701a      	strb	r2, [r3, #0]
    return 1;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e009      	b.n	8010d64 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4a0b      	ldr	r2, [pc, #44]	; (8010d80 <lwip_netconn_is_err_msg+0x70>)
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d104      	bne.n	8010d62 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	22f1      	movs	r2, #241	; 0xf1
 8010d5c:	701a      	strb	r2, [r3, #0]
    return 1;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e000      	b.n	8010d64 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010d62:	2300      	movs	r3, #0
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3708      	adds	r7, #8
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	08023b0c 	.word	0x08023b0c
 8010d70:	08023b78 	.word	0x08023b78
 8010d74:	08023b50 	.word	0x08023b50
 8010d78:	080273a8 	.word	0x080273a8
 8010d7c:	080273a9 	.word	0x080273a9
 8010d80:	080273aa 	.word	0x080273aa

08010d84 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
 8010d90:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d105      	bne.n	8010da4 <recv_udp+0x20>
 8010d98:	4b34      	ldr	r3, [pc, #208]	; (8010e6c <recv_udp+0xe8>)
 8010d9a:	22e5      	movs	r2, #229	; 0xe5
 8010d9c:	4934      	ldr	r1, [pc, #208]	; (8010e70 <recv_udp+0xec>)
 8010d9e:	4835      	ldr	r0, [pc, #212]	; (8010e74 <recv_udp+0xf0>)
 8010da0:	f010 fb84 	bl	80214ac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d105      	bne.n	8010db6 <recv_udp+0x32>
 8010daa:	4b30      	ldr	r3, [pc, #192]	; (8010e6c <recv_udp+0xe8>)
 8010dac:	22e6      	movs	r2, #230	; 0xe6
 8010dae:	4932      	ldr	r1, [pc, #200]	; (8010e78 <recv_udp+0xf4>)
 8010db0:	4830      	ldr	r0, [pc, #192]	; (8010e74 <recv_udp+0xf0>)
 8010db2:	f010 fb7b 	bl	80214ac <iprintf>
  conn = (struct netconn *)arg;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d103      	bne.n	8010dc8 <recv_udp+0x44>
    pbuf_free(p);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f004 f949 	bl	8015058 <pbuf_free>
    return;
 8010dc6:	e04d      	b.n	8010e64 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d005      	beq.n	8010dde <recv_udp+0x5a>
 8010dd2:	4b26      	ldr	r3, [pc, #152]	; (8010e6c <recv_udp+0xe8>)
 8010dd4:	22ee      	movs	r2, #238	; 0xee
 8010dd6:	4929      	ldr	r1, [pc, #164]	; (8010e7c <recv_udp+0xf8>)
 8010dd8:	4826      	ldr	r0, [pc, #152]	; (8010e74 <recv_udp+0xf0>)
 8010dda:	f010 fb67 	bl	80214ac <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	3310      	adds	r3, #16
 8010de2:	4618      	mov	r0, r3
 8010de4:	f010 f80c 	bl	8020e00 <sys_mbox_valid>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d103      	bne.n	8010df6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f004 f932 	bl	8015058 <pbuf_free>
    return;
 8010df4:	e036      	b.n	8010e64 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010df6:	2006      	movs	r0, #6
 8010df8:	f003 fa2c 	bl	8014254 <memp_malloc>
 8010dfc:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d103      	bne.n	8010e0c <recv_udp+0x88>
    pbuf_free(p);
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f004 f927 	bl	8015058 <pbuf_free>
    return;
 8010e0a:	e02b      	b.n	8010e64 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010e0c:	69bb      	ldr	r3, [r7, #24]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <recv_udp+0xa0>
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	e000      	b.n	8010e26 <recv_udp+0xa2>
 8010e24:	2300      	movs	r3, #0
 8010e26:	69ba      	ldr	r2, [r7, #24]
 8010e28:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010e2e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	891b      	ldrh	r3, [r3, #8]
 8010e34:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	3310      	adds	r3, #16
 8010e3a:	69b9      	ldr	r1, [r7, #24]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f00f ff7d 	bl	8020d3c <sys_mbox_trypost>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d003      	beq.n	8010e50 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010e48:	69b8      	ldr	r0, [r7, #24]
 8010e4a:	f001 fb25 	bl	8012498 <netbuf_delete>
    return;
 8010e4e:	e009      	b.n	8010e64 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <recv_udp+0xe0>
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5c:	8afa      	ldrh	r2, [r7, #22]
 8010e5e:	2100      	movs	r1, #0
 8010e60:	69f8      	ldr	r0, [r7, #28]
 8010e62:	4798      	blx	r3
  }
}
 8010e64:	3720      	adds	r7, #32
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	08023b0c 	.word	0x08023b0c
 8010e70:	08023b84 	.word	0x08023b84
 8010e74:	08023b50 	.word	0x08023b50
 8010e78:	08023ba8 	.word	0x08023ba8
 8010e7c:	08023bc8 	.word	0x08023bc8

08010e80 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b088      	sub	sp, #32
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d106      	bne.n	8010ea2 <recv_tcp+0x22>
 8010e94:	4b36      	ldr	r3, [pc, #216]	; (8010f70 <recv_tcp+0xf0>)
 8010e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010e9a:	4936      	ldr	r1, [pc, #216]	; (8010f74 <recv_tcp+0xf4>)
 8010e9c:	4836      	ldr	r0, [pc, #216]	; (8010f78 <recv_tcp+0xf8>)
 8010e9e:	f010 fb05 	bl	80214ac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d106      	bne.n	8010eb6 <recv_tcp+0x36>
 8010ea8:	4b31      	ldr	r3, [pc, #196]	; (8010f70 <recv_tcp+0xf0>)
 8010eaa:	f240 122d 	movw	r2, #301	; 0x12d
 8010eae:	4933      	ldr	r1, [pc, #204]	; (8010f7c <recv_tcp+0xfc>)
 8010eb0:	4831      	ldr	r0, [pc, #196]	; (8010f78 <recv_tcp+0xf8>)
 8010eb2:	f010 fafb 	bl	80214ac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8010eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d006      	beq.n	8010ecc <recv_tcp+0x4c>
 8010ebe:	4b2c      	ldr	r3, [pc, #176]	; (8010f70 <recv_tcp+0xf0>)
 8010ec0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010ec4:	492e      	ldr	r1, [pc, #184]	; (8010f80 <recv_tcp+0x100>)
 8010ec6:	482c      	ldr	r0, [pc, #176]	; (8010f78 <recv_tcp+0xf8>)
 8010ec8:	f010 faf0 	bl	80214ac <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d102      	bne.n	8010edc <recv_tcp+0x5c>
    return ERR_VAL;
 8010ed6:	f06f 0305 	mvn.w	r3, #5
 8010eda:	e045      	b.n	8010f68 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	68ba      	ldr	r2, [r7, #8]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d006      	beq.n	8010ef4 <recv_tcp+0x74>
 8010ee6:	4b22      	ldr	r3, [pc, #136]	; (8010f70 <recv_tcp+0xf0>)
 8010ee8:	f240 1235 	movw	r2, #309	; 0x135
 8010eec:	4925      	ldr	r1, [pc, #148]	; (8010f84 <recv_tcp+0x104>)
 8010eee:	4822      	ldr	r0, [pc, #136]	; (8010f78 <recv_tcp+0xf8>)
 8010ef0:	f010 fadc 	bl	80214ac <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	3310      	adds	r3, #16
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f00f ff81 	bl	8020e00 <sys_mbox_valid>
 8010efe:	4603      	mov	r3, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10d      	bne.n	8010f20 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d008      	beq.n	8010f1c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	891b      	ldrh	r3, [r3, #8]
 8010f0e:	4619      	mov	r1, r3
 8010f10:	68b8      	ldr	r0, [r7, #8]
 8010f12:	f005 f883 	bl	801601c <tcp_recved>
      pbuf_free(p);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f004 f89e 	bl	8015058 <pbuf_free>
    }
    return ERR_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e023      	b.n	8010f68 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d005      	beq.n	8010f32 <recv_tcp+0xb2>
    msg = p;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	891b      	ldrh	r3, [r3, #8]
 8010f2e:	83fb      	strh	r3, [r7, #30]
 8010f30:	e003      	b.n	8010f3a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8010f32:	4b15      	ldr	r3, [pc, #84]	; (8010f88 <recv_tcp+0x108>)
 8010f34:	61bb      	str	r3, [r7, #24]
    len = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	3310      	adds	r3, #16
 8010f3e:	69b9      	ldr	r1, [r7, #24]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f00f fefb 	bl	8020d3c <sys_mbox_trypost>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8010f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f50:	e00a      	b.n	8010f68 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d005      	beq.n	8010f66 <recv_tcp+0xe6>
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f5e:	8bfa      	ldrh	r2, [r7, #30]
 8010f60:	2100      	movs	r1, #0
 8010f62:	6978      	ldr	r0, [r7, #20]
 8010f64:	4798      	blx	r3
  }

  return ERR_OK;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3720      	adds	r7, #32
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	08023b0c 	.word	0x08023b0c
 8010f74:	08023be8 	.word	0x08023be8
 8010f78:	08023b50 	.word	0x08023b50
 8010f7c:	08023c0c 	.word	0x08023c0c
 8010f80:	08023c2c 	.word	0x08023c2c
 8010f84:	08023c44 	.word	0x08023c44
 8010f88:	080273aa 	.word	0x080273aa

08010f8c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d106      	bne.n	8010fae <poll_tcp+0x22>
 8010fa0:	4b29      	ldr	r3, [pc, #164]	; (8011048 <poll_tcp+0xbc>)
 8010fa2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8010fa6:	4929      	ldr	r1, [pc, #164]	; (801104c <poll_tcp+0xc0>)
 8010fa8:	4829      	ldr	r0, [pc, #164]	; (8011050 <poll_tcp+0xc4>)
 8010faa:	f010 fa7f 	bl	80214ac <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	785b      	ldrb	r3, [r3, #1]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d104      	bne.n	8010fc0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010fb6:	2101      	movs	r1, #1
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f000 ff21 	bl	8011e00 <lwip_netconn_do_writemore>
 8010fbe:	e016      	b.n	8010fee <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	785b      	ldrb	r3, [r3, #1]
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	d112      	bne.n	8010fee <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	6a1b      	ldr	r3, [r3, #32]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00a      	beq.n	8010fe6 <poll_tcp+0x5a>
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6a1b      	ldr	r3, [r3, #32]
 8010fd4:	7a5b      	ldrb	r3, [r3, #9]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d005      	beq.n	8010fe6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	7a5a      	ldrb	r2, [r3, #9]
 8010fe0:	3a01      	subs	r2, #1
 8010fe2:	b2d2      	uxtb	r2, r2
 8010fe4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010fe6:	2101      	movs	r1, #1
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f000 fb3b 	bl	8011664 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	7f1b      	ldrb	r3, [r3, #28]
 8010ff2:	f003 0310 	and.w	r3, r3, #16
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d021      	beq.n	801103e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d01d      	beq.n	801103e <poll_tcp+0xb2>
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801100a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801100e:	d316      	bcc.n	801103e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011018:	2b04      	cmp	r3, #4
 801101a:	d810      	bhi.n	801103e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	7f1b      	ldrb	r3, [r3, #28]
 8011020:	f023 0310 	bic.w	r3, r3, #16
 8011024:	b2da      	uxtb	r2, r3
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102e:	2b00      	cmp	r3, #0
 8011030:	d005      	beq.n	801103e <poll_tcp+0xb2>
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011036:	2200      	movs	r2, #0
 8011038:	2102      	movs	r1, #2
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3710      	adds	r7, #16
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	08023b0c 	.word	0x08023b0c
 801104c:	08023c64 	.word	0x08023c64
 8011050:	08023b50 	.word	0x08023b50

08011054 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	4613      	mov	r3, r2
 8011060:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d106      	bne.n	801107a <sent_tcp+0x26>
 801106c:	4b20      	ldr	r3, [pc, #128]	; (80110f0 <sent_tcp+0x9c>)
 801106e:	f240 1293 	movw	r2, #403	; 0x193
 8011072:	4920      	ldr	r1, [pc, #128]	; (80110f4 <sent_tcp+0xa0>)
 8011074:	4820      	ldr	r0, [pc, #128]	; (80110f8 <sent_tcp+0xa4>)
 8011076:	f010 fa19 	bl	80214ac <iprintf>

  if (conn) {
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d032      	beq.n	80110e6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	785b      	ldrb	r3, [r3, #1]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d104      	bne.n	8011092 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011088:	2101      	movs	r1, #1
 801108a:	6978      	ldr	r0, [r7, #20]
 801108c:	f000 feb8 	bl	8011e00 <lwip_netconn_do_writemore>
 8011090:	e007      	b.n	80110a2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	785b      	ldrb	r3, [r3, #1]
 8011096:	2b04      	cmp	r3, #4
 8011098:	d103      	bne.n	80110a2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801109a:	2101      	movs	r1, #1
 801109c:	6978      	ldr	r0, [r7, #20]
 801109e:	f000 fae1 	bl	8011664 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d01d      	beq.n	80110e6 <sent_tcp+0x92>
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80110b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80110b6:	d316      	bcc.n	80110e6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80110c0:	2b04      	cmp	r3, #4
 80110c2:	d810      	bhi.n	80110e6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	7f1b      	ldrb	r3, [r3, #28]
 80110c8:	f023 0310 	bic.w	r3, r3, #16
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d005      	beq.n	80110e6 <sent_tcp+0x92>
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110de:	88fa      	ldrh	r2, [r7, #6]
 80110e0:	2102      	movs	r1, #2
 80110e2:	6978      	ldr	r0, [r7, #20]
 80110e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	08023b0c 	.word	0x08023b0c
 80110f4:	08023c64 	.word	0x08023c64
 80110f8:	08023b50 	.word	0x08023b50

080110fc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <err_tcp+0x24>
 8011112:	4b5f      	ldr	r3, [pc, #380]	; (8011290 <err_tcp+0x194>)
 8011114:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011118:	495e      	ldr	r1, [pc, #376]	; (8011294 <err_tcp+0x198>)
 801111a:	485f      	ldr	r0, [pc, #380]	; (8011298 <err_tcp+0x19c>)
 801111c:	f010 f9c6 	bl	80214ac <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011120:	f00f ff78 	bl	8021014 <sys_arch_protect>
 8011124:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	2200      	movs	r2, #0
 801112a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	78fa      	ldrb	r2, [r7, #3]
 8011130:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	7f1b      	ldrb	r3, [r3, #28]
 8011136:	f043 0301 	orr.w	r3, r3, #1
 801113a:	b2da      	uxtb	r2, r3
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	785b      	ldrb	r3, [r3, #1]
 8011144:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	2200      	movs	r2, #0
 801114a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 801114c:	69b8      	ldr	r0, [r7, #24]
 801114e:	f00f ff6f 	bl	8021030 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011156:	2b00      	cmp	r3, #0
 8011158:	d005      	beq.n	8011166 <err_tcp+0x6a>
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801115e:	2200      	movs	r2, #0
 8011160:	2104      	movs	r1, #4
 8011162:	69f8      	ldr	r0, [r7, #28]
 8011164:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116a:	2b00      	cmp	r3, #0
 801116c:	d005      	beq.n	801117a <err_tcp+0x7e>
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	2200      	movs	r2, #0
 8011174:	2100      	movs	r1, #0
 8011176:	69f8      	ldr	r0, [r7, #28]
 8011178:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117e:	2b00      	cmp	r3, #0
 8011180:	d005      	beq.n	801118e <err_tcp+0x92>
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011186:	2200      	movs	r2, #0
 8011188:	2102      	movs	r1, #2
 801118a:	69f8      	ldr	r0, [r7, #28]
 801118c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801118e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff fd86 	bl	8010ca4 <lwip_netconn_err_to_msg>
 8011198:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	3310      	adds	r3, #16
 801119e:	4618      	mov	r0, r3
 80111a0:	f00f fe2e 	bl	8020e00 <sys_mbox_valid>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d005      	beq.n	80111b6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	3310      	adds	r3, #16
 80111ae:	6939      	ldr	r1, [r7, #16]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f00f fdc3 	bl	8020d3c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	3314      	adds	r3, #20
 80111ba:	4618      	mov	r0, r3
 80111bc:	f00f fe20 	bl	8020e00 <sys_mbox_valid>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d005      	beq.n	80111d2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	3314      	adds	r3, #20
 80111ca:	6939      	ldr	r1, [r7, #16]
 80111cc:	4618      	mov	r0, r3
 80111ce:	f00f fdb5 	bl	8020d3c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80111d2:	7dfb      	ldrb	r3, [r7, #23]
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d005      	beq.n	80111e4 <err_tcp+0xe8>
 80111d8:	7dfb      	ldrb	r3, [r7, #23]
 80111da:	2b04      	cmp	r3, #4
 80111dc:	d002      	beq.n	80111e4 <err_tcp+0xe8>
 80111de:	7dfb      	ldrb	r3, [r7, #23]
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d143      	bne.n	801126c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	7f1b      	ldrb	r3, [r3, #28]
 80111e8:	f003 0304 	and.w	r3, r3, #4
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	bf14      	ite	ne
 80111f0:	2301      	movne	r3, #1
 80111f2:	2300      	moveq	r3, #0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	7f1b      	ldrb	r3, [r3, #28]
 80111fc:	f023 0304 	bic.w	r3, r3, #4
 8011200:	b2da      	uxtb	r2, r3
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d13b      	bne.n	8011284 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801120c:	69fb      	ldr	r3, [r7, #28]
 801120e:	6a1b      	ldr	r3, [r3, #32]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d106      	bne.n	8011222 <err_tcp+0x126>
 8011214:	4b1e      	ldr	r3, [pc, #120]	; (8011290 <err_tcp+0x194>)
 8011216:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801121a:	4920      	ldr	r1, [pc, #128]	; (801129c <err_tcp+0x1a0>)
 801121c:	481e      	ldr	r0, [pc, #120]	; (8011298 <err_tcp+0x19c>)
 801121e:	f010 f945 	bl	80214ac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011222:	7dfb      	ldrb	r3, [r7, #23]
 8011224:	2b04      	cmp	r3, #4
 8011226:	d104      	bne.n	8011232 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	6a1b      	ldr	r3, [r3, #32]
 801122c:	2200      	movs	r2, #0
 801122e:	711a      	strb	r2, [r3, #4]
 8011230:	e003      	b.n	801123a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	6a1b      	ldr	r3, [r3, #32]
 8011236:	78fa      	ldrb	r2, [r7, #3]
 8011238:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	6a1b      	ldr	r3, [r3, #32]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	330c      	adds	r3, #12
 8011242:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011244:	68b8      	ldr	r0, [r7, #8]
 8011246:	f00f fe69 	bl	8020f1c <sys_sem_valid>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d106      	bne.n	801125e <err_tcp+0x162>
 8011250:	4b0f      	ldr	r3, [pc, #60]	; (8011290 <err_tcp+0x194>)
 8011252:	f240 12ef 	movw	r2, #495	; 0x1ef
 8011256:	4912      	ldr	r1, [pc, #72]	; (80112a0 <err_tcp+0x1a4>)
 8011258:	480f      	ldr	r0, [pc, #60]	; (8011298 <err_tcp+0x19c>)
 801125a:	f010 f927 	bl	80214ac <iprintf>
      conn->current_msg = NULL;
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	2200      	movs	r2, #0
 8011262:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011264:	68b8      	ldr	r0, [r7, #8]
 8011266:	f00f fe3f 	bl	8020ee8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801126a:	e00b      	b.n	8011284 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	6a1b      	ldr	r3, [r3, #32]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d008      	beq.n	8011286 <err_tcp+0x18a>
 8011274:	4b06      	ldr	r3, [pc, #24]	; (8011290 <err_tcp+0x194>)
 8011276:	f240 12f7 	movw	r2, #503	; 0x1f7
 801127a:	490a      	ldr	r1, [pc, #40]	; (80112a4 <err_tcp+0x1a8>)
 801127c:	4806      	ldr	r0, [pc, #24]	; (8011298 <err_tcp+0x19c>)
 801127e:	f010 f915 	bl	80214ac <iprintf>
  }
}
 8011282:	e000      	b.n	8011286 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011284:	bf00      	nop
}
 8011286:	bf00      	nop
 8011288:	3720      	adds	r7, #32
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	08023b0c 	.word	0x08023b0c
 8011294:	08023c64 	.word	0x08023c64
 8011298:	08023b50 	.word	0x08023b50
 801129c:	08023c74 	.word	0x08023c74
 80112a0:	08023c90 	.word	0x08023c90
 80112a4:	08023cac 	.word	0x08023cac

080112a8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80112b6:	6879      	ldr	r1, [r7, #4]
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f005 fe8d 	bl	8016fd8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80112be:	490a      	ldr	r1, [pc, #40]	; (80112e8 <setup_tcp+0x40>)
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f005 fe9b 	bl	8016ffc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80112c6:	4909      	ldr	r1, [pc, #36]	; (80112ec <setup_tcp+0x44>)
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f005 feb9 	bl	8017040 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80112ce:	2202      	movs	r2, #2
 80112d0:	4907      	ldr	r1, [pc, #28]	; (80112f0 <setup_tcp+0x48>)
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	f005 ff10 	bl	80170f8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80112d8:	4906      	ldr	r1, [pc, #24]	; (80112f4 <setup_tcp+0x4c>)
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f005 fed2 	bl	8017084 <tcp_err>
}
 80112e0:	bf00      	nop
 80112e2:	3710      	adds	r7, #16
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	08010e81 	.word	0x08010e81
 80112ec:	08011055 	.word	0x08011055
 80112f0:	08010f8d 	.word	0x08010f8d
 80112f4:	080110fd 	.word	0x080110fd

080112f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80112f8:	b590      	push	{r4, r7, lr}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011300:	2300      	movs	r3, #0
 8011302:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d006      	beq.n	801131c <pcb_new+0x24>
 801130e:	4b2b      	ldr	r3, [pc, #172]	; (80113bc <pcb_new+0xc4>)
 8011310:	f240 2265 	movw	r2, #613	; 0x265
 8011314:	492a      	ldr	r1, [pc, #168]	; (80113c0 <pcb_new+0xc8>)
 8011316:	482b      	ldr	r0, [pc, #172]	; (80113c4 <pcb_new+0xcc>)
 8011318:	f010 f8c8 	bl	80214ac <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011326:	2b10      	cmp	r3, #16
 8011328:	d022      	beq.n	8011370 <pcb_new+0x78>
 801132a:	2b20      	cmp	r3, #32
 801132c:	d133      	bne.n	8011396 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681c      	ldr	r4, [r3, #0]
 8011332:	7bfb      	ldrb	r3, [r7, #15]
 8011334:	4618      	mov	r0, r3
 8011336:	f00b f9aa 	bl	801c68e <udp_new_ip_type>
 801133a:	4603      	mov	r3, r0
 801133c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d02a      	beq.n	801139e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	2b22      	cmp	r3, #34	; 0x22
 8011350:	d104      	bne.n	801135c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	2201      	movs	r2, #1
 801135a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	6858      	ldr	r0, [r3, #4]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	461a      	mov	r2, r3
 8011368:	4917      	ldr	r1, [pc, #92]	; (80113c8 <pcb_new+0xd0>)
 801136a:	f00b f917 	bl	801c59c <udp_recv>
      }
      break;
 801136e:	e016      	b.n	801139e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681c      	ldr	r4, [r3, #0]
 8011374:	7bfb      	ldrb	r3, [r7, #15]
 8011376:	4618      	mov	r0, r3
 8011378:	f005 fe20 	bl	8016fbc <tcp_new_ip_type>
 801137c:	4603      	mov	r3, r0
 801137e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00b      	beq.n	80113a2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff ff8a 	bl	80112a8 <setup_tcp>
      }
      break;
 8011394:	e005      	b.n	80113a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	22fa      	movs	r2, #250	; 0xfa
 801139a:	711a      	strb	r2, [r3, #4]
      return;
 801139c:	e00a      	b.n	80113b4 <pcb_new+0xbc>
      break;
 801139e:	bf00      	nop
 80113a0:	e000      	b.n	80113a4 <pcb_new+0xac>
      break;
 80113a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d102      	bne.n	80113b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	22ff      	movs	r2, #255	; 0xff
 80113b2:	711a      	strb	r2, [r3, #4]
  }
}
 80113b4:	3714      	adds	r7, #20
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd90      	pop	{r4, r7, pc}
 80113ba:	bf00      	nop
 80113bc:	08023b0c 	.word	0x08023b0c
 80113c0:	08023cf0 	.word	0x08023cf0
 80113c4:	08023b50 	.word	0x08023b50
 80113c8:	08010d85 	.word	0x08010d85

080113cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2200      	movs	r2, #0
 80113dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d102      	bne.n	80113ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7ff ff85 	bl	80112f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80113ee:	bf00      	nop
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
	...

080113f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b086      	sub	sp, #24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	4603      	mov	r3, r0
 8011400:	6039      	str	r1, [r7, #0]
 8011402:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011408:	2007      	movs	r0, #7
 801140a:	f002 ff23 	bl	8014254 <memp_malloc>
 801140e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d101      	bne.n	801141a <netconn_alloc+0x22>
    return NULL;
 8011416:	2300      	movs	r3, #0
 8011418:	e052      	b.n	80114c0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	79fa      	ldrb	r2, [r7, #7]
 8011424:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2200      	movs	r2, #0
 801142a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011432:	2b10      	cmp	r3, #16
 8011434:	d004      	beq.n	8011440 <netconn_alloc+0x48>
 8011436:	2b20      	cmp	r3, #32
 8011438:	d105      	bne.n	8011446 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801143a:	2306      	movs	r3, #6
 801143c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801143e:	e00a      	b.n	8011456 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011440:	2306      	movs	r3, #6
 8011442:	617b      	str	r3, [r7, #20]
      break;
 8011444:	e007      	b.n	8011456 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011446:	4b20      	ldr	r3, [pc, #128]	; (80114c8 <netconn_alloc+0xd0>)
 8011448:	f240 22e5 	movw	r2, #741	; 0x2e5
 801144c:	491f      	ldr	r1, [pc, #124]	; (80114cc <netconn_alloc+0xd4>)
 801144e:	4820      	ldr	r0, [pc, #128]	; (80114d0 <netconn_alloc+0xd8>)
 8011450:	f010 f82c 	bl	80214ac <iprintf>
      goto free_and_return;
 8011454:	e02f      	b.n	80114b6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	3310      	adds	r3, #16
 801145a:	6979      	ldr	r1, [r7, #20]
 801145c:	4618      	mov	r0, r3
 801145e:	f00f fc41 	bl	8020ce4 <sys_mbox_new>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d125      	bne.n	80114b4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	330c      	adds	r3, #12
 801146c:	2100      	movs	r1, #0
 801146e:	4618      	mov	r0, r3
 8011470:	f00f fce4 	bl	8020e3c <sys_sem_new>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d005      	beq.n	8011486 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	3310      	adds	r3, #16
 801147e:	4618      	mov	r0, r3
 8011480:	f00f fc4a 	bl	8020d18 <sys_mbox_free>
    goto free_and_return;
 8011484:	e017      	b.n	80114b6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	3314      	adds	r3, #20
 801148a:	4618      	mov	r0, r3
 801148c:	f00f fcc9 	bl	8020e22 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2200      	movs	r2, #0
 8011494:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f04f 32ff 	mov.w	r2, #4294967295
 801149c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2200      	movs	r2, #0
 80114a8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	7cfa      	ldrb	r2, [r7, #19]
 80114ae:	771a      	strb	r2, [r3, #28]
  return conn;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	e005      	b.n	80114c0 <netconn_alloc+0xc8>
    goto free_and_return;
 80114b4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80114b6:	68f9      	ldr	r1, [r7, #12]
 80114b8:	2007      	movs	r0, #7
 80114ba:	f002 ff1d 	bl	80142f8 <memp_free>
  return NULL;
 80114be:	2300      	movs	r3, #0
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3718      	adds	r7, #24
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	08023b0c 	.word	0x08023b0c
 80114cc:	08023d10 	.word	0x08023d10
 80114d0:	08023b50 	.word	0x08023b50

080114d4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d006      	beq.n	80114f2 <netconn_free+0x1e>
 80114e4:	4b1b      	ldr	r3, [pc, #108]	; (8011554 <netconn_free+0x80>)
 80114e6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80114ea:	491b      	ldr	r1, [pc, #108]	; (8011558 <netconn_free+0x84>)
 80114ec:	481b      	ldr	r0, [pc, #108]	; (801155c <netconn_free+0x88>)
 80114ee:	f00f ffdd 	bl	80214ac <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	3310      	adds	r3, #16
 80114f6:	4618      	mov	r0, r3
 80114f8:	f00f fc82 	bl	8020e00 <sys_mbox_valid>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d006      	beq.n	8011510 <netconn_free+0x3c>
 8011502:	4b14      	ldr	r3, [pc, #80]	; (8011554 <netconn_free+0x80>)
 8011504:	f240 3223 	movw	r2, #803	; 0x323
 8011508:	4915      	ldr	r1, [pc, #84]	; (8011560 <netconn_free+0x8c>)
 801150a:	4814      	ldr	r0, [pc, #80]	; (801155c <netconn_free+0x88>)
 801150c:	f00f ffce 	bl	80214ac <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	3314      	adds	r3, #20
 8011514:	4618      	mov	r0, r3
 8011516:	f00f fc73 	bl	8020e00 <sys_mbox_valid>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d006      	beq.n	801152e <netconn_free+0x5a>
 8011520:	4b0c      	ldr	r3, [pc, #48]	; (8011554 <netconn_free+0x80>)
 8011522:	f240 3226 	movw	r2, #806	; 0x326
 8011526:	490f      	ldr	r1, [pc, #60]	; (8011564 <netconn_free+0x90>)
 8011528:	480c      	ldr	r0, [pc, #48]	; (801155c <netconn_free+0x88>)
 801152a:	f00f ffbf 	bl	80214ac <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	330c      	adds	r3, #12
 8011532:	4618      	mov	r0, r3
 8011534:	f00f fce5 	bl	8020f02 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	330c      	adds	r3, #12
 801153c:	4618      	mov	r0, r3
 801153e:	f00f fcfe 	bl	8020f3e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011542:	6879      	ldr	r1, [r7, #4]
 8011544:	2007      	movs	r0, #7
 8011546:	f002 fed7 	bl	80142f8 <memp_free>
}
 801154a:	bf00      	nop
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	08023b0c 	.word	0x08023b0c
 8011558:	08023d38 	.word	0x08023d38
 801155c:	08023b50 	.word	0x08023b50
 8011560:	08023d68 	.word	0x08023d68
 8011564:	08023da4 	.word	0x08023da4

08011568 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	3310      	adds	r3, #16
 8011574:	4618      	mov	r0, r3
 8011576:	f00f fc43 	bl	8020e00 <sys_mbox_valid>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d02f      	beq.n	80115e0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011580:	e018      	b.n	80115b4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801158a:	2b10      	cmp	r3, #16
 801158c:	d10e      	bne.n	80115ac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f107 020f 	add.w	r2, r7, #15
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fbba 	bl	8010d10 <lwip_netconn_is_err_msg>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d108      	bne.n	80115b4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f003 fd57 	bl	8015058 <pbuf_free>
 80115aa:	e003      	b.n	80115b4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 ff72 	bl	8012498 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	3310      	adds	r3, #16
 80115b8:	f107 0210 	add.w	r2, r7, #16
 80115bc:	4611      	mov	r1, r2
 80115be:	4618      	mov	r0, r3
 80115c0:	f00f fc07 	bl	8020dd2 <sys_arch_mbox_tryfetch>
 80115c4:	4603      	mov	r3, r0
 80115c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ca:	d1da      	bne.n	8011582 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	3310      	adds	r3, #16
 80115d0:	4618      	mov	r0, r3
 80115d2:	f00f fba1 	bl	8020d18 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	3310      	adds	r3, #16
 80115da:	4618      	mov	r0, r3
 80115dc:	f00f fc21 	bl	8020e22 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3314      	adds	r3, #20
 80115e4:	4618      	mov	r0, r3
 80115e6:	f00f fc0b 	bl	8020e00 <sys_mbox_valid>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d034      	beq.n	801165a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80115f0:	e01d      	b.n	801162e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	f107 020e 	add.w	r2, r7, #14
 80115f8:	4611      	mov	r1, r2
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff fb88 	bl	8010d10 <lwip_netconn_is_err_msg>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d113      	bne.n	801162e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801160a:	6978      	ldr	r0, [r7, #20]
 801160c:	f7ff ffac 	bl	8011568 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d007      	beq.n	8011628 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	4618      	mov	r0, r3
 801161e:	f004 fc97 	bl	8015f50 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2200      	movs	r2, #0
 8011626:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011628:	6978      	ldr	r0, [r7, #20]
 801162a:	f7ff ff53 	bl	80114d4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	3314      	adds	r3, #20
 8011632:	f107 0210 	add.w	r2, r7, #16
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f00f fbca 	bl	8020dd2 <sys_arch_mbox_tryfetch>
 801163e:	4603      	mov	r3, r0
 8011640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011644:	d1d5      	bne.n	80115f2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	3314      	adds	r3, #20
 801164a:	4618      	mov	r0, r3
 801164c:	f00f fb64 	bl	8020d18 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	3314      	adds	r3, #20
 8011654:	4618      	mov	r0, r3
 8011656:	f00f fbe4 	bl	8020e22 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801165a:	bf00      	nop
 801165c:	3718      	adds	r7, #24
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
	...

08011664 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b086      	sub	sp, #24
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011670:	2300      	movs	r3, #0
 8011672:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d106      	bne.n	8011688 <lwip_netconn_do_close_internal+0x24>
 801167a:	4ba1      	ldr	r3, [pc, #644]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 801167c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8011680:	49a0      	ldr	r1, [pc, #640]	; (8011904 <lwip_netconn_do_close_internal+0x2a0>)
 8011682:	48a1      	ldr	r0, [pc, #644]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 8011684:	f00f ff12 	bl	80214ac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011690:	2b10      	cmp	r3, #16
 8011692:	d006      	beq.n	80116a2 <lwip_netconn_do_close_internal+0x3e>
 8011694:	4b9a      	ldr	r3, [pc, #616]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 8011696:	f240 32a3 	movw	r2, #931	; 0x3a3
 801169a:	499c      	ldr	r1, [pc, #624]	; (801190c <lwip_netconn_do_close_internal+0x2a8>)
 801169c:	489a      	ldr	r0, [pc, #616]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 801169e:	f00f ff05 	bl	80214ac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	785b      	ldrb	r3, [r3, #1]
 80116a6:	2b04      	cmp	r3, #4
 80116a8:	d006      	beq.n	80116b8 <lwip_netconn_do_close_internal+0x54>
 80116aa:	4b95      	ldr	r3, [pc, #596]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 80116ac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80116b0:	4997      	ldr	r1, [pc, #604]	; (8011910 <lwip_netconn_do_close_internal+0x2ac>)
 80116b2:	4895      	ldr	r0, [pc, #596]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 80116b4:	f00f fefa 	bl	80214ac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d106      	bne.n	80116ce <lwip_netconn_do_close_internal+0x6a>
 80116c0:	4b8f      	ldr	r3, [pc, #572]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 80116c2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80116c6:	4993      	ldr	r1, [pc, #588]	; (8011914 <lwip_netconn_do_close_internal+0x2b0>)
 80116c8:	488f      	ldr	r0, [pc, #572]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 80116ca:	f00f feef 	bl	80214ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <lwip_netconn_do_close_internal+0x80>
 80116d6:	4b8a      	ldr	r3, [pc, #552]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 80116d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80116dc:	498e      	ldr	r1, [pc, #568]	; (8011918 <lwip_netconn_do_close_internal+0x2b4>)
 80116de:	488a      	ldr	r0, [pc, #552]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 80116e0:	f00f fee4 	bl	80214ac <iprintf>

  tpcb = conn->pcb.tcp;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6a1b      	ldr	r3, [r3, #32]
 80116ee:	7a1b      	ldrb	r3, [r3, #8]
 80116f0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
 80116f4:	f003 0301 	and.w	r3, r3, #1
 80116f8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80116fa:	7bfb      	ldrb	r3, [r7, #15]
 80116fc:	f003 0302 	and.w	r3, r3, #2
 8011700:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011702:	7bfb      	ldrb	r3, [r7, #15]
 8011704:	2b03      	cmp	r3, #3
 8011706:	d102      	bne.n	801170e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011708:	2301      	movs	r3, #1
 801170a:	75bb      	strb	r3, [r7, #22]
 801170c:	e01f      	b.n	801174e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801170e:	7bbb      	ldrb	r3, [r7, #14]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00e      	beq.n	8011732 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011718:	2b05      	cmp	r3, #5
 801171a:	d007      	beq.n	801172c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011720:	2b06      	cmp	r3, #6
 8011722:	d003      	beq.n	801172c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011728:	2b08      	cmp	r3, #8
 801172a:	d102      	bne.n	8011732 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 801172c:	2301      	movs	r3, #1
 801172e:	75bb      	strb	r3, [r7, #22]
 8011730:	e00d      	b.n	801174e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011732:	7b7b      	ldrb	r3, [r7, #13]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d008      	beq.n	801174a <lwip_netconn_do_close_internal+0xe6>
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	8b5b      	ldrh	r3, [r3, #26]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b00      	cmp	r3, #0
 8011742:	d002      	beq.n	801174a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011744:	2301      	movs	r3, #1
 8011746:	75bb      	strb	r3, [r7, #22]
 8011748:	e001      	b.n	801174e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801174e:	7dbb      	ldrb	r3, [r7, #22]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d003      	beq.n	801175c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011754:	2100      	movs	r1, #0
 8011756:	6938      	ldr	r0, [r7, #16]
 8011758:	f005 fc3e 	bl	8016fd8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	7d1b      	ldrb	r3, [r3, #20]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d104      	bne.n	801176e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011764:	2100      	movs	r1, #0
 8011766:	6938      	ldr	r0, [r7, #16]
 8011768:	f005 fcae 	bl	80170c8 <tcp_accept>
 801176c:	e01d      	b.n	80117aa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801176e:	7bbb      	ldrb	r3, [r7, #14]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d007      	beq.n	8011784 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011774:	2100      	movs	r1, #0
 8011776:	6938      	ldr	r0, [r7, #16]
 8011778:	f005 fc40 	bl	8016ffc <tcp_recv>
      tcp_accept(tpcb, NULL);
 801177c:	2100      	movs	r1, #0
 801177e:	6938      	ldr	r0, [r7, #16]
 8011780:	f005 fca2 	bl	80170c8 <tcp_accept>
    }
    if (shut_tx) {
 8011784:	7b7b      	ldrb	r3, [r7, #13]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801178a:	2100      	movs	r1, #0
 801178c:	6938      	ldr	r0, [r7, #16]
 801178e:	f005 fc57 	bl	8017040 <tcp_sent>
    }
    if (shut_close) {
 8011792:	7dbb      	ldrb	r3, [r7, #22]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d008      	beq.n	80117aa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011798:	2200      	movs	r2, #0
 801179a:	2100      	movs	r1, #0
 801179c:	6938      	ldr	r0, [r7, #16]
 801179e:	f005 fcab 	bl	80170f8 <tcp_poll>
      tcp_err(tpcb, NULL);
 80117a2:	2100      	movs	r1, #0
 80117a4:	6938      	ldr	r0, [r7, #16]
 80117a6:	f005 fc6d 	bl	8017084 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80117aa:	7dbb      	ldrb	r3, [r7, #22]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d005      	beq.n	80117bc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80117b0:	6938      	ldr	r0, [r7, #16]
 80117b2:	f004 fa87 	bl	8015cc4 <tcp_close>
 80117b6:	4603      	mov	r3, r0
 80117b8:	75fb      	strb	r3, [r7, #23]
 80117ba:	e007      	b.n	80117cc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80117bc:	7bbb      	ldrb	r3, [r7, #14]
 80117be:	7b7a      	ldrb	r2, [r7, #13]
 80117c0:	4619      	mov	r1, r3
 80117c2:	6938      	ldr	r0, [r7, #16]
 80117c4:	f004 faaa 	bl	8015d1c <tcp_shutdown>
 80117c8:	4603      	mov	r3, r0
 80117ca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80117cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d102      	bne.n	80117da <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80117d4:	2301      	movs	r3, #1
 80117d6:	757b      	strb	r3, [r7, #21]
 80117d8:	e016      	b.n	8011808 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80117da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e2:	d10f      	bne.n	8011804 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6a1b      	ldr	r3, [r3, #32]
 80117e8:	7a5b      	ldrb	r3, [r3, #9]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d10c      	bne.n	8011808 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80117ee:	2301      	movs	r3, #1
 80117f0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80117f2:	7dbb      	ldrb	r3, [r7, #22]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d007      	beq.n	8011808 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80117f8:	6938      	ldr	r0, [r7, #16]
 80117fa:	f004 fba9 	bl	8015f50 <tcp_abort>
          err = ERR_OK;
 80117fe:	2300      	movs	r3, #0
 8011800:	75fb      	strb	r3, [r7, #23]
 8011802:	e001      	b.n	8011808 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011804:	2301      	movs	r3, #1
 8011806:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011808:	7d7b      	ldrb	r3, [r7, #21]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d044      	beq.n	8011898 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6a1b      	ldr	r3, [r3, #32]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	330c      	adds	r3, #12
 8011816:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a1b      	ldr	r3, [r3, #32]
 801181c:	7dfa      	ldrb	r2, [r7, #23]
 801181e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 801182c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d129      	bne.n	8011888 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011834:	7dbb      	ldrb	r3, [r7, #22]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d00c      	beq.n	8011854 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011844:	2b00      	cmp	r3, #0
 8011846:	d005      	beq.n	8011854 <lwip_netconn_do_close_internal+0x1f0>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801184c:	2200      	movs	r2, #0
 801184e:	2104      	movs	r1, #4
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	4798      	blx	r3
      }
      if (shut_rx) {
 8011854:	7bbb      	ldrb	r3, [r7, #14]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d009      	beq.n	801186e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185e:	2b00      	cmp	r3, #0
 8011860:	d005      	beq.n	801186e <lwip_netconn_do_close_internal+0x20a>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011866:	2200      	movs	r2, #0
 8011868:	2100      	movs	r1, #0
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	4798      	blx	r3
      }
      if (shut_tx) {
 801186e:	7b7b      	ldrb	r3, [r7, #13]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d009      	beq.n	8011888 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011878:	2b00      	cmp	r3, #0
 801187a:	d005      	beq.n	8011888 <lwip_netconn_do_close_internal+0x224>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011880:	2200      	movs	r2, #0
 8011882:	2102      	movs	r1, #2
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011888:	78fb      	ldrb	r3, [r7, #3]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d002      	beq.n	8011894 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801188e:	68b8      	ldr	r0, [r7, #8]
 8011890:	f00f fb2a 	bl	8020ee8 <sys_sem_signal>
    }
    return ERR_OK;
 8011894:	2300      	movs	r3, #0
 8011896:	e02e      	b.n	80118f6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8011898:	7d7b      	ldrb	r3, [r7, #21]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d11e      	bne.n	80118dc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	7d1b      	ldrb	r3, [r3, #20]
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d106      	bne.n	80118b4 <lwip_netconn_do_close_internal+0x250>
 80118a6:	4b16      	ldr	r3, [pc, #88]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 80118a8:	f240 4241 	movw	r2, #1089	; 0x441
 80118ac:	491b      	ldr	r1, [pc, #108]	; (801191c <lwip_netconn_do_close_internal+0x2b8>)
 80118ae:	4816      	ldr	r0, [pc, #88]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 80118b0:	f00f fdfc 	bl	80214ac <iprintf>
    if (shut_tx) {
 80118b4:	7b7b      	ldrb	r3, [r7, #13]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d003      	beq.n	80118c2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80118ba:	4919      	ldr	r1, [pc, #100]	; (8011920 <lwip_netconn_do_close_internal+0x2bc>)
 80118bc:	6938      	ldr	r0, [r7, #16]
 80118be:	f005 fbbf 	bl	8017040 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80118c2:	2201      	movs	r2, #1
 80118c4:	4917      	ldr	r1, [pc, #92]	; (8011924 <lwip_netconn_do_close_internal+0x2c0>)
 80118c6:	6938      	ldr	r0, [r7, #16]
 80118c8:	f005 fc16 	bl	80170f8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80118cc:	4916      	ldr	r1, [pc, #88]	; (8011928 <lwip_netconn_do_close_internal+0x2c4>)
 80118ce:	6938      	ldr	r0, [r7, #16]
 80118d0:	f005 fbd8 	bl	8017084 <tcp_err>
    tcp_arg(tpcb, conn);
 80118d4:	6879      	ldr	r1, [r7, #4]
 80118d6:	6938      	ldr	r0, [r7, #16]
 80118d8:	f005 fb7e 	bl	8016fd8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80118dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d106      	bne.n	80118f2 <lwip_netconn_do_close_internal+0x28e>
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <lwip_netconn_do_close_internal+0x29c>)
 80118e6:	f240 424d 	movw	r2, #1101	; 0x44d
 80118ea:	4910      	ldr	r1, [pc, #64]	; (801192c <lwip_netconn_do_close_internal+0x2c8>)
 80118ec:	4806      	ldr	r0, [pc, #24]	; (8011908 <lwip_netconn_do_close_internal+0x2a4>)
 80118ee:	f00f fddd 	bl	80214ac <iprintf>
  return err;
 80118f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3718      	adds	r7, #24
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	08023b0c 	.word	0x08023b0c
 8011904:	08023de0 	.word	0x08023de0
 8011908:	08023b50 	.word	0x08023b50
 801190c:	08023df0 	.word	0x08023df0
 8011910:	08023e10 	.word	0x08023e10
 8011914:	08023e34 	.word	0x08023e34
 8011918:	08023c74 	.word	0x08023c74
 801191c:	08023e48 	.word	0x08023e48
 8011920:	08011055 	.word	0x08011055
 8011924:	08010f8d 	.word	0x08010f8d
 8011928:	080110fd 	.word	0x080110fd
 801192c:	08023e6c 	.word	0x08023e6c

08011930 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	785b      	ldrb	r3, [r3, #1]
 8011942:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011944:	7afb      	ldrb	r3, [r7, #11]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00d      	beq.n	8011966 <lwip_netconn_do_delconn+0x36>
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011954:	2b10      	cmp	r3, #16
 8011956:	d006      	beq.n	8011966 <lwip_netconn_do_delconn+0x36>
 8011958:	4b60      	ldr	r3, [pc, #384]	; (8011adc <lwip_netconn_do_delconn+0x1ac>)
 801195a:	f240 425e 	movw	r2, #1118	; 0x45e
 801195e:	4960      	ldr	r1, [pc, #384]	; (8011ae0 <lwip_netconn_do_delconn+0x1b0>)
 8011960:	4860      	ldr	r0, [pc, #384]	; (8011ae4 <lwip_netconn_do_delconn+0x1b4>)
 8011962:	f00f fda3 	bl	80214ac <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011966:	7afb      	ldrb	r3, [r7, #11]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d005      	beq.n	8011978 <lwip_netconn_do_delconn+0x48>
 801196c:	7afb      	ldrb	r3, [r7, #11]
 801196e:	2b02      	cmp	r3, #2
 8011970:	d002      	beq.n	8011978 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011972:	7afb      	ldrb	r3, [r7, #11]
 8011974:	2b03      	cmp	r3, #3
 8011976:	d109      	bne.n	801198c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011978:	7afb      	ldrb	r3, [r7, #11]
 801197a:	2b03      	cmp	r3, #3
 801197c:	d10a      	bne.n	8011994 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	7f1b      	ldrb	r3, [r3, #28]
 8011984:	f003 0304 	and.w	r3, r3, #4
 8011988:	2b00      	cmp	r3, #0
 801198a:	d103      	bne.n	8011994 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	22fb      	movs	r2, #251	; 0xfb
 8011990:	711a      	strb	r2, [r3, #4]
 8011992:	e097      	b.n	8011ac4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011994:	7afb      	ldrb	r3, [r7, #11]
 8011996:	2b03      	cmp	r3, #3
 8011998:	d10d      	bne.n	80119b6 <lwip_netconn_do_delconn+0x86>
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	7f1b      	ldrb	r3, [r3, #28]
 80119a0:	f003 0304 	and.w	r3, r3, #4
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <lwip_netconn_do_delconn+0x86>
 80119a8:	4b4c      	ldr	r3, [pc, #304]	; (8011adc <lwip_netconn_do_delconn+0x1ac>)
 80119aa:	f240 427a 	movw	r2, #1146	; 0x47a
 80119ae:	494e      	ldr	r1, [pc, #312]	; (8011ae8 <lwip_netconn_do_delconn+0x1b8>)
 80119b0:	484c      	ldr	r0, [pc, #304]	; (8011ae4 <lwip_netconn_do_delconn+0x1b4>)
 80119b2:	f00f fd7b 	bl	80214ac <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2200      	movs	r2, #0
 80119ba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff fdd1 	bl	8011568 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d05f      	beq.n	8011a90 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119da:	2b10      	cmp	r3, #16
 80119dc:	d00d      	beq.n	80119fa <lwip_netconn_do_delconn+0xca>
 80119de:	2b20      	cmp	r3, #32
 80119e0:	d151      	bne.n	8011a86 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f00a fdf2 	bl	801c5dc <udp_remove>
          break;
 80119f8:	e046      	b.n	8011a88 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	6a1b      	ldr	r3, [r3, #32]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d006      	beq.n	8011a12 <lwip_netconn_do_delconn+0xe2>
 8011a04:	4b35      	ldr	r3, [pc, #212]	; (8011adc <lwip_netconn_do_delconn+0x1ac>)
 8011a06:	f240 4294 	movw	r2, #1172	; 0x494
 8011a0a:	4938      	ldr	r1, [pc, #224]	; (8011aec <lwip_netconn_do_delconn+0x1bc>)
 8011a0c:	4835      	ldr	r0, [pc, #212]	; (8011ae4 <lwip_netconn_do_delconn+0x1b4>)
 8011a0e:	f00f fd4d 	bl	80214ac <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2204      	movs	r2, #4
 8011a18:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2203      	movs	r2, #3
 8011a1e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7ff fe18 	bl	8011664 <lwip_netconn_do_close_internal>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d04b      	beq.n	8011ad2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	785b      	ldrb	r3, [r3, #1]
 8011a40:	2b04      	cmp	r3, #4
 8011a42:	d006      	beq.n	8011a52 <lwip_netconn_do_delconn+0x122>
 8011a44:	4b25      	ldr	r3, [pc, #148]	; (8011adc <lwip_netconn_do_delconn+0x1ac>)
 8011a46:	f240 429a 	movw	r2, #1178	; 0x49a
 8011a4a:	4929      	ldr	r1, [pc, #164]	; (8011af0 <lwip_netconn_do_delconn+0x1c0>)
 8011a4c:	4825      	ldr	r0, [pc, #148]	; (8011ae4 <lwip_netconn_do_delconn+0x1b4>)
 8011a4e:	f00f fd2d 	bl	80214ac <iprintf>
            UNLOCK_TCPIP_CORE();
 8011a52:	4828      	ldr	r0, [pc, #160]	; (8011af4 <lwip_netconn_do_delconn+0x1c4>)
 8011a54:	f00f fab1 	bl	8020fba <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	330c      	adds	r3, #12
 8011a5e:	2100      	movs	r1, #0
 8011a60:	4618      	mov	r0, r3
 8011a62:	f00f fa10 	bl	8020e86 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011a66:	4823      	ldr	r0, [pc, #140]	; (8011af4 <lwip_netconn_do_delconn+0x1c4>)
 8011a68:	f00f fa98 	bl	8020f9c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	785b      	ldrb	r3, [r3, #1]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d02d      	beq.n	8011ad2 <lwip_netconn_do_delconn+0x1a2>
 8011a76:	4b19      	ldr	r3, [pc, #100]	; (8011adc <lwip_netconn_do_delconn+0x1ac>)
 8011a78:	f240 429e 	movw	r2, #1182	; 0x49e
 8011a7c:	491c      	ldr	r1, [pc, #112]	; (8011af0 <lwip_netconn_do_delconn+0x1c0>)
 8011a7e:	4819      	ldr	r0, [pc, #100]	; (8011ae4 <lwip_netconn_do_delconn+0x1b4>)
 8011a80:	f00f fd14 	bl	80214ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8011a84:	e025      	b.n	8011ad2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8011a86:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d007      	beq.n	8011aaa <lwip_netconn_do_delconn+0x17a>
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa0:	68fa      	ldr	r2, [r7, #12]
 8011aa2:	6810      	ldr	r0, [r2, #0]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d007      	beq.n	8011ac4 <lwip_netconn_do_delconn+0x194>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	6810      	ldr	r0, [r2, #0]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	2102      	movs	r1, #2
 8011ac2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	330c      	adds	r3, #12
 8011aca:	4618      	mov	r0, r3
 8011acc:	f00f fa26 	bl	8020f1c <sys_sem_valid>
 8011ad0:	e000      	b.n	8011ad4 <lwip_netconn_do_delconn+0x1a4>
          return;
 8011ad2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	08023b0c 	.word	0x08023b0c
 8011ae0:	08023e7c 	.word	0x08023e7c
 8011ae4:	08023b50 	.word	0x08023b50
 8011ae8:	08023e90 	.word	0x08023e90
 8011aec:	08023eb0 	.word	0x08023eb0
 8011af0:	08023ecc 	.word	0x08023ecc
 8011af4:	20013468 	.word	0x20013468

08011af8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b088      	sub	sp, #32
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	4613      	mov	r3, r2
 8011b04:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d102      	bne.n	8011b1a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8011b14:	f06f 0305 	mvn.w	r3, #5
 8011b18:	e070      	b.n	8011bfc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	785b      	ldrb	r3, [r3, #1]
 8011b1e:	2b03      	cmp	r3, #3
 8011b20:	d006      	beq.n	8011b30 <lwip_netconn_do_connected+0x38>
 8011b22:	4b38      	ldr	r3, [pc, #224]	; (8011c04 <lwip_netconn_do_connected+0x10c>)
 8011b24:	f240 5223 	movw	r2, #1315	; 0x523
 8011b28:	4937      	ldr	r1, [pc, #220]	; (8011c08 <lwip_netconn_do_connected+0x110>)
 8011b2a:	4838      	ldr	r0, [pc, #224]	; (8011c0c <lwip_netconn_do_connected+0x114>)
 8011b2c:	f00f fcbe 	bl	80214ac <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	6a1b      	ldr	r3, [r3, #32]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10c      	bne.n	8011b52 <lwip_netconn_do_connected+0x5a>
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	7f1b      	ldrb	r3, [r3, #28]
 8011b3c:	f003 0304 	and.w	r3, r3, #4
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d106      	bne.n	8011b52 <lwip_netconn_do_connected+0x5a>
 8011b44:	4b2f      	ldr	r3, [pc, #188]	; (8011c04 <lwip_netconn_do_connected+0x10c>)
 8011b46:	f240 5224 	movw	r2, #1316	; 0x524
 8011b4a:	4931      	ldr	r1, [pc, #196]	; (8011c10 <lwip_netconn_do_connected+0x118>)
 8011b4c:	482f      	ldr	r0, [pc, #188]	; (8011c0c <lwip_netconn_do_connected+0x114>)
 8011b4e:	f00f fcad 	bl	80214ac <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d008      	beq.n	8011b6c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	6a1b      	ldr	r3, [r3, #32]
 8011b5e:	79fa      	ldrb	r2, [r7, #7]
 8011b60:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	6a1b      	ldr	r3, [r3, #32]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	330c      	adds	r3, #12
 8011b6a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b74:	2b10      	cmp	r3, #16
 8011b76:	d106      	bne.n	8011b86 <lwip_netconn_do_connected+0x8e>
 8011b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d102      	bne.n	8011b86 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8011b80:	69b8      	ldr	r0, [r7, #24]
 8011b82:	f7ff fb91 	bl	80112a8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	7f1b      	ldrb	r3, [r3, #28]
 8011b8a:	f003 0304 	and.w	r3, r3, #4
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	bf0c      	ite	eq
 8011b92:	2301      	moveq	r3, #1
 8011b94:	2300      	movne	r3, #0
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	7f1b      	ldrb	r3, [r3, #28]
 8011b9e:	f023 0304 	bic.w	r3, r3, #4
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d002      	beq.n	8011bb4 <lwip_netconn_do_connected+0xbc>
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10c      	bne.n	8011bce <lwip_netconn_do_connected+0xd6>
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d102      	bne.n	8011bc0 <lwip_netconn_do_connected+0xc8>
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d006      	beq.n	8011bce <lwip_netconn_do_connected+0xd6>
 8011bc0:	4b10      	ldr	r3, [pc, #64]	; (8011c04 <lwip_netconn_do_connected+0x10c>)
 8011bc2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8011bc6:	4913      	ldr	r1, [pc, #76]	; (8011c14 <lwip_netconn_do_connected+0x11c>)
 8011bc8:	4810      	ldr	r0, [pc, #64]	; (8011c0c <lwip_netconn_do_connected+0x114>)
 8011bca:	f00f fc6f 	bl	80214ac <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d005      	beq.n	8011bee <lwip_netconn_do_connected+0xf6>
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be6:	2200      	movs	r2, #0
 8011be8:	2102      	movs	r1, #2
 8011bea:	69b8      	ldr	r0, [r7, #24]
 8011bec:	4798      	blx	r3

  if (was_blocking) {
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d002      	beq.n	8011bfa <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8011bf4:	69f8      	ldr	r0, [r7, #28]
 8011bf6:	f00f f977 	bl	8020ee8 <sys_sem_signal>
  }
  return ERR_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3720      	adds	r7, #32
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	08023b0c 	.word	0x08023b0c
 8011c08:	08023ed4 	.word	0x08023ed4
 8011c0c:	08023b50 	.word	0x08023b50
 8011c10:	08023ef4 	.word	0x08023ef4
 8011c14:	08023f34 	.word	0x08023f34

08011c18 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b086      	sub	sp, #24
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d102      	bne.n	8011c34 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8011c2e:	23f1      	movs	r3, #241	; 0xf1
 8011c30:	75fb      	strb	r3, [r7, #23]
 8011c32:	e09b      	b.n	8011d6c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c3e:	2b10      	cmp	r3, #16
 8011c40:	d00f      	beq.n	8011c62 <lwip_netconn_do_connect+0x4a>
 8011c42:	2b20      	cmp	r3, #32
 8011c44:	f040 8087 	bne.w	8011d56 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	6858      	ldr	r0, [r3, #4]
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	6899      	ldr	r1, [r3, #8]
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	899b      	ldrh	r3, [r3, #12]
 8011c56:	461a      	mov	r2, r3
 8011c58:	f00a fc0a 	bl	801c470 <udp_connect>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	75fb      	strb	r3, [r7, #23]
        break;
 8011c60:	e084      	b.n	8011d6c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	785b      	ldrb	r3, [r3, #1]
 8011c68:	2b03      	cmp	r3, #3
 8011c6a:	d102      	bne.n	8011c72 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8011c6c:	23f7      	movs	r3, #247	; 0xf7
 8011c6e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8011c70:	e07b      	b.n	8011d6a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	785b      	ldrb	r3, [r3, #1]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8011c7c:	23f6      	movs	r3, #246	; 0xf6
 8011c7e:	75fb      	strb	r3, [r7, #23]
        break;
 8011c80:	e073      	b.n	8011d6a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7ff fb0e 	bl	80112a8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6858      	ldr	r0, [r3, #4]
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	6899      	ldr	r1, [r3, #8]
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	899a      	ldrh	r2, [r3, #12]
 8011c9a:	4b38      	ldr	r3, [pc, #224]	; (8011d7c <lwip_netconn_do_connect+0x164>)
 8011c9c:	f004 fa54 	bl	8016148 <tcp_connect>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8011ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d15e      	bne.n	8011d6a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	7f1b      	ldrb	r3, [r3, #28]
 8011cb2:	f003 0302 	and.w	r3, r3, #2
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	bf14      	ite	ne
 8011cba:	2301      	movne	r3, #1
 8011cbc:	2300      	moveq	r3, #0
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2203      	movs	r2, #3
 8011cc8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8011cca:	7bfb      	ldrb	r3, [r7, #15]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d009      	beq.n	8011ce4 <lwip_netconn_do_connect+0xcc>
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	7f1a      	ldrb	r2, [r3, #28]
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f042 0204 	orr.w	r2, r2, #4
 8011cde:	b2d2      	uxtb	r2, r2
 8011ce0:	771a      	strb	r2, [r3, #28]
 8011ce2:	e008      	b.n	8011cf6 <lwip_netconn_do_connect+0xde>
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	7f1a      	ldrb	r2, [r3, #28]
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f022 0204 	bic.w	r2, r2, #4
 8011cf2:	b2d2      	uxtb	r2, r2
 8011cf4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8011cf6:	7bfb      	ldrb	r3, [r7, #15]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d002      	beq.n	8011d02 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8011cfc:	23fb      	movs	r3, #251	; 0xfb
 8011cfe:	75fb      	strb	r3, [r7, #23]
        break;
 8011d00:	e033      	b.n	8011d6a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	693a      	ldr	r2, [r7, #16]
 8011d08:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	785b      	ldrb	r3, [r3, #1]
 8011d10:	2b03      	cmp	r3, #3
 8011d12:	d006      	beq.n	8011d22 <lwip_netconn_do_connect+0x10a>
 8011d14:	4b1a      	ldr	r3, [pc, #104]	; (8011d80 <lwip_netconn_do_connect+0x168>)
 8011d16:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8011d1a:	491a      	ldr	r1, [pc, #104]	; (8011d84 <lwip_netconn_do_connect+0x16c>)
 8011d1c:	481a      	ldr	r0, [pc, #104]	; (8011d88 <lwip_netconn_do_connect+0x170>)
 8011d1e:	f00f fbc5 	bl	80214ac <iprintf>
              UNLOCK_TCPIP_CORE();
 8011d22:	481a      	ldr	r0, [pc, #104]	; (8011d8c <lwip_netconn_do_connect+0x174>)
 8011d24:	f00f f949 	bl	8020fba <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	330c      	adds	r3, #12
 8011d2e:	2100      	movs	r1, #0
 8011d30:	4618      	mov	r0, r3
 8011d32:	f00f f8a8 	bl	8020e86 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8011d36:	4815      	ldr	r0, [pc, #84]	; (8011d8c <lwip_netconn_do_connect+0x174>)
 8011d38:	f00f f930 	bl	8020f9c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	785b      	ldrb	r3, [r3, #1]
 8011d42:	2b03      	cmp	r3, #3
 8011d44:	d116      	bne.n	8011d74 <lwip_netconn_do_connect+0x15c>
 8011d46:	4b0e      	ldr	r3, [pc, #56]	; (8011d80 <lwip_netconn_do_connect+0x168>)
 8011d48:	f240 5274 	movw	r2, #1396	; 0x574
 8011d4c:	490d      	ldr	r1, [pc, #52]	; (8011d84 <lwip_netconn_do_connect+0x16c>)
 8011d4e:	480e      	ldr	r0, [pc, #56]	; (8011d88 <lwip_netconn_do_connect+0x170>)
 8011d50:	f00f fbac 	bl	80214ac <iprintf>
              return;
 8011d54:	e00e      	b.n	8011d74 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8011d56:	4b0a      	ldr	r3, [pc, #40]	; (8011d80 <lwip_netconn_do_connect+0x168>)
 8011d58:	f240 527d 	movw	r2, #1405	; 0x57d
 8011d5c:	490c      	ldr	r1, [pc, #48]	; (8011d90 <lwip_netconn_do_connect+0x178>)
 8011d5e:	480a      	ldr	r0, [pc, #40]	; (8011d88 <lwip_netconn_do_connect+0x170>)
 8011d60:	f00f fba4 	bl	80214ac <iprintf>
 8011d64:	23fa      	movs	r3, #250	; 0xfa
 8011d66:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8011d68:	e000      	b.n	8011d6c <lwip_netconn_do_connect+0x154>
        break;
 8011d6a:	bf00      	nop
    }
  }
  msg->err = err;
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	7dfa      	ldrb	r2, [r7, #23]
 8011d70:	711a      	strb	r2, [r3, #4]
 8011d72:	e000      	b.n	8011d76 <lwip_netconn_do_connect+0x15e>
              return;
 8011d74:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8011d76:	3718      	adds	r7, #24
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	08011af9 	.word	0x08011af9
 8011d80:	08023b0c 	.word	0x08023b0c
 8011d84:	08023ecc 	.word	0x08023ecc
 8011d88:	08023b50 	.word	0x08023b50
 8011d8c:	20013468 	.word	0x20013468
 8011d90:	08023f54 	.word	0x08023f54

08011d94 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	2200      	movs	r2, #0
 8011da4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d022      	beq.n	8011df6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dba:	2b10      	cmp	r3, #16
 8011dbc:	d11b      	bne.n	8011df6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011dca:	d202      	bcs.n	8011dd2 <lwip_netconn_do_recv+0x3e>
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	e001      	b.n	8011dd6 <lwip_netconn_do_recv+0x42>
 8011dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dd6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	89fa      	ldrh	r2, [r7, #14]
 8011de0:	4611      	mov	r1, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f004 f91a 	bl	801601c <tcp_recved>
        remaining -= recved;
 8011de8:	89fb      	ldrh	r3, [r7, #14]
 8011dea:	697a      	ldr	r2, [r7, #20]
 8011dec:	1ad3      	subs	r3, r2, r3
 8011dee:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1e6      	bne.n	8011dc4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011df6:	bf00      	nop
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
	...

08011e00 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b088      	sub	sp, #32
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	460b      	mov	r3, r1
 8011e0a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d106      	bne.n	8011e24 <lwip_netconn_do_writemore+0x24>
 8011e16:	4b96      	ldr	r3, [pc, #600]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011e18:	f240 6273 	movw	r2, #1651	; 0x673
 8011e1c:	4995      	ldr	r1, [pc, #596]	; (8012074 <lwip_netconn_do_writemore+0x274>)
 8011e1e:	4896      	ldr	r0, [pc, #600]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011e20:	f00f fb44 	bl	80214ac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	785b      	ldrb	r3, [r3, #1]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d006      	beq.n	8011e3a <lwip_netconn_do_writemore+0x3a>
 8011e2c:	4b90      	ldr	r3, [pc, #576]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011e2e:	f240 6274 	movw	r2, #1652	; 0x674
 8011e32:	4992      	ldr	r1, [pc, #584]	; (801207c <lwip_netconn_do_writemore+0x27c>)
 8011e34:	4890      	ldr	r0, [pc, #576]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011e36:	f00f fb39 	bl	80214ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6a1b      	ldr	r3, [r3, #32]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d106      	bne.n	8011e50 <lwip_netconn_do_writemore+0x50>
 8011e42:	4b8b      	ldr	r3, [pc, #556]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011e44:	f240 6275 	movw	r2, #1653	; 0x675
 8011e48:	498d      	ldr	r1, [pc, #564]	; (8012080 <lwip_netconn_do_writemore+0x280>)
 8011e4a:	488b      	ldr	r0, [pc, #556]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011e4c:	f00f fb2e 	bl	80214ac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d106      	bne.n	8011e66 <lwip_netconn_do_writemore+0x66>
 8011e58:	4b85      	ldr	r3, [pc, #532]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011e5a:	f240 6276 	movw	r2, #1654	; 0x676
 8011e5e:	4989      	ldr	r1, [pc, #548]	; (8012084 <lwip_netconn_do_writemore+0x284>)
 8011e60:	4885      	ldr	r0, [pc, #532]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011e62:	f00f fb23 	bl	80214ac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6a1b      	ldr	r3, [r3, #32]
 8011e6a:	699a      	ldr	r2, [r3, #24]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6a1b      	ldr	r3, [r3, #32]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d306      	bcc.n	8011e84 <lwip_netconn_do_writemore+0x84>
 8011e76:	4b7e      	ldr	r3, [pc, #504]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011e78:	f240 6277 	movw	r2, #1655	; 0x677
 8011e7c:	4982      	ldr	r1, [pc, #520]	; (8012088 <lwip_netconn_do_writemore+0x288>)
 8011e7e:	487e      	ldr	r0, [pc, #504]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011e80:	f00f fb14 	bl	80214ac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a1b      	ldr	r3, [r3, #32]
 8011e88:	899b      	ldrh	r3, [r3, #12]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d106      	bne.n	8011e9c <lwip_netconn_do_writemore+0x9c>
 8011e8e:	4b78      	ldr	r3, [pc, #480]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011e90:	f240 6279 	movw	r2, #1657	; 0x679
 8011e94:	497d      	ldr	r1, [pc, #500]	; (801208c <lwip_netconn_do_writemore+0x28c>)
 8011e96:	4878      	ldr	r0, [pc, #480]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011e98:	f00f fb08 	bl	80214ac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6a1b      	ldr	r3, [r3, #32]
 8011ea0:	7f1b      	ldrb	r3, [r3, #28]
 8011ea2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	7f1b      	ldrb	r3, [r3, #28]
 8011ea8:	f003 0302 	and.w	r3, r3, #2
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d104      	bne.n	8011eba <lwip_netconn_do_writemore+0xba>
 8011eb0:	7ebb      	ldrb	r3, [r7, #26]
 8011eb2:	f003 0304 	and.w	r3, r3, #4
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <lwip_netconn_do_writemore+0xbe>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e000      	b.n	8011ec0 <lwip_netconn_do_writemore+0xc0>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6a1b      	ldr	r3, [r3, #32]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	691b      	ldr	r3, [r3, #16]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6a1b      	ldr	r3, [r3, #32]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	685a      	ldr	r2, [r3, #4]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6a1b      	ldr	r3, [r3, #32]
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011eec:	d307      	bcc.n	8011efe <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8011eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ef2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011ef4:	7ebb      	ldrb	r3, [r7, #26]
 8011ef6:	f043 0302 	orr.w	r3, r3, #2
 8011efa:	76bb      	strb	r3, [r7, #26]
 8011efc:	e001      	b.n	8011f02 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011f0a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011f0c:	89fa      	ldrh	r2, [r7, #14]
 8011f0e:	8bbb      	ldrh	r3, [r7, #28]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d216      	bcs.n	8011f42 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011f14:	89fb      	ldrh	r3, [r7, #14]
 8011f16:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011f18:	7e3b      	ldrb	r3, [r7, #24]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d00d      	beq.n	8011f3a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8011f1e:	8bbb      	ldrh	r3, [r7, #28]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d10e      	bne.n	8011f42 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6a1b      	ldr	r3, [r3, #32]
 8011f28:	699b      	ldr	r3, [r3, #24]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d102      	bne.n	8011f34 <lwip_netconn_do_writemore+0x134>
 8011f2e:	f06f 0306 	mvn.w	r3, #6
 8011f32:	e000      	b.n	8011f36 <lwip_netconn_do_writemore+0x136>
 8011f34:	2300      	movs	r3, #0
 8011f36:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8011f38:	e07d      	b.n	8012036 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8011f3a:	7ebb      	ldrb	r3, [r7, #26]
 8011f3c:	f043 0302 	orr.w	r3, r3, #2
 8011f40:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	691a      	ldr	r2, [r3, #16]
 8011f48:	8bbb      	ldrh	r3, [r7, #28]
 8011f4a:	441a      	add	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6a1b      	ldr	r3, [r3, #32]
 8011f50:	689b      	ldr	r3, [r3, #8]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d906      	bls.n	8011f66 <lwip_netconn_do_writemore+0x166>
 8011f58:	4b45      	ldr	r3, [pc, #276]	; (8012070 <lwip_netconn_do_writemore+0x270>)
 8011f5a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8011f5e:	494c      	ldr	r1, [pc, #304]	; (8012090 <lwip_netconn_do_writemore+0x290>)
 8011f60:	4845      	ldr	r0, [pc, #276]	; (8012078 <lwip_netconn_do_writemore+0x278>)
 8011f62:	f00f faa3 	bl	80214ac <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011f66:	8bbb      	ldrh	r3, [r7, #28]
 8011f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d103      	bne.n	8011f78 <lwip_netconn_do_writemore+0x178>
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f76:	d209      	bcs.n	8011f8c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011f7c:	8bba      	ldrh	r2, [r7, #28]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d10b      	bne.n	8011f9a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6a1b      	ldr	r3, [r3, #32]
 8011f86:	899b      	ldrh	r3, [r3, #12]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d906      	bls.n	8011f9a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011f90:	7ebb      	ldrb	r3, [r7, #26]
 8011f92:	f043 0302 	orr.w	r3, r3, #2
 8011f96:	76bb      	strb	r3, [r7, #26]
 8011f98:	e001      	b.n	8011f9e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6858      	ldr	r0, [r3, #4]
 8011fa2:	7ebb      	ldrb	r3, [r7, #26]
 8011fa4:	8bba      	ldrh	r2, [r7, #28]
 8011fa6:	6979      	ldr	r1, [r7, #20]
 8011fa8:	f007 ff54 	bl	8019e54 <tcp_write>
 8011fac:	4603      	mov	r3, r0
 8011fae:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011fb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d12c      	bne.n	8012012 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6a1b      	ldr	r3, [r3, #32]
 8011fbc:	6999      	ldr	r1, [r3, #24]
 8011fbe:	8bba      	ldrh	r2, [r7, #28]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6a1b      	ldr	r3, [r3, #32]
 8011fc4:	440a      	add	r2, r1
 8011fc6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a1b      	ldr	r3, [r3, #32]
 8011fcc:	6919      	ldr	r1, [r3, #16]
 8011fce:	8bba      	ldrh	r2, [r7, #28]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a1b      	ldr	r3, [r3, #32]
 8011fd4:	440a      	add	r2, r1
 8011fd6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6a1b      	ldr	r3, [r3, #32]
 8011fdc:	691a      	ldr	r2, [r3, #16]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6a1b      	ldr	r3, [r3, #32]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d113      	bne.n	8012012 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6a1b      	ldr	r3, [r3, #32]
 8011fee:	899a      	ldrh	r2, [r3, #12]
 8011ff0:	3a01      	subs	r2, #1
 8011ff2:	b292      	uxth	r2, r2
 8011ff4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	899b      	ldrh	r3, [r3, #12]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d008      	beq.n	8012012 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6a1b      	ldr	r3, [r3, #32]
 8012004:	689a      	ldr	r2, [r3, #8]
 8012006:	3208      	adds	r2, #8
 8012008:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6a1b      	ldr	r3, [r3, #32]
 801200e:	2200      	movs	r2, #0
 8012010:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012012:	7e7b      	ldrb	r3, [r7, #25]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d004      	beq.n	8012022 <lwip_netconn_do_writemore+0x222>
 8012018:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801201c:	2b00      	cmp	r3, #0
 801201e:	f43f af50 	beq.w	8011ec2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012022:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d004      	beq.n	8012034 <lwip_netconn_do_writemore+0x234>
 801202a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012032:	d146      	bne.n	80120c2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012034:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012036:	7e3b      	ldrb	r3, [r7, #24]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d02b      	beq.n	8012094 <lwip_netconn_do_writemore+0x294>
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6a1b      	ldr	r3, [r3, #32]
 8012040:	699a      	ldr	r2, [r3, #24]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6a1b      	ldr	r3, [r3, #32]
 8012046:	695b      	ldr	r3, [r3, #20]
 8012048:	429a      	cmp	r2, r3
 801204a:	d223      	bcs.n	8012094 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012050:	2b00      	cmp	r3, #0
 8012052:	d005      	beq.n	8012060 <lwip_netconn_do_writemore+0x260>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012058:	2200      	movs	r2, #0
 801205a:	2103      	movs	r1, #3
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	7f1b      	ldrb	r3, [r3, #28]
 8012064:	f043 0310 	orr.w	r3, r3, #16
 8012068:	b2da      	uxtb	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	771a      	strb	r2, [r3, #28]
 801206e:	e028      	b.n	80120c2 <lwip_netconn_do_writemore+0x2c2>
 8012070:	08023b0c 	.word	0x08023b0c
 8012074:	08023c64 	.word	0x08023c64
 8012078:	08023b50 	.word	0x08023b50
 801207c:	08023f6c 	.word	0x08023f6c
 8012080:	08023c74 	.word	0x08023c74
 8012084:	08023f8c 	.word	0x08023f8c
 8012088:	08023fa4 	.word	0x08023fa4
 801208c:	08023fe4 	.word	0x08023fe4
 8012090:	0802400c 	.word	0x0802400c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801209c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80120a0:	d305      	bcc.n	80120ae <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80120aa:	2b04      	cmp	r3, #4
 80120ac:	d909      	bls.n	80120c2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d005      	beq.n	80120c2 <lwip_netconn_do_writemore+0x2c2>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ba:	2200      	movs	r2, #0
 80120bc:	2103      	movs	r1, #3
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80120c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d11d      	bne.n	8012106 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6a1b      	ldr	r3, [r3, #32]
 80120ce:	699a      	ldr	r2, [r3, #24]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a1b      	ldr	r3, [r3, #32]
 80120d4:	695b      	ldr	r3, [r3, #20]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d002      	beq.n	80120e0 <lwip_netconn_do_writemore+0x2e0>
 80120da:	7e3b      	ldrb	r3, [r7, #24]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d001      	beq.n	80120e4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80120e0:	2301      	movs	r3, #1
 80120e2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f008 fc9d 	bl	801aa28 <tcp_output>
 80120ee:	4603      	mov	r3, r0
 80120f0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80120f2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80120f6:	f113 0f04 	cmn.w	r3, #4
 80120fa:	d12c      	bne.n	8012156 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80120fc:	7b3b      	ldrb	r3, [r7, #12]
 80120fe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012100:	2301      	movs	r3, #1
 8012102:	76fb      	strb	r3, [r7, #27]
 8012104:	e027      	b.n	8012156 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012106:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210e:	d120      	bne.n	8012152 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	4618      	mov	r0, r3
 8012116:	f008 fc87 	bl	801aa28 <tcp_output>
 801211a:	4603      	mov	r3, r0
 801211c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801211e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012122:	f113 0f04 	cmn.w	r3, #4
 8012126:	d104      	bne.n	8012132 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012128:	7b7b      	ldrb	r3, [r7, #13]
 801212a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801212c:	2301      	movs	r3, #1
 801212e:	76fb      	strb	r3, [r7, #27]
 8012130:	e011      	b.n	8012156 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012132:	7e3b      	ldrb	r3, [r7, #24]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00e      	beq.n	8012156 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a1b      	ldr	r3, [r3, #32]
 801213c:	699b      	ldr	r3, [r3, #24]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d102      	bne.n	8012148 <lwip_netconn_do_writemore+0x348>
 8012142:	f06f 0306 	mvn.w	r3, #6
 8012146:	e000      	b.n	801214a <lwip_netconn_do_writemore+0x34a>
 8012148:	2300      	movs	r3, #0
 801214a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801214c:	2301      	movs	r3, #1
 801214e:	76fb      	strb	r3, [r7, #27]
 8012150:	e001      	b.n	8012156 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012152:	2301      	movs	r3, #1
 8012154:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012156:	7efb      	ldrb	r3, [r7, #27]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d015      	beq.n	8012188 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6a1b      	ldr	r3, [r3, #32]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	330c      	adds	r3, #12
 8012164:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6a1b      	ldr	r3, [r3, #32]
 801216a:	7ffa      	ldrb	r2, [r7, #31]
 801216c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801217a:	78fb      	ldrb	r3, [r7, #3]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d006      	beq.n	801218e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012180:	68b8      	ldr	r0, [r7, #8]
 8012182:	f00e feb1 	bl	8020ee8 <sys_sem_signal>
 8012186:	e002      	b.n	801218e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012188:	f04f 33ff 	mov.w	r3, #4294967295
 801218c:	e000      	b.n	8012190 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801218e:	2300      	movs	r3, #0
}
 8012190:	4618      	mov	r0, r3
 8012192:	3720      	adds	r7, #32
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7fe fd04 	bl	8010bb6 <netconn_err>
 80121ae:	4603      	mov	r3, r0
 80121b0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80121b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d166      	bne.n	8012288 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121c4:	2b10      	cmp	r3, #16
 80121c6:	d15d      	bne.n	8012284 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	785b      	ldrb	r3, [r3, #1]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d002      	beq.n	80121d8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80121d2:	23fb      	movs	r3, #251	; 0xfb
 80121d4:	73fb      	strb	r3, [r7, #15]
 80121d6:	e057      	b.n	8012288 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d04d      	beq.n	801227e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	2201      	movs	r2, #1
 80121e8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	6a1b      	ldr	r3, [r3, #32]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d006      	beq.n	8012202 <lwip_netconn_do_write+0x6a>
 80121f4:	4b28      	ldr	r3, [pc, #160]	; (8012298 <lwip_netconn_do_write+0x100>)
 80121f6:	f240 7223 	movw	r2, #1827	; 0x723
 80121fa:	4928      	ldr	r1, [pc, #160]	; (801229c <lwip_netconn_do_write+0x104>)
 80121fc:	4828      	ldr	r0, [pc, #160]	; (80122a0 <lwip_netconn_do_write+0x108>)
 80121fe:	f00f f955 	bl	80214ac <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	695b      	ldr	r3, [r3, #20]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <lwip_netconn_do_write+0x80>
 801220a:	4b23      	ldr	r3, [pc, #140]	; (8012298 <lwip_netconn_do_write+0x100>)
 801220c:	f240 7224 	movw	r2, #1828	; 0x724
 8012210:	4924      	ldr	r1, [pc, #144]	; (80122a4 <lwip_netconn_do_write+0x10c>)
 8012212:	4823      	ldr	r0, [pc, #140]	; (80122a0 <lwip_netconn_do_write+0x108>)
 8012214:	f00f f94a 	bl	80214ac <iprintf>
        msg->conn->current_msg = msg;
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2100      	movs	r1, #0
 8012226:	4618      	mov	r0, r3
 8012228:	f7ff fdea 	bl	8011e00 <lwip_netconn_do_writemore>
 801222c:	4603      	mov	r3, r0
 801222e:	2b00      	cmp	r3, #0
 8012230:	d02e      	beq.n	8012290 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	785b      	ldrb	r3, [r3, #1]
 8012238:	2b01      	cmp	r3, #1
 801223a:	d006      	beq.n	801224a <lwip_netconn_do_write+0xb2>
 801223c:	4b16      	ldr	r3, [pc, #88]	; (8012298 <lwip_netconn_do_write+0x100>)
 801223e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012242:	4919      	ldr	r1, [pc, #100]	; (80122a8 <lwip_netconn_do_write+0x110>)
 8012244:	4816      	ldr	r0, [pc, #88]	; (80122a0 <lwip_netconn_do_write+0x108>)
 8012246:	f00f f931 	bl	80214ac <iprintf>
          UNLOCK_TCPIP_CORE();
 801224a:	4818      	ldr	r0, [pc, #96]	; (80122ac <lwip_netconn_do_write+0x114>)
 801224c:	f00e feb5 	bl	8020fba <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	330c      	adds	r3, #12
 8012256:	2100      	movs	r1, #0
 8012258:	4618      	mov	r0, r3
 801225a:	f00e fe14 	bl	8020e86 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801225e:	4813      	ldr	r0, [pc, #76]	; (80122ac <lwip_netconn_do_write+0x114>)
 8012260:	f00e fe9c 	bl	8020f9c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	785b      	ldrb	r3, [r3, #1]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d110      	bne.n	8012290 <lwip_netconn_do_write+0xf8>
 801226e:	4b0a      	ldr	r3, [pc, #40]	; (8012298 <lwip_netconn_do_write+0x100>)
 8012270:	f240 722c 	movw	r2, #1836	; 0x72c
 8012274:	490c      	ldr	r1, [pc, #48]	; (80122a8 <lwip_netconn_do_write+0x110>)
 8012276:	480a      	ldr	r0, [pc, #40]	; (80122a0 <lwip_netconn_do_write+0x108>)
 8012278:	f00f f918 	bl	80214ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 801227c:	e008      	b.n	8012290 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801227e:	23f5      	movs	r3, #245	; 0xf5
 8012280:	73fb      	strb	r3, [r7, #15]
 8012282:	e001      	b.n	8012288 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8012284:	23fa      	movs	r3, #250	; 0xfa
 8012286:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	7bfa      	ldrb	r2, [r7, #15]
 801228c:	711a      	strb	r2, [r3, #4]
 801228e:	e000      	b.n	8012292 <lwip_netconn_do_write+0xfa>
        return;
 8012290:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8012292:	3710      	adds	r7, #16
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	08023b0c 	.word	0x08023b0c
 801229c:	08023eb0 	.word	0x08023eb0
 80122a0:	08023b50 	.word	0x08023b50
 80122a4:	08024038 	.word	0x08024038
 80122a8:	08023ecc 	.word	0x08023ecc
 80122ac:	20013468 	.word	0x20013468

080122b0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	785b      	ldrb	r3, [r3, #1]
 80122c2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d069      	beq.n	80123a2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80122d8:	2b10      	cmp	r3, #16
 80122da:	d162      	bne.n	80123a2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80122e0:	2b03      	cmp	r3, #3
 80122e2:	d002      	beq.n	80122ea <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80122e4:	7afb      	ldrb	r3, [r7, #11]
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	d05b      	beq.n	80123a2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80122ea:	7afb      	ldrb	r3, [r7, #11]
 80122ec:	2b03      	cmp	r3, #3
 80122ee:	d103      	bne.n	80122f8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	22f5      	movs	r2, #245	; 0xf5
 80122f4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80122f6:	e059      	b.n	80123ac <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80122f8:	7afb      	ldrb	r3, [r7, #11]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d103      	bne.n	8012306 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	22fb      	movs	r2, #251	; 0xfb
 8012302:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012304:	e052      	b.n	80123ac <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	7a1b      	ldrb	r3, [r3, #8]
 801230a:	f003 0301 	and.w	r3, r3, #1
 801230e:	2b00      	cmp	r3, #0
 8012310:	d004      	beq.n	801231c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	4618      	mov	r0, r3
 8012318:	f7ff f926 	bl	8011568 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	6a1b      	ldr	r3, [r3, #32]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d006      	beq.n	8012334 <lwip_netconn_do_close+0x84>
 8012326:	4b23      	ldr	r3, [pc, #140]	; (80123b4 <lwip_netconn_do_close+0x104>)
 8012328:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801232c:	4922      	ldr	r1, [pc, #136]	; (80123b8 <lwip_netconn_do_close+0x108>)
 801232e:	4823      	ldr	r0, [pc, #140]	; (80123bc <lwip_netconn_do_close+0x10c>)
 8012330:	f00f f8bc 	bl	80214ac <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2204      	movs	r2, #4
 801233a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2100      	movs	r1, #0
 801234a:	4618      	mov	r0, r3
 801234c:	f7ff f98a 	bl	8011664 <lwip_netconn_do_close_internal>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d029      	beq.n	80123aa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	785b      	ldrb	r3, [r3, #1]
 801235c:	2b04      	cmp	r3, #4
 801235e:	d006      	beq.n	801236e <lwip_netconn_do_close+0xbe>
 8012360:	4b14      	ldr	r3, [pc, #80]	; (80123b4 <lwip_netconn_do_close+0x104>)
 8012362:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8012366:	4916      	ldr	r1, [pc, #88]	; (80123c0 <lwip_netconn_do_close+0x110>)
 8012368:	4814      	ldr	r0, [pc, #80]	; (80123bc <lwip_netconn_do_close+0x10c>)
 801236a:	f00f f89f 	bl	80214ac <iprintf>
        UNLOCK_TCPIP_CORE();
 801236e:	4815      	ldr	r0, [pc, #84]	; (80123c4 <lwip_netconn_do_close+0x114>)
 8012370:	f00e fe23 	bl	8020fba <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	330c      	adds	r3, #12
 801237a:	2100      	movs	r1, #0
 801237c:	4618      	mov	r0, r3
 801237e:	f00e fd82 	bl	8020e86 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012382:	4810      	ldr	r0, [pc, #64]	; (80123c4 <lwip_netconn_do_close+0x114>)
 8012384:	f00e fe0a 	bl	8020f9c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	785b      	ldrb	r3, [r3, #1]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d00b      	beq.n	80123aa <lwip_netconn_do_close+0xfa>
 8012392:	4b08      	ldr	r3, [pc, #32]	; (80123b4 <lwip_netconn_do_close+0x104>)
 8012394:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8012398:	4909      	ldr	r1, [pc, #36]	; (80123c0 <lwip_netconn_do_close+0x110>)
 801239a:	4808      	ldr	r0, [pc, #32]	; (80123bc <lwip_netconn_do_close+0x10c>)
 801239c:	f00f f886 	bl	80214ac <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80123a0:	e003      	b.n	80123aa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	22f5      	movs	r2, #245	; 0xf5
 80123a6:	711a      	strb	r2, [r3, #4]
 80123a8:	e000      	b.n	80123ac <lwip_netconn_do_close+0xfc>
      return;
 80123aa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	08023b0c 	.word	0x08023b0c
 80123b8:	08023eb0 	.word	0x08023eb0
 80123bc:	08023b50 	.word	0x08023b50
 80123c0:	08023ecc 	.word	0x08023ecc
 80123c4:	20013468 	.word	0x20013468

080123c8 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b086      	sub	sp, #24
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d104      	bne.n	80123e8 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	22fa      	movs	r2, #250	; 0xfa
 80123e4:	701a      	strb	r2, [r3, #0]
 80123e6:	e008      	b.n	80123fa <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2200      	movs	r2, #0
 80123ee:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	6812      	ldr	r2, [r2, #0]
 80123f8:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	4618      	mov	r0, r3
 8012400:	f00e fd72 	bl	8020ee8 <sys_sem_signal>
}
 8012404:	bf00      	nop
 8012406:	3718      	adds	r7, #24
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 801240c:	b590      	push	{r4, r7, lr}
 801240e:	b087      	sub	sp, #28
 8012410:	af02      	add	r7, sp, #8
 8012412:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 8012418:	2300      	movs	r3, #0
 801241a:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6818      	ldr	r0, [r3, #0]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6859      	ldr	r1, [r3, #4]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	68dc      	ldr	r4, [r3, #12]
 8012428:	7afb      	ldrb	r3, [r7, #11]
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	4a15      	ldr	r2, [pc, #84]	; (8012484 <lwip_netconn_do_gethostbyname+0x78>)
 8012430:	f001 fa42 	bl	80138b8 <dns_gethostbyname_addrtype>
 8012434:	4603      	mov	r3, r0
 8012436:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	f993 3000 	ldrsb.w	r3, [r3]
 8012440:	f113 0f05 	cmn.w	r3, #5
 8012444:	d119      	bne.n	801247a <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 8012446:	4810      	ldr	r0, [pc, #64]	; (8012488 <lwip_netconn_do_gethostbyname+0x7c>)
 8012448:	f00e fdb7 	bl	8020fba <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	689b      	ldr	r3, [r3, #8]
 8012450:	2100      	movs	r1, #0
 8012452:	4618      	mov	r0, r3
 8012454:	f00e fd17 	bl	8020e86 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 8012458:	480b      	ldr	r0, [pc, #44]	; (8012488 <lwip_netconn_do_gethostbyname+0x7c>)
 801245a:	f00e fd9f 	bl	8020f9c <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	f993 3000 	ldrsb.w	r3, [r3]
 8012466:	f113 0f05 	cmn.w	r3, #5
 801246a:	d106      	bne.n	801247a <lwip_netconn_do_gethostbyname+0x6e>
 801246c:	4b07      	ldr	r3, [pc, #28]	; (801248c <lwip_netconn_do_gethostbyname+0x80>)
 801246e:	f640 0271 	movw	r2, #2161	; 0x871
 8012472:	4907      	ldr	r1, [pc, #28]	; (8012490 <lwip_netconn_do_gethostbyname+0x84>)
 8012474:	4807      	ldr	r0, [pc, #28]	; (8012494 <lwip_netconn_do_gethostbyname+0x88>)
 8012476:	f00f f819 	bl	80214ac <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801247a:	bf00      	nop
 801247c:	3714      	adds	r7, #20
 801247e:	46bd      	mov	sp, r7
 8012480:	bd90      	pop	{r4, r7, pc}
 8012482:	bf00      	nop
 8012484:	080123c9 	.word	0x080123c9
 8012488:	20013468 	.word	0x20013468
 801248c:	08023b0c 	.word	0x08023b0c
 8012490:	08024064 	.word	0x08024064
 8012494:	08023b50 	.word	0x08023b50

08012498 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d013      	beq.n	80124ce <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00b      	beq.n	80124c6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f002 fdd0 	bl	8015058 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	605a      	str	r2, [r3, #4]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	685a      	ldr	r2, [r3, #4]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80124c6:	6879      	ldr	r1, [r7, #4]
 80124c8:	2006      	movs	r0, #6
 80124ca:	f001 ff15 	bl	80142f8 <memp_free>
  }
}
 80124ce:	bf00      	nop
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
	...

080124d8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d108      	bne.n	80124fc <netbuf_data+0x24>
 80124ea:	4b1b      	ldr	r3, [pc, #108]	; (8012558 <netbuf_data+0x80>)
 80124ec:	22c6      	movs	r2, #198	; 0xc6
 80124ee:	491b      	ldr	r1, [pc, #108]	; (801255c <netbuf_data+0x84>)
 80124f0:	481b      	ldr	r0, [pc, #108]	; (8012560 <netbuf_data+0x88>)
 80124f2:	f00e ffdb 	bl	80214ac <iprintf>
 80124f6:	f06f 030f 	mvn.w	r3, #15
 80124fa:	e029      	b.n	8012550 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d108      	bne.n	8012514 <netbuf_data+0x3c>
 8012502:	4b15      	ldr	r3, [pc, #84]	; (8012558 <netbuf_data+0x80>)
 8012504:	22c7      	movs	r2, #199	; 0xc7
 8012506:	4917      	ldr	r1, [pc, #92]	; (8012564 <netbuf_data+0x8c>)
 8012508:	4815      	ldr	r0, [pc, #84]	; (8012560 <netbuf_data+0x88>)
 801250a:	f00e ffcf 	bl	80214ac <iprintf>
 801250e:	f06f 030f 	mvn.w	r3, #15
 8012512:	e01d      	b.n	8012550 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d108      	bne.n	801252c <netbuf_data+0x54>
 801251a:	4b0f      	ldr	r3, [pc, #60]	; (8012558 <netbuf_data+0x80>)
 801251c:	22c8      	movs	r2, #200	; 0xc8
 801251e:	4912      	ldr	r1, [pc, #72]	; (8012568 <netbuf_data+0x90>)
 8012520:	480f      	ldr	r0, [pc, #60]	; (8012560 <netbuf_data+0x88>)
 8012522:	f00e ffc3 	bl	80214ac <iprintf>
 8012526:	f06f 030f 	mvn.w	r3, #15
 801252a:	e011      	b.n	8012550 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d102      	bne.n	801253a <netbuf_data+0x62>
    return ERR_BUF;
 8012534:	f06f 0301 	mvn.w	r3, #1
 8012538:	e00a      	b.n	8012550 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	685a      	ldr	r2, [r3, #4]
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	895a      	ldrh	r2, [r3, #10]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	0802408c 	.word	0x0802408c
 801255c:	08024194 	.word	0x08024194
 8012560:	080240dc 	.word	0x080240dc
 8012564:	080241b0 	.word	0x080241b0
 8012568:	080241d0 	.word	0x080241d0

0801256c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d108      	bne.n	801258c <netbuf_next+0x20>
 801257a:	4b11      	ldr	r3, [pc, #68]	; (80125c0 <netbuf_next+0x54>)
 801257c:	22e0      	movs	r2, #224	; 0xe0
 801257e:	4911      	ldr	r1, [pc, #68]	; (80125c4 <netbuf_next+0x58>)
 8012580:	4811      	ldr	r0, [pc, #68]	; (80125c8 <netbuf_next+0x5c>)
 8012582:	f00e ff93 	bl	80214ac <iprintf>
 8012586:	f04f 33ff 	mov.w	r3, #4294967295
 801258a:	e014      	b.n	80125b6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d102      	bne.n	801259c <netbuf_next+0x30>
    return -1;
 8012596:	f04f 33ff 	mov.w	r3, #4294967295
 801259a:	e00c      	b.n	80125b6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d101      	bne.n	80125b4 <netbuf_next+0x48>
    return 1;
 80125b0:	2301      	movs	r3, #1
 80125b2:	e000      	b.n	80125b6 <netbuf_next+0x4a>
  }
  return 0;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	0802408c 	.word	0x0802408c
 80125c4:	080241ec 	.word	0x080241ec
 80125c8:	080240dc 	.word	0x080240dc

080125cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80125d6:	f009 fadf 	bl	801bb98 <sys_timeouts_sleeptime>
 80125da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e2:	d10b      	bne.n	80125fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80125e4:	4813      	ldr	r0, [pc, #76]	; (8012634 <tcpip_timeouts_mbox_fetch+0x68>)
 80125e6:	f00e fce8 	bl	8020fba <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80125ea:	2200      	movs	r2, #0
 80125ec:	6839      	ldr	r1, [r7, #0]
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f00e fbbe 	bl	8020d70 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80125f4:	480f      	ldr	r0, [pc, #60]	; (8012634 <tcpip_timeouts_mbox_fetch+0x68>)
 80125f6:	f00e fcd1 	bl	8020f9c <sys_mutex_lock>
    return;
 80125fa:	e018      	b.n	801262e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d102      	bne.n	8012608 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012602:	f009 fa8f 	bl	801bb24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012606:	e7e6      	b.n	80125d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012608:	480a      	ldr	r0, [pc, #40]	; (8012634 <tcpip_timeouts_mbox_fetch+0x68>)
 801260a:	f00e fcd6 	bl	8020fba <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	6839      	ldr	r1, [r7, #0]
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f00e fbac 	bl	8020d70 <sys_arch_mbox_fetch>
 8012618:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801261a:	4806      	ldr	r0, [pc, #24]	; (8012634 <tcpip_timeouts_mbox_fetch+0x68>)
 801261c:	f00e fcbe 	bl	8020f9c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012626:	d102      	bne.n	801262e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012628:	f009 fa7c 	bl	801bb24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801262c:	e7d3      	b.n	80125d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801262e:	3710      	adds	r7, #16
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	20013468 	.word	0x20013468

08012638 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b084      	sub	sp, #16
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012640:	4810      	ldr	r0, [pc, #64]	; (8012684 <tcpip_thread+0x4c>)
 8012642:	f00e fcab 	bl	8020f9c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012646:	4b10      	ldr	r3, [pc, #64]	; (8012688 <tcpip_thread+0x50>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d005      	beq.n	801265a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801264e:	4b0e      	ldr	r3, [pc, #56]	; (8012688 <tcpip_thread+0x50>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4a0e      	ldr	r2, [pc, #56]	; (801268c <tcpip_thread+0x54>)
 8012654:	6812      	ldr	r2, [r2, #0]
 8012656:	4610      	mov	r0, r2
 8012658:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801265a:	f107 030c 	add.w	r3, r7, #12
 801265e:	4619      	mov	r1, r3
 8012660:	480b      	ldr	r0, [pc, #44]	; (8012690 <tcpip_thread+0x58>)
 8012662:	f7ff ffb3 	bl	80125cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d106      	bne.n	801267a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801266c:	4b09      	ldr	r3, [pc, #36]	; (8012694 <tcpip_thread+0x5c>)
 801266e:	2291      	movs	r2, #145	; 0x91
 8012670:	4909      	ldr	r1, [pc, #36]	; (8012698 <tcpip_thread+0x60>)
 8012672:	480a      	ldr	r0, [pc, #40]	; (801269c <tcpip_thread+0x64>)
 8012674:	f00e ff1a 	bl	80214ac <iprintf>
      continue;
 8012678:	e003      	b.n	8012682 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	4618      	mov	r0, r3
 801267e:	f000 f80f 	bl	80126a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012682:	e7ea      	b.n	801265a <tcpip_thread+0x22>
 8012684:	20013468 	.word	0x20013468
 8012688:	200050a4 	.word	0x200050a4
 801268c:	200050a8 	.word	0x200050a8
 8012690:	200050ac 	.word	0x200050ac
 8012694:	08024224 	.word	0x08024224
 8012698:	08024254 	.word	0x08024254
 801269c:	08024274 	.word	0x08024274

080126a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d026      	beq.n	80126fe <tcpip_thread_handle_msg+0x5e>
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	dc2b      	bgt.n	801270c <tcpip_thread_handle_msg+0x6c>
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d002      	beq.n	80126be <tcpip_thread_handle_msg+0x1e>
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d015      	beq.n	80126e8 <tcpip_thread_handle_msg+0x48>
 80126bc:	e026      	b.n	801270c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	6850      	ldr	r0, [r2, #4]
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	6892      	ldr	r2, [r2, #8]
 80126ca:	4611      	mov	r1, r2
 80126cc:	4798      	blx	r3
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d004      	beq.n	80126de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	f002 fcbd 	bl	8015058 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80126de:	6879      	ldr	r1, [r7, #4]
 80126e0:	2009      	movs	r0, #9
 80126e2:	f001 fe09 	bl	80142f8 <memp_free>
      break;
 80126e6:	e018      	b.n	801271a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	6892      	ldr	r2, [r2, #8]
 80126f0:	4610      	mov	r0, r2
 80126f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80126f4:	6879      	ldr	r1, [r7, #4]
 80126f6:	2008      	movs	r0, #8
 80126f8:	f001 fdfe 	bl	80142f8 <memp_free>
      break;
 80126fc:	e00d      	b.n	801271a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	6892      	ldr	r2, [r2, #8]
 8012706:	4610      	mov	r0, r2
 8012708:	4798      	blx	r3
      break;
 801270a:	e006      	b.n	801271a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801270c:	4b05      	ldr	r3, [pc, #20]	; (8012724 <tcpip_thread_handle_msg+0x84>)
 801270e:	22cf      	movs	r2, #207	; 0xcf
 8012710:	4905      	ldr	r1, [pc, #20]	; (8012728 <tcpip_thread_handle_msg+0x88>)
 8012712:	4806      	ldr	r0, [pc, #24]	; (801272c <tcpip_thread_handle_msg+0x8c>)
 8012714:	f00e feca 	bl	80214ac <iprintf>
      break;
 8012718:	bf00      	nop
  }
}
 801271a:	bf00      	nop
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	08024224 	.word	0x08024224
 8012728:	08024254 	.word	0x08024254
 801272c:	08024274 	.word	0x08024274

08012730 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801273c:	481a      	ldr	r0, [pc, #104]	; (80127a8 <tcpip_inpkt+0x78>)
 801273e:	f00e fb5f 	bl	8020e00 <sys_mbox_valid>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d105      	bne.n	8012754 <tcpip_inpkt+0x24>
 8012748:	4b18      	ldr	r3, [pc, #96]	; (80127ac <tcpip_inpkt+0x7c>)
 801274a:	22fc      	movs	r2, #252	; 0xfc
 801274c:	4918      	ldr	r1, [pc, #96]	; (80127b0 <tcpip_inpkt+0x80>)
 801274e:	4819      	ldr	r0, [pc, #100]	; (80127b4 <tcpip_inpkt+0x84>)
 8012750:	f00e feac 	bl	80214ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012754:	2009      	movs	r0, #9
 8012756:	f001 fd7d 	bl	8014254 <memp_malloc>
 801275a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d102      	bne.n	8012768 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012762:	f04f 33ff 	mov.w	r3, #4294967295
 8012766:	e01a      	b.n	801279e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	2200      	movs	r2, #0
 801276c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	68fa      	ldr	r2, [r7, #12]
 8012772:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012780:	6979      	ldr	r1, [r7, #20]
 8012782:	4809      	ldr	r0, [pc, #36]	; (80127a8 <tcpip_inpkt+0x78>)
 8012784:	f00e fada 	bl	8020d3c <sys_mbox_trypost>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d006      	beq.n	801279c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801278e:	6979      	ldr	r1, [r7, #20]
 8012790:	2009      	movs	r0, #9
 8012792:	f001 fdb1 	bl	80142f8 <memp_free>
    return ERR_MEM;
 8012796:	f04f 33ff 	mov.w	r3, #4294967295
 801279a:	e000      	b.n	801279e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801279c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3718      	adds	r7, #24
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	200050ac 	.word	0x200050ac
 80127ac:	08024224 	.word	0x08024224
 80127b0:	0802429c 	.word	0x0802429c
 80127b4:	08024274 	.word	0x08024274

080127b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127c8:	f003 0318 	and.w	r3, r3, #24
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d006      	beq.n	80127de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80127d0:	4a08      	ldr	r2, [pc, #32]	; (80127f4 <tcpip_input+0x3c>)
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7ff ffab 	bl	8012730 <tcpip_inpkt>
 80127da:	4603      	mov	r3, r0
 80127dc:	e005      	b.n	80127ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80127de:	4a06      	ldr	r2, [pc, #24]	; (80127f8 <tcpip_input+0x40>)
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff ffa4 	bl	8012730 <tcpip_inpkt>
 80127e8:	4603      	mov	r3, r0
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3708      	adds	r7, #8
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	08020b39 	.word	0x08020b39
 80127f8:	0801f7bd 	.word	0x0801f7bd

080127fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012806:	4819      	ldr	r0, [pc, #100]	; (801286c <tcpip_try_callback+0x70>)
 8012808:	f00e fafa 	bl	8020e00 <sys_mbox_valid>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d106      	bne.n	8012820 <tcpip_try_callback+0x24>
 8012812:	4b17      	ldr	r3, [pc, #92]	; (8012870 <tcpip_try_callback+0x74>)
 8012814:	f240 125d 	movw	r2, #349	; 0x15d
 8012818:	4916      	ldr	r1, [pc, #88]	; (8012874 <tcpip_try_callback+0x78>)
 801281a:	4817      	ldr	r0, [pc, #92]	; (8012878 <tcpip_try_callback+0x7c>)
 801281c:	f00e fe46 	bl	80214ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012820:	2008      	movs	r0, #8
 8012822:	f001 fd17 	bl	8014254 <memp_malloc>
 8012826:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d102      	bne.n	8012834 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801282e:	f04f 33ff 	mov.w	r3, #4294967295
 8012832:	e017      	b.n	8012864 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2201      	movs	r2, #1
 8012838:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012846:	68f9      	ldr	r1, [r7, #12]
 8012848:	4808      	ldr	r0, [pc, #32]	; (801286c <tcpip_try_callback+0x70>)
 801284a:	f00e fa77 	bl	8020d3c <sys_mbox_trypost>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d006      	beq.n	8012862 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012854:	68f9      	ldr	r1, [r7, #12]
 8012856:	2008      	movs	r0, #8
 8012858:	f001 fd4e 	bl	80142f8 <memp_free>
    return ERR_MEM;
 801285c:	f04f 33ff 	mov.w	r3, #4294967295
 8012860:	e000      	b.n	8012864 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	200050ac 	.word	0x200050ac
 8012870:	08024224 	.word	0x08024224
 8012874:	0802429c 	.word	0x0802429c
 8012878:	08024274 	.word	0x08024274

0801287c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	60b9      	str	r1, [r7, #8]
 8012886:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012888:	4806      	ldr	r0, [pc, #24]	; (80128a4 <tcpip_send_msg_wait_sem+0x28>)
 801288a:	f00e fb87 	bl	8020f9c <sys_mutex_lock>
  fn(apimsg);
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	68b8      	ldr	r0, [r7, #8]
 8012892:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012894:	4803      	ldr	r0, [pc, #12]	; (80128a4 <tcpip_send_msg_wait_sem+0x28>)
 8012896:	f00e fb90 	bl	8020fba <sys_mutex_unlock>
  return ERR_OK;
 801289a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801289c:	4618      	mov	r0, r3
 801289e:	3710      	adds	r7, #16
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	20013468 	.word	0x20013468

080128a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af02      	add	r7, sp, #8
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80128b2:	f001 f845 	bl	8013940 <lwip_init>

  tcpip_init_done = initfunc;
 80128b6:	4a17      	ldr	r2, [pc, #92]	; (8012914 <tcpip_init+0x6c>)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80128bc:	4a16      	ldr	r2, [pc, #88]	; (8012918 <tcpip_init+0x70>)
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80128c2:	2106      	movs	r1, #6
 80128c4:	4815      	ldr	r0, [pc, #84]	; (801291c <tcpip_init+0x74>)
 80128c6:	f00e fa0d 	bl	8020ce4 <sys_mbox_new>
 80128ca:	4603      	mov	r3, r0
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d006      	beq.n	80128de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80128d0:	4b13      	ldr	r3, [pc, #76]	; (8012920 <tcpip_init+0x78>)
 80128d2:	f240 2261 	movw	r2, #609	; 0x261
 80128d6:	4913      	ldr	r1, [pc, #76]	; (8012924 <tcpip_init+0x7c>)
 80128d8:	4813      	ldr	r0, [pc, #76]	; (8012928 <tcpip_init+0x80>)
 80128da:	f00e fde7 	bl	80214ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80128de:	4813      	ldr	r0, [pc, #76]	; (801292c <tcpip_init+0x84>)
 80128e0:	f00e fb46 	bl	8020f70 <sys_mutex_new>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d006      	beq.n	80128f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80128ea:	4b0d      	ldr	r3, [pc, #52]	; (8012920 <tcpip_init+0x78>)
 80128ec:	f240 2265 	movw	r2, #613	; 0x265
 80128f0:	490f      	ldr	r1, [pc, #60]	; (8012930 <tcpip_init+0x88>)
 80128f2:	480d      	ldr	r0, [pc, #52]	; (8012928 <tcpip_init+0x80>)
 80128f4:	f00e fdda 	bl	80214ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80128f8:	2318      	movs	r3, #24
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012900:	2200      	movs	r2, #0
 8012902:	490c      	ldr	r1, [pc, #48]	; (8012934 <tcpip_init+0x8c>)
 8012904:	480c      	ldr	r0, [pc, #48]	; (8012938 <tcpip_init+0x90>)
 8012906:	f00e fb65 	bl	8020fd4 <sys_thread_new>
}
 801290a:	bf00      	nop
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	200050a4 	.word	0x200050a4
 8012918:	200050a8 	.word	0x200050a8
 801291c:	200050ac 	.word	0x200050ac
 8012920:	08024224 	.word	0x08024224
 8012924:	080242ac 	.word	0x080242ac
 8012928:	08024274 	.word	0x08024274
 801292c:	20013468 	.word	0x20013468
 8012930:	080242d0 	.word	0x080242d0
 8012934:	08012639 	.word	0x08012639
 8012938:	080242f4 	.word	0x080242f4

0801293c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	4603      	mov	r3, r0
 8012944:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012946:	88fb      	ldrh	r3, [r7, #6]
 8012948:	021b      	lsls	r3, r3, #8
 801294a:	b21a      	sxth	r2, r3
 801294c:	88fb      	ldrh	r3, [r7, #6]
 801294e:	0a1b      	lsrs	r3, r3, #8
 8012950:	b29b      	uxth	r3, r3
 8012952:	b21b      	sxth	r3, r3
 8012954:	4313      	orrs	r3, r2
 8012956:	b21b      	sxth	r3, r3
 8012958:	b29b      	uxth	r3, r3
}
 801295a:	4618      	mov	r0, r3
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr

08012966 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012966:	b480      	push	{r7}
 8012968:	b083      	sub	sp, #12
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	061a      	lsls	r2, r3, #24
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	021b      	lsls	r3, r3, #8
 8012976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801297a:	431a      	orrs	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	0a1b      	lsrs	r3, r3, #8
 8012980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012984:	431a      	orrs	r2, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	0e1b      	lsrs	r3, r3, #24
 801298a:	4313      	orrs	r3, r2
}
 801298c:	4618      	mov	r0, r3
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8012998:	b480      	push	{r7}
 801299a:	b087      	sub	sp, #28
 801299c:	af00      	add	r7, sp, #0
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	1c5a      	adds	r2, r3, #1
 80129a8:	60fa      	str	r2, [r7, #12]
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	1c5a      	adds	r2, r3, #1
 80129b2:	60ba      	str	r2, [r7, #8]
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 80129b8:	7dfa      	ldrb	r2, [r7, #23]
 80129ba:	7dbb      	ldrb	r3, [r7, #22]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d016      	beq.n	80129ee <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 80129c0:	7dfb      	ldrb	r3, [r7, #23]
 80129c2:	f043 0320 	orr.w	r3, r3, #32
 80129c6:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80129c8:	7d7b      	ldrb	r3, [r7, #21]
 80129ca:	2b60      	cmp	r3, #96	; 0x60
 80129cc:	d90c      	bls.n	80129e8 <lwip_strnicmp+0x50>
 80129ce:	7d7b      	ldrb	r3, [r7, #21]
 80129d0:	2b7a      	cmp	r3, #122	; 0x7a
 80129d2:	d809      	bhi.n	80129e8 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80129d4:	7dbb      	ldrb	r3, [r7, #22]
 80129d6:	f043 0320 	orr.w	r3, r3, #32
 80129da:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 80129dc:	7d7a      	ldrb	r2, [r7, #21]
 80129de:	7d3b      	ldrb	r3, [r7, #20]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d003      	beq.n	80129ec <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e00c      	b.n	8012a02 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80129e8:	2301      	movs	r3, #1
 80129ea:	e00a      	b.n	8012a02 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80129ec:	bf00      	nop
      }
    }
    len--;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	3b01      	subs	r3, #1
 80129f2:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <lwip_strnicmp+0x68>
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d1d1      	bne.n	80129a4 <lwip_strnicmp+0xc>
  return 0;
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	371c      	adds	r7, #28
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr

08012a0e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8012a0e:	b480      	push	{r7}
 8012a10:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8012a12:	bf00      	nop
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr

08012a1c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	b083      	sub	sp, #12
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	4603      	mov	r3, r0
 8012a24:	6039      	str	r1, [r7, #0]
 8012a26:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8012a28:	79fb      	ldrb	r3, [r7, #7]
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d80f      	bhi.n	8012a4e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d006      	beq.n	8012a42 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8012a34:	79fb      	ldrb	r3, [r7, #7]
 8012a36:	4909      	ldr	r1, [pc, #36]	; (8012a5c <dns_setserver+0x40>)
 8012a38:	683a      	ldr	r2, [r7, #0]
 8012a3a:	6812      	ldr	r2, [r2, #0]
 8012a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8012a40:	e005      	b.n	8012a4e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8012a42:	79fb      	ldrb	r3, [r7, #7]
 8012a44:	4905      	ldr	r1, [pc, #20]	; (8012a5c <dns_setserver+0x40>)
 8012a46:	4a06      	ldr	r2, [pc, #24]	; (8012a60 <dns_setserver+0x44>)
 8012a48:	6812      	ldr	r2, [r2, #0]
 8012a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012a4e:	bf00      	nop
 8012a50:	370c      	adds	r7, #12
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	20005534 	.word	0x20005534
 8012a60:	080274e4 	.word	0x080274e4

08012a64 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8012a68:	f000 fc54 	bl	8013314 <dns_check_entries>
}
 8012a6c:	bf00      	nop
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	73fb      	strb	r3, [r7, #15]
 8012a7e:	e02e      	b.n	8012ade <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8012a80:	7bfa      	ldrb	r2, [r7, #15]
 8012a82:	491b      	ldr	r1, [pc, #108]	; (8012af0 <dns_lookup+0x80>)
 8012a84:	4613      	mov	r3, r2
 8012a86:	011b      	lsls	r3, r3, #4
 8012a88:	4413      	add	r3, r2
 8012a8a:	011b      	lsls	r3, r3, #4
 8012a8c:	440b      	add	r3, r1
 8012a8e:	330a      	adds	r3, #10
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	2b03      	cmp	r3, #3
 8012a94:	d120      	bne.n	8012ad8 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8012a96:	7bfa      	ldrb	r2, [r7, #15]
 8012a98:	4613      	mov	r3, r2
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	4413      	add	r3, r2
 8012a9e:	011b      	lsls	r3, r3, #4
 8012aa0:	3310      	adds	r3, #16
 8012aa2:	4a13      	ldr	r2, [pc, #76]	; (8012af0 <dns_lookup+0x80>)
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012aaa:	4619      	mov	r1, r3
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f7ff ff73 	bl	8012998 <lwip_strnicmp>
 8012ab2:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d10f      	bne.n	8012ad8 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d00a      	beq.n	8012ad4 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8012abe:	7bfa      	ldrb	r2, [r7, #15]
 8012ac0:	490b      	ldr	r1, [pc, #44]	; (8012af0 <dns_lookup+0x80>)
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	011b      	lsls	r3, r3, #4
 8012ac6:	4413      	add	r3, r2
 8012ac8:	011b      	lsls	r3, r3, #4
 8012aca:	440b      	add	r3, r1
 8012acc:	3304      	adds	r3, #4
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	e007      	b.n	8012ae8 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012ad8:	7bfb      	ldrb	r3, [r7, #15]
 8012ada:	3301      	adds	r3, #1
 8012adc:	73fb      	strb	r3, [r7, #15]
 8012ade:	7bfb      	ldrb	r3, [r7, #15]
 8012ae0:	2b03      	cmp	r3, #3
 8012ae2:	d9cd      	bls.n	8012a80 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8012ae4:	f06f 030f 	mvn.w	r3, #15
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	200050c4 	.word	0x200050c4

08012af4 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b088      	sub	sp, #32
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	4613      	mov	r3, r2
 8012b00:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 8012b02:	88fb      	ldrh	r3, [r7, #6]
 8012b04:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 8012b06:	8b7b      	ldrh	r3, [r7, #26]
 8012b08:	4619      	mov	r1, r3
 8012b0a:	68b8      	ldr	r0, [r7, #8]
 8012b0c:	f002 fe86 	bl	801581c <pbuf_try_get_at>
 8012b10:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	db04      	blt.n	8012b22 <dns_compare_name+0x2e>
 8012b18:	8b7b      	ldrh	r3, [r7, #26]
 8012b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d102      	bne.n	8012b28 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 8012b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b26:	e06c      	b.n	8012c02 <dns_compare_name+0x10e>
    }
    response_offset++;
 8012b28:	8b7b      	ldrh	r3, [r7, #26]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b34:	2bc0      	cmp	r3, #192	; 0xc0
 8012b36:	d144      	bne.n	8012bc2 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 8012b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b3c:	e061      	b.n	8012c02 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 8012b3e:	8b7b      	ldrh	r3, [r7, #26]
 8012b40:	4619      	mov	r1, r3
 8012b42:	68b8      	ldr	r0, [r7, #8]
 8012b44:	f002 fe6a 	bl	801581c <pbuf_try_get_at>
 8012b48:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	da02      	bge.n	8012b56 <dns_compare_name+0x62>
          return 0xFFFF;
 8012b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b54:	e055      	b.n	8012c02 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	74fb      	strb	r3, [r7, #19]
 8012b5c:	7cfb      	ldrb	r3, [r7, #19]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	4a2a      	ldr	r2, [pc, #168]	; (8012c0c <dns_compare_name+0x118>)
 8012b62:	4413      	add	r3, r2
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	f003 0303 	and.w	r3, r3, #3
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d103      	bne.n	8012b76 <dns_compare_name+0x82>
 8012b6e:	7cfb      	ldrb	r3, [r7, #19]
 8012b70:	f103 0220 	add.w	r2, r3, #32
 8012b74:	e000      	b.n	8012b78 <dns_compare_name+0x84>
 8012b76:	7cfa      	ldrb	r2, [r7, #19]
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	74bb      	strb	r3, [r7, #18]
 8012b7c:	7cbb      	ldrb	r3, [r7, #18]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	4922      	ldr	r1, [pc, #136]	; (8012c0c <dns_compare_name+0x118>)
 8012b82:	440b      	add	r3, r1
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	f003 0303 	and.w	r3, r3, #3
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d102      	bne.n	8012b94 <dns_compare_name+0xa0>
 8012b8e:	7cbb      	ldrb	r3, [r7, #18]
 8012b90:	3320      	adds	r3, #32
 8012b92:	e000      	b.n	8012b96 <dns_compare_name+0xa2>
 8012b94:	7cbb      	ldrb	r3, [r7, #18]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d002      	beq.n	8012ba0 <dns_compare_name+0xac>
          return 0xFFFF;
 8012b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b9e:	e030      	b.n	8012c02 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 8012ba0:	8b7b      	ldrh	r3, [r7, #26]
 8012ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d102      	bne.n	8012bb0 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 8012baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bae:	e028      	b.n	8012c02 <dns_compare_name+0x10e>
        }
        response_offset++;
 8012bb0:	8b7b      	ldrh	r3, [r7, #26]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	837b      	strh	r3, [r7, #26]
        ++query;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	60fb      	str	r3, [r7, #12]
        --n;
 8012bbc:	69fb      	ldr	r3, [r7, #28]
 8012bbe:	3b01      	subs	r3, #1
 8012bc0:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	dcba      	bgt.n	8012b3e <dns_compare_name+0x4a>
      }
      ++query;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 8012bce:	8b7b      	ldrh	r3, [r7, #26]
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	68b8      	ldr	r0, [r7, #8]
 8012bd4:	f002 fe22 	bl	801581c <pbuf_try_get_at>
 8012bd8:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	da02      	bge.n	8012be6 <dns_compare_name+0xf2>
      return 0xFFFF;
 8012be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012be4:	e00d      	b.n	8012c02 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d18c      	bne.n	8012b06 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 8012bec:	8b7b      	ldrh	r3, [r7, #26]
 8012bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d102      	bne.n	8012bfc <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 8012bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bfa:	e002      	b.n	8012c02 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 8012bfc:	8b7b      	ldrh	r3, [r7, #26]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	b29b      	uxth	r3, r3
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3720      	adds	r7, #32
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	080274fa 	.word	0x080274fa

08012c10 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	460b      	mov	r3, r1
 8012c1a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 8012c1c:	887b      	ldrh	r3, [r7, #2]
 8012c1e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 8012c20:	89fb      	ldrh	r3, [r7, #14]
 8012c22:	1c5a      	adds	r2, r3, #1
 8012c24:	81fa      	strh	r2, [r7, #14]
 8012c26:	4619      	mov	r1, r3
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f002 fdf7 	bl	801581c <pbuf_try_get_at>
 8012c2e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	db02      	blt.n	8012c3c <dns_skip_name+0x2c>
 8012c36:	89fb      	ldrh	r3, [r7, #14]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d102      	bne.n	8012c42 <dns_skip_name+0x32>
      return 0xFFFF;
 8012c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c40:	e02f      	b.n	8012ca2 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012c48:	2bc0      	cmp	r3, #192	; 0xc0
 8012c4a:	d01e      	beq.n	8012c8a <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 8012c4c:	89fa      	ldrh	r2, [r7, #14]
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	4413      	add	r3, r2
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	8912      	ldrh	r2, [r2, #8]
 8012c56:	4293      	cmp	r3, r2
 8012c58:	db02      	blt.n	8012c60 <dns_skip_name+0x50>
        return 0xFFFF;
 8012c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c5e:	e020      	b.n	8012ca2 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	89fb      	ldrh	r3, [r7, #14]
 8012c66:	4413      	add	r3, r2
 8012c68:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 8012c6a:	89fb      	ldrh	r3, [r7, #14]
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f002 fdd4 	bl	801581c <pbuf_try_get_at>
 8012c74:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	da02      	bge.n	8012c82 <dns_skip_name+0x72>
      return 0xFFFF;
 8012c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c80:	e00f      	b.n	8012ca2 <dns_skip_name+0x92>
    }
  } while (n != 0);
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1cb      	bne.n	8012c20 <dns_skip_name+0x10>
 8012c88:	e000      	b.n	8012c8c <dns_skip_name+0x7c>
      break;
 8012c8a:	bf00      	nop

  if (offset == 0xFFFF) {
 8012c8c:	89fb      	ldrh	r3, [r7, #14]
 8012c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d102      	bne.n	8012c9c <dns_skip_name+0x8c>
    return 0xFFFF;
 8012c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c9a:	e002      	b.n	8012ca2 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 8012c9c:	89fb      	ldrh	r3, [r7, #14]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	b29b      	uxth	r3, r3
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
	...

08012cac <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b090      	sub	sp, #64	; 0x40
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8012cb6:	79fa      	ldrb	r2, [r7, #7]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	011b      	lsls	r3, r3, #4
 8012cbc:	4413      	add	r3, r2
 8012cbe:	011b      	lsls	r3, r3, #4
 8012cc0:	4a6c      	ldr	r2, [pc, #432]	; (8012e74 <dns_send+0x1c8>)
 8012cc2:	4413      	add	r3, r2
 8012cc4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc8:	7adb      	ldrb	r3, [r3, #11]
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d906      	bls.n	8012cdc <dns_send+0x30>
 8012cce:	4b6a      	ldr	r3, [pc, #424]	; (8012e78 <dns_send+0x1cc>)
 8012cd0:	f240 22fa 	movw	r2, #762	; 0x2fa
 8012cd4:	4969      	ldr	r1, [pc, #420]	; (8012e7c <dns_send+0x1d0>)
 8012cd6:	486a      	ldr	r0, [pc, #424]	; (8012e80 <dns_send+0x1d4>)
 8012cd8:	f00e fbe8 	bl	80214ac <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8012cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cde:	7adb      	ldrb	r3, [r3, #11]
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	4b68      	ldr	r3, [pc, #416]	; (8012e84 <dns_send+0x1d8>)
 8012ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d109      	bne.n	8012d00 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8012cec:	79fb      	ldrb	r3, [r7, #7]
 8012cee:	2100      	movs	r1, #0
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f000 f959 	bl	8012fa8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	e0b4      	b.n	8012e6a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8012d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d02:	3310      	adds	r3, #16
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ed fa63 	bl	80001d0 <strlen>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	b29b      	uxth	r3, r3
 8012d0e:	3312      	adds	r3, #18
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d16:	4619      	mov	r1, r3
 8012d18:	2036      	movs	r0, #54	; 0x36
 8012d1a:	f001 feb9 	bl	8014a90 <pbuf_alloc>
 8012d1e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8012d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f000 8095 	beq.w	8012e52 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8012d28:	f107 0310 	add.w	r3, r7, #16
 8012d2c:	220c      	movs	r2, #12
 8012d2e:	2100      	movs	r1, #0
 8012d30:	4618      	mov	r0, r3
 8012d32:	f00e faf9 	bl	8021328 <memset>
    hdr.id = lwip_htons(entry->txid);
 8012d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d38:	891b      	ldrh	r3, [r3, #8]
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7ff fdfe 	bl	801293c <lwip_htons>
 8012d40:	4603      	mov	r3, r0
 8012d42:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8012d44:	2301      	movs	r3, #1
 8012d46:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8012d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d4c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8012d4e:	f107 0310 	add.w	r3, r7, #16
 8012d52:	220c      	movs	r2, #12
 8012d54:	4619      	mov	r1, r3
 8012d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d58:	f002 fc32 	bl	80155c0 <pbuf_take>
    hostname = entry->name;
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	3310      	adds	r3, #16
 8012d60:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8012d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d64:	3b01      	subs	r3, #1
 8012d66:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8012d68:	230c      	movs	r3, #12
 8012d6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	3301      	adds	r3, #1
 8012d70:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8012d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d74:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012d76:	2300      	movs	r3, #0
 8012d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d7c:	e007      	b.n	8012d8e <dns_send+0xe2>
        ++n;
 8012d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d82:	3301      	adds	r3, #1
 8012d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	2b2e      	cmp	r3, #46	; 0x2e
 8012d94:	d003      	beq.n	8012d9e <dns_send+0xf2>
 8012d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d1ef      	bne.n	8012d7e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8012d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8012da6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012da8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dac:	4413      	add	r3, r2
 8012dae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012db2:	4293      	cmp	r3, r2
 8012db4:	dc53      	bgt.n	8012e5e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8012db6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dc0:	f002 fd4e 	bl	8015860 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8012dc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dd0:	f002 fc88 	bl	80156e4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8012dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ddc:	4413      	add	r3, r2
 8012dde:	b29b      	uxth	r3, r3
 8012de0:	3301      	adds	r3, #1
 8012de2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1bf      	bne.n	8012d6c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8012dec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dee:	2200      	movs	r2, #0
 8012df0:	4619      	mov	r1, r3
 8012df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012df4:	f002 fd34 	bl	8015860 <pbuf_put_at>
    query_idx++;
 8012df8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8012dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e02:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8012e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e08:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8012e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e0c:	f107 010c 	add.w	r1, r7, #12
 8012e10:	2204      	movs	r2, #4
 8012e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e14:	f002 fc66 	bl	80156e4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8012e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e1a:	7bdb      	ldrb	r3, [r3, #15]
 8012e1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8012e20:	2335      	movs	r3, #53	; 0x35
 8012e22:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8012e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e26:	7adb      	ldrb	r3, [r3, #11]
 8012e28:	009b      	lsls	r3, r3, #2
 8012e2a:	4a16      	ldr	r2, [pc, #88]	; (8012e84 <dns_send+0x1d8>)
 8012e2c:	4413      	add	r3, r2
 8012e2e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8012e30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012e34:	4a14      	ldr	r2, [pc, #80]	; (8012e88 <dns_send+0x1dc>)
 8012e36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e3c:	69fa      	ldr	r2, [r7, #28]
 8012e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e40:	f009 f8d8 	bl	801bff4 <udp_sendto>
 8012e44:	4603      	mov	r3, r0
 8012e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8012e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e4c:	f002 f904 	bl	8015058 <pbuf_free>
 8012e50:	e002      	b.n	8012e58 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8012e52:	23ff      	movs	r3, #255	; 0xff
 8012e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8012e58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012e5c:	e005      	b.n	8012e6a <dns_send+0x1be>
        goto overflow_return;
 8012e5e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8012e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e62:	f002 f8f9 	bl	8015058 <pbuf_free>
  return ERR_VAL;
 8012e66:	f06f 0305 	mvn.w	r3, #5
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3740      	adds	r7, #64	; 0x40
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	200050c4 	.word	0x200050c4
 8012e78:	08024304 	.word	0x08024304
 8012e7c:	08024334 	.word	0x08024334
 8012e80:	0802434c 	.word	0x0802434c
 8012e84:	20005534 	.word	0x20005534
 8012e88:	200050b0 	.word	0x200050b0

08012e8c <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8012e92:	202e      	movs	r0, #46	; 0x2e
 8012e94:	f009 fbfb 	bl	801c68e <udp_new_ip_type>
 8012e98:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d101      	bne.n	8012ea4 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	e026      	b.n	8012ef2 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 8012ea4:	f00e fbd4 	bl	8021650 <rand>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 8012eac:	88fb      	ldrh	r3, [r7, #6]
 8012eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eb2:	d308      	bcc.n	8012ec6 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8012eb4:	88fb      	ldrh	r3, [r7, #6]
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	4910      	ldr	r1, [pc, #64]	; (8012efc <dns_alloc_random_port+0x70>)
 8012eba:	68b8      	ldr	r0, [r7, #8]
 8012ebc:	f009 fa50 	bl	801c360 <udp_bind>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	73fb      	strb	r3, [r7, #15]
 8012ec4:	e001      	b.n	8012eca <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 8012ec6:	23f8      	movs	r3, #248	; 0xf8
 8012ec8:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 8012eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ece:	f113 0f08 	cmn.w	r3, #8
 8012ed2:	d0e7      	beq.n	8012ea4 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 8012ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d004      	beq.n	8012ee6 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 8012edc:	68b8      	ldr	r0, [r7, #8]
 8012ede:	f009 fb7d 	bl	801c5dc <udp_remove>
    return NULL;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e005      	b.n	8012ef2 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	4905      	ldr	r1, [pc, #20]	; (8012f00 <dns_alloc_random_port+0x74>)
 8012eea:	68b8      	ldr	r0, [r7, #8]
 8012eec:	f009 fb56 	bl	801c59c <udp_recv>
  return pcb;
 8012ef0:	68bb      	ldr	r3, [r7, #8]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3710      	adds	r7, #16
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	080274e4 	.word	0x080274e4
 8012f00:	080133ad 	.word	0x080133ad

08012f04 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 8012f04:	b590      	push	{r4, r7, lr}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	71fb      	strb	r3, [r7, #7]
 8012f0e:	e008      	b.n	8012f22 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 8012f10:	79fb      	ldrb	r3, [r7, #7]
 8012f12:	4a23      	ldr	r2, [pc, #140]	; (8012fa0 <dns_alloc_pcb+0x9c>)
 8012f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d006      	beq.n	8012f2a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8012f1c:	79fb      	ldrb	r3, [r7, #7]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	71fb      	strb	r3, [r7, #7]
 8012f22:	79fb      	ldrb	r3, [r7, #7]
 8012f24:	2b03      	cmp	r3, #3
 8012f26:	d9f3      	bls.n	8012f10 <dns_alloc_pcb+0xc>
 8012f28:	e000      	b.n	8012f2c <dns_alloc_pcb+0x28>
      break;
 8012f2a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 8012f2c:	79fb      	ldrb	r3, [r7, #7]
 8012f2e:	2b03      	cmp	r3, #3
 8012f30:	d811      	bhi.n	8012f56 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 8012f32:	79fc      	ldrb	r4, [r7, #7]
 8012f34:	f7ff ffaa 	bl	8012e8c <dns_alloc_random_port>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	4a19      	ldr	r2, [pc, #100]	; (8012fa0 <dns_alloc_pcb+0x9c>)
 8012f3c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8012f40:	79fb      	ldrb	r3, [r7, #7]
 8012f42:	4a17      	ldr	r2, [pc, #92]	; (8012fa0 <dns_alloc_pcb+0x9c>)
 8012f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d004      	beq.n	8012f56 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 8012f4c:	4a15      	ldr	r2, [pc, #84]	; (8012fa4 <dns_alloc_pcb+0xa0>)
 8012f4e:	79fb      	ldrb	r3, [r7, #7]
 8012f50:	7013      	strb	r3, [r2, #0]
      return i;
 8012f52:	79fb      	ldrb	r3, [r7, #7]
 8012f54:	e020      	b.n	8012f98 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8012f56:	2300      	movs	r3, #0
 8012f58:	71fb      	strb	r3, [r7, #7]
 8012f5a:	4b12      	ldr	r3, [pc, #72]	; (8012fa4 <dns_alloc_pcb+0xa0>)
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	3301      	adds	r3, #1
 8012f60:	71bb      	strb	r3, [r7, #6]
 8012f62:	e015      	b.n	8012f90 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8012f64:	79bb      	ldrb	r3, [r7, #6]
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d901      	bls.n	8012f6e <dns_alloc_pcb+0x6a>
      idx = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 8012f6e:	79bb      	ldrb	r3, [r7, #6]
 8012f70:	4a0b      	ldr	r2, [pc, #44]	; (8012fa0 <dns_alloc_pcb+0x9c>)
 8012f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d004      	beq.n	8012f84 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 8012f7a:	4a0a      	ldr	r2, [pc, #40]	; (8012fa4 <dns_alloc_pcb+0xa0>)
 8012f7c:	79bb      	ldrb	r3, [r7, #6]
 8012f7e:	7013      	strb	r3, [r2, #0]
      return idx;
 8012f80:	79bb      	ldrb	r3, [r7, #6]
 8012f82:	e009      	b.n	8012f98 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	3301      	adds	r3, #1
 8012f88:	71fb      	strb	r3, [r7, #7]
 8012f8a:	79bb      	ldrb	r3, [r7, #6]
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	71bb      	strb	r3, [r7, #6]
 8012f90:	79fb      	ldrb	r3, [r7, #7]
 8012f92:	2b03      	cmp	r3, #3
 8012f94:	d9e6      	bls.n	8012f64 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 8012f96:	2304      	movs	r3, #4
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	370c      	adds	r7, #12
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd90      	pop	{r4, r7, pc}
 8012fa0:	200050b0 	.word	0x200050b0
 8012fa4:	200050c0 	.word	0x200050c0

08012fa8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8012fa8:	b590      	push	{r4, r7, lr}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4603      	mov	r3, r0
 8012fb0:	6039      	str	r1, [r7, #0]
 8012fb2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	73fb      	strb	r3, [r7, #15]
 8012fb8:	e03d      	b.n	8013036 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8012fba:	7bfa      	ldrb	r2, [r7, #15]
 8012fbc:	4957      	ldr	r1, [pc, #348]	; (801311c <dns_call_found+0x174>)
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	440b      	add	r3, r1
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d030      	beq.n	8013030 <dns_call_found+0x88>
 8012fce:	7bfa      	ldrb	r2, [r7, #15]
 8012fd0:	4952      	ldr	r1, [pc, #328]	; (801311c <dns_call_found+0x174>)
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	005b      	lsls	r3, r3, #1
 8012fd6:	4413      	add	r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	440b      	add	r3, r1
 8012fdc:	3308      	adds	r3, #8
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	79fa      	ldrb	r2, [r7, #7]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d124      	bne.n	8013030 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8012fe6:	7bfa      	ldrb	r2, [r7, #15]
 8012fe8:	494c      	ldr	r1, [pc, #304]	; (801311c <dns_call_found+0x174>)
 8012fea:	4613      	mov	r3, r2
 8012fec:	005b      	lsls	r3, r3, #1
 8012fee:	4413      	add	r3, r2
 8012ff0:	009b      	lsls	r3, r3, #2
 8012ff2:	440b      	add	r3, r1
 8012ff4:	681c      	ldr	r4, [r3, #0]
 8012ff6:	79fa      	ldrb	r2, [r7, #7]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	011b      	lsls	r3, r3, #4
 8012ffc:	4413      	add	r3, r2
 8012ffe:	011b      	lsls	r3, r3, #4
 8013000:	3310      	adds	r3, #16
 8013002:	4a47      	ldr	r2, [pc, #284]	; (8013120 <dns_call_found+0x178>)
 8013004:	1898      	adds	r0, r3, r2
 8013006:	7bfa      	ldrb	r2, [r7, #15]
 8013008:	4944      	ldr	r1, [pc, #272]	; (801311c <dns_call_found+0x174>)
 801300a:	4613      	mov	r3, r2
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	4413      	add	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	440b      	add	r3, r1
 8013014:	3304      	adds	r3, #4
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	461a      	mov	r2, r3
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 801301e:	7bfa      	ldrb	r2, [r7, #15]
 8013020:	493e      	ldr	r1, [pc, #248]	; (801311c <dns_call_found+0x174>)
 8013022:	4613      	mov	r3, r2
 8013024:	005b      	lsls	r3, r3, #1
 8013026:	4413      	add	r3, r2
 8013028:	009b      	lsls	r3, r3, #2
 801302a:	440b      	add	r3, r1
 801302c:	2200      	movs	r2, #0
 801302e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8013030:	7bfb      	ldrb	r3, [r7, #15]
 8013032:	3301      	adds	r3, #1
 8013034:	73fb      	strb	r3, [r7, #15]
 8013036:	7bfb      	ldrb	r3, [r7, #15]
 8013038:	2b03      	cmp	r3, #3
 801303a:	d9be      	bls.n	8012fba <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801303c:	2300      	movs	r3, #0
 801303e:	73fb      	strb	r3, [r7, #15]
 8013040:	e031      	b.n	80130a6 <dns_call_found+0xfe>
    if (i == idx) {
 8013042:	7bfa      	ldrb	r2, [r7, #15]
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	429a      	cmp	r2, r3
 8013048:	d029      	beq.n	801309e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801304a:	7bfa      	ldrb	r2, [r7, #15]
 801304c:	4934      	ldr	r1, [pc, #208]	; (8013120 <dns_call_found+0x178>)
 801304e:	4613      	mov	r3, r2
 8013050:	011b      	lsls	r3, r3, #4
 8013052:	4413      	add	r3, r2
 8013054:	011b      	lsls	r3, r3, #4
 8013056:	440b      	add	r3, r1
 8013058:	330a      	adds	r3, #10
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	2b02      	cmp	r3, #2
 801305e:	d11f      	bne.n	80130a0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8013060:	7bfa      	ldrb	r2, [r7, #15]
 8013062:	492f      	ldr	r1, [pc, #188]	; (8013120 <dns_call_found+0x178>)
 8013064:	4613      	mov	r3, r2
 8013066:	011b      	lsls	r3, r3, #4
 8013068:	4413      	add	r3, r2
 801306a:	011b      	lsls	r3, r3, #4
 801306c:	440b      	add	r3, r1
 801306e:	330f      	adds	r3, #15
 8013070:	7819      	ldrb	r1, [r3, #0]
 8013072:	79fa      	ldrb	r2, [r7, #7]
 8013074:	482a      	ldr	r0, [pc, #168]	; (8013120 <dns_call_found+0x178>)
 8013076:	4613      	mov	r3, r2
 8013078:	011b      	lsls	r3, r3, #4
 801307a:	4413      	add	r3, r2
 801307c:	011b      	lsls	r3, r3, #4
 801307e:	4403      	add	r3, r0
 8013080:	330f      	adds	r3, #15
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	4299      	cmp	r1, r3
 8013086:	d10b      	bne.n	80130a0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8013088:	79fa      	ldrb	r2, [r7, #7]
 801308a:	4925      	ldr	r1, [pc, #148]	; (8013120 <dns_call_found+0x178>)
 801308c:	4613      	mov	r3, r2
 801308e:	011b      	lsls	r3, r3, #4
 8013090:	4413      	add	r3, r2
 8013092:	011b      	lsls	r3, r3, #4
 8013094:	440b      	add	r3, r1
 8013096:	330f      	adds	r3, #15
 8013098:	2204      	movs	r2, #4
 801309a:	701a      	strb	r2, [r3, #0]
        break;
 801309c:	e006      	b.n	80130ac <dns_call_found+0x104>
      continue; /* only check other requests */
 801309e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80130a0:	7bfb      	ldrb	r3, [r7, #15]
 80130a2:	3301      	adds	r3, #1
 80130a4:	73fb      	strb	r3, [r7, #15]
 80130a6:	7bfb      	ldrb	r3, [r7, #15]
 80130a8:	2b03      	cmp	r3, #3
 80130aa:	d9ca      	bls.n	8013042 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80130ac:	79fa      	ldrb	r2, [r7, #7]
 80130ae:	491c      	ldr	r1, [pc, #112]	; (8013120 <dns_call_found+0x178>)
 80130b0:	4613      	mov	r3, r2
 80130b2:	011b      	lsls	r3, r3, #4
 80130b4:	4413      	add	r3, r2
 80130b6:	011b      	lsls	r3, r3, #4
 80130b8:	440b      	add	r3, r1
 80130ba:	330f      	adds	r3, #15
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	2b03      	cmp	r3, #3
 80130c0:	d827      	bhi.n	8013112 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80130c2:	79fa      	ldrb	r2, [r7, #7]
 80130c4:	4916      	ldr	r1, [pc, #88]	; (8013120 <dns_call_found+0x178>)
 80130c6:	4613      	mov	r3, r2
 80130c8:	011b      	lsls	r3, r3, #4
 80130ca:	4413      	add	r3, r2
 80130cc:	011b      	lsls	r3, r3, #4
 80130ce:	440b      	add	r3, r1
 80130d0:	330f      	adds	r3, #15
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	461a      	mov	r2, r3
 80130d6:	4b13      	ldr	r3, [pc, #76]	; (8013124 <dns_call_found+0x17c>)
 80130d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130dc:	4618      	mov	r0, r3
 80130de:	f009 fa7d 	bl	801c5dc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80130e2:	79fa      	ldrb	r2, [r7, #7]
 80130e4:	490e      	ldr	r1, [pc, #56]	; (8013120 <dns_call_found+0x178>)
 80130e6:	4613      	mov	r3, r2
 80130e8:	011b      	lsls	r3, r3, #4
 80130ea:	4413      	add	r3, r2
 80130ec:	011b      	lsls	r3, r3, #4
 80130ee:	440b      	add	r3, r1
 80130f0:	330f      	adds	r3, #15
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	4619      	mov	r1, r3
 80130f6:	4b0b      	ldr	r3, [pc, #44]	; (8013124 <dns_call_found+0x17c>)
 80130f8:	2200      	movs	r2, #0
 80130fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80130fe:	79fa      	ldrb	r2, [r7, #7]
 8013100:	4907      	ldr	r1, [pc, #28]	; (8013120 <dns_call_found+0x178>)
 8013102:	4613      	mov	r3, r2
 8013104:	011b      	lsls	r3, r3, #4
 8013106:	4413      	add	r3, r2
 8013108:	011b      	lsls	r3, r3, #4
 801310a:	440b      	add	r3, r1
 801310c:	330f      	adds	r3, #15
 801310e:	2204      	movs	r2, #4
 8013110:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8013112:	bf00      	nop
 8013114:	3714      	adds	r7, #20
 8013116:	46bd      	mov	sp, r7
 8013118:	bd90      	pop	{r4, r7, pc}
 801311a:	bf00      	nop
 801311c:	20005504 	.word	0x20005504
 8013120:	200050c4 	.word	0x200050c4
 8013124:	200050b0 	.word	0x200050b0

08013128 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 801312e:	f00e fa8f 	bl	8021650 <rand>
 8013132:	4603      	mov	r3, r0
 8013134:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013136:	2300      	movs	r3, #0
 8013138:	71fb      	strb	r3, [r7, #7]
 801313a:	e01a      	b.n	8013172 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801313c:	79fa      	ldrb	r2, [r7, #7]
 801313e:	4911      	ldr	r1, [pc, #68]	; (8013184 <dns_create_txid+0x5c>)
 8013140:	4613      	mov	r3, r2
 8013142:	011b      	lsls	r3, r3, #4
 8013144:	4413      	add	r3, r2
 8013146:	011b      	lsls	r3, r3, #4
 8013148:	440b      	add	r3, r1
 801314a:	330a      	adds	r3, #10
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	2b02      	cmp	r3, #2
 8013150:	d10c      	bne.n	801316c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8013152:	79fa      	ldrb	r2, [r7, #7]
 8013154:	490b      	ldr	r1, [pc, #44]	; (8013184 <dns_create_txid+0x5c>)
 8013156:	4613      	mov	r3, r2
 8013158:	011b      	lsls	r3, r3, #4
 801315a:	4413      	add	r3, r2
 801315c:	011b      	lsls	r3, r3, #4
 801315e:	440b      	add	r3, r1
 8013160:	3308      	adds	r3, #8
 8013162:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013164:	88ba      	ldrh	r2, [r7, #4]
 8013166:	429a      	cmp	r2, r3
 8013168:	d100      	bne.n	801316c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 801316a:	e7e0      	b.n	801312e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801316c:	79fb      	ldrb	r3, [r7, #7]
 801316e:	3301      	adds	r3, #1
 8013170:	71fb      	strb	r3, [r7, #7]
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	2b03      	cmp	r3, #3
 8013176:	d9e1      	bls.n	801313c <dns_create_txid+0x14>
    }
  }

  return txid;
 8013178:	88bb      	ldrh	r3, [r7, #4]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	200050c4 	.word	0x200050c4

08013188 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8013188:	b480      	push	{r7}
 801318a:	b085      	sub	sp, #20
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8013190:	2300      	movs	r3, #0
 8013192:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00d      	beq.n	80131b6 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	7adb      	ldrb	r3, [r3, #11]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d109      	bne.n	80131b6 <dns_backupserver_available+0x2e>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	7adb      	ldrb	r3, [r3, #11]
 80131a6:	3301      	adds	r3, #1
 80131a8:	4a06      	ldr	r2, [pc, #24]	; (80131c4 <dns_backupserver_available+0x3c>)
 80131aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d001      	beq.n	80131b6 <dns_backupserver_available+0x2e>
      ret = 1;
 80131b2:	2301      	movs	r3, #1
 80131b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3714      	adds	r7, #20
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr
 80131c4:	20005534 	.word	0x20005534

080131c8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	4603      	mov	r3, r0
 80131d0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80131d2:	79fa      	ldrb	r2, [r7, #7]
 80131d4:	4613      	mov	r3, r2
 80131d6:	011b      	lsls	r3, r3, #4
 80131d8:	4413      	add	r3, r2
 80131da:	011b      	lsls	r3, r3, #4
 80131dc:	4a48      	ldr	r2, [pc, #288]	; (8013300 <dns_check_entry+0x138>)
 80131de:	4413      	add	r3, r2
 80131e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80131e2:	79fb      	ldrb	r3, [r7, #7]
 80131e4:	2b03      	cmp	r3, #3
 80131e6:	d906      	bls.n	80131f6 <dns_check_entry+0x2e>
 80131e8:	4b46      	ldr	r3, [pc, #280]	; (8013304 <dns_check_entry+0x13c>)
 80131ea:	f240 421c 	movw	r2, #1052	; 0x41c
 80131ee:	4946      	ldr	r1, [pc, #280]	; (8013308 <dns_check_entry+0x140>)
 80131f0:	4846      	ldr	r0, [pc, #280]	; (801330c <dns_check_entry+0x144>)
 80131f2:	f00e f95b 	bl	80214ac <iprintf>

  switch (entry->state) {
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	7a9b      	ldrb	r3, [r3, #10]
 80131fa:	2b03      	cmp	r3, #3
 80131fc:	d86f      	bhi.n	80132de <dns_check_entry+0x116>
 80131fe:	a201      	add	r2, pc, #4	; (adr r2, 8013204 <dns_check_entry+0x3c>)
 8013200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013204:	080132ef 	.word	0x080132ef
 8013208:	08013215 	.word	0x08013215
 801320c:	08013247 	.word	0x08013247
 8013210:	080132bd 	.word	0x080132bd
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8013214:	f7ff ff88 	bl	8013128 <dns_create_txid>
 8013218:	4603      	mov	r3, r0
 801321a:	461a      	mov	r2, r3
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2202      	movs	r2, #2
 8013224:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2200      	movs	r2, #0
 801322a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2201      	movs	r2, #1
 8013230:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2200      	movs	r2, #0
 8013236:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8013238:	79fb      	ldrb	r3, [r7, #7]
 801323a:	4618      	mov	r0, r3
 801323c:	f7ff fd36 	bl	8012cac <dns_send>
 8013240:	4603      	mov	r3, r0
 8013242:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8013244:	e058      	b.n	80132f8 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	7b1b      	ldrb	r3, [r3, #12]
 801324a:	3b01      	subs	r3, #1
 801324c:	b2da      	uxtb	r2, r3
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	731a      	strb	r2, [r3, #12]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	7b1b      	ldrb	r3, [r3, #12]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d14b      	bne.n	80132f2 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	7b5b      	ldrb	r3, [r3, #13]
 801325e:	3301      	adds	r3, #1
 8013260:	b2da      	uxtb	r2, r3
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	735a      	strb	r2, [r3, #13]
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	7b5b      	ldrb	r3, [r3, #13]
 801326a:	2b04      	cmp	r3, #4
 801326c:	d11b      	bne.n	80132a6 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7ff ff8a 	bl	8013188 <dns_backupserver_available>
 8013274:	4603      	mov	r3, r0
 8013276:	2b00      	cmp	r3, #0
 8013278:	d00c      	beq.n	8013294 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	7adb      	ldrb	r3, [r3, #11]
 801327e:	3301      	adds	r3, #1
 8013280:	b2da      	uxtb	r2, r3
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2201      	movs	r2, #1
 801328a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2200      	movs	r2, #0
 8013290:	735a      	strb	r2, [r3, #13]
 8013292:	e00c      	b.n	80132ae <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8013294:	79fb      	ldrb	r3, [r7, #7]
 8013296:	2100      	movs	r1, #0
 8013298:	4618      	mov	r0, r3
 801329a:	f7ff fe85 	bl	8012fa8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2200      	movs	r2, #0
 80132a2:	729a      	strb	r2, [r3, #10]
            break;
 80132a4:	e028      	b.n	80132f8 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	7b5a      	ldrb	r2, [r3, #13]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80132ae:	79fb      	ldrb	r3, [r7, #7]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7ff fcfb 	bl	8012cac <dns_send>
 80132b6:	4603      	mov	r3, r0
 80132b8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80132ba:	e01a      	b.n	80132f2 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d008      	beq.n	80132d6 <dns_check_entry+0x10e>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	1e5a      	subs	r2, r3, #1
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d10f      	bne.n	80132f6 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2200      	movs	r2, #0
 80132da:	729a      	strb	r2, [r3, #10]
      }
      break;
 80132dc:	e00b      	b.n	80132f6 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80132de:	4b09      	ldr	r3, [pc, #36]	; (8013304 <dns_check_entry+0x13c>)
 80132e0:	f240 425b 	movw	r2, #1115	; 0x45b
 80132e4:	490a      	ldr	r1, [pc, #40]	; (8013310 <dns_check_entry+0x148>)
 80132e6:	4809      	ldr	r0, [pc, #36]	; (801330c <dns_check_entry+0x144>)
 80132e8:	f00e f8e0 	bl	80214ac <iprintf>
      break;
 80132ec:	e004      	b.n	80132f8 <dns_check_entry+0x130>
      break;
 80132ee:	bf00      	nop
 80132f0:	e002      	b.n	80132f8 <dns_check_entry+0x130>
      break;
 80132f2:	bf00      	nop
 80132f4:	e000      	b.n	80132f8 <dns_check_entry+0x130>
      break;
 80132f6:	bf00      	nop
  }
}
 80132f8:	bf00      	nop
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	200050c4 	.word	0x200050c4
 8013304:	08024304 	.word	0x08024304
 8013308:	08024374 	.word	0x08024374
 801330c:	0802434c 	.word	0x0802434c
 8013310:	08024390 	.word	0x08024390

08013314 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801331a:	2300      	movs	r3, #0
 801331c:	71fb      	strb	r3, [r7, #7]
 801331e:	e006      	b.n	801332e <dns_check_entries+0x1a>
    dns_check_entry(i);
 8013320:	79fb      	ldrb	r3, [r7, #7]
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff ff50 	bl	80131c8 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013328:	79fb      	ldrb	r3, [r7, #7]
 801332a:	3301      	adds	r3, #1
 801332c:	71fb      	strb	r3, [r7, #7]
 801332e:	79fb      	ldrb	r3, [r7, #7]
 8013330:	2b03      	cmp	r3, #3
 8013332:	d9f5      	bls.n	8013320 <dns_check_entries+0xc>
  }
}
 8013334:	bf00      	nop
 8013336:	bf00      	nop
 8013338:	3708      	adds	r7, #8
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
	...

08013340 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	4603      	mov	r3, r0
 8013348:	6039      	str	r1, [r7, #0]
 801334a:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 801334c:	79fa      	ldrb	r2, [r7, #7]
 801334e:	4613      	mov	r3, r2
 8013350:	011b      	lsls	r3, r3, #4
 8013352:	4413      	add	r3, r2
 8013354:	011b      	lsls	r3, r3, #4
 8013356:	4a13      	ldr	r2, [pc, #76]	; (80133a4 <dns_correct_response+0x64>)
 8013358:	4413      	add	r3, r2
 801335a:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2203      	movs	r2, #3
 8013360:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	683a      	ldr	r2, [r7, #0]
 8013366:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4a0e      	ldr	r2, [pc, #56]	; (80133a8 <dns_correct_response+0x68>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d902      	bls.n	8013378 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	4a0c      	ldr	r2, [pc, #48]	; (80133a8 <dns_correct_response+0x68>)
 8013376:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	1d1a      	adds	r2, r3, #4
 801337c:	79fb      	ldrb	r3, [r7, #7]
 801337e:	4611      	mov	r1, r2
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff fe11 	bl	8012fa8 <dns_call_found>

  if (entry->ttl == 0) {
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d106      	bne.n	801339c <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	7a9b      	ldrb	r3, [r3, #10]
 8013392:	2b03      	cmp	r3, #3
 8013394:	d102      	bne.n	801339c <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2200      	movs	r2, #0
 801339a:	729a      	strb	r2, [r3, #10]
    }
  }
}
 801339c:	bf00      	nop
 801339e:	3710      	adds	r7, #16
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	200050c4 	.word	0x200050c4
 80133a8:	00093a80 	.word	0x00093a80

080133ac <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80133ac:	b590      	push	{r4, r7, lr}
 80133ae:	b091      	sub	sp, #68	; 0x44
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	60f8      	str	r0, [r7, #12]
 80133b4:	60b9      	str	r1, [r7, #8]
 80133b6:	607a      	str	r2, [r7, #4]
 80133b8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	891b      	ldrh	r3, [r3, #8]
 80133be:	2b0f      	cmp	r3, #15
 80133c0:	f240 811e 	bls.w	8013600 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 80133c4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80133c8:	2300      	movs	r3, #0
 80133ca:	220c      	movs	r2, #12
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f002 f849 	bl	8015464 <pbuf_copy_partial>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b0c      	cmp	r3, #12
 80133d6:	f040 8115 	bne.w	8013604 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 80133da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133dc:	4618      	mov	r0, r3
 80133de:	f7ff faad 	bl	801293c <lwip_htons>
 80133e2:	4603      	mov	r3, r0
 80133e4:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80133e6:	2300      	movs	r3, #0
 80133e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80133ec:	e102      	b.n	80135f4 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 80133ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80133f2:	4613      	mov	r3, r2
 80133f4:	011b      	lsls	r3, r3, #4
 80133f6:	4413      	add	r3, r2
 80133f8:	011b      	lsls	r3, r3, #4
 80133fa:	4a92      	ldr	r2, [pc, #584]	; (8013644 <dns_recv+0x298>)
 80133fc:	4413      	add	r3, r2
 80133fe:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 8013400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013402:	7a9b      	ldrb	r3, [r3, #10]
 8013404:	2b02      	cmp	r3, #2
 8013406:	f040 80f0 	bne.w	80135ea <dns_recv+0x23e>
          (entry->txid == txid)) {
 801340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 801340e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013410:	429a      	cmp	r2, r3
 8013412:	f040 80ea 	bne.w	80135ea <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 8013416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013418:	4618      	mov	r0, r3
 801341a:	f7ff fa8f 	bl	801293c <lwip_htons>
 801341e:	4603      	mov	r3, r0
 8013420:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8013422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013424:	4618      	mov	r0, r3
 8013426:	f7ff fa89 	bl	801293c <lwip_htons>
 801342a:	4603      	mov	r3, r0
 801342c:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801342e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013432:	b25b      	sxtb	r3, r3
 8013434:	2b00      	cmp	r3, #0
 8013436:	f280 80e7 	bge.w	8013608 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 801343a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801343c:	2b01      	cmp	r3, #1
 801343e:	f040 80e5 	bne.w	801360c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013448:	7adb      	ldrb	r3, [r3, #11]
 801344a:	4619      	mov	r1, r3
 801344c:	4b7e      	ldr	r3, [pc, #504]	; (8013648 <dns_recv+0x29c>)
 801344e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013452:	429a      	cmp	r2, r3
 8013454:	f040 80dc 	bne.w	8013610 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8013458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801345a:	3310      	adds	r3, #16
 801345c:	220c      	movs	r2, #12
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff fb47 	bl	8012af4 <dns_compare_name>
 8013466:	4603      	mov	r3, r0
 8013468:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 801346a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801346c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013470:	4293      	cmp	r3, r2
 8013472:	f000 80cf 	beq.w	8013614 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8013476:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013478:	f107 0114 	add.w	r1, r7, #20
 801347c:	2204      	movs	r2, #4
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f001 fff0 	bl	8015464 <pbuf_copy_partial>
 8013484:	4603      	mov	r3, r0
 8013486:	2b04      	cmp	r3, #4
 8013488:	f040 80c6 	bne.w	8013618 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 801348c:	8afb      	ldrh	r3, [r7, #22]
 801348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013492:	f040 80c3 	bne.w	801361c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 8013496:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8013498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801349c:	f040 80be 	bne.w	801361c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 80134a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134a2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80134a6:	4293      	cmp	r3, r2
 80134a8:	f200 80ba 	bhi.w	8013620 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80134ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134ae:	3304      	adds	r3, #4
 80134b0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80134b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134b6:	f003 030f 	and.w	r3, r3, #15
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d078      	beq.n	80135b0 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 80134be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80134c0:	f7ff fe62 	bl	8013188 <dns_backupserver_available>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d07a      	beq.n	80135c0 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 80134ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134cc:	2203      	movs	r2, #3
 80134ce:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 80134d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d2:	2201      	movs	r2, #1
 80134d4:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 80134d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80134da:	4618      	mov	r0, r3
 80134dc:	f7ff fe74 	bl	80131c8 <dns_check_entry>

            goto ignore_packet;
 80134e0:	e0a9      	b.n	8013636 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 80134e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134e4:	4619      	mov	r1, r3
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f7ff fb92 	bl	8012c10 <dns_skip_name>
 80134ec:	4603      	mov	r3, r0
 80134ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 80134f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134f6:	4293      	cmp	r3, r2
 80134f8:	f000 8094 	beq.w	8013624 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80134fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134fe:	f107 0118 	add.w	r1, r7, #24
 8013502:	220a      	movs	r2, #10
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f001 ffad 	bl	8015464 <pbuf_copy_partial>
 801350a:	4603      	mov	r3, r0
 801350c:	2b0a      	cmp	r3, #10
 801350e:	f040 808b 	bne.w	8013628 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8013512:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013514:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013518:	4293      	cmp	r3, r2
 801351a:	f200 8087 	bhi.w	801362c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801351e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013520:	330a      	adds	r3, #10
 8013522:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8013524:	8b7b      	ldrh	r3, [r7, #26]
 8013526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801352a:	d12b      	bne.n	8013584 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801352c:	8b3b      	ldrh	r3, [r7, #24]
 801352e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013532:	d127      	bne.n	8013584 <dns_recv+0x1d8>
 8013534:	8c3b      	ldrh	r3, [r7, #32]
 8013536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801353a:	d123      	bne.n	8013584 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801353c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801353e:	f107 0110 	add.w	r1, r7, #16
 8013542:	2204      	movs	r2, #4
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f001 ff8d 	bl	8015464 <pbuf_copy_partial>
 801354a:	4603      	mov	r3, r0
 801354c:	2b04      	cmp	r3, #4
 801354e:	d16f      	bne.n	8013630 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8013550:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013554:	6939      	ldr	r1, [r7, #16]
 8013556:	483b      	ldr	r0, [pc, #236]	; (8013644 <dns_recv+0x298>)
 8013558:	4613      	mov	r3, r2
 801355a:	011b      	lsls	r3, r3, #4
 801355c:	4413      	add	r3, r2
 801355e:	011b      	lsls	r3, r3, #4
 8013560:	4403      	add	r3, r0
 8013562:	3304      	adds	r3, #4
 8013564:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f001 fd76 	bl	8015058 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff f9f9 	bl	8012966 <lwip_htonl>
 8013574:	4602      	mov	r2, r0
 8013576:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801357a:	4611      	mov	r1, r2
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff fedf 	bl	8013340 <dns_correct_response>
 8013582:	e05c      	b.n	801363e <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8013584:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8013586:	8c3b      	ldrh	r3, [r7, #32]
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff f9d7 	bl	801293c <lwip_htons>
 801358e:	4603      	mov	r3, r0
 8013590:	4423      	add	r3, r4
 8013592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013596:	da4d      	bge.n	8013634 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8013598:	8c3b      	ldrh	r3, [r7, #32]
 801359a:	4618      	mov	r0, r3
 801359c:	f7ff f9ce 	bl	801293c <lwip_htons>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80135a6:	4413      	add	r3, r2
 80135a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 80135aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135ac:	3b01      	subs	r3, #1
 80135ae:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80135b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d004      	beq.n	80135c0 <dns_recv+0x214>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	891b      	ldrh	r3, [r3, #8]
 80135ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80135bc:	429a      	cmp	r2, r3
 80135be:	d390      	bcc.n	80134e2 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f001 fd49 	bl	8015058 <pbuf_free>
        dns_call_found(i, NULL);
 80135c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135ca:	2100      	movs	r1, #0
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff fceb 	bl	8012fa8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80135d2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80135d6:	491b      	ldr	r1, [pc, #108]	; (8013644 <dns_recv+0x298>)
 80135d8:	4613      	mov	r3, r2
 80135da:	011b      	lsls	r3, r3, #4
 80135dc:	4413      	add	r3, r2
 80135de:	011b      	lsls	r3, r3, #4
 80135e0:	440b      	add	r3, r1
 80135e2:	330a      	adds	r3, #10
 80135e4:	2200      	movs	r2, #0
 80135e6:	701a      	strb	r2, [r3, #0]
        return;
 80135e8:	e029      	b.n	801363e <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80135ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135ee:	3301      	adds	r3, #1
 80135f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80135f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135f8:	2b03      	cmp	r3, #3
 80135fa:	f67f aef8 	bls.w	80133ee <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 80135fe:	e001      	b.n	8013604 <dns_recv+0x258>
    goto ignore_packet;
 8013600:	bf00      	nop
 8013602:	e018      	b.n	8013636 <dns_recv+0x28a>
ignore_packet:
 8013604:	bf00      	nop
 8013606:	e016      	b.n	8013636 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013608:	bf00      	nop
 801360a:	e014      	b.n	8013636 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 801360c:	bf00      	nop
 801360e:	e012      	b.n	8013636 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 8013610:	bf00      	nop
 8013612:	e010      	b.n	8013636 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013614:	bf00      	nop
 8013616:	e00e      	b.n	8013636 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013618:	bf00      	nop
 801361a:	e00c      	b.n	8013636 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 801361c:	bf00      	nop
 801361e:	e00a      	b.n	8013636 <dns_recv+0x28a>
          goto ignore_packet;
 8013620:	bf00      	nop
 8013622:	e008      	b.n	8013636 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8013624:	bf00      	nop
 8013626:	e006      	b.n	8013636 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8013628:	bf00      	nop
 801362a:	e004      	b.n	8013636 <dns_recv+0x28a>
              goto ignore_packet;
 801362c:	bf00      	nop
 801362e:	e002      	b.n	8013636 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 8013630:	bf00      	nop
 8013632:	e000      	b.n	8013636 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8013634:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f001 fd0e 	bl	8015058 <pbuf_free>
  return;
 801363c:	bf00      	nop
}
 801363e:	3744      	adds	r7, #68	; 0x44
 8013640:	46bd      	mov	sp, r7
 8013642:	bd90      	pop	{r4, r7, pc}
 8013644:	200050c4 	.word	0x200050c4
 8013648:	20005534 	.word	0x20005534

0801364c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b08a      	sub	sp, #40	; 0x28
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	60b9      	str	r1, [r7, #8]
 8013656:	607a      	str	r2, [r7, #4]
 8013658:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 801365a:	2300      	movs	r3, #0
 801365c:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801365e:	2300      	movs	r3, #0
 8013660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013664:	e056      	b.n	8013714 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013666:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801366a:	4990      	ldr	r1, [pc, #576]	; (80138ac <dns_enqueue+0x260>)
 801366c:	4613      	mov	r3, r2
 801366e:	011b      	lsls	r3, r3, #4
 8013670:	4413      	add	r3, r2
 8013672:	011b      	lsls	r3, r3, #4
 8013674:	440b      	add	r3, r1
 8013676:	330a      	adds	r3, #10
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	2b02      	cmp	r3, #2
 801367c:	d145      	bne.n	801370a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 801367e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013682:	4613      	mov	r3, r2
 8013684:	011b      	lsls	r3, r3, #4
 8013686:	4413      	add	r3, r2
 8013688:	011b      	lsls	r3, r3, #4
 801368a:	3310      	adds	r3, #16
 801368c:	4a87      	ldr	r2, [pc, #540]	; (80138ac <dns_enqueue+0x260>)
 801368e:	4413      	add	r3, r2
 8013690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013694:	4619      	mov	r1, r3
 8013696:	68f8      	ldr	r0, [r7, #12]
 8013698:	f7ff f97e 	bl	8012998 <lwip_strnicmp>
 801369c:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d133      	bne.n	801370a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80136a2:	2300      	movs	r3, #0
 80136a4:	76fb      	strb	r3, [r7, #27]
 80136a6:	e02d      	b.n	8013704 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 80136a8:	7efa      	ldrb	r2, [r7, #27]
 80136aa:	4981      	ldr	r1, [pc, #516]	; (80138b0 <dns_enqueue+0x264>)
 80136ac:	4613      	mov	r3, r2
 80136ae:	005b      	lsls	r3, r3, #1
 80136b0:	4413      	add	r3, r2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	440b      	add	r3, r1
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d120      	bne.n	80136fe <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 80136bc:	7efa      	ldrb	r2, [r7, #27]
 80136be:	497c      	ldr	r1, [pc, #496]	; (80138b0 <dns_enqueue+0x264>)
 80136c0:	4613      	mov	r3, r2
 80136c2:	005b      	lsls	r3, r3, #1
 80136c4:	4413      	add	r3, r2
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	440b      	add	r3, r1
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 80136ce:	7efa      	ldrb	r2, [r7, #27]
 80136d0:	4977      	ldr	r1, [pc, #476]	; (80138b0 <dns_enqueue+0x264>)
 80136d2:	4613      	mov	r3, r2
 80136d4:	005b      	lsls	r3, r3, #1
 80136d6:	4413      	add	r3, r2
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	440b      	add	r3, r1
 80136dc:	3304      	adds	r3, #4
 80136de:	683a      	ldr	r2, [r7, #0]
 80136e0:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 80136e2:	7efa      	ldrb	r2, [r7, #27]
 80136e4:	4972      	ldr	r1, [pc, #456]	; (80138b0 <dns_enqueue+0x264>)
 80136e6:	4613      	mov	r3, r2
 80136e8:	005b      	lsls	r3, r3, #1
 80136ea:	4413      	add	r3, r2
 80136ec:	009b      	lsls	r3, r3, #2
 80136ee:	440b      	add	r3, r1
 80136f0:	3308      	adds	r3, #8
 80136f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80136f6:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 80136f8:	f06f 0304 	mvn.w	r3, #4
 80136fc:	e0d1      	b.n	80138a2 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80136fe:	7efb      	ldrb	r3, [r7, #27]
 8013700:	3301      	adds	r3, #1
 8013702:	76fb      	strb	r3, [r7, #27]
 8013704:	7efb      	ldrb	r3, [r7, #27]
 8013706:	2b03      	cmp	r3, #3
 8013708:	d9ce      	bls.n	80136a8 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801370a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801370e:	3301      	adds	r3, #1
 8013710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013718:	2b03      	cmp	r3, #3
 801371a:	d9a4      	bls.n	8013666 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 801371c:	2300      	movs	r3, #0
 801371e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 8013722:	2304      	movs	r3, #4
 8013724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013728:	2300      	movs	r3, #0
 801372a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801372e:	e027      	b.n	8013780 <dns_enqueue+0x134>
    entry = &dns_table[i];
 8013730:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013734:	4613      	mov	r3, r2
 8013736:	011b      	lsls	r3, r3, #4
 8013738:	4413      	add	r3, r2
 801373a:	011b      	lsls	r3, r3, #4
 801373c:	4a5b      	ldr	r2, [pc, #364]	; (80138ac <dns_enqueue+0x260>)
 801373e:	4413      	add	r3, r2
 8013740:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 8013742:	6a3b      	ldr	r3, [r7, #32]
 8013744:	7a9b      	ldrb	r3, [r3, #10]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d01f      	beq.n	801378a <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 801374a:	6a3b      	ldr	r3, [r7, #32]
 801374c:	7a9b      	ldrb	r3, [r3, #10]
 801374e:	2b03      	cmp	r3, #3
 8013750:	d111      	bne.n	8013776 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8013752:	4b58      	ldr	r3, [pc, #352]	; (80138b4 <dns_enqueue+0x268>)
 8013754:	781a      	ldrb	r2, [r3, #0]
 8013756:	6a3b      	ldr	r3, [r7, #32]
 8013758:	7b9b      	ldrb	r3, [r3, #14]
 801375a:	1ad3      	subs	r3, r2, r3
 801375c:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 801375e:	7eba      	ldrb	r2, [r7, #26]
 8013760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013764:	429a      	cmp	r2, r3
 8013766:	d906      	bls.n	8013776 <dns_enqueue+0x12a>
        lseq = age;
 8013768:	7ebb      	ldrb	r3, [r7, #26]
 801376a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 801376e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013772:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801377a:	3301      	adds	r3, #1
 801377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013784:	2b03      	cmp	r3, #3
 8013786:	d9d3      	bls.n	8013730 <dns_enqueue+0xe4>
 8013788:	e000      	b.n	801378c <dns_enqueue+0x140>
      break;
 801378a:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 801378c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013790:	2b04      	cmp	r3, #4
 8013792:	d11f      	bne.n	80137d4 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8013794:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013798:	2b03      	cmp	r3, #3
 801379a:	d80b      	bhi.n	80137b4 <dns_enqueue+0x168>
 801379c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80137a0:	4942      	ldr	r1, [pc, #264]	; (80138ac <dns_enqueue+0x260>)
 80137a2:	4613      	mov	r3, r2
 80137a4:	011b      	lsls	r3, r3, #4
 80137a6:	4413      	add	r3, r2
 80137a8:	011b      	lsls	r3, r3, #4
 80137aa:	440b      	add	r3, r1
 80137ac:	330a      	adds	r3, #10
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	2b03      	cmp	r3, #3
 80137b2:	d002      	beq.n	80137ba <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 80137b4:	f04f 33ff 	mov.w	r3, #4294967295
 80137b8:	e073      	b.n	80138a2 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 80137ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80137be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 80137c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80137c6:	4613      	mov	r3, r2
 80137c8:	011b      	lsls	r3, r3, #4
 80137ca:	4413      	add	r3, r2
 80137cc:	011b      	lsls	r3, r3, #4
 80137ce:	4a37      	ldr	r2, [pc, #220]	; (80138ac <dns_enqueue+0x260>)
 80137d0:	4413      	add	r3, r2
 80137d2:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 80137d4:	2300      	movs	r3, #0
 80137d6:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80137d8:	2300      	movs	r3, #0
 80137da:	76fb      	strb	r3, [r7, #27]
 80137dc:	e015      	b.n	801380a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 80137de:	7efa      	ldrb	r2, [r7, #27]
 80137e0:	4933      	ldr	r1, [pc, #204]	; (80138b0 <dns_enqueue+0x264>)
 80137e2:	4613      	mov	r3, r2
 80137e4:	005b      	lsls	r3, r3, #1
 80137e6:	4413      	add	r3, r2
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	440b      	add	r3, r1
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d108      	bne.n	8013804 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 80137f2:	7efa      	ldrb	r2, [r7, #27]
 80137f4:	4613      	mov	r3, r2
 80137f6:	005b      	lsls	r3, r3, #1
 80137f8:	4413      	add	r3, r2
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4a2c      	ldr	r2, [pc, #176]	; (80138b0 <dns_enqueue+0x264>)
 80137fe:	4413      	add	r3, r2
 8013800:	61fb      	str	r3, [r7, #28]
      break;
 8013802:	e005      	b.n	8013810 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013804:	7efb      	ldrb	r3, [r7, #27]
 8013806:	3301      	adds	r3, #1
 8013808:	76fb      	strb	r3, [r7, #27]
 801380a:	7efb      	ldrb	r3, [r7, #27]
 801380c:	2b03      	cmp	r3, #3
 801380e:	d9e6      	bls.n	80137de <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d102      	bne.n	801381c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8013816:	f04f 33ff 	mov.w	r3, #4294967295
 801381a:	e042      	b.n	80138a2 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013822:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8013824:	6a3b      	ldr	r3, [r7, #32]
 8013826:	2201      	movs	r2, #1
 8013828:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 801382a:	4b22      	ldr	r3, [pc, #136]	; (80138b4 <dns_enqueue+0x268>)
 801382c:	781a      	ldrb	r2, [r3, #0]
 801382e:	6a3b      	ldr	r3, [r7, #32]
 8013830:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	683a      	ldr	r2, [r7, #0]
 801383c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	2bff      	cmp	r3, #255	; 0xff
 8013842:	bf28      	it	cs
 8013844:	23ff      	movcs	r3, #255	; 0xff
 8013846:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 8013848:	6a3b      	ldr	r3, [r7, #32]
 801384a:	3310      	adds	r3, #16
 801384c:	697a      	ldr	r2, [r7, #20]
 801384e:	68f9      	ldr	r1, [r7, #12]
 8013850:	4618      	mov	r0, r3
 8013852:	f00d fd41 	bl	80212d8 <memcpy>
  entry->name[namelen] = 0;
 8013856:	6a3a      	ldr	r2, [r7, #32]
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	4413      	add	r3, r2
 801385c:	3310      	adds	r3, #16
 801385e:	2200      	movs	r2, #0
 8013860:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8013862:	f7ff fb4f 	bl	8012f04 <dns_alloc_pcb>
 8013866:	4603      	mov	r3, r0
 8013868:	461a      	mov	r2, r3
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 801386e:	6a3b      	ldr	r3, [r7, #32]
 8013870:	7bdb      	ldrb	r3, [r3, #15]
 8013872:	2b03      	cmp	r3, #3
 8013874:	d908      	bls.n	8013888 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 8013876:	6a3b      	ldr	r3, [r7, #32]
 8013878:	2200      	movs	r2, #0
 801387a:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	2200      	movs	r2, #0
 8013880:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 8013882:	f04f 33ff 	mov.w	r3, #4294967295
 8013886:	e00c      	b.n	80138a2 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 8013888:	4b0a      	ldr	r3, [pc, #40]	; (80138b4 <dns_enqueue+0x268>)
 801388a:	781b      	ldrb	r3, [r3, #0]
 801388c:	3301      	adds	r3, #1
 801388e:	b2da      	uxtb	r2, r3
 8013890:	4b08      	ldr	r3, [pc, #32]	; (80138b4 <dns_enqueue+0x268>)
 8013892:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8013894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013898:	4618      	mov	r0, r3
 801389a:	f7ff fc95 	bl	80131c8 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 801389e:	f06f 0304 	mvn.w	r3, #4
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3728      	adds	r7, #40	; 0x28
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	200050c4 	.word	0x200050c4
 80138b0:	20005504 	.word	0x20005504
 80138b4:	200050c1 	.word	0x200050c1

080138b8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af00      	add	r7, sp, #0
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
 80138c4:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d006      	beq.n	80138da <dns_gethostbyname_addrtype+0x22>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d102      	bne.n	80138e0 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 80138da:	f06f 030f 	mvn.w	r3, #15
 80138de:	e029      	b.n	8013934 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 80138e0:	68f8      	ldr	r0, [r7, #12]
 80138e2:	f7ec fc75 	bl	80001d0 <strlen>
 80138e6:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	2bff      	cmp	r3, #255	; 0xff
 80138ec:	d902      	bls.n	80138f4 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 80138ee:	f06f 030f 	mvn.w	r3, #15
 80138f2:	e01f      	b.n	8013934 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 80138f4:	68b9      	ldr	r1, [r7, #8]
 80138f6:	68f8      	ldr	r0, [r7, #12]
 80138f8:	f00c f9bc 	bl	801fc74 <ip4addr_aton>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d001      	beq.n	8013906 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8013902:	2300      	movs	r3, #0
 8013904:	e016      	b.n	8013934 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8013906:	68b9      	ldr	r1, [r7, #8]
 8013908:	68f8      	ldr	r0, [r7, #12]
 801390a:	f7ff f8b1 	bl	8012a70 <dns_lookup>
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	d101      	bne.n	8013918 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8013914:	2300      	movs	r3, #0
 8013916:	e00d      	b.n	8013934 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8013918:	4b08      	ldr	r3, [pc, #32]	; (801393c <dns_gethostbyname_addrtype+0x84>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d102      	bne.n	8013926 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 8013920:	f06f 0305 	mvn.w	r3, #5
 8013924:	e006      	b.n	8013934 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	6979      	ldr	r1, [r7, #20]
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f7ff fe8d 	bl	801364c <dns_enqueue>
 8013932:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8013934:	4618      	mov	r0, r3
 8013936:	3718      	adds	r7, #24
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	20005534 	.word	0x20005534

08013940 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801394a:	f00d fb05 	bl	8020f58 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801394e:	f000 f8d7 	bl	8013b00 <mem_init>
  memp_init();
 8013952:	f000 fc33 	bl	80141bc <memp_init>
  pbuf_init();
  netif_init();
 8013956:	f000 fcf9 	bl	801434c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801395a:	f008 f955 	bl	801bc08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801395e:	f001 ffa1 	bl	80158a4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8013962:	f7ff f854 	bl	8012a0e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013966:	f008 f895 	bl	801ba94 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801396a:	bf00      	nop
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
	...

08013974 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013974:	b480      	push	{r7}
 8013976:	b083      	sub	sp, #12
 8013978:	af00      	add	r7, sp, #0
 801397a:	4603      	mov	r3, r0
 801397c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801397e:	4b05      	ldr	r3, [pc, #20]	; (8013994 <ptr_to_mem+0x20>)
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	88fb      	ldrh	r3, [r7, #6]
 8013984:	4413      	add	r3, r2
}
 8013986:	4618      	mov	r0, r3
 8013988:	370c      	adds	r7, #12
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop
 8013994:	2000553c 	.word	0x2000553c

08013998 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80139a0:	4b05      	ldr	r3, [pc, #20]	; (80139b8 <mem_to_ptr+0x20>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	1ad3      	subs	r3, r2, r3
 80139a8:	b29b      	uxth	r3, r3
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	370c      	adds	r7, #12
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop
 80139b8:	2000553c 	.word	0x2000553c

080139bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80139bc:	b590      	push	{r4, r7, lr}
 80139be:	b085      	sub	sp, #20
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80139c4:	4b45      	ldr	r3, [pc, #276]	; (8013adc <plug_holes+0x120>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d206      	bcs.n	80139dc <plug_holes+0x20>
 80139ce:	4b44      	ldr	r3, [pc, #272]	; (8013ae0 <plug_holes+0x124>)
 80139d0:	f240 12df 	movw	r2, #479	; 0x1df
 80139d4:	4943      	ldr	r1, [pc, #268]	; (8013ae4 <plug_holes+0x128>)
 80139d6:	4844      	ldr	r0, [pc, #272]	; (8013ae8 <plug_holes+0x12c>)
 80139d8:	f00d fd68 	bl	80214ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80139dc:	4b43      	ldr	r3, [pc, #268]	; (8013aec <plug_holes+0x130>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d306      	bcc.n	80139f4 <plug_holes+0x38>
 80139e6:	4b3e      	ldr	r3, [pc, #248]	; (8013ae0 <plug_holes+0x124>)
 80139e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80139ec:	4940      	ldr	r1, [pc, #256]	; (8013af0 <plug_holes+0x134>)
 80139ee:	483e      	ldr	r0, [pc, #248]	; (8013ae8 <plug_holes+0x12c>)
 80139f0:	f00d fd5c 	bl	80214ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	791b      	ldrb	r3, [r3, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d006      	beq.n	8013a0a <plug_holes+0x4e>
 80139fc:	4b38      	ldr	r3, [pc, #224]	; (8013ae0 <plug_holes+0x124>)
 80139fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013a02:	493c      	ldr	r1, [pc, #240]	; (8013af4 <plug_holes+0x138>)
 8013a04:	4838      	ldr	r0, [pc, #224]	; (8013ae8 <plug_holes+0x12c>)
 8013a06:	f00d fd51 	bl	80214ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a12:	d906      	bls.n	8013a22 <plug_holes+0x66>
 8013a14:	4b32      	ldr	r3, [pc, #200]	; (8013ae0 <plug_holes+0x124>)
 8013a16:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013a1a:	4937      	ldr	r1, [pc, #220]	; (8013af8 <plug_holes+0x13c>)
 8013a1c:	4832      	ldr	r0, [pc, #200]	; (8013ae8 <plug_holes+0x12c>)
 8013a1e:	f00d fd45 	bl	80214ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff ffa4 	bl	8013974 <ptr_to_mem>
 8013a2c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d024      	beq.n	8013a80 <plug_holes+0xc4>
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	791b      	ldrb	r3, [r3, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d120      	bne.n	8013a80 <plug_holes+0xc4>
 8013a3e:	4b2b      	ldr	r3, [pc, #172]	; (8013aec <plug_holes+0x130>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	68fa      	ldr	r2, [r7, #12]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d01b      	beq.n	8013a80 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013a48:	4b2c      	ldr	r3, [pc, #176]	; (8013afc <plug_holes+0x140>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d102      	bne.n	8013a58 <plug_holes+0x9c>
      lfree = mem;
 8013a52:	4a2a      	ldr	r2, [pc, #168]	; (8013afc <plug_holes+0x140>)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	881a      	ldrh	r2, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	881b      	ldrh	r3, [r3, #0]
 8013a64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a68:	d00a      	beq.n	8013a80 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7ff ff80 	bl	8013974 <ptr_to_mem>
 8013a74:	4604      	mov	r4, r0
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f7ff ff8e 	bl	8013998 <mem_to_ptr>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	885b      	ldrh	r3, [r3, #2]
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7ff ff75 	bl	8013974 <ptr_to_mem>
 8013a8a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d01f      	beq.n	8013ad4 <plug_holes+0x118>
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	791b      	ldrb	r3, [r3, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d11b      	bne.n	8013ad4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013a9c:	4b17      	ldr	r3, [pc, #92]	; (8013afc <plug_holes+0x140>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d102      	bne.n	8013aac <plug_holes+0xf0>
      lfree = pmem;
 8013aa6:	4a15      	ldr	r2, [pc, #84]	; (8013afc <plug_holes+0x140>)
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	881a      	ldrh	r2, [r3, #0]
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	881b      	ldrh	r3, [r3, #0]
 8013ab8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013abc:	d00a      	beq.n	8013ad4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	881b      	ldrh	r3, [r3, #0]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ff ff56 	bl	8013974 <ptr_to_mem>
 8013ac8:	4604      	mov	r4, r0
 8013aca:	68b8      	ldr	r0, [r7, #8]
 8013acc:	f7ff ff64 	bl	8013998 <mem_to_ptr>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013ad4:	bf00      	nop
 8013ad6:	3714      	adds	r7, #20
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd90      	pop	{r4, r7, pc}
 8013adc:	2000553c 	.word	0x2000553c
 8013ae0:	080243b0 	.word	0x080243b0
 8013ae4:	080243e0 	.word	0x080243e0
 8013ae8:	080243f8 	.word	0x080243f8
 8013aec:	20005540 	.word	0x20005540
 8013af0:	08024420 	.word	0x08024420
 8013af4:	0802443c 	.word	0x0802443c
 8013af8:	08024458 	.word	0x08024458
 8013afc:	20005548 	.word	0x20005548

08013b00 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013b06:	4b1f      	ldr	r3, [pc, #124]	; (8013b84 <mem_init+0x84>)
 8013b08:	3303      	adds	r3, #3
 8013b0a:	f023 0303 	bic.w	r3, r3, #3
 8013b0e:	461a      	mov	r2, r3
 8013b10:	4b1d      	ldr	r3, [pc, #116]	; (8013b88 <mem_init+0x88>)
 8013b12:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013b14:	4b1c      	ldr	r3, [pc, #112]	; (8013b88 <mem_init+0x88>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013b20:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2200      	movs	r2, #0
 8013b26:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013b2e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8013b32:	f7ff ff1f 	bl	8013974 <ptr_to_mem>
 8013b36:	4603      	mov	r3, r0
 8013b38:	4a14      	ldr	r2, [pc, #80]	; (8013b8c <mem_init+0x8c>)
 8013b3a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013b3c:	4b13      	ldr	r3, [pc, #76]	; (8013b8c <mem_init+0x8c>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2201      	movs	r2, #1
 8013b42:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013b44:	4b11      	ldr	r3, [pc, #68]	; (8013b8c <mem_init+0x8c>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013b4c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013b4e:	4b0f      	ldr	r3, [pc, #60]	; (8013b8c <mem_init+0x8c>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013b56:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013b58:	4b0b      	ldr	r3, [pc, #44]	; (8013b88 <mem_init+0x88>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4a0c      	ldr	r2, [pc, #48]	; (8013b90 <mem_init+0x90>)
 8013b5e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013b60:	480c      	ldr	r0, [pc, #48]	; (8013b94 <mem_init+0x94>)
 8013b62:	f00d fa05 	bl	8020f70 <sys_mutex_new>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d006      	beq.n	8013b7a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013b6c:	4b0a      	ldr	r3, [pc, #40]	; (8013b98 <mem_init+0x98>)
 8013b6e:	f240 221f 	movw	r2, #543	; 0x21f
 8013b72:	490a      	ldr	r1, [pc, #40]	; (8013b9c <mem_init+0x9c>)
 8013b74:	480a      	ldr	r0, [pc, #40]	; (8013ba0 <mem_init+0xa0>)
 8013b76:	f00d fc99 	bl	80214ac <iprintf>
  }
}
 8013b7a:	bf00      	nop
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	20013484 	.word	0x20013484
 8013b88:	2000553c 	.word	0x2000553c
 8013b8c:	20005540 	.word	0x20005540
 8013b90:	20005548 	.word	0x20005548
 8013b94:	20005544 	.word	0x20005544
 8013b98:	080243b0 	.word	0x080243b0
 8013b9c:	08024484 	.word	0x08024484
 8013ba0:	080243f8 	.word	0x080243f8

08013ba4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7ff fef3 	bl	8013998 <mem_to_ptr>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	881b      	ldrh	r3, [r3, #0]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7ff feda 	bl	8013974 <ptr_to_mem>
 8013bc0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	885b      	ldrh	r3, [r3, #2]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7ff fed4 	bl	8013974 <ptr_to_mem>
 8013bcc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	881b      	ldrh	r3, [r3, #0]
 8013bd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013bd6:	d818      	bhi.n	8013c0a <mem_link_valid+0x66>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	885b      	ldrh	r3, [r3, #2]
 8013bdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013be0:	d813      	bhi.n	8013c0a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013be6:	8afa      	ldrh	r2, [r7, #22]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d004      	beq.n	8013bf6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	881b      	ldrh	r3, [r3, #0]
 8013bf0:	8afa      	ldrh	r2, [r7, #22]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d109      	bne.n	8013c0a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013bf6:	4b08      	ldr	r3, [pc, #32]	; (8013c18 <mem_link_valid+0x74>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013bfa:	693a      	ldr	r2, [r7, #16]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d006      	beq.n	8013c0e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	885b      	ldrh	r3, [r3, #2]
 8013c04:	8afa      	ldrh	r2, [r7, #22]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d001      	beq.n	8013c0e <mem_link_valid+0x6a>
    return 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	e000      	b.n	8013c10 <mem_link_valid+0x6c>
  }
  return 1;
 8013c0e:	2301      	movs	r3, #1
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3718      	adds	r7, #24
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	20005540 	.word	0x20005540

08013c1c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b088      	sub	sp, #32
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d070      	beq.n	8013d0c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f003 0303 	and.w	r3, r3, #3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00d      	beq.n	8013c50 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013c34:	4b37      	ldr	r3, [pc, #220]	; (8013d14 <mem_free+0xf8>)
 8013c36:	f240 2273 	movw	r2, #627	; 0x273
 8013c3a:	4937      	ldr	r1, [pc, #220]	; (8013d18 <mem_free+0xfc>)
 8013c3c:	4837      	ldr	r0, [pc, #220]	; (8013d1c <mem_free+0x100>)
 8013c3e:	f00d fc35 	bl	80214ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c42:	f00d f9e7 	bl	8021014 <sys_arch_protect>
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f00d f9f1 	bl	8021030 <sys_arch_unprotect>
    return;
 8013c4e:	e05e      	b.n	8013d0e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	3b08      	subs	r3, #8
 8013c54:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013c56:	4b32      	ldr	r3, [pc, #200]	; (8013d20 <mem_free+0x104>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	69fa      	ldr	r2, [r7, #28]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d306      	bcc.n	8013c6e <mem_free+0x52>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f103 020c 	add.w	r2, r3, #12
 8013c66:	4b2f      	ldr	r3, [pc, #188]	; (8013d24 <mem_free+0x108>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d90d      	bls.n	8013c8a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013c6e:	4b29      	ldr	r3, [pc, #164]	; (8013d14 <mem_free+0xf8>)
 8013c70:	f240 227f 	movw	r2, #639	; 0x27f
 8013c74:	492c      	ldr	r1, [pc, #176]	; (8013d28 <mem_free+0x10c>)
 8013c76:	4829      	ldr	r0, [pc, #164]	; (8013d1c <mem_free+0x100>)
 8013c78:	f00d fc18 	bl	80214ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c7c:	f00d f9ca 	bl	8021014 <sys_arch_protect>
 8013c80:	6138      	str	r0, [r7, #16]
 8013c82:	6938      	ldr	r0, [r7, #16]
 8013c84:	f00d f9d4 	bl	8021030 <sys_arch_unprotect>
    return;
 8013c88:	e041      	b.n	8013d0e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013c8a:	4828      	ldr	r0, [pc, #160]	; (8013d2c <mem_free+0x110>)
 8013c8c:	f00d f986 	bl	8020f9c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	791b      	ldrb	r3, [r3, #4]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d110      	bne.n	8013cba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013c98:	4b1e      	ldr	r3, [pc, #120]	; (8013d14 <mem_free+0xf8>)
 8013c9a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8013c9e:	4924      	ldr	r1, [pc, #144]	; (8013d30 <mem_free+0x114>)
 8013ca0:	481e      	ldr	r0, [pc, #120]	; (8013d1c <mem_free+0x100>)
 8013ca2:	f00d fc03 	bl	80214ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013ca6:	4821      	ldr	r0, [pc, #132]	; (8013d2c <mem_free+0x110>)
 8013ca8:	f00d f987 	bl	8020fba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013cac:	f00d f9b2 	bl	8021014 <sys_arch_protect>
 8013cb0:	6178      	str	r0, [r7, #20]
 8013cb2:	6978      	ldr	r0, [r7, #20]
 8013cb4:	f00d f9bc 	bl	8021030 <sys_arch_unprotect>
    return;
 8013cb8:	e029      	b.n	8013d0e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013cba:	69f8      	ldr	r0, [r7, #28]
 8013cbc:	f7ff ff72 	bl	8013ba4 <mem_link_valid>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d110      	bne.n	8013ce8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013cc6:	4b13      	ldr	r3, [pc, #76]	; (8013d14 <mem_free+0xf8>)
 8013cc8:	f240 2295 	movw	r2, #661	; 0x295
 8013ccc:	4919      	ldr	r1, [pc, #100]	; (8013d34 <mem_free+0x118>)
 8013cce:	4813      	ldr	r0, [pc, #76]	; (8013d1c <mem_free+0x100>)
 8013cd0:	f00d fbec 	bl	80214ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013cd4:	4815      	ldr	r0, [pc, #84]	; (8013d2c <mem_free+0x110>)
 8013cd6:	f00d f970 	bl	8020fba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013cda:	f00d f99b 	bl	8021014 <sys_arch_protect>
 8013cde:	61b8      	str	r0, [r7, #24]
 8013ce0:	69b8      	ldr	r0, [r7, #24]
 8013ce2:	f00d f9a5 	bl	8021030 <sys_arch_unprotect>
    return;
 8013ce6:	e012      	b.n	8013d0e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	2200      	movs	r2, #0
 8013cec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013cee:	4b12      	ldr	r3, [pc, #72]	; (8013d38 <mem_free+0x11c>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	69fa      	ldr	r2, [r7, #28]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d202      	bcs.n	8013cfe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013cf8:	4a0f      	ldr	r2, [pc, #60]	; (8013d38 <mem_free+0x11c>)
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013cfe:	69f8      	ldr	r0, [r7, #28]
 8013d00:	f7ff fe5c 	bl	80139bc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013d04:	4809      	ldr	r0, [pc, #36]	; (8013d2c <mem_free+0x110>)
 8013d06:	f00d f958 	bl	8020fba <sys_mutex_unlock>
 8013d0a:	e000      	b.n	8013d0e <mem_free+0xf2>
    return;
 8013d0c:	bf00      	nop
}
 8013d0e:	3720      	adds	r7, #32
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	080243b0 	.word	0x080243b0
 8013d18:	080244a0 	.word	0x080244a0
 8013d1c:	080243f8 	.word	0x080243f8
 8013d20:	2000553c 	.word	0x2000553c
 8013d24:	20005540 	.word	0x20005540
 8013d28:	080244c4 	.word	0x080244c4
 8013d2c:	20005544 	.word	0x20005544
 8013d30:	080244e0 	.word	0x080244e0
 8013d34:	08024508 	.word	0x08024508
 8013d38:	20005548 	.word	0x20005548

08013d3c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b088      	sub	sp, #32
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	460b      	mov	r3, r1
 8013d46:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013d48:	887b      	ldrh	r3, [r7, #2]
 8013d4a:	3303      	adds	r3, #3
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	f023 0303 	bic.w	r3, r3, #3
 8013d52:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013d54:	8bfb      	ldrh	r3, [r7, #30]
 8013d56:	2b0b      	cmp	r3, #11
 8013d58:	d801      	bhi.n	8013d5e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013d5a:	230c      	movs	r3, #12
 8013d5c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013d5e:	8bfb      	ldrh	r3, [r7, #30]
 8013d60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013d64:	d803      	bhi.n	8013d6e <mem_trim+0x32>
 8013d66:	8bfa      	ldrh	r2, [r7, #30]
 8013d68:	887b      	ldrh	r3, [r7, #2]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d201      	bcs.n	8013d72 <mem_trim+0x36>
    return NULL;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	e0d8      	b.n	8013f24 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013d72:	4b6e      	ldr	r3, [pc, #440]	; (8013f2c <mem_trim+0x1f0>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d304      	bcc.n	8013d86 <mem_trim+0x4a>
 8013d7c:	4b6c      	ldr	r3, [pc, #432]	; (8013f30 <mem_trim+0x1f4>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	687a      	ldr	r2, [r7, #4]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d306      	bcc.n	8013d94 <mem_trim+0x58>
 8013d86:	4b6b      	ldr	r3, [pc, #428]	; (8013f34 <mem_trim+0x1f8>)
 8013d88:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013d8c:	496a      	ldr	r1, [pc, #424]	; (8013f38 <mem_trim+0x1fc>)
 8013d8e:	486b      	ldr	r0, [pc, #428]	; (8013f3c <mem_trim+0x200>)
 8013d90:	f00d fb8c 	bl	80214ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013d94:	4b65      	ldr	r3, [pc, #404]	; (8013f2c <mem_trim+0x1f0>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d304      	bcc.n	8013da8 <mem_trim+0x6c>
 8013d9e:	4b64      	ldr	r3, [pc, #400]	; (8013f30 <mem_trim+0x1f4>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d307      	bcc.n	8013db8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013da8:	f00d f934 	bl	8021014 <sys_arch_protect>
 8013dac:	60b8      	str	r0, [r7, #8]
 8013dae:	68b8      	ldr	r0, [r7, #8]
 8013db0:	f00d f93e 	bl	8021030 <sys_arch_unprotect>
    return rmem;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	e0b5      	b.n	8013f24 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	3b08      	subs	r3, #8
 8013dbc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013dbe:	69b8      	ldr	r0, [r7, #24]
 8013dc0:	f7ff fdea 	bl	8013998 <mem_to_ptr>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	881a      	ldrh	r2, [r3, #0]
 8013dcc:	8afb      	ldrh	r3, [r7, #22]
 8013dce:	1ad3      	subs	r3, r2, r3
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	3b08      	subs	r3, #8
 8013dd4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013dd6:	8bfa      	ldrh	r2, [r7, #30]
 8013dd8:	8abb      	ldrh	r3, [r7, #20]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d906      	bls.n	8013dec <mem_trim+0xb0>
 8013dde:	4b55      	ldr	r3, [pc, #340]	; (8013f34 <mem_trim+0x1f8>)
 8013de0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013de4:	4956      	ldr	r1, [pc, #344]	; (8013f40 <mem_trim+0x204>)
 8013de6:	4855      	ldr	r0, [pc, #340]	; (8013f3c <mem_trim+0x200>)
 8013de8:	f00d fb60 	bl	80214ac <iprintf>
  if (newsize > size) {
 8013dec:	8bfa      	ldrh	r2, [r7, #30]
 8013dee:	8abb      	ldrh	r3, [r7, #20]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d901      	bls.n	8013df8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013df4:	2300      	movs	r3, #0
 8013df6:	e095      	b.n	8013f24 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013df8:	8bfa      	ldrh	r2, [r7, #30]
 8013dfa:	8abb      	ldrh	r3, [r7, #20]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d101      	bne.n	8013e04 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	e08f      	b.n	8013f24 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013e04:	484f      	ldr	r0, [pc, #316]	; (8013f44 <mem_trim+0x208>)
 8013e06:	f00d f8c9 	bl	8020f9c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013e0a:	69bb      	ldr	r3, [r7, #24]
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff fdb0 	bl	8013974 <ptr_to_mem>
 8013e14:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	791b      	ldrb	r3, [r3, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d13f      	bne.n	8013e9e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	881b      	ldrh	r3, [r3, #0]
 8013e22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013e26:	d106      	bne.n	8013e36 <mem_trim+0xfa>
 8013e28:	4b42      	ldr	r3, [pc, #264]	; (8013f34 <mem_trim+0x1f8>)
 8013e2a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8013e2e:	4946      	ldr	r1, [pc, #280]	; (8013f48 <mem_trim+0x20c>)
 8013e30:	4842      	ldr	r0, [pc, #264]	; (8013f3c <mem_trim+0x200>)
 8013e32:	f00d fb3b 	bl	80214ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	881b      	ldrh	r3, [r3, #0]
 8013e3a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013e3c:	8afa      	ldrh	r2, [r7, #22]
 8013e3e:	8bfb      	ldrh	r3, [r7, #30]
 8013e40:	4413      	add	r3, r2
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	3308      	adds	r3, #8
 8013e46:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013e48:	4b40      	ldr	r3, [pc, #256]	; (8013f4c <mem_trim+0x210>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	693a      	ldr	r2, [r7, #16]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d106      	bne.n	8013e60 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013e52:	89fb      	ldrh	r3, [r7, #14]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7ff fd8d 	bl	8013974 <ptr_to_mem>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	4a3b      	ldr	r2, [pc, #236]	; (8013f4c <mem_trim+0x210>)
 8013e5e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013e60:	89fb      	ldrh	r3, [r7, #14]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7ff fd86 	bl	8013974 <ptr_to_mem>
 8013e68:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	89ba      	ldrh	r2, [r7, #12]
 8013e74:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	8afa      	ldrh	r2, [r7, #22]
 8013e7a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	89fa      	ldrh	r2, [r7, #14]
 8013e80:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	881b      	ldrh	r3, [r3, #0]
 8013e86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013e8a:	d047      	beq.n	8013f1c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	881b      	ldrh	r3, [r3, #0]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7ff fd6f 	bl	8013974 <ptr_to_mem>
 8013e96:	4602      	mov	r2, r0
 8013e98:	89fb      	ldrh	r3, [r7, #14]
 8013e9a:	8053      	strh	r3, [r2, #2]
 8013e9c:	e03e      	b.n	8013f1c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013e9e:	8bfb      	ldrh	r3, [r7, #30]
 8013ea0:	f103 0214 	add.w	r2, r3, #20
 8013ea4:	8abb      	ldrh	r3, [r7, #20]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d838      	bhi.n	8013f1c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013eaa:	8afa      	ldrh	r2, [r7, #22]
 8013eac:	8bfb      	ldrh	r3, [r7, #30]
 8013eae:	4413      	add	r3, r2
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013eb6:	69bb      	ldr	r3, [r7, #24]
 8013eb8:	881b      	ldrh	r3, [r3, #0]
 8013eba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013ebe:	d106      	bne.n	8013ece <mem_trim+0x192>
 8013ec0:	4b1c      	ldr	r3, [pc, #112]	; (8013f34 <mem_trim+0x1f8>)
 8013ec2:	f240 3216 	movw	r2, #790	; 0x316
 8013ec6:	4920      	ldr	r1, [pc, #128]	; (8013f48 <mem_trim+0x20c>)
 8013ec8:	481c      	ldr	r0, [pc, #112]	; (8013f3c <mem_trim+0x200>)
 8013eca:	f00d faef 	bl	80214ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013ece:	89fb      	ldrh	r3, [r7, #14]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7ff fd4f 	bl	8013974 <ptr_to_mem>
 8013ed6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013ed8:	4b1c      	ldr	r3, [pc, #112]	; (8013f4c <mem_trim+0x210>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	693a      	ldr	r2, [r7, #16]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d202      	bcs.n	8013ee8 <mem_trim+0x1ac>
      lfree = mem2;
 8013ee2:	4a1a      	ldr	r2, [pc, #104]	; (8013f4c <mem_trim+0x210>)
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	2200      	movs	r2, #0
 8013eec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	881a      	ldrh	r2, [r3, #0]
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	8afa      	ldrh	r2, [r7, #22]
 8013efa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	89fa      	ldrh	r2, [r7, #14]
 8013f00:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	881b      	ldrh	r3, [r3, #0]
 8013f06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013f0a:	d007      	beq.n	8013f1c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	881b      	ldrh	r3, [r3, #0]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ff fd2f 	bl	8013974 <ptr_to_mem>
 8013f16:	4602      	mov	r2, r0
 8013f18:	89fb      	ldrh	r3, [r7, #14]
 8013f1a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013f1c:	4809      	ldr	r0, [pc, #36]	; (8013f44 <mem_trim+0x208>)
 8013f1e:	f00d f84c 	bl	8020fba <sys_mutex_unlock>
  return rmem;
 8013f22:	687b      	ldr	r3, [r7, #4]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3720      	adds	r7, #32
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	2000553c 	.word	0x2000553c
 8013f30:	20005540 	.word	0x20005540
 8013f34:	080243b0 	.word	0x080243b0
 8013f38:	0802453c 	.word	0x0802453c
 8013f3c:	080243f8 	.word	0x080243f8
 8013f40:	08024554 	.word	0x08024554
 8013f44:	20005544 	.word	0x20005544
 8013f48:	08024574 	.word	0x08024574
 8013f4c:	20005548 	.word	0x20005548

08013f50 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b088      	sub	sp, #32
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	4603      	mov	r3, r0
 8013f58:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013f5a:	88fb      	ldrh	r3, [r7, #6]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d101      	bne.n	8013f64 <mem_malloc+0x14>
    return NULL;
 8013f60:	2300      	movs	r3, #0
 8013f62:	e0e2      	b.n	801412a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013f64:	88fb      	ldrh	r3, [r7, #6]
 8013f66:	3303      	adds	r3, #3
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	f023 0303 	bic.w	r3, r3, #3
 8013f6e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013f70:	8bbb      	ldrh	r3, [r7, #28]
 8013f72:	2b0b      	cmp	r3, #11
 8013f74:	d801      	bhi.n	8013f7a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013f76:	230c      	movs	r3, #12
 8013f78:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013f7a:	8bbb      	ldrh	r3, [r7, #28]
 8013f7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013f80:	d803      	bhi.n	8013f8a <mem_malloc+0x3a>
 8013f82:	8bba      	ldrh	r2, [r7, #28]
 8013f84:	88fb      	ldrh	r3, [r7, #6]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d201      	bcs.n	8013f8e <mem_malloc+0x3e>
    return NULL;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	e0cd      	b.n	801412a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013f8e:	4869      	ldr	r0, [pc, #420]	; (8014134 <mem_malloc+0x1e4>)
 8013f90:	f00d f804 	bl	8020f9c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013f94:	4b68      	ldr	r3, [pc, #416]	; (8014138 <mem_malloc+0x1e8>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff fcfd 	bl	8013998 <mem_to_ptr>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	83fb      	strh	r3, [r7, #30]
 8013fa2:	e0b7      	b.n	8014114 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013fa4:	8bfb      	ldrh	r3, [r7, #30]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7ff fce4 	bl	8013974 <ptr_to_mem>
 8013fac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	791b      	ldrb	r3, [r3, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f040 80a7 	bne.w	8014106 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	881b      	ldrh	r3, [r3, #0]
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	8bfb      	ldrh	r3, [r7, #30]
 8013fc0:	1ad3      	subs	r3, r2, r3
 8013fc2:	f1a3 0208 	sub.w	r2, r3, #8
 8013fc6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	f0c0 809c 	bcc.w	8014106 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	881b      	ldrh	r3, [r3, #0]
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	8bfb      	ldrh	r3, [r7, #30]
 8013fd6:	1ad3      	subs	r3, r2, r3
 8013fd8:	f1a3 0208 	sub.w	r2, r3, #8
 8013fdc:	8bbb      	ldrh	r3, [r7, #28]
 8013fde:	3314      	adds	r3, #20
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d333      	bcc.n	801404c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013fe4:	8bfa      	ldrh	r2, [r7, #30]
 8013fe6:	8bbb      	ldrh	r3, [r7, #28]
 8013fe8:	4413      	add	r3, r2
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	3308      	adds	r3, #8
 8013fee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013ff0:	8a7b      	ldrh	r3, [r7, #18]
 8013ff2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013ff6:	d106      	bne.n	8014006 <mem_malloc+0xb6>
 8013ff8:	4b50      	ldr	r3, [pc, #320]	; (801413c <mem_malloc+0x1ec>)
 8013ffa:	f240 3287 	movw	r2, #903	; 0x387
 8013ffe:	4950      	ldr	r1, [pc, #320]	; (8014140 <mem_malloc+0x1f0>)
 8014000:	4850      	ldr	r0, [pc, #320]	; (8014144 <mem_malloc+0x1f4>)
 8014002:	f00d fa53 	bl	80214ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014006:	8a7b      	ldrh	r3, [r7, #18]
 8014008:	4618      	mov	r0, r3
 801400a:	f7ff fcb3 	bl	8013974 <ptr_to_mem>
 801400e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2200      	movs	r2, #0
 8014014:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	881a      	ldrh	r2, [r3, #0]
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	8bfa      	ldrh	r2, [r7, #30]
 8014022:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	8a7a      	ldrh	r2, [r7, #18]
 8014028:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	2201      	movs	r2, #1
 801402e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	881b      	ldrh	r3, [r3, #0]
 8014034:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014038:	d00b      	beq.n	8014052 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	881b      	ldrh	r3, [r3, #0]
 801403e:	4618      	mov	r0, r3
 8014040:	f7ff fc98 	bl	8013974 <ptr_to_mem>
 8014044:	4602      	mov	r2, r0
 8014046:	8a7b      	ldrh	r3, [r7, #18]
 8014048:	8053      	strh	r3, [r2, #2]
 801404a:	e002      	b.n	8014052 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	2201      	movs	r2, #1
 8014050:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014052:	4b39      	ldr	r3, [pc, #228]	; (8014138 <mem_malloc+0x1e8>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	429a      	cmp	r2, r3
 801405a:	d127      	bne.n	80140ac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801405c:	4b36      	ldr	r3, [pc, #216]	; (8014138 <mem_malloc+0x1e8>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014062:	e005      	b.n	8014070 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014064:	69bb      	ldr	r3, [r7, #24]
 8014066:	881b      	ldrh	r3, [r3, #0]
 8014068:	4618      	mov	r0, r3
 801406a:	f7ff fc83 	bl	8013974 <ptr_to_mem>
 801406e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	791b      	ldrb	r3, [r3, #4]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d004      	beq.n	8014082 <mem_malloc+0x132>
 8014078:	4b33      	ldr	r3, [pc, #204]	; (8014148 <mem_malloc+0x1f8>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	69ba      	ldr	r2, [r7, #24]
 801407e:	429a      	cmp	r2, r3
 8014080:	d1f0      	bne.n	8014064 <mem_malloc+0x114>
          }
          lfree = cur;
 8014082:	4a2d      	ldr	r2, [pc, #180]	; (8014138 <mem_malloc+0x1e8>)
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014088:	4b2b      	ldr	r3, [pc, #172]	; (8014138 <mem_malloc+0x1e8>)
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	4b2e      	ldr	r3, [pc, #184]	; (8014148 <mem_malloc+0x1f8>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	d00b      	beq.n	80140ac <mem_malloc+0x15c>
 8014094:	4b28      	ldr	r3, [pc, #160]	; (8014138 <mem_malloc+0x1e8>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	791b      	ldrb	r3, [r3, #4]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d006      	beq.n	80140ac <mem_malloc+0x15c>
 801409e:	4b27      	ldr	r3, [pc, #156]	; (801413c <mem_malloc+0x1ec>)
 80140a0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80140a4:	4929      	ldr	r1, [pc, #164]	; (801414c <mem_malloc+0x1fc>)
 80140a6:	4827      	ldr	r0, [pc, #156]	; (8014144 <mem_malloc+0x1f4>)
 80140a8:	f00d fa00 	bl	80214ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80140ac:	4821      	ldr	r0, [pc, #132]	; (8014134 <mem_malloc+0x1e4>)
 80140ae:	f00c ff84 	bl	8020fba <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80140b2:	8bba      	ldrh	r2, [r7, #28]
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	4413      	add	r3, r2
 80140b8:	3308      	adds	r3, #8
 80140ba:	4a23      	ldr	r2, [pc, #140]	; (8014148 <mem_malloc+0x1f8>)
 80140bc:	6812      	ldr	r2, [r2, #0]
 80140be:	4293      	cmp	r3, r2
 80140c0:	d906      	bls.n	80140d0 <mem_malloc+0x180>
 80140c2:	4b1e      	ldr	r3, [pc, #120]	; (801413c <mem_malloc+0x1ec>)
 80140c4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80140c8:	4921      	ldr	r1, [pc, #132]	; (8014150 <mem_malloc+0x200>)
 80140ca:	481e      	ldr	r0, [pc, #120]	; (8014144 <mem_malloc+0x1f4>)
 80140cc:	f00d f9ee 	bl	80214ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	f003 0303 	and.w	r3, r3, #3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d006      	beq.n	80140e8 <mem_malloc+0x198>
 80140da:	4b18      	ldr	r3, [pc, #96]	; (801413c <mem_malloc+0x1ec>)
 80140dc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80140e0:	491c      	ldr	r1, [pc, #112]	; (8014154 <mem_malloc+0x204>)
 80140e2:	4818      	ldr	r0, [pc, #96]	; (8014144 <mem_malloc+0x1f4>)
 80140e4:	f00d f9e2 	bl	80214ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	f003 0303 	and.w	r3, r3, #3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d006      	beq.n	8014100 <mem_malloc+0x1b0>
 80140f2:	4b12      	ldr	r3, [pc, #72]	; (801413c <mem_malloc+0x1ec>)
 80140f4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80140f8:	4917      	ldr	r1, [pc, #92]	; (8014158 <mem_malloc+0x208>)
 80140fa:	4812      	ldr	r0, [pc, #72]	; (8014144 <mem_malloc+0x1f4>)
 80140fc:	f00d f9d6 	bl	80214ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	3308      	adds	r3, #8
 8014104:	e011      	b.n	801412a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014106:	8bfb      	ldrh	r3, [r7, #30]
 8014108:	4618      	mov	r0, r3
 801410a:	f7ff fc33 	bl	8013974 <ptr_to_mem>
 801410e:	4603      	mov	r3, r0
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014114:	8bfa      	ldrh	r2, [r7, #30]
 8014116:	8bbb      	ldrh	r3, [r7, #28]
 8014118:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801411c:	429a      	cmp	r2, r3
 801411e:	f4ff af41 	bcc.w	8013fa4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014122:	4804      	ldr	r0, [pc, #16]	; (8014134 <mem_malloc+0x1e4>)
 8014124:	f00c ff49 	bl	8020fba <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014128:	2300      	movs	r3, #0
}
 801412a:	4618      	mov	r0, r3
 801412c:	3720      	adds	r7, #32
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	20005544 	.word	0x20005544
 8014138:	20005548 	.word	0x20005548
 801413c:	080243b0 	.word	0x080243b0
 8014140:	08024574 	.word	0x08024574
 8014144:	080243f8 	.word	0x080243f8
 8014148:	20005540 	.word	0x20005540
 801414c:	08024588 	.word	0x08024588
 8014150:	080245a4 	.word	0x080245a4
 8014154:	080245d4 	.word	0x080245d4
 8014158:	08024604 	.word	0x08024604

0801415c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801415c:	b480      	push	{r7}
 801415e:	b085      	sub	sp, #20
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	2200      	movs	r2, #0
 801416a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	3303      	adds	r3, #3
 8014172:	f023 0303 	bic.w	r3, r3, #3
 8014176:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014178:	2300      	movs	r3, #0
 801417a:	60fb      	str	r3, [r7, #12]
 801417c:	e011      	b.n	80141a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	689b      	ldr	r3, [r3, #8]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	68ba      	ldr	r2, [r7, #8]
 801418e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	881b      	ldrh	r3, [r3, #0]
 8014194:	461a      	mov	r2, r3
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	4413      	add	r3, r2
 801419a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	3301      	adds	r3, #1
 80141a0:	60fb      	str	r3, [r7, #12]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	885b      	ldrh	r3, [r3, #2]
 80141a6:	461a      	mov	r2, r3
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	4293      	cmp	r3, r2
 80141ac:	dbe7      	blt.n	801417e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80141ae:	bf00      	nop
 80141b0:	bf00      	nop
 80141b2:	3714      	adds	r7, #20
 80141b4:	46bd      	mov	sp, r7
 80141b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ba:	4770      	bx	lr

080141bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80141c2:	2300      	movs	r3, #0
 80141c4:	80fb      	strh	r3, [r7, #6]
 80141c6:	e009      	b.n	80141dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80141c8:	88fb      	ldrh	r3, [r7, #6]
 80141ca:	4a08      	ldr	r2, [pc, #32]	; (80141ec <memp_init+0x30>)
 80141cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ff ffc3 	bl	801415c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80141d6:	88fb      	ldrh	r3, [r7, #6]
 80141d8:	3301      	adds	r3, #1
 80141da:	80fb      	strh	r3, [r7, #6]
 80141dc:	88fb      	ldrh	r3, [r7, #6]
 80141de:	2b0d      	cmp	r3, #13
 80141e0:	d9f2      	bls.n	80141c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80141e2:	bf00      	nop
 80141e4:	bf00      	nop
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	08027454 	.word	0x08027454

080141f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80141f8:	f00c ff0c 	bl	8021014 <sys_arch_protect>
 80141fc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	689b      	ldr	r3, [r3, #8]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d015      	beq.n	8014238 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	689b      	ldr	r3, [r3, #8]
 8014210:	68ba      	ldr	r2, [r7, #8]
 8014212:	6812      	ldr	r2, [r2, #0]
 8014214:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	f003 0303 	and.w	r3, r3, #3
 801421c:	2b00      	cmp	r3, #0
 801421e:	d006      	beq.n	801422e <do_memp_malloc_pool+0x3e>
 8014220:	4b09      	ldr	r3, [pc, #36]	; (8014248 <do_memp_malloc_pool+0x58>)
 8014222:	f44f 728c 	mov.w	r2, #280	; 0x118
 8014226:	4909      	ldr	r1, [pc, #36]	; (801424c <do_memp_malloc_pool+0x5c>)
 8014228:	4809      	ldr	r0, [pc, #36]	; (8014250 <do_memp_malloc_pool+0x60>)
 801422a:	f00d f93f 	bl	80214ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801422e:	68f8      	ldr	r0, [r7, #12]
 8014230:	f00c fefe 	bl	8021030 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	e003      	b.n	8014240 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014238:	68f8      	ldr	r0, [r7, #12]
 801423a:	f00c fef9 	bl	8021030 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801423e:	2300      	movs	r3, #0
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	08024628 	.word	0x08024628
 801424c:	08024658 	.word	0x08024658
 8014250:	0802467c 	.word	0x0802467c

08014254 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b084      	sub	sp, #16
 8014258:	af00      	add	r7, sp, #0
 801425a:	4603      	mov	r3, r0
 801425c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801425e:	79fb      	ldrb	r3, [r7, #7]
 8014260:	2b0d      	cmp	r3, #13
 8014262:	d908      	bls.n	8014276 <memp_malloc+0x22>
 8014264:	4b0a      	ldr	r3, [pc, #40]	; (8014290 <memp_malloc+0x3c>)
 8014266:	f240 1257 	movw	r2, #343	; 0x157
 801426a:	490a      	ldr	r1, [pc, #40]	; (8014294 <memp_malloc+0x40>)
 801426c:	480a      	ldr	r0, [pc, #40]	; (8014298 <memp_malloc+0x44>)
 801426e:	f00d f91d 	bl	80214ac <iprintf>
 8014272:	2300      	movs	r3, #0
 8014274:	e008      	b.n	8014288 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014276:	79fb      	ldrb	r3, [r7, #7]
 8014278:	4a08      	ldr	r2, [pc, #32]	; (801429c <memp_malloc+0x48>)
 801427a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801427e:	4618      	mov	r0, r3
 8014280:	f7ff ffb6 	bl	80141f0 <do_memp_malloc_pool>
 8014284:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014286:	68fb      	ldr	r3, [r7, #12]
}
 8014288:	4618      	mov	r0, r3
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	08024628 	.word	0x08024628
 8014294:	080246b8 	.word	0x080246b8
 8014298:	0802467c 	.word	0x0802467c
 801429c:	08027454 	.word	0x08027454

080142a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	f003 0303 	and.w	r3, r3, #3
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d006      	beq.n	80142c2 <do_memp_free_pool+0x22>
 80142b4:	4b0d      	ldr	r3, [pc, #52]	; (80142ec <do_memp_free_pool+0x4c>)
 80142b6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80142ba:	490d      	ldr	r1, [pc, #52]	; (80142f0 <do_memp_free_pool+0x50>)
 80142bc:	480d      	ldr	r0, [pc, #52]	; (80142f4 <do_memp_free_pool+0x54>)
 80142be:	f00d f8f5 	bl	80214ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80142c6:	f00c fea5 	bl	8021014 <sys_arch_protect>
 80142ca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	689b      	ldr	r3, [r3, #8]
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	689b      	ldr	r3, [r3, #8]
 80142da:	68fa      	ldr	r2, [r7, #12]
 80142dc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80142de:	68b8      	ldr	r0, [r7, #8]
 80142e0:	f00c fea6 	bl	8021030 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80142e4:	bf00      	nop
 80142e6:	3710      	adds	r7, #16
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}
 80142ec:	08024628 	.word	0x08024628
 80142f0:	080246d8 	.word	0x080246d8
 80142f4:	0802467c 	.word	0x0802467c

080142f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	4603      	mov	r3, r0
 8014300:	6039      	str	r1, [r7, #0]
 8014302:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	2b0d      	cmp	r3, #13
 8014308:	d907      	bls.n	801431a <memp_free+0x22>
 801430a:	4b0c      	ldr	r3, [pc, #48]	; (801433c <memp_free+0x44>)
 801430c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014310:	490b      	ldr	r1, [pc, #44]	; (8014340 <memp_free+0x48>)
 8014312:	480c      	ldr	r0, [pc, #48]	; (8014344 <memp_free+0x4c>)
 8014314:	f00d f8ca 	bl	80214ac <iprintf>
 8014318:	e00c      	b.n	8014334 <memp_free+0x3c>

  if (mem == NULL) {
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d008      	beq.n	8014332 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014320:	79fb      	ldrb	r3, [r7, #7]
 8014322:	4a09      	ldr	r2, [pc, #36]	; (8014348 <memp_free+0x50>)
 8014324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014328:	6839      	ldr	r1, [r7, #0]
 801432a:	4618      	mov	r0, r3
 801432c:	f7ff ffb8 	bl	80142a0 <do_memp_free_pool>
 8014330:	e000      	b.n	8014334 <memp_free+0x3c>
    return;
 8014332:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	08024628 	.word	0x08024628
 8014340:	080246f8 	.word	0x080246f8
 8014344:	0802467c 	.word	0x0802467c
 8014348:	08027454 	.word	0x08027454

0801434c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801434c:	b480      	push	{r7}
 801434e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014350:	bf00      	nop
 8014352:	46bd      	mov	sp, r7
 8014354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014358:	4770      	bx	lr
	...

0801435c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b086      	sub	sp, #24
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
 8014368:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d108      	bne.n	8014382 <netif_add+0x26>
 8014370:	4b5b      	ldr	r3, [pc, #364]	; (80144e0 <netif_add+0x184>)
 8014372:	f240 1227 	movw	r2, #295	; 0x127
 8014376:	495b      	ldr	r1, [pc, #364]	; (80144e4 <netif_add+0x188>)
 8014378:	485b      	ldr	r0, [pc, #364]	; (80144e8 <netif_add+0x18c>)
 801437a:	f00d f897 	bl	80214ac <iprintf>
 801437e:	2300      	movs	r3, #0
 8014380:	e0a9      	b.n	80144d6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014384:	2b00      	cmp	r3, #0
 8014386:	d108      	bne.n	801439a <netif_add+0x3e>
 8014388:	4b55      	ldr	r3, [pc, #340]	; (80144e0 <netif_add+0x184>)
 801438a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801438e:	4957      	ldr	r1, [pc, #348]	; (80144ec <netif_add+0x190>)
 8014390:	4855      	ldr	r0, [pc, #340]	; (80144e8 <netif_add+0x18c>)
 8014392:	f00d f88b 	bl	80214ac <iprintf>
 8014396:	2300      	movs	r3, #0
 8014398:	e09d      	b.n	80144d6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d101      	bne.n	80143a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80143a0:	4b53      	ldr	r3, [pc, #332]	; (80144f0 <netif_add+0x194>)
 80143a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d101      	bne.n	80143ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80143aa:	4b51      	ldr	r3, [pc, #324]	; (80144f0 <netif_add+0x194>)
 80143ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d101      	bne.n	80143b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80143b4:	4b4e      	ldr	r3, [pc, #312]	; (80144f0 <netif_add+0x194>)
 80143b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	2200      	movs	r2, #0
 80143bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2200      	movs	r2, #0
 80143c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2200      	movs	r2, #0
 80143c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	4a49      	ldr	r2, [pc, #292]	; (80144f4 <netif_add+0x198>)
 80143ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2200      	movs	r2, #0
 80143d4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2200      	movs	r2, #0
 80143da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	3324      	adds	r3, #36	; 0x24
 80143e2:	2204      	movs	r2, #4
 80143e4:	2100      	movs	r1, #0
 80143e6:	4618      	mov	r0, r3
 80143e8:	f00c ff9e 	bl	8021328 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2200      	movs	r2, #0
 80143f0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	6a3a      	ldr	r2, [r7, #32]
 80143f6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80143f8:	4b3f      	ldr	r3, [pc, #252]	; (80144f8 <netif_add+0x19c>)
 80143fa:	781a      	ldrb	r2, [r3, #0]
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014406:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	68b9      	ldr	r1, [r7, #8]
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f000 f914 	bl	801463c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	4798      	blx	r3
 801441a:	4603      	mov	r3, r0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d001      	beq.n	8014424 <netif_add+0xc8>
    return NULL;
 8014420:	2300      	movs	r3, #0
 8014422:	e058      	b.n	80144d6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801442a:	2bff      	cmp	r3, #255	; 0xff
 801442c:	d103      	bne.n	8014436 <netif_add+0xda>
        netif->num = 0;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	2200      	movs	r2, #0
 8014432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8014436:	2300      	movs	r3, #0
 8014438:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801443a:	4b30      	ldr	r3, [pc, #192]	; (80144fc <netif_add+0x1a0>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	617b      	str	r3, [r7, #20]
 8014440:	e02b      	b.n	801449a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014442:	697a      	ldr	r2, [r7, #20]
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	429a      	cmp	r2, r3
 8014448:	d106      	bne.n	8014458 <netif_add+0xfc>
 801444a:	4b25      	ldr	r3, [pc, #148]	; (80144e0 <netif_add+0x184>)
 801444c:	f240 128b 	movw	r2, #395	; 0x18b
 8014450:	492b      	ldr	r1, [pc, #172]	; (8014500 <netif_add+0x1a4>)
 8014452:	4825      	ldr	r0, [pc, #148]	; (80144e8 <netif_add+0x18c>)
 8014454:	f00d f82a 	bl	80214ac <iprintf>
        num_netifs++;
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	3301      	adds	r3, #1
 801445c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	2bff      	cmp	r3, #255	; 0xff
 8014462:	dd06      	ble.n	8014472 <netif_add+0x116>
 8014464:	4b1e      	ldr	r3, [pc, #120]	; (80144e0 <netif_add+0x184>)
 8014466:	f240 128d 	movw	r2, #397	; 0x18d
 801446a:	4926      	ldr	r1, [pc, #152]	; (8014504 <netif_add+0x1a8>)
 801446c:	481e      	ldr	r0, [pc, #120]	; (80144e8 <netif_add+0x18c>)
 801446e:	f00d f81d 	bl	80214ac <iprintf>
        if (netif2->num == netif->num) {
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801447e:	429a      	cmp	r2, r3
 8014480:	d108      	bne.n	8014494 <netif_add+0x138>
          netif->num++;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014488:	3301      	adds	r3, #1
 801448a:	b2da      	uxtb	r2, r3
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8014492:	e005      	b.n	80144a0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	617b      	str	r3, [r7, #20]
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d1d0      	bne.n	8014442 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1be      	bne.n	8014424 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144ac:	2bfe      	cmp	r3, #254	; 0xfe
 80144ae:	d103      	bne.n	80144b8 <netif_add+0x15c>
    netif_num = 0;
 80144b0:	4b11      	ldr	r3, [pc, #68]	; (80144f8 <netif_add+0x19c>)
 80144b2:	2200      	movs	r2, #0
 80144b4:	701a      	strb	r2, [r3, #0]
 80144b6:	e006      	b.n	80144c6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144be:	3301      	adds	r3, #1
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	4b0d      	ldr	r3, [pc, #52]	; (80144f8 <netif_add+0x19c>)
 80144c4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80144c6:	4b0d      	ldr	r3, [pc, #52]	; (80144fc <netif_add+0x1a0>)
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80144ce:	4a0b      	ldr	r2, [pc, #44]	; (80144fc <netif_add+0x1a0>)
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80144d4:	68fb      	ldr	r3, [r7, #12]
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3718      	adds	r7, #24
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
 80144de:	bf00      	nop
 80144e0:	08024714 	.word	0x08024714
 80144e4:	080247a8 	.word	0x080247a8
 80144e8:	08024764 	.word	0x08024764
 80144ec:	080247c4 	.word	0x080247c4
 80144f0:	080274e4 	.word	0x080274e4
 80144f4:	0801491f 	.word	0x0801491f
 80144f8:	20005584 	.word	0x20005584
 80144fc:	20016c3c 	.word	0x20016c3c
 8014500:	080247e8 	.word	0x080247e8
 8014504:	080247fc 	.word	0x080247fc

08014508 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b082      	sub	sp, #8
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014512:	6839      	ldr	r1, [r7, #0]
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f002 ff95 	bl	8017444 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801451a:	6839      	ldr	r1, [r7, #0]
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f008 f8c3 	bl	801c6a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014522:	bf00      	nop
 8014524:	3708      	adds	r7, #8
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
	...

0801452c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b086      	sub	sp, #24
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	60b9      	str	r1, [r7, #8]
 8014536:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d106      	bne.n	801454c <netif_do_set_ipaddr+0x20>
 801453e:	4b1d      	ldr	r3, [pc, #116]	; (80145b4 <netif_do_set_ipaddr+0x88>)
 8014540:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014544:	491c      	ldr	r1, [pc, #112]	; (80145b8 <netif_do_set_ipaddr+0x8c>)
 8014546:	481d      	ldr	r0, [pc, #116]	; (80145bc <netif_do_set_ipaddr+0x90>)
 8014548:	f00c ffb0 	bl	80214ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <netif_do_set_ipaddr+0x34>
 8014552:	4b18      	ldr	r3, [pc, #96]	; (80145b4 <netif_do_set_ipaddr+0x88>)
 8014554:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014558:	4917      	ldr	r1, [pc, #92]	; (80145b8 <netif_do_set_ipaddr+0x8c>)
 801455a:	4818      	ldr	r0, [pc, #96]	; (80145bc <netif_do_set_ipaddr+0x90>)
 801455c:	f00c ffa6 	bl	80214ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	3304      	adds	r3, #4
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	429a      	cmp	r2, r3
 801456c:	d01c      	beq.n	80145a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	3304      	adds	r3, #4
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801457e:	f107 0314 	add.w	r3, r7, #20
 8014582:	4619      	mov	r1, r3
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7ff ffbf 	bl	8014508 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <netif_do_set_ipaddr+0x6a>
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	e000      	b.n	8014598 <netif_do_set_ipaddr+0x6c>
 8014596:	2300      	movs	r3, #0
 8014598:	68fa      	ldr	r2, [r7, #12]
 801459a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801459c:	2101      	movs	r1, #1
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f000 f8d2 	bl	8014748 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80145a4:	2301      	movs	r3, #1
 80145a6:	e000      	b.n	80145aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80145a8:	2300      	movs	r3, #0
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3718      	adds	r7, #24
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	08024714 	.word	0x08024714
 80145b8:	0802482c 	.word	0x0802482c
 80145bc:	08024764 	.word	0x08024764

080145c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	3308      	adds	r3, #8
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d00a      	beq.n	80145f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d002      	beq.n	80145e6 <netif_do_set_netmask+0x26>
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	e000      	b.n	80145e8 <netif_do_set_netmask+0x28>
 80145e6:	2300      	movs	r3, #0
 80145e8:	68fa      	ldr	r2, [r7, #12]
 80145ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80145ec:	2301      	movs	r3, #1
 80145ee:	e000      	b.n	80145f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80145f0:	2300      	movs	r3, #0
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3714      	adds	r7, #20
 80145f6:	46bd      	mov	sp, r7
 80145f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fc:	4770      	bx	lr

080145fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80145fe:	b480      	push	{r7}
 8014600:	b085      	sub	sp, #20
 8014602:	af00      	add	r7, sp, #0
 8014604:	60f8      	str	r0, [r7, #12]
 8014606:	60b9      	str	r1, [r7, #8]
 8014608:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	330c      	adds	r3, #12
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	429a      	cmp	r2, r3
 8014616:	d00a      	beq.n	801462e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d002      	beq.n	8014624 <netif_do_set_gw+0x26>
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	e000      	b.n	8014626 <netif_do_set_gw+0x28>
 8014624:	2300      	movs	r3, #0
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801462a:	2301      	movs	r3, #1
 801462c:	e000      	b.n	8014630 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801462e:	2300      	movs	r3, #0
}
 8014630:	4618      	mov	r0, r3
 8014632:	3714      	adds	r7, #20
 8014634:	46bd      	mov	sp, r7
 8014636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463a:	4770      	bx	lr

0801463c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b088      	sub	sp, #32
 8014640:	af00      	add	r7, sp, #0
 8014642:	60f8      	str	r0, [r7, #12]
 8014644:	60b9      	str	r1, [r7, #8]
 8014646:	607a      	str	r2, [r7, #4]
 8014648:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801464a:	2300      	movs	r3, #0
 801464c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801464e:	2300      	movs	r3, #0
 8014650:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d101      	bne.n	801465c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014658:	4b1c      	ldr	r3, [pc, #112]	; (80146cc <netif_set_addr+0x90>)
 801465a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d101      	bne.n	8014666 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014662:	4b1a      	ldr	r3, [pc, #104]	; (80146cc <netif_set_addr+0x90>)
 8014664:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d101      	bne.n	8014670 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801466c:	4b17      	ldr	r3, [pc, #92]	; (80146cc <netif_set_addr+0x90>)
 801466e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d003      	beq.n	801467e <netif_set_addr+0x42>
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d101      	bne.n	8014682 <netif_set_addr+0x46>
 801467e:	2301      	movs	r3, #1
 8014680:	e000      	b.n	8014684 <netif_set_addr+0x48>
 8014682:	2300      	movs	r3, #0
 8014684:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d006      	beq.n	801469a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801468c:	f107 0310 	add.w	r3, r7, #16
 8014690:	461a      	mov	r2, r3
 8014692:	68b9      	ldr	r1, [r7, #8]
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f7ff ff49 	bl	801452c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801469a:	69fa      	ldr	r2, [r7, #28]
 801469c:	6879      	ldr	r1, [r7, #4]
 801469e:	68f8      	ldr	r0, [r7, #12]
 80146a0:	f7ff ff8e 	bl	80145c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80146a4:	69ba      	ldr	r2, [r7, #24]
 80146a6:	6839      	ldr	r1, [r7, #0]
 80146a8:	68f8      	ldr	r0, [r7, #12]
 80146aa:	f7ff ffa8 	bl	80145fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d106      	bne.n	80146c2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80146b4:	f107 0310 	add.w	r3, r7, #16
 80146b8:	461a      	mov	r2, r3
 80146ba:	68b9      	ldr	r1, [r7, #8]
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	f7ff ff35 	bl	801452c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80146c2:	bf00      	nop
 80146c4:	3720      	adds	r7, #32
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop
 80146cc:	080274e4 	.word	0x080274e4

080146d0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b083      	sub	sp, #12
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80146d8:	4a04      	ldr	r2, [pc, #16]	; (80146ec <netif_set_default+0x1c>)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80146de:	bf00      	nop
 80146e0:	370c      	adds	r7, #12
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop
 80146ec:	20016c40 	.word	0x20016c40

080146f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d107      	bne.n	801470e <netif_set_up+0x1e>
 80146fe:	4b0f      	ldr	r3, [pc, #60]	; (801473c <netif_set_up+0x4c>)
 8014700:	f44f 7254 	mov.w	r2, #848	; 0x350
 8014704:	490e      	ldr	r1, [pc, #56]	; (8014740 <netif_set_up+0x50>)
 8014706:	480f      	ldr	r0, [pc, #60]	; (8014744 <netif_set_up+0x54>)
 8014708:	f00c fed0 	bl	80214ac <iprintf>
 801470c:	e013      	b.n	8014736 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	d10c      	bne.n	8014736 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014722:	f043 0301 	orr.w	r3, r3, #1
 8014726:	b2da      	uxtb	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801472e:	2103      	movs	r1, #3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f000 f809 	bl	8014748 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	08024714 	.word	0x08024714
 8014740:	0802489c 	.word	0x0802489c
 8014744:	08024764 	.word	0x08024764

08014748 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	460b      	mov	r3, r1
 8014752:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <netif_issue_reports+0x20>
 801475a:	4b18      	ldr	r3, [pc, #96]	; (80147bc <netif_issue_reports+0x74>)
 801475c:	f240 326d 	movw	r2, #877	; 0x36d
 8014760:	4917      	ldr	r1, [pc, #92]	; (80147c0 <netif_issue_reports+0x78>)
 8014762:	4818      	ldr	r0, [pc, #96]	; (80147c4 <netif_issue_reports+0x7c>)
 8014764:	f00c fea2 	bl	80214ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801476e:	f003 0304 	and.w	r3, r3, #4
 8014772:	2b00      	cmp	r3, #0
 8014774:	d01e      	beq.n	80147b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801477c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014780:	2b00      	cmp	r3, #0
 8014782:	d017      	beq.n	80147b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014784:	78fb      	ldrb	r3, [r7, #3]
 8014786:	f003 0301 	and.w	r3, r3, #1
 801478a:	2b00      	cmp	r3, #0
 801478c:	d013      	beq.n	80147b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	3304      	adds	r3, #4
 8014792:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00e      	beq.n	80147b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801479e:	f003 0308 	and.w	r3, r3, #8
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d007      	beq.n	80147b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3304      	adds	r3, #4
 80147aa:	4619      	mov	r1, r3
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f00a fdcb 	bl	801f348 <etharp_request>
 80147b2:	e000      	b.n	80147b6 <netif_issue_reports+0x6e>
    return;
 80147b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	08024714 	.word	0x08024714
 80147c0:	080248b8 	.word	0x080248b8
 80147c4:	08024764 	.word	0x08024764

080147c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d107      	bne.n	80147e6 <netif_set_down+0x1e>
 80147d6:	4b12      	ldr	r3, [pc, #72]	; (8014820 <netif_set_down+0x58>)
 80147d8:	f240 329b 	movw	r2, #923	; 0x39b
 80147dc:	4911      	ldr	r1, [pc, #68]	; (8014824 <netif_set_down+0x5c>)
 80147de:	4812      	ldr	r0, [pc, #72]	; (8014828 <netif_set_down+0x60>)
 80147e0:	f00c fe64 	bl	80214ac <iprintf>
 80147e4:	e019      	b.n	801481a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147ec:	f003 0301 	and.w	r3, r3, #1
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d012      	beq.n	801481a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147fa:	f023 0301 	bic.w	r3, r3, #1
 80147fe:	b2da      	uxtb	r2, r3
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801480c:	f003 0308 	and.w	r3, r3, #8
 8014810:	2b00      	cmp	r3, #0
 8014812:	d002      	beq.n	801481a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f00a f951 	bl	801eabc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	08024714 	.word	0x08024714
 8014824:	080248dc 	.word	0x080248dc
 8014828:	08024764 	.word	0x08024764

0801482c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b082      	sub	sp, #8
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d107      	bne.n	801484a <netif_set_link_up+0x1e>
 801483a:	4b15      	ldr	r3, [pc, #84]	; (8014890 <netif_set_link_up+0x64>)
 801483c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8014840:	4914      	ldr	r1, [pc, #80]	; (8014894 <netif_set_link_up+0x68>)
 8014842:	4815      	ldr	r0, [pc, #84]	; (8014898 <netif_set_link_up+0x6c>)
 8014844:	f00c fe32 	bl	80214ac <iprintf>
 8014848:	e01e      	b.n	8014888 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014850:	f003 0304 	and.w	r3, r3, #4
 8014854:	2b00      	cmp	r3, #0
 8014856:	d117      	bne.n	8014888 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801485e:	f043 0304 	orr.w	r3, r3, #4
 8014862:	b2da      	uxtb	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f008 fb66 	bl	801cf3c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014870:	2103      	movs	r1, #3
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff ff68 	bl	8014748 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	69db      	ldr	r3, [r3, #28]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d003      	beq.n	8014888 <netif_set_link_up+0x5c>
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	69db      	ldr	r3, [r3, #28]
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014888:	3708      	adds	r7, #8
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	08024714 	.word	0x08024714
 8014894:	080248fc 	.word	0x080248fc
 8014898:	08024764 	.word	0x08024764

0801489c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d107      	bne.n	80148ba <netif_set_link_down+0x1e>
 80148aa:	4b11      	ldr	r3, [pc, #68]	; (80148f0 <netif_set_link_down+0x54>)
 80148ac:	f240 4206 	movw	r2, #1030	; 0x406
 80148b0:	4910      	ldr	r1, [pc, #64]	; (80148f4 <netif_set_link_down+0x58>)
 80148b2:	4811      	ldr	r0, [pc, #68]	; (80148f8 <netif_set_link_down+0x5c>)
 80148b4:	f00c fdfa 	bl	80214ac <iprintf>
 80148b8:	e017      	b.n	80148ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148c0:	f003 0304 	and.w	r3, r3, #4
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d010      	beq.n	80148ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148ce:	f023 0304 	bic.w	r3, r3, #4
 80148d2:	b2da      	uxtb	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	69db      	ldr	r3, [r3, #28]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d003      	beq.n	80148ea <netif_set_link_down+0x4e>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	69db      	ldr	r3, [r3, #28]
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	08024714 	.word	0x08024714
 80148f4:	08024920 	.word	0x08024920
 80148f8:	08024764 	.word	0x08024764

080148fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80148fc:	b480      	push	{r7}
 80148fe:	b083      	sub	sp, #12
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d002      	beq.n	8014912 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	683a      	ldr	r2, [r7, #0]
 8014910:	61da      	str	r2, [r3, #28]
  }
}
 8014912:	bf00      	nop
 8014914:	370c      	adds	r7, #12
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr

0801491e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801491e:	b480      	push	{r7}
 8014920:	b085      	sub	sp, #20
 8014922:	af00      	add	r7, sp, #0
 8014924:	60f8      	str	r0, [r7, #12]
 8014926:	60b9      	str	r1, [r7, #8]
 8014928:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801492a:	f06f 030b 	mvn.w	r3, #11
}
 801492e:	4618      	mov	r0, r3
 8014930:	3714      	adds	r7, #20
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr
	...

0801493c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801493c:	b480      	push	{r7}
 801493e:	b085      	sub	sp, #20
 8014940:	af00      	add	r7, sp, #0
 8014942:	4603      	mov	r3, r0
 8014944:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014946:	79fb      	ldrb	r3, [r7, #7]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d013      	beq.n	8014974 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801494c:	4b0d      	ldr	r3, [pc, #52]	; (8014984 <netif_get_by_index+0x48>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	60fb      	str	r3, [r7, #12]
 8014952:	e00c      	b.n	801496e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801495a:	3301      	adds	r3, #1
 801495c:	b2db      	uxtb	r3, r3
 801495e:	79fa      	ldrb	r2, [r7, #7]
 8014960:	429a      	cmp	r2, r3
 8014962:	d101      	bne.n	8014968 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	e006      	b.n	8014976 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	60fb      	str	r3, [r7, #12]
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1ef      	bne.n	8014954 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	20016c3c 	.word	0x20016c3c

08014988 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801498e:	f00c fb41 	bl	8021014 <sys_arch_protect>
 8014992:	6038      	str	r0, [r7, #0]
 8014994:	4b0d      	ldr	r3, [pc, #52]	; (80149cc <pbuf_free_ooseq+0x44>)
 8014996:	2200      	movs	r2, #0
 8014998:	701a      	strb	r2, [r3, #0]
 801499a:	6838      	ldr	r0, [r7, #0]
 801499c:	f00c fb48 	bl	8021030 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80149a0:	4b0b      	ldr	r3, [pc, #44]	; (80149d0 <pbuf_free_ooseq+0x48>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	607b      	str	r3, [r7, #4]
 80149a6:	e00a      	b.n	80149be <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d003      	beq.n	80149b8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f002 fd85 	bl	80174c0 <tcp_free_ooseq>
      return;
 80149b6:	e005      	b.n	80149c4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	607b      	str	r3, [r7, #4]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d1f1      	bne.n	80149a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80149c4:	3708      	adds	r7, #8
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	20016c44 	.word	0x20016c44
 80149d0:	20016c4c 	.word	0x20016c4c

080149d4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80149dc:	f7ff ffd4 	bl	8014988 <pbuf_free_ooseq>
}
 80149e0:	bf00      	nop
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80149ee:	f00c fb11 	bl	8021014 <sys_arch_protect>
 80149f2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80149f4:	4b0f      	ldr	r3, [pc, #60]	; (8014a34 <pbuf_pool_is_empty+0x4c>)
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80149fa:	4b0e      	ldr	r3, [pc, #56]	; (8014a34 <pbuf_pool_is_empty+0x4c>)
 80149fc:	2201      	movs	r2, #1
 80149fe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f00c fb15 	bl	8021030 <sys_arch_unprotect>

  if (!queued) {
 8014a06:	78fb      	ldrb	r3, [r7, #3]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d10f      	bne.n	8014a2c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014a0c:	2100      	movs	r1, #0
 8014a0e:	480a      	ldr	r0, [pc, #40]	; (8014a38 <pbuf_pool_is_empty+0x50>)
 8014a10:	f7fd fef4 	bl	80127fc <tcpip_try_callback>
 8014a14:	4603      	mov	r3, r0
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d008      	beq.n	8014a2c <pbuf_pool_is_empty+0x44>
 8014a1a:	f00c fafb 	bl	8021014 <sys_arch_protect>
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	4b04      	ldr	r3, [pc, #16]	; (8014a34 <pbuf_pool_is_empty+0x4c>)
 8014a22:	2200      	movs	r2, #0
 8014a24:	701a      	strb	r2, [r3, #0]
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f00c fb02 	bl	8021030 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014a2c:	bf00      	nop
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	20016c44 	.word	0x20016c44
 8014a38:	080149d5 	.word	0x080149d5

08014a3c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	b085      	sub	sp, #20
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4611      	mov	r1, r2
 8014a48:	461a      	mov	r2, r3
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	80fb      	strh	r3, [r7, #6]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2200      	movs	r2, #0
 8014a56:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	68ba      	ldr	r2, [r7, #8]
 8014a5c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	88fa      	ldrh	r2, [r7, #6]
 8014a62:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	88ba      	ldrh	r2, [r7, #4]
 8014a68:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014a6a:	8b3b      	ldrh	r3, [r7, #24]
 8014a6c:	b2da      	uxtb	r2, r3
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	7f3a      	ldrb	r2, [r7, #28]
 8014a76:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2200      	movs	r2, #0
 8014a82:	73da      	strb	r2, [r3, #15]
}
 8014a84:	bf00      	nop
 8014a86:	3714      	adds	r7, #20
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr

08014a90 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b08c      	sub	sp, #48	; 0x30
 8014a94:	af02      	add	r7, sp, #8
 8014a96:	4603      	mov	r3, r0
 8014a98:	71fb      	strb	r3, [r7, #7]
 8014a9a:	460b      	mov	r3, r1
 8014a9c:	80bb      	strh	r3, [r7, #4]
 8014a9e:	4613      	mov	r3, r2
 8014aa0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014aa2:	79fb      	ldrb	r3, [r7, #7]
 8014aa4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014aa6:	887b      	ldrh	r3, [r7, #2]
 8014aa8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014aac:	d07f      	beq.n	8014bae <pbuf_alloc+0x11e>
 8014aae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014ab2:	f300 80c8 	bgt.w	8014c46 <pbuf_alloc+0x1b6>
 8014ab6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014aba:	d010      	beq.n	8014ade <pbuf_alloc+0x4e>
 8014abc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014ac0:	f300 80c1 	bgt.w	8014c46 <pbuf_alloc+0x1b6>
 8014ac4:	2b01      	cmp	r3, #1
 8014ac6:	d002      	beq.n	8014ace <pbuf_alloc+0x3e>
 8014ac8:	2b41      	cmp	r3, #65	; 0x41
 8014aca:	f040 80bc 	bne.w	8014c46 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014ace:	887a      	ldrh	r2, [r7, #2]
 8014ad0:	88bb      	ldrh	r3, [r7, #4]
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	f000 f8d1 	bl	8014c7c <pbuf_alloc_reference>
 8014ada:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014adc:	e0bd      	b.n	8014c5a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014ae6:	88bb      	ldrh	r3, [r7, #4]
 8014ae8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014aea:	200d      	movs	r0, #13
 8014aec:	f7ff fbb2 	bl	8014254 <memp_malloc>
 8014af0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d109      	bne.n	8014b0c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014af8:	f7ff ff76 	bl	80149e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d002      	beq.n	8014b08 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b04:	f000 faa8 	bl	8015058 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	e0a7      	b.n	8014c5c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b0e:	3303      	adds	r3, #3
 8014b10:	b29b      	uxth	r3, r3
 8014b12:	f023 0303 	bic.w	r3, r3, #3
 8014b16:	b29b      	uxth	r3, r3
 8014b18:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	8b7a      	ldrh	r2, [r7, #26]
 8014b20:	4293      	cmp	r3, r2
 8014b22:	bf28      	it	cs
 8014b24:	4613      	movcs	r3, r2
 8014b26:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b2a:	3310      	adds	r3, #16
 8014b2c:	693a      	ldr	r2, [r7, #16]
 8014b2e:	4413      	add	r3, r2
 8014b30:	3303      	adds	r3, #3
 8014b32:	f023 0303 	bic.w	r3, r3, #3
 8014b36:	4618      	mov	r0, r3
 8014b38:	89f9      	ldrh	r1, [r7, #14]
 8014b3a:	8b7a      	ldrh	r2, [r7, #26]
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	9301      	str	r3, [sp, #4]
 8014b40:	887b      	ldrh	r3, [r7, #2]
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	460b      	mov	r3, r1
 8014b46:	4601      	mov	r1, r0
 8014b48:	6938      	ldr	r0, [r7, #16]
 8014b4a:	f7ff ff77 	bl	8014a3c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	f003 0303 	and.w	r3, r3, #3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d006      	beq.n	8014b68 <pbuf_alloc+0xd8>
 8014b5a:	4b42      	ldr	r3, [pc, #264]	; (8014c64 <pbuf_alloc+0x1d4>)
 8014b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b60:	4941      	ldr	r1, [pc, #260]	; (8014c68 <pbuf_alloc+0x1d8>)
 8014b62:	4842      	ldr	r0, [pc, #264]	; (8014c6c <pbuf_alloc+0x1dc>)
 8014b64:	f00c fca2 	bl	80214ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b6a:	3303      	adds	r3, #3
 8014b6c:	f023 0303 	bic.w	r3, r3, #3
 8014b70:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014b74:	d106      	bne.n	8014b84 <pbuf_alloc+0xf4>
 8014b76:	4b3b      	ldr	r3, [pc, #236]	; (8014c64 <pbuf_alloc+0x1d4>)
 8014b78:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014b7c:	493c      	ldr	r1, [pc, #240]	; (8014c70 <pbuf_alloc+0x1e0>)
 8014b7e:	483b      	ldr	r0, [pc, #236]	; (8014c6c <pbuf_alloc+0x1dc>)
 8014b80:	f00c fc94 	bl	80214ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d102      	bne.n	8014b90 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8014b8e:	e002      	b.n	8014b96 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	693a      	ldr	r2, [r7, #16]
 8014b94:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014b9a:	8b7a      	ldrh	r2, [r7, #26]
 8014b9c:	89fb      	ldrh	r3, [r7, #14]
 8014b9e:	1ad3      	subs	r3, r2, r3
 8014ba0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014ba6:	8b7b      	ldrh	r3, [r7, #26]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d19e      	bne.n	8014aea <pbuf_alloc+0x5a>
      break;
 8014bac:	e055      	b.n	8014c5a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bb0:	3303      	adds	r3, #3
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	f023 0303 	bic.w	r3, r3, #3
 8014bb8:	b29a      	uxth	r2, r3
 8014bba:	88bb      	ldrh	r3, [r7, #4]
 8014bbc:	3303      	adds	r3, #3
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	f023 0303 	bic.w	r3, r3, #3
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	4413      	add	r3, r2
 8014bc8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014bca:	8b3b      	ldrh	r3, [r7, #24]
 8014bcc:	3310      	adds	r3, #16
 8014bce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014bd0:	8b3a      	ldrh	r2, [r7, #24]
 8014bd2:	88bb      	ldrh	r3, [r7, #4]
 8014bd4:	3303      	adds	r3, #3
 8014bd6:	f023 0303 	bic.w	r3, r3, #3
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d306      	bcc.n	8014bec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014bde:	8afa      	ldrh	r2, [r7, #22]
 8014be0:	88bb      	ldrh	r3, [r7, #4]
 8014be2:	3303      	adds	r3, #3
 8014be4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d201      	bcs.n	8014bf0 <pbuf_alloc+0x160>
        return NULL;
 8014bec:	2300      	movs	r3, #0
 8014bee:	e035      	b.n	8014c5c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014bf0:	8afb      	ldrh	r3, [r7, #22]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7ff f9ac 	bl	8013f50 <mem_malloc>
 8014bf8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d101      	bne.n	8014c04 <pbuf_alloc+0x174>
        return NULL;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e02b      	b.n	8014c5c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014c04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c06:	3310      	adds	r3, #16
 8014c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c0a:	4413      	add	r3, r2
 8014c0c:	3303      	adds	r3, #3
 8014c0e:	f023 0303 	bic.w	r3, r3, #3
 8014c12:	4618      	mov	r0, r3
 8014c14:	88b9      	ldrh	r1, [r7, #4]
 8014c16:	88ba      	ldrh	r2, [r7, #4]
 8014c18:	2300      	movs	r3, #0
 8014c1a:	9301      	str	r3, [sp, #4]
 8014c1c:	887b      	ldrh	r3, [r7, #2]
 8014c1e:	9300      	str	r3, [sp, #0]
 8014c20:	460b      	mov	r3, r1
 8014c22:	4601      	mov	r1, r0
 8014c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c26:	f7ff ff09 	bl	8014a3c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	f003 0303 	and.w	r3, r3, #3
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d010      	beq.n	8014c58 <pbuf_alloc+0x1c8>
 8014c36:	4b0b      	ldr	r3, [pc, #44]	; (8014c64 <pbuf_alloc+0x1d4>)
 8014c38:	f44f 7291 	mov.w	r2, #290	; 0x122
 8014c3c:	490d      	ldr	r1, [pc, #52]	; (8014c74 <pbuf_alloc+0x1e4>)
 8014c3e:	480b      	ldr	r0, [pc, #44]	; (8014c6c <pbuf_alloc+0x1dc>)
 8014c40:	f00c fc34 	bl	80214ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014c44:	e008      	b.n	8014c58 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014c46:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <pbuf_alloc+0x1d4>)
 8014c48:	f240 1227 	movw	r2, #295	; 0x127
 8014c4c:	490a      	ldr	r1, [pc, #40]	; (8014c78 <pbuf_alloc+0x1e8>)
 8014c4e:	4807      	ldr	r0, [pc, #28]	; (8014c6c <pbuf_alloc+0x1dc>)
 8014c50:	f00c fc2c 	bl	80214ac <iprintf>
      return NULL;
 8014c54:	2300      	movs	r3, #0
 8014c56:	e001      	b.n	8014c5c <pbuf_alloc+0x1cc>
      break;
 8014c58:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3728      	adds	r7, #40	; 0x28
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	08024944 	.word	0x08024944
 8014c68:	08024974 	.word	0x08024974
 8014c6c:	080249a4 	.word	0x080249a4
 8014c70:	080249cc 	.word	0x080249cc
 8014c74:	08024a00 	.word	0x08024a00
 8014c78:	08024a2c 	.word	0x08024a2c

08014c7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b086      	sub	sp, #24
 8014c80:	af02      	add	r7, sp, #8
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	460b      	mov	r3, r1
 8014c86:	807b      	strh	r3, [r7, #2]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014c8c:	883b      	ldrh	r3, [r7, #0]
 8014c8e:	2b41      	cmp	r3, #65	; 0x41
 8014c90:	d009      	beq.n	8014ca6 <pbuf_alloc_reference+0x2a>
 8014c92:	883b      	ldrh	r3, [r7, #0]
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d006      	beq.n	8014ca6 <pbuf_alloc_reference+0x2a>
 8014c98:	4b0f      	ldr	r3, [pc, #60]	; (8014cd8 <pbuf_alloc_reference+0x5c>)
 8014c9a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014c9e:	490f      	ldr	r1, [pc, #60]	; (8014cdc <pbuf_alloc_reference+0x60>)
 8014ca0:	480f      	ldr	r0, [pc, #60]	; (8014ce0 <pbuf_alloc_reference+0x64>)
 8014ca2:	f00c fc03 	bl	80214ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014ca6:	200c      	movs	r0, #12
 8014ca8:	f7ff fad4 	bl	8014254 <memp_malloc>
 8014cac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d101      	bne.n	8014cb8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	e00b      	b.n	8014cd0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014cb8:	8879      	ldrh	r1, [r7, #2]
 8014cba:	887a      	ldrh	r2, [r7, #2]
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	9301      	str	r3, [sp, #4]
 8014cc0:	883b      	ldrh	r3, [r7, #0]
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	6879      	ldr	r1, [r7, #4]
 8014cc8:	68f8      	ldr	r0, [r7, #12]
 8014cca:	f7ff feb7 	bl	8014a3c <pbuf_init_alloced_pbuf>
  return p;
 8014cce:	68fb      	ldr	r3, [r7, #12]
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	08024944 	.word	0x08024944
 8014cdc:	08024a48 	.word	0x08024a48
 8014ce0:	080249a4 	.word	0x080249a4

08014ce4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b088      	sub	sp, #32
 8014ce8:	af02      	add	r7, sp, #8
 8014cea:	607b      	str	r3, [r7, #4]
 8014cec:	4603      	mov	r3, r0
 8014cee:	73fb      	strb	r3, [r7, #15]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	81bb      	strh	r3, [r7, #12]
 8014cf4:	4613      	mov	r3, r2
 8014cf6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014cf8:	7bfb      	ldrb	r3, [r7, #15]
 8014cfa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014cfc:	8a7b      	ldrh	r3, [r7, #18]
 8014cfe:	3303      	adds	r3, #3
 8014d00:	f023 0203 	bic.w	r2, r3, #3
 8014d04:	89bb      	ldrh	r3, [r7, #12]
 8014d06:	441a      	add	r2, r3
 8014d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d901      	bls.n	8014d12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	e018      	b.n	8014d44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014d12:	6a3b      	ldr	r3, [r7, #32]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d007      	beq.n	8014d28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014d18:	8a7b      	ldrh	r3, [r7, #18]
 8014d1a:	3303      	adds	r3, #3
 8014d1c:	f023 0303 	bic.w	r3, r3, #3
 8014d20:	6a3a      	ldr	r2, [r7, #32]
 8014d22:	4413      	add	r3, r2
 8014d24:	617b      	str	r3, [r7, #20]
 8014d26:	e001      	b.n	8014d2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	89b9      	ldrh	r1, [r7, #12]
 8014d30:	89ba      	ldrh	r2, [r7, #12]
 8014d32:	2302      	movs	r3, #2
 8014d34:	9301      	str	r3, [sp, #4]
 8014d36:	897b      	ldrh	r3, [r7, #10]
 8014d38:	9300      	str	r3, [sp, #0]
 8014d3a:	460b      	mov	r3, r1
 8014d3c:	6979      	ldr	r1, [r7, #20]
 8014d3e:	f7ff fe7d 	bl	8014a3c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014d42:	687b      	ldr	r3, [r7, #4]
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3718      	adds	r7, #24
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	460b      	mov	r3, r1
 8014d56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d106      	bne.n	8014d6c <pbuf_realloc+0x20>
 8014d5e:	4b3a      	ldr	r3, [pc, #232]	; (8014e48 <pbuf_realloc+0xfc>)
 8014d60:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014d64:	4939      	ldr	r1, [pc, #228]	; (8014e4c <pbuf_realloc+0x100>)
 8014d66:	483a      	ldr	r0, [pc, #232]	; (8014e50 <pbuf_realloc+0x104>)
 8014d68:	f00c fba0 	bl	80214ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	891b      	ldrh	r3, [r3, #8]
 8014d70:	887a      	ldrh	r2, [r7, #2]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d263      	bcs.n	8014e3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	891a      	ldrh	r2, [r3, #8]
 8014d7a:	887b      	ldrh	r3, [r7, #2]
 8014d7c:	1ad3      	subs	r3, r2, r3
 8014d7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014d80:	887b      	ldrh	r3, [r7, #2]
 8014d82:	817b      	strh	r3, [r7, #10]
  q = p;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014d88:	e018      	b.n	8014dbc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	895b      	ldrh	r3, [r3, #10]
 8014d8e:	897a      	ldrh	r2, [r7, #10]
 8014d90:	1ad3      	subs	r3, r2, r3
 8014d92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	891a      	ldrh	r2, [r3, #8]
 8014d98:	893b      	ldrh	r3, [r7, #8]
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	b29a      	uxth	r2, r3
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d106      	bne.n	8014dbc <pbuf_realloc+0x70>
 8014dae:	4b26      	ldr	r3, [pc, #152]	; (8014e48 <pbuf_realloc+0xfc>)
 8014db0:	f240 12af 	movw	r2, #431	; 0x1af
 8014db4:	4927      	ldr	r1, [pc, #156]	; (8014e54 <pbuf_realloc+0x108>)
 8014db6:	4826      	ldr	r0, [pc, #152]	; (8014e50 <pbuf_realloc+0x104>)
 8014db8:	f00c fb78 	bl	80214ac <iprintf>
  while (rem_len > q->len) {
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	895b      	ldrh	r3, [r3, #10]
 8014dc0:	897a      	ldrh	r2, [r7, #10]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d8e1      	bhi.n	8014d8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	7b1b      	ldrb	r3, [r3, #12]
 8014dca:	f003 030f 	and.w	r3, r3, #15
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d121      	bne.n	8014e16 <pbuf_realloc+0xca>
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	895b      	ldrh	r3, [r3, #10]
 8014dd6:	897a      	ldrh	r2, [r7, #10]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d01c      	beq.n	8014e16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	7b5b      	ldrb	r3, [r3, #13]
 8014de0:	f003 0302 	and.w	r3, r3, #2
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d116      	bne.n	8014e16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	685a      	ldr	r2, [r3, #4]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	1ad3      	subs	r3, r2, r3
 8014df0:	b29a      	uxth	r2, r3
 8014df2:	897b      	ldrh	r3, [r7, #10]
 8014df4:	4413      	add	r3, r2
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	4619      	mov	r1, r3
 8014dfa:	68f8      	ldr	r0, [r7, #12]
 8014dfc:	f7fe ff9e 	bl	8013d3c <mem_trim>
 8014e00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d106      	bne.n	8014e16 <pbuf_realloc+0xca>
 8014e08:	4b0f      	ldr	r3, [pc, #60]	; (8014e48 <pbuf_realloc+0xfc>)
 8014e0a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014e0e:	4912      	ldr	r1, [pc, #72]	; (8014e58 <pbuf_realloc+0x10c>)
 8014e10:	480f      	ldr	r0, [pc, #60]	; (8014e50 <pbuf_realloc+0x104>)
 8014e12:	f00c fb4b 	bl	80214ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	897a      	ldrh	r2, [r7, #10]
 8014e1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	895a      	ldrh	r2, [r3, #10]
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d004      	beq.n	8014e36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4618      	mov	r0, r3
 8014e32:	f000 f911 	bl	8015058 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]
 8014e3c:	e000      	b.n	8014e40 <pbuf_realloc+0xf4>
    return;
 8014e3e:	bf00      	nop

}
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
 8014e46:	bf00      	nop
 8014e48:	08024944 	.word	0x08024944
 8014e4c:	08024a5c 	.word	0x08024a5c
 8014e50:	080249a4 	.word	0x080249a4
 8014e54:	08024a74 	.word	0x08024a74
 8014e58:	08024a8c 	.word	0x08024a8c

08014e5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	60f8      	str	r0, [r7, #12]
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	4613      	mov	r3, r2
 8014e68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d106      	bne.n	8014e7e <pbuf_add_header_impl+0x22>
 8014e70:	4b2b      	ldr	r3, [pc, #172]	; (8014f20 <pbuf_add_header_impl+0xc4>)
 8014e72:	f240 12df 	movw	r2, #479	; 0x1df
 8014e76:	492b      	ldr	r1, [pc, #172]	; (8014f24 <pbuf_add_header_impl+0xc8>)
 8014e78:	482b      	ldr	r0, [pc, #172]	; (8014f28 <pbuf_add_header_impl+0xcc>)
 8014e7a:	f00c fb17 	bl	80214ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d003      	beq.n	8014e8c <pbuf_add_header_impl+0x30>
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e8a:	d301      	bcc.n	8014e90 <pbuf_add_header_impl+0x34>
    return 1;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e043      	b.n	8014f18 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d101      	bne.n	8014e9a <pbuf_add_header_impl+0x3e>
    return 0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	e03e      	b.n	8014f18 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	891a      	ldrh	r2, [r3, #8]
 8014ea2:	8a7b      	ldrh	r3, [r7, #18]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	8a7a      	ldrh	r2, [r7, #18]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d901      	bls.n	8014eb2 <pbuf_add_header_impl+0x56>
    return 1;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e032      	b.n	8014f18 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	7b1b      	ldrb	r3, [r3, #12]
 8014eb6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014eb8:	8a3b      	ldrh	r3, [r7, #16]
 8014eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d00c      	beq.n	8014edc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	685a      	ldr	r2, [r3, #4]
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	425b      	negs	r3, r3
 8014eca:	4413      	add	r3, r2
 8014ecc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	3310      	adds	r3, #16
 8014ed2:	697a      	ldr	r2, [r7, #20]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d20d      	bcs.n	8014ef4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014ed8:	2301      	movs	r3, #1
 8014eda:	e01d      	b.n	8014f18 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014edc:	79fb      	ldrb	r3, [r7, #7]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d006      	beq.n	8014ef0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	685a      	ldr	r2, [r3, #4]
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	425b      	negs	r3, r3
 8014eea:	4413      	add	r3, r2
 8014eec:	617b      	str	r3, [r7, #20]
 8014eee:	e001      	b.n	8014ef4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	e011      	b.n	8014f18 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	697a      	ldr	r2, [r7, #20]
 8014ef8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	895a      	ldrh	r2, [r3, #10]
 8014efe:	8a7b      	ldrh	r3, [r7, #18]
 8014f00:	4413      	add	r3, r2
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	891a      	ldrh	r2, [r3, #8]
 8014f0c:	8a7b      	ldrh	r3, [r7, #18]
 8014f0e:	4413      	add	r3, r2
 8014f10:	b29a      	uxth	r2, r3
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	811a      	strh	r2, [r3, #8]


  return 0;
 8014f16:	2300      	movs	r3, #0
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3718      	adds	r7, #24
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	08024944 	.word	0x08024944
 8014f24:	08024aa8 	.word	0x08024aa8
 8014f28:	080249a4 	.word	0x080249a4

08014f2c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014f36:	2200      	movs	r2, #0
 8014f38:	6839      	ldr	r1, [r7, #0]
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7ff ff8e 	bl	8014e5c <pbuf_add_header_impl>
 8014f40:	4603      	mov	r3, r0
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3708      	adds	r7, #8
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
	...

08014f4c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d106      	bne.n	8014f6a <pbuf_remove_header+0x1e>
 8014f5c:	4b20      	ldr	r3, [pc, #128]	; (8014fe0 <pbuf_remove_header+0x94>)
 8014f5e:	f240 224b 	movw	r2, #587	; 0x24b
 8014f62:	4920      	ldr	r1, [pc, #128]	; (8014fe4 <pbuf_remove_header+0x98>)
 8014f64:	4820      	ldr	r0, [pc, #128]	; (8014fe8 <pbuf_remove_header+0x9c>)
 8014f66:	f00c faa1 	bl	80214ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d003      	beq.n	8014f78 <pbuf_remove_header+0x2c>
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f76:	d301      	bcc.n	8014f7c <pbuf_remove_header+0x30>
    return 1;
 8014f78:	2301      	movs	r3, #1
 8014f7a:	e02c      	b.n	8014fd6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d101      	bne.n	8014f86 <pbuf_remove_header+0x3a>
    return 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	e027      	b.n	8014fd6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	895b      	ldrh	r3, [r3, #10]
 8014f8e:	89fa      	ldrh	r2, [r7, #14]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d908      	bls.n	8014fa6 <pbuf_remove_header+0x5a>
 8014f94:	4b12      	ldr	r3, [pc, #72]	; (8014fe0 <pbuf_remove_header+0x94>)
 8014f96:	f240 2255 	movw	r2, #597	; 0x255
 8014f9a:	4914      	ldr	r1, [pc, #80]	; (8014fec <pbuf_remove_header+0xa0>)
 8014f9c:	4812      	ldr	r0, [pc, #72]	; (8014fe8 <pbuf_remove_header+0x9c>)
 8014f9e:	f00c fa85 	bl	80214ac <iprintf>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e017      	b.n	8014fd6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	441a      	add	r2, r3
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	895a      	ldrh	r2, [r3, #10]
 8014fbc:	89fb      	ldrh	r3, [r7, #14]
 8014fbe:	1ad3      	subs	r3, r2, r3
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	891a      	ldrh	r2, [r3, #8]
 8014fca:	89fb      	ldrh	r3, [r7, #14]
 8014fcc:	1ad3      	subs	r3, r2, r3
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014fd4:	2300      	movs	r3, #0
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
 8014fde:	bf00      	nop
 8014fe0:	08024944 	.word	0x08024944
 8014fe4:	08024aa8 	.word	0x08024aa8
 8014fe8:	080249a4 	.word	0x080249a4
 8014fec:	08024ab4 	.word	0x08024ab4

08014ff0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b082      	sub	sp, #8
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	807b      	strh	r3, [r7, #2]
 8014ffc:	4613      	mov	r3, r2
 8014ffe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015004:	2b00      	cmp	r3, #0
 8015006:	da08      	bge.n	801501a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015008:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801500c:	425b      	negs	r3, r3
 801500e:	4619      	mov	r1, r3
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7ff ff9b 	bl	8014f4c <pbuf_remove_header>
 8015016:	4603      	mov	r3, r0
 8015018:	e007      	b.n	801502a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801501a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801501e:	787a      	ldrb	r2, [r7, #1]
 8015020:	4619      	mov	r1, r3
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f7ff ff1a 	bl	8014e5c <pbuf_add_header_impl>
 8015028:	4603      	mov	r3, r0
  }
}
 801502a:	4618      	mov	r0, r3
 801502c:	3708      	adds	r7, #8
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}

08015032 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015032:	b580      	push	{r7, lr}
 8015034:	b082      	sub	sp, #8
 8015036:	af00      	add	r7, sp, #0
 8015038:	6078      	str	r0, [r7, #4]
 801503a:	460b      	mov	r3, r1
 801503c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801503e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015042:	2201      	movs	r2, #1
 8015044:	4619      	mov	r1, r3
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7ff ffd2 	bl	8014ff0 <pbuf_header_impl>
 801504c:	4603      	mov	r3, r0
}
 801504e:	4618      	mov	r0, r3
 8015050:	3708      	adds	r7, #8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
	...

08015058 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b088      	sub	sp, #32
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d10b      	bne.n	801507e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d106      	bne.n	801507a <pbuf_free+0x22>
 801506c:	4b3b      	ldr	r3, [pc, #236]	; (801515c <pbuf_free+0x104>)
 801506e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015072:	493b      	ldr	r1, [pc, #236]	; (8015160 <pbuf_free+0x108>)
 8015074:	483b      	ldr	r0, [pc, #236]	; (8015164 <pbuf_free+0x10c>)
 8015076:	f00c fa19 	bl	80214ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801507a:	2300      	movs	r3, #0
 801507c:	e069      	b.n	8015152 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015082:	e062      	b.n	801514a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015084:	f00b ffc6 	bl	8021014 <sys_arch_protect>
 8015088:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	7b9b      	ldrb	r3, [r3, #14]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d106      	bne.n	80150a0 <pbuf_free+0x48>
 8015092:	4b32      	ldr	r3, [pc, #200]	; (801515c <pbuf_free+0x104>)
 8015094:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015098:	4933      	ldr	r1, [pc, #204]	; (8015168 <pbuf_free+0x110>)
 801509a:	4832      	ldr	r0, [pc, #200]	; (8015164 <pbuf_free+0x10c>)
 801509c:	f00c fa06 	bl	80214ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	7b9b      	ldrb	r3, [r3, #14]
 80150a4:	3b01      	subs	r3, #1
 80150a6:	b2da      	uxtb	r2, r3
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	739a      	strb	r2, [r3, #14]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	7b9b      	ldrb	r3, [r3, #14]
 80150b0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80150b2:	69b8      	ldr	r0, [r7, #24]
 80150b4:	f00b ffbc 	bl	8021030 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80150b8:	7dfb      	ldrb	r3, [r7, #23]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d143      	bne.n	8015146 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	7b1b      	ldrb	r3, [r3, #12]
 80150c8:	f003 030f 	and.w	r3, r3, #15
 80150cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	7b5b      	ldrb	r3, [r3, #13]
 80150d2:	f003 0302 	and.w	r3, r3, #2
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d011      	beq.n	80150fe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	691b      	ldr	r3, [r3, #16]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d106      	bne.n	80150f4 <pbuf_free+0x9c>
 80150e6:	4b1d      	ldr	r3, [pc, #116]	; (801515c <pbuf_free+0x104>)
 80150e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80150ec:	491f      	ldr	r1, [pc, #124]	; (801516c <pbuf_free+0x114>)
 80150ee:	481d      	ldr	r0, [pc, #116]	; (8015164 <pbuf_free+0x10c>)
 80150f0:	f00c f9dc 	bl	80214ac <iprintf>
        pc->custom_free_function(p);
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	691b      	ldr	r3, [r3, #16]
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	4798      	blx	r3
 80150fc:	e01d      	b.n	801513a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80150fe:	7bfb      	ldrb	r3, [r7, #15]
 8015100:	2b02      	cmp	r3, #2
 8015102:	d104      	bne.n	801510e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015104:	6879      	ldr	r1, [r7, #4]
 8015106:	200d      	movs	r0, #13
 8015108:	f7ff f8f6 	bl	80142f8 <memp_free>
 801510c:	e015      	b.n	801513a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801510e:	7bfb      	ldrb	r3, [r7, #15]
 8015110:	2b01      	cmp	r3, #1
 8015112:	d104      	bne.n	801511e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015114:	6879      	ldr	r1, [r7, #4]
 8015116:	200c      	movs	r0, #12
 8015118:	f7ff f8ee 	bl	80142f8 <memp_free>
 801511c:	e00d      	b.n	801513a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801511e:	7bfb      	ldrb	r3, [r7, #15]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d103      	bne.n	801512c <pbuf_free+0xd4>
          mem_free(p);
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f7fe fd79 	bl	8013c1c <mem_free>
 801512a:	e006      	b.n	801513a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801512c:	4b0b      	ldr	r3, [pc, #44]	; (801515c <pbuf_free+0x104>)
 801512e:	f240 320f 	movw	r2, #783	; 0x30f
 8015132:	490f      	ldr	r1, [pc, #60]	; (8015170 <pbuf_free+0x118>)
 8015134:	480b      	ldr	r0, [pc, #44]	; (8015164 <pbuf_free+0x10c>)
 8015136:	f00c f9b9 	bl	80214ac <iprintf>
        }
      }
      count++;
 801513a:	7ffb      	ldrb	r3, [r7, #31]
 801513c:	3301      	adds	r3, #1
 801513e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	607b      	str	r3, [r7, #4]
 8015144:	e001      	b.n	801514a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015146:	2300      	movs	r3, #0
 8015148:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d199      	bne.n	8015084 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015150:	7ffb      	ldrb	r3, [r7, #31]
}
 8015152:	4618      	mov	r0, r3
 8015154:	3720      	adds	r7, #32
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	08024944 	.word	0x08024944
 8015160:	08024aa8 	.word	0x08024aa8
 8015164:	080249a4 	.word	0x080249a4
 8015168:	08024ad4 	.word	0x08024ad4
 801516c:	08024aec 	.word	0x08024aec
 8015170:	08024b10 	.word	0x08024b10

08015174 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015174:	b480      	push	{r7}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801517c:	2300      	movs	r3, #0
 801517e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015180:	e005      	b.n	801518e <pbuf_clen+0x1a>
    ++len;
 8015182:	89fb      	ldrh	r3, [r7, #14]
 8015184:	3301      	adds	r3, #1
 8015186:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d1f6      	bne.n	8015182 <pbuf_clen+0xe>
  }
  return len;
 8015194:	89fb      	ldrh	r3, [r7, #14]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3714      	adds	r7, #20
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
	...

080151a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d016      	beq.n	80151e0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80151b2:	f00b ff2f 	bl	8021014 <sys_arch_protect>
 80151b6:	60f8      	str	r0, [r7, #12]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	7b9b      	ldrb	r3, [r3, #14]
 80151bc:	3301      	adds	r3, #1
 80151be:	b2da      	uxtb	r2, r3
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	739a      	strb	r2, [r3, #14]
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f00b ff33 	bl	8021030 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	7b9b      	ldrb	r3, [r3, #14]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d106      	bne.n	80151e0 <pbuf_ref+0x3c>
 80151d2:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <pbuf_ref+0x44>)
 80151d4:	f240 3242 	movw	r2, #834	; 0x342
 80151d8:	4904      	ldr	r1, [pc, #16]	; (80151ec <pbuf_ref+0x48>)
 80151da:	4805      	ldr	r0, [pc, #20]	; (80151f0 <pbuf_ref+0x4c>)
 80151dc:	f00c f966 	bl	80214ac <iprintf>
  }
}
 80151e0:	bf00      	nop
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	08024944 	.word	0x08024944
 80151ec:	08024b24 	.word	0x08024b24
 80151f0:	080249a4 	.word	0x080249a4

080151f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b084      	sub	sp, #16
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d002      	beq.n	801520a <pbuf_cat+0x16>
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d107      	bne.n	801521a <pbuf_cat+0x26>
 801520a:	4b20      	ldr	r3, [pc, #128]	; (801528c <pbuf_cat+0x98>)
 801520c:	f240 3259 	movw	r2, #857	; 0x359
 8015210:	491f      	ldr	r1, [pc, #124]	; (8015290 <pbuf_cat+0x9c>)
 8015212:	4820      	ldr	r0, [pc, #128]	; (8015294 <pbuf_cat+0xa0>)
 8015214:	f00c f94a 	bl	80214ac <iprintf>
 8015218:	e034      	b.n	8015284 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	60fb      	str	r3, [r7, #12]
 801521e:	e00a      	b.n	8015236 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	891a      	ldrh	r2, [r3, #8]
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	891b      	ldrh	r3, [r3, #8]
 8015228:	4413      	add	r3, r2
 801522a:	b29a      	uxth	r2, r3
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	60fb      	str	r3, [r7, #12]
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d1f0      	bne.n	8015220 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	891a      	ldrh	r2, [r3, #8]
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	895b      	ldrh	r3, [r3, #10]
 8015246:	429a      	cmp	r2, r3
 8015248:	d006      	beq.n	8015258 <pbuf_cat+0x64>
 801524a:	4b10      	ldr	r3, [pc, #64]	; (801528c <pbuf_cat+0x98>)
 801524c:	f240 3262 	movw	r2, #866	; 0x362
 8015250:	4911      	ldr	r1, [pc, #68]	; (8015298 <pbuf_cat+0xa4>)
 8015252:	4810      	ldr	r0, [pc, #64]	; (8015294 <pbuf_cat+0xa0>)
 8015254:	f00c f92a 	bl	80214ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d006      	beq.n	801526e <pbuf_cat+0x7a>
 8015260:	4b0a      	ldr	r3, [pc, #40]	; (801528c <pbuf_cat+0x98>)
 8015262:	f240 3263 	movw	r2, #867	; 0x363
 8015266:	490d      	ldr	r1, [pc, #52]	; (801529c <pbuf_cat+0xa8>)
 8015268:	480a      	ldr	r0, [pc, #40]	; (8015294 <pbuf_cat+0xa0>)
 801526a:	f00c f91f 	bl	80214ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	891a      	ldrh	r2, [r3, #8]
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	891b      	ldrh	r3, [r3, #8]
 8015276:	4413      	add	r3, r2
 8015278:	b29a      	uxth	r2, r3
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	683a      	ldr	r2, [r7, #0]
 8015282:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015284:	3710      	adds	r7, #16
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	08024944 	.word	0x08024944
 8015290:	08024b38 	.word	0x08024b38
 8015294:	080249a4 	.word	0x080249a4
 8015298:	08024b70 	.word	0x08024b70
 801529c:	08024ba0 	.word	0x08024ba0

080152a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f7ff ffa1 	bl	80151f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80152b2:	6838      	ldr	r0, [r7, #0]
 80152b4:	f7ff ff76 	bl	80151a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80152b8:	bf00      	nop
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b086      	sub	sp, #24
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80152ca:	2300      	movs	r3, #0
 80152cc:	617b      	str	r3, [r7, #20]
 80152ce:	2300      	movs	r3, #0
 80152d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d008      	beq.n	80152ea <pbuf_copy+0x2a>
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d005      	beq.n	80152ea <pbuf_copy+0x2a>
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	891a      	ldrh	r2, [r3, #8]
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	891b      	ldrh	r3, [r3, #8]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d209      	bcs.n	80152fe <pbuf_copy+0x3e>
 80152ea:	4b57      	ldr	r3, [pc, #348]	; (8015448 <pbuf_copy+0x188>)
 80152ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 80152f0:	4956      	ldr	r1, [pc, #344]	; (801544c <pbuf_copy+0x18c>)
 80152f2:	4857      	ldr	r0, [pc, #348]	; (8015450 <pbuf_copy+0x190>)
 80152f4:	f00c f8da 	bl	80214ac <iprintf>
 80152f8:	f06f 030f 	mvn.w	r3, #15
 80152fc:	e09f      	b.n	801543e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	895b      	ldrh	r3, [r3, #10]
 8015302:	461a      	mov	r2, r3
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	1ad2      	subs	r2, r2, r3
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	895b      	ldrh	r3, [r3, #10]
 801530c:	4619      	mov	r1, r3
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	1acb      	subs	r3, r1, r3
 8015312:	429a      	cmp	r2, r3
 8015314:	d306      	bcc.n	8015324 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	895b      	ldrh	r3, [r3, #10]
 801531a:	461a      	mov	r2, r3
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	1ad3      	subs	r3, r2, r3
 8015320:	60fb      	str	r3, [r7, #12]
 8015322:	e005      	b.n	8015330 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	895b      	ldrh	r3, [r3, #10]
 8015328:	461a      	mov	r2, r3
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	1ad3      	subs	r3, r2, r3
 801532e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	685a      	ldr	r2, [r3, #4]
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	18d0      	adds	r0, r2, r3
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	685a      	ldr	r2, [r3, #4]
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	4413      	add	r3, r2
 8015340:	68fa      	ldr	r2, [r7, #12]
 8015342:	4619      	mov	r1, r3
 8015344:	f00b ffc8 	bl	80212d8 <memcpy>
    offset_to += len;
 8015348:	697a      	ldr	r2, [r7, #20]
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	4413      	add	r3, r2
 801534e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015350:	693a      	ldr	r2, [r7, #16]
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	4413      	add	r3, r2
 8015356:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	895b      	ldrh	r3, [r3, #10]
 801535c:	461a      	mov	r2, r3
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	4293      	cmp	r3, r2
 8015362:	d906      	bls.n	8015372 <pbuf_copy+0xb2>
 8015364:	4b38      	ldr	r3, [pc, #224]	; (8015448 <pbuf_copy+0x188>)
 8015366:	f240 32d9 	movw	r2, #985	; 0x3d9
 801536a:	493a      	ldr	r1, [pc, #232]	; (8015454 <pbuf_copy+0x194>)
 801536c:	4838      	ldr	r0, [pc, #224]	; (8015450 <pbuf_copy+0x190>)
 801536e:	f00c f89d 	bl	80214ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	895b      	ldrh	r3, [r3, #10]
 8015376:	461a      	mov	r2, r3
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	4293      	cmp	r3, r2
 801537c:	d906      	bls.n	801538c <pbuf_copy+0xcc>
 801537e:	4b32      	ldr	r3, [pc, #200]	; (8015448 <pbuf_copy+0x188>)
 8015380:	f240 32da 	movw	r2, #986	; 0x3da
 8015384:	4934      	ldr	r1, [pc, #208]	; (8015458 <pbuf_copy+0x198>)
 8015386:	4832      	ldr	r0, [pc, #200]	; (8015450 <pbuf_copy+0x190>)
 8015388:	f00c f890 	bl	80214ac <iprintf>
    if (offset_from >= p_from->len) {
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	895b      	ldrh	r3, [r3, #10]
 8015390:	461a      	mov	r2, r3
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	4293      	cmp	r3, r2
 8015396:	d304      	bcc.n	80153a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015398:	2300      	movs	r3, #0
 801539a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	895b      	ldrh	r3, [r3, #10]
 80153a6:	461a      	mov	r2, r3
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d114      	bne.n	80153d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80153ae:	2300      	movs	r3, #0
 80153b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d10c      	bne.n	80153d8 <pbuf_copy+0x118>
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d009      	beq.n	80153d8 <pbuf_copy+0x118>
 80153c4:	4b20      	ldr	r3, [pc, #128]	; (8015448 <pbuf_copy+0x188>)
 80153c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80153ca:	4924      	ldr	r1, [pc, #144]	; (801545c <pbuf_copy+0x19c>)
 80153cc:	4820      	ldr	r0, [pc, #128]	; (8015450 <pbuf_copy+0x190>)
 80153ce:	f00c f86d 	bl	80214ac <iprintf>
 80153d2:	f06f 030f 	mvn.w	r3, #15
 80153d6:	e032      	b.n	801543e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d013      	beq.n	8015406 <pbuf_copy+0x146>
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	895a      	ldrh	r2, [r3, #10]
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	891b      	ldrh	r3, [r3, #8]
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d10d      	bne.n	8015406 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d009      	beq.n	8015406 <pbuf_copy+0x146>
 80153f2:	4b15      	ldr	r3, [pc, #84]	; (8015448 <pbuf_copy+0x188>)
 80153f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80153f8:	4919      	ldr	r1, [pc, #100]	; (8015460 <pbuf_copy+0x1a0>)
 80153fa:	4815      	ldr	r0, [pc, #84]	; (8015450 <pbuf_copy+0x190>)
 80153fc:	f00c f856 	bl	80214ac <iprintf>
 8015400:	f06f 0305 	mvn.w	r3, #5
 8015404:	e01b      	b.n	801543e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d013      	beq.n	8015434 <pbuf_copy+0x174>
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	895a      	ldrh	r2, [r3, #10]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	891b      	ldrh	r3, [r3, #8]
 8015414:	429a      	cmp	r2, r3
 8015416:	d10d      	bne.n	8015434 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d009      	beq.n	8015434 <pbuf_copy+0x174>
 8015420:	4b09      	ldr	r3, [pc, #36]	; (8015448 <pbuf_copy+0x188>)
 8015422:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015426:	490e      	ldr	r1, [pc, #56]	; (8015460 <pbuf_copy+0x1a0>)
 8015428:	4809      	ldr	r0, [pc, #36]	; (8015450 <pbuf_copy+0x190>)
 801542a:	f00c f83f 	bl	80214ac <iprintf>
 801542e:	f06f 0305 	mvn.w	r3, #5
 8015432:	e004      	b.n	801543e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	f47f af61 	bne.w	80152fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801543c:	2300      	movs	r3, #0
}
 801543e:	4618      	mov	r0, r3
 8015440:	3718      	adds	r7, #24
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
 8015446:	bf00      	nop
 8015448:	08024944 	.word	0x08024944
 801544c:	08024bec 	.word	0x08024bec
 8015450:	080249a4 	.word	0x080249a4
 8015454:	08024c1c 	.word	0x08024c1c
 8015458:	08024c34 	.word	0x08024c34
 801545c:	08024c50 	.word	0x08024c50
 8015460:	08024c60 	.word	0x08024c60

08015464 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b088      	sub	sp, #32
 8015468:	af00      	add	r7, sp, #0
 801546a:	60f8      	str	r0, [r7, #12]
 801546c:	60b9      	str	r1, [r7, #8]
 801546e:	4611      	mov	r1, r2
 8015470:	461a      	mov	r2, r3
 8015472:	460b      	mov	r3, r1
 8015474:	80fb      	strh	r3, [r7, #6]
 8015476:	4613      	mov	r3, r2
 8015478:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801547a:	2300      	movs	r3, #0
 801547c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801547e:	2300      	movs	r3, #0
 8015480:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d108      	bne.n	801549a <pbuf_copy_partial+0x36>
 8015488:	4b2b      	ldr	r3, [pc, #172]	; (8015538 <pbuf_copy_partial+0xd4>)
 801548a:	f240 420a 	movw	r2, #1034	; 0x40a
 801548e:	492b      	ldr	r1, [pc, #172]	; (801553c <pbuf_copy_partial+0xd8>)
 8015490:	482b      	ldr	r0, [pc, #172]	; (8015540 <pbuf_copy_partial+0xdc>)
 8015492:	f00c f80b 	bl	80214ac <iprintf>
 8015496:	2300      	movs	r3, #0
 8015498:	e04a      	b.n	8015530 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d108      	bne.n	80154b2 <pbuf_copy_partial+0x4e>
 80154a0:	4b25      	ldr	r3, [pc, #148]	; (8015538 <pbuf_copy_partial+0xd4>)
 80154a2:	f240 420b 	movw	r2, #1035	; 0x40b
 80154a6:	4927      	ldr	r1, [pc, #156]	; (8015544 <pbuf_copy_partial+0xe0>)
 80154a8:	4825      	ldr	r0, [pc, #148]	; (8015540 <pbuf_copy_partial+0xdc>)
 80154aa:	f00b ffff 	bl	80214ac <iprintf>
 80154ae:	2300      	movs	r3, #0
 80154b0:	e03e      	b.n	8015530 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	61fb      	str	r3, [r7, #28]
 80154b6:	e034      	b.n	8015522 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80154b8:	88bb      	ldrh	r3, [r7, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d00a      	beq.n	80154d4 <pbuf_copy_partial+0x70>
 80154be:	69fb      	ldr	r3, [r7, #28]
 80154c0:	895b      	ldrh	r3, [r3, #10]
 80154c2:	88ba      	ldrh	r2, [r7, #4]
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d305      	bcc.n	80154d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	895b      	ldrh	r3, [r3, #10]
 80154cc:	88ba      	ldrh	r2, [r7, #4]
 80154ce:	1ad3      	subs	r3, r2, r3
 80154d0:	80bb      	strh	r3, [r7, #4]
 80154d2:	e023      	b.n	801551c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	895a      	ldrh	r2, [r3, #10]
 80154d8:	88bb      	ldrh	r3, [r7, #4]
 80154da:	1ad3      	subs	r3, r2, r3
 80154dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80154de:	8b3a      	ldrh	r2, [r7, #24]
 80154e0:	88fb      	ldrh	r3, [r7, #6]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d901      	bls.n	80154ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80154e6:	88fb      	ldrh	r3, [r7, #6]
 80154e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80154ea:	8b7b      	ldrh	r3, [r7, #26]
 80154ec:	68ba      	ldr	r2, [r7, #8]
 80154ee:	18d0      	adds	r0, r2, r3
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	685a      	ldr	r2, [r3, #4]
 80154f4:	88bb      	ldrh	r3, [r7, #4]
 80154f6:	4413      	add	r3, r2
 80154f8:	8b3a      	ldrh	r2, [r7, #24]
 80154fa:	4619      	mov	r1, r3
 80154fc:	f00b feec 	bl	80212d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015500:	8afa      	ldrh	r2, [r7, #22]
 8015502:	8b3b      	ldrh	r3, [r7, #24]
 8015504:	4413      	add	r3, r2
 8015506:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015508:	8b7a      	ldrh	r2, [r7, #26]
 801550a:	8b3b      	ldrh	r3, [r7, #24]
 801550c:	4413      	add	r3, r2
 801550e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015510:	88fa      	ldrh	r2, [r7, #6]
 8015512:	8b3b      	ldrh	r3, [r7, #24]
 8015514:	1ad3      	subs	r3, r2, r3
 8015516:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015518:	2300      	movs	r3, #0
 801551a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	61fb      	str	r3, [r7, #28]
 8015522:	88fb      	ldrh	r3, [r7, #6]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d002      	beq.n	801552e <pbuf_copy_partial+0xca>
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1c4      	bne.n	80154b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801552e:	8afb      	ldrh	r3, [r7, #22]
}
 8015530:	4618      	mov	r0, r3
 8015532:	3720      	adds	r7, #32
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}
 8015538:	08024944 	.word	0x08024944
 801553c:	08024c8c 	.word	0x08024c8c
 8015540:	080249a4 	.word	0x080249a4
 8015544:	08024cac 	.word	0x08024cac

08015548 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8015548:	b480      	push	{r7}
 801554a:	b087      	sub	sp, #28
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	460b      	mov	r3, r1
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8015556:	897b      	ldrh	r3, [r7, #10]
 8015558:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801555e:	e007      	b.n	8015570 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	895b      	ldrh	r3, [r3, #10]
 8015564:	8afa      	ldrh	r2, [r7, #22]
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d004      	beq.n	8015580 <pbuf_skip_const+0x38>
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	895b      	ldrh	r3, [r3, #10]
 801557a:	8afa      	ldrh	r2, [r7, #22]
 801557c:	429a      	cmp	r2, r3
 801557e:	d2ef      	bcs.n	8015560 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d002      	beq.n	801558c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	8afa      	ldrh	r2, [r7, #22]
 801558a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801558c:	693b      	ldr	r3, [r7, #16]
}
 801558e:	4618      	mov	r0, r3
 8015590:	371c      	adds	r7, #28
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr

0801559a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b086      	sub	sp, #24
 801559e:	af00      	add	r7, sp, #0
 80155a0:	60f8      	str	r0, [r7, #12]
 80155a2:	460b      	mov	r3, r1
 80155a4:	607a      	str	r2, [r7, #4]
 80155a6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80155a8:	897b      	ldrh	r3, [r7, #10]
 80155aa:	687a      	ldr	r2, [r7, #4]
 80155ac:	4619      	mov	r1, r3
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f7ff ffca 	bl	8015548 <pbuf_skip_const>
 80155b4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80155b6:	697b      	ldr	r3, [r7, #20]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b088      	sub	sp, #32
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	4613      	mov	r3, r2
 80155cc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80155ce:	88fb      	ldrh	r3, [r7, #6]
 80155d0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80155d2:	2300      	movs	r3, #0
 80155d4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d109      	bne.n	80155f0 <pbuf_take+0x30>
 80155dc:	4b3a      	ldr	r3, [pc, #232]	; (80156c8 <pbuf_take+0x108>)
 80155de:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80155e2:	493a      	ldr	r1, [pc, #232]	; (80156cc <pbuf_take+0x10c>)
 80155e4:	483a      	ldr	r0, [pc, #232]	; (80156d0 <pbuf_take+0x110>)
 80155e6:	f00b ff61 	bl	80214ac <iprintf>
 80155ea:	f06f 030f 	mvn.w	r3, #15
 80155ee:	e067      	b.n	80156c0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d109      	bne.n	801560a <pbuf_take+0x4a>
 80155f6:	4b34      	ldr	r3, [pc, #208]	; (80156c8 <pbuf_take+0x108>)
 80155f8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80155fc:	4935      	ldr	r1, [pc, #212]	; (80156d4 <pbuf_take+0x114>)
 80155fe:	4834      	ldr	r0, [pc, #208]	; (80156d0 <pbuf_take+0x110>)
 8015600:	f00b ff54 	bl	80214ac <iprintf>
 8015604:	f06f 030f 	mvn.w	r3, #15
 8015608:	e05a      	b.n	80156c0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	891b      	ldrh	r3, [r3, #8]
 801560e:	88fa      	ldrh	r2, [r7, #6]
 8015610:	429a      	cmp	r2, r3
 8015612:	d909      	bls.n	8015628 <pbuf_take+0x68>
 8015614:	4b2c      	ldr	r3, [pc, #176]	; (80156c8 <pbuf_take+0x108>)
 8015616:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801561a:	492f      	ldr	r1, [pc, #188]	; (80156d8 <pbuf_take+0x118>)
 801561c:	482c      	ldr	r0, [pc, #176]	; (80156d0 <pbuf_take+0x110>)
 801561e:	f00b ff45 	bl	80214ac <iprintf>
 8015622:	f04f 33ff 	mov.w	r3, #4294967295
 8015626:	e04b      	b.n	80156c0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d007      	beq.n	801563e <pbuf_take+0x7e>
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d004      	beq.n	801563e <pbuf_take+0x7e>
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	891b      	ldrh	r3, [r3, #8]
 8015638:	88fa      	ldrh	r2, [r7, #6]
 801563a:	429a      	cmp	r2, r3
 801563c:	d902      	bls.n	8015644 <pbuf_take+0x84>
    return ERR_ARG;
 801563e:	f06f 030f 	mvn.w	r3, #15
 8015642:	e03d      	b.n	80156c0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	61fb      	str	r3, [r7, #28]
 8015648:	e028      	b.n	801569c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d106      	bne.n	801565e <pbuf_take+0x9e>
 8015650:	4b1d      	ldr	r3, [pc, #116]	; (80156c8 <pbuf_take+0x108>)
 8015652:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8015656:	4921      	ldr	r1, [pc, #132]	; (80156dc <pbuf_take+0x11c>)
 8015658:	481d      	ldr	r0, [pc, #116]	; (80156d0 <pbuf_take+0x110>)
 801565a:	f00b ff27 	bl	80214ac <iprintf>
    buf_copy_len = total_copy_len;
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	895b      	ldrh	r3, [r3, #10]
 8015666:	461a      	mov	r2, r3
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	4293      	cmp	r3, r2
 801566c:	d902      	bls.n	8015674 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	895b      	ldrh	r3, [r3, #10]
 8015672:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	6858      	ldr	r0, [r3, #4]
 8015678:	68ba      	ldr	r2, [r7, #8]
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	4413      	add	r3, r2
 801567e:	69ba      	ldr	r2, [r7, #24]
 8015680:	4619      	mov	r1, r3
 8015682:	f00b fe29 	bl	80212d8 <memcpy>
    total_copy_len -= buf_copy_len;
 8015686:	697a      	ldr	r2, [r7, #20]
 8015688:	69bb      	ldr	r3, [r7, #24]
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801568e:	693a      	ldr	r2, [r7, #16]
 8015690:	69bb      	ldr	r3, [r7, #24]
 8015692:	4413      	add	r3, r2
 8015694:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	61fb      	str	r3, [r7, #28]
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1d3      	bne.n	801564a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d103      	bne.n	80156b0 <pbuf_take+0xf0>
 80156a8:	88fb      	ldrh	r3, [r7, #6]
 80156aa:	693a      	ldr	r2, [r7, #16]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d006      	beq.n	80156be <pbuf_take+0xfe>
 80156b0:	4b05      	ldr	r3, [pc, #20]	; (80156c8 <pbuf_take+0x108>)
 80156b2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80156b6:	490a      	ldr	r1, [pc, #40]	; (80156e0 <pbuf_take+0x120>)
 80156b8:	4805      	ldr	r0, [pc, #20]	; (80156d0 <pbuf_take+0x110>)
 80156ba:	f00b fef7 	bl	80214ac <iprintf>
  return ERR_OK;
 80156be:	2300      	movs	r3, #0
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3720      	adds	r7, #32
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	08024944 	.word	0x08024944
 80156cc:	08024d1c 	.word	0x08024d1c
 80156d0:	080249a4 	.word	0x080249a4
 80156d4:	08024d34 	.word	0x08024d34
 80156d8:	08024d50 	.word	0x08024d50
 80156dc:	08024d70 	.word	0x08024d70
 80156e0:	08024d88 	.word	0x08024d88

080156e4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b088      	sub	sp, #32
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	60f8      	str	r0, [r7, #12]
 80156ec:	60b9      	str	r1, [r7, #8]
 80156ee:	4611      	mov	r1, r2
 80156f0:	461a      	mov	r2, r3
 80156f2:	460b      	mov	r3, r1
 80156f4:	80fb      	strh	r3, [r7, #6]
 80156f6:	4613      	mov	r3, r2
 80156f8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80156fa:	f107 0210 	add.w	r2, r7, #16
 80156fe:	88bb      	ldrh	r3, [r7, #4]
 8015700:	4619      	mov	r1, r3
 8015702:	68f8      	ldr	r0, [r7, #12]
 8015704:	f7ff ff49 	bl	801559a <pbuf_skip>
 8015708:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d047      	beq.n	80157a0 <pbuf_take_at+0xbc>
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	891b      	ldrh	r3, [r3, #8]
 8015714:	461a      	mov	r2, r3
 8015716:	8a3b      	ldrh	r3, [r7, #16]
 8015718:	4619      	mov	r1, r3
 801571a:	88fb      	ldrh	r3, [r7, #6]
 801571c:	440b      	add	r3, r1
 801571e:	429a      	cmp	r2, r3
 8015720:	db3e      	blt.n	80157a0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8015722:	88fb      	ldrh	r3, [r7, #6]
 8015724:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801572a:	69fb      	ldr	r3, [r7, #28]
 801572c:	895a      	ldrh	r2, [r3, #10]
 801572e:	8a3b      	ldrh	r3, [r7, #16]
 8015730:	429a      	cmp	r2, r3
 8015732:	d806      	bhi.n	8015742 <pbuf_take_at+0x5e>
 8015734:	4b1d      	ldr	r3, [pc, #116]	; (80157ac <pbuf_take_at+0xc8>)
 8015736:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801573a:	491d      	ldr	r1, [pc, #116]	; (80157b0 <pbuf_take_at+0xcc>)
 801573c:	481d      	ldr	r0, [pc, #116]	; (80157b4 <pbuf_take_at+0xd0>)
 801573e:	f00b feb5 	bl	80214ac <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	895b      	ldrh	r3, [r3, #10]
 8015746:	461a      	mov	r2, r3
 8015748:	8a3b      	ldrh	r3, [r7, #16]
 801574a:	1ad2      	subs	r2, r2, r3
 801574c:	88fb      	ldrh	r3, [r7, #6]
 801574e:	429a      	cmp	r2, r3
 8015750:	da05      	bge.n	801575e <pbuf_take_at+0x7a>
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	895a      	ldrh	r2, [r3, #10]
 8015756:	8a3b      	ldrh	r3, [r7, #16]
 8015758:	1ad3      	subs	r3, r2, r3
 801575a:	b29b      	uxth	r3, r3
 801575c:	e000      	b.n	8015760 <pbuf_take_at+0x7c>
 801575e:	88fb      	ldrh	r3, [r7, #6]
 8015760:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8015762:	69fb      	ldr	r3, [r7, #28]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	8a3a      	ldrh	r2, [r7, #16]
 8015768:	4413      	add	r3, r2
 801576a:	8a7a      	ldrh	r2, [r7, #18]
 801576c:	68b9      	ldr	r1, [r7, #8]
 801576e:	4618      	mov	r0, r3
 8015770:	f00b fdb2 	bl	80212d8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8015774:	8b7a      	ldrh	r2, [r7, #26]
 8015776:	8a7b      	ldrh	r3, [r7, #18]
 8015778:	1ad3      	subs	r3, r2, r3
 801577a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801577c:	8a7b      	ldrh	r3, [r7, #18]
 801577e:	697a      	ldr	r2, [r7, #20]
 8015780:	4413      	add	r3, r2
 8015782:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8015784:	8b7b      	ldrh	r3, [r7, #26]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d008      	beq.n	801579c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	8b7a      	ldrh	r2, [r7, #26]
 8015790:	6979      	ldr	r1, [r7, #20]
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff ff14 	bl	80155c0 <pbuf_take>
 8015798:	4603      	mov	r3, r0
 801579a:	e003      	b.n	80157a4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801579c:	2300      	movs	r3, #0
 801579e:	e001      	b.n	80157a4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80157a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3720      	adds	r7, #32
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	08024944 	.word	0x08024944
 80157b0:	08024da0 	.word	0x08024da0
 80157b4:	080249a4 	.word	0x080249a4

080157b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af00      	add	r7, sp, #0
 80157be:	4603      	mov	r3, r0
 80157c0:	603a      	str	r2, [r7, #0]
 80157c2:	71fb      	strb	r3, [r7, #7]
 80157c4:	460b      	mov	r3, r1
 80157c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	8919      	ldrh	r1, [r3, #8]
 80157cc:	88ba      	ldrh	r2, [r7, #4]
 80157ce:	79fb      	ldrb	r3, [r7, #7]
 80157d0:	4618      	mov	r0, r3
 80157d2:	f7ff f95d 	bl	8014a90 <pbuf_alloc>
 80157d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d101      	bne.n	80157e2 <pbuf_clone+0x2a>
    return NULL;
 80157de:	2300      	movs	r3, #0
 80157e0:	e011      	b.n	8015806 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80157e2:	6839      	ldr	r1, [r7, #0]
 80157e4:	68f8      	ldr	r0, [r7, #12]
 80157e6:	f7ff fd6b 	bl	80152c0 <pbuf_copy>
 80157ea:	4603      	mov	r3, r0
 80157ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80157ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d006      	beq.n	8015804 <pbuf_clone+0x4c>
 80157f6:	4b06      	ldr	r3, [pc, #24]	; (8015810 <pbuf_clone+0x58>)
 80157f8:	f240 5224 	movw	r2, #1316	; 0x524
 80157fc:	4905      	ldr	r1, [pc, #20]	; (8015814 <pbuf_clone+0x5c>)
 80157fe:	4806      	ldr	r0, [pc, #24]	; (8015818 <pbuf_clone+0x60>)
 8015800:	f00b fe54 	bl	80214ac <iprintf>
  return q;
 8015804:	68fb      	ldr	r3, [r7, #12]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	08024944 	.word	0x08024944
 8015814:	08024db8 	.word	0x08024db8
 8015818:	080249a4 	.word	0x080249a4

0801581c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	460b      	mov	r3, r1
 8015826:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8015828:	f107 020a 	add.w	r2, r7, #10
 801582c:	887b      	ldrh	r3, [r7, #2]
 801582e:	4619      	mov	r1, r3
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7ff fe89 	bl	8015548 <pbuf_skip_const>
 8015836:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d00a      	beq.n	8015854 <pbuf_try_get_at+0x38>
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	895a      	ldrh	r2, [r3, #10]
 8015842:	897b      	ldrh	r3, [r7, #10]
 8015844:	429a      	cmp	r2, r3
 8015846:	d905      	bls.n	8015854 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	897a      	ldrh	r2, [r7, #10]
 801584e:	4413      	add	r3, r2
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	e001      	b.n	8015858 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8015854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015858:	4618      	mov	r0, r3
 801585a:	3710      	adds	r7, #16
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	460b      	mov	r3, r1
 801586a:	807b      	strh	r3, [r7, #2]
 801586c:	4613      	mov	r3, r2
 801586e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8015870:	f107 020a 	add.w	r2, r7, #10
 8015874:	887b      	ldrh	r3, [r7, #2]
 8015876:	4619      	mov	r1, r3
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7ff fe8e 	bl	801559a <pbuf_skip>
 801587e:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d00a      	beq.n	801589c <pbuf_put_at+0x3c>
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	895a      	ldrh	r2, [r3, #10]
 801588a:	897b      	ldrh	r3, [r7, #10]
 801588c:	429a      	cmp	r2, r3
 801588e:	d905      	bls.n	801589c <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	685b      	ldr	r3, [r3, #4]
 8015894:	897a      	ldrh	r2, [r7, #10]
 8015896:	4413      	add	r3, r2
 8015898:	787a      	ldrb	r2, [r7, #1]
 801589a:	701a      	strb	r2, [r3, #0]
  }
}
 801589c:	bf00      	nop
 801589e:	3710      	adds	r7, #16
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80158a8:	f00b fed2 	bl	8021650 <rand>
 80158ac:	4603      	mov	r3, r0
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	4b01      	ldr	r3, [pc, #4]	; (80158c4 <tcp_init+0x20>)
 80158be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80158c0:	bf00      	nop
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	20000360 	.word	0x20000360

080158c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	7d1b      	ldrb	r3, [r3, #20]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d105      	bne.n	80158e4 <tcp_free+0x1c>
 80158d8:	4b06      	ldr	r3, [pc, #24]	; (80158f4 <tcp_free+0x2c>)
 80158da:	22d4      	movs	r2, #212	; 0xd4
 80158dc:	4906      	ldr	r1, [pc, #24]	; (80158f8 <tcp_free+0x30>)
 80158de:	4807      	ldr	r0, [pc, #28]	; (80158fc <tcp_free+0x34>)
 80158e0:	f00b fde4 	bl	80214ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80158e4:	6879      	ldr	r1, [r7, #4]
 80158e6:	2001      	movs	r0, #1
 80158e8:	f7fe fd06 	bl	80142f8 <memp_free>
}
 80158ec:	bf00      	nop
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	08024e44 	.word	0x08024e44
 80158f8:	08024e74 	.word	0x08024e74
 80158fc:	08024e88 	.word	0x08024e88

08015900 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	7d1b      	ldrb	r3, [r3, #20]
 801590c:	2b01      	cmp	r3, #1
 801590e:	d105      	bne.n	801591c <tcp_free_listen+0x1c>
 8015910:	4b06      	ldr	r3, [pc, #24]	; (801592c <tcp_free_listen+0x2c>)
 8015912:	22df      	movs	r2, #223	; 0xdf
 8015914:	4906      	ldr	r1, [pc, #24]	; (8015930 <tcp_free_listen+0x30>)
 8015916:	4807      	ldr	r0, [pc, #28]	; (8015934 <tcp_free_listen+0x34>)
 8015918:	f00b fdc8 	bl	80214ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801591c:	6879      	ldr	r1, [r7, #4]
 801591e:	2002      	movs	r0, #2
 8015920:	f7fe fcea 	bl	80142f8 <memp_free>
}
 8015924:	bf00      	nop
 8015926:	3708      	adds	r7, #8
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	08024e44 	.word	0x08024e44
 8015930:	08024eb0 	.word	0x08024eb0
 8015934:	08024e88 	.word	0x08024e88

08015938 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801593c:	f001 f85c 	bl	80169f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015940:	4b07      	ldr	r3, [pc, #28]	; (8015960 <tcp_tmr+0x28>)
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	3301      	adds	r3, #1
 8015946:	b2da      	uxtb	r2, r3
 8015948:	4b05      	ldr	r3, [pc, #20]	; (8015960 <tcp_tmr+0x28>)
 801594a:	701a      	strb	r2, [r3, #0]
 801594c:	4b04      	ldr	r3, [pc, #16]	; (8015960 <tcp_tmr+0x28>)
 801594e:	781b      	ldrb	r3, [r3, #0]
 8015950:	f003 0301 	and.w	r3, r3, #1
 8015954:	2b00      	cmp	r3, #0
 8015956:	d001      	beq.n	801595c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015958:	f000 fd0e 	bl	8016378 <tcp_slowtmr>
  }
}
 801595c:	bf00      	nop
 801595e:	bd80      	pop	{r7, pc}
 8015960:	20005585 	.word	0x20005585

08015964 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d105      	bne.n	8015980 <tcp_remove_listener+0x1c>
 8015974:	4b0d      	ldr	r3, [pc, #52]	; (80159ac <tcp_remove_listener+0x48>)
 8015976:	22ff      	movs	r2, #255	; 0xff
 8015978:	490d      	ldr	r1, [pc, #52]	; (80159b0 <tcp_remove_listener+0x4c>)
 801597a:	480e      	ldr	r0, [pc, #56]	; (80159b4 <tcp_remove_listener+0x50>)
 801597c:	f00b fd96 	bl	80214ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	60fb      	str	r3, [r7, #12]
 8015984:	e00a      	b.n	801599c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801598a:	683a      	ldr	r2, [r7, #0]
 801598c:	429a      	cmp	r2, r3
 801598e:	d102      	bne.n	8015996 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	2200      	movs	r2, #0
 8015994:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	60fb      	str	r3, [r7, #12]
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d1f1      	bne.n	8015986 <tcp_remove_listener+0x22>
    }
  }
}
 80159a2:	bf00      	nop
 80159a4:	bf00      	nop
 80159a6:	3710      	adds	r7, #16
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	08024e44 	.word	0x08024e44
 80159b0:	08024ecc 	.word	0x08024ecc
 80159b4:	08024e88 	.word	0x08024e88

080159b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d106      	bne.n	80159d4 <tcp_listen_closed+0x1c>
 80159c6:	4b14      	ldr	r3, [pc, #80]	; (8015a18 <tcp_listen_closed+0x60>)
 80159c8:	f240 1211 	movw	r2, #273	; 0x111
 80159cc:	4913      	ldr	r1, [pc, #76]	; (8015a1c <tcp_listen_closed+0x64>)
 80159ce:	4814      	ldr	r0, [pc, #80]	; (8015a20 <tcp_listen_closed+0x68>)
 80159d0:	f00b fd6c 	bl	80214ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	7d1b      	ldrb	r3, [r3, #20]
 80159d8:	2b01      	cmp	r3, #1
 80159da:	d006      	beq.n	80159ea <tcp_listen_closed+0x32>
 80159dc:	4b0e      	ldr	r3, [pc, #56]	; (8015a18 <tcp_listen_closed+0x60>)
 80159de:	f44f 7289 	mov.w	r2, #274	; 0x112
 80159e2:	4910      	ldr	r1, [pc, #64]	; (8015a24 <tcp_listen_closed+0x6c>)
 80159e4:	480e      	ldr	r0, [pc, #56]	; (8015a20 <tcp_listen_closed+0x68>)
 80159e6:	f00b fd61 	bl	80214ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80159ea:	2301      	movs	r3, #1
 80159ec:	60fb      	str	r3, [r7, #12]
 80159ee:	e00b      	b.n	8015a08 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80159f0:	4a0d      	ldr	r2, [pc, #52]	; (8015a28 <tcp_listen_closed+0x70>)
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	6879      	ldr	r1, [r7, #4]
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7ff ffb1 	bl	8015964 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	3301      	adds	r3, #1
 8015a06:	60fb      	str	r3, [r7, #12]
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b03      	cmp	r3, #3
 8015a0c:	d9f0      	bls.n	80159f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015a0e:	bf00      	nop
 8015a10:	bf00      	nop
 8015a12:	3710      	adds	r7, #16
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	08024e44 	.word	0x08024e44
 8015a1c:	08024ef4 	.word	0x08024ef4
 8015a20:	08024e88 	.word	0x08024e88
 8015a24:	08024f00 	.word	0x08024f00
 8015a28:	080274a4 	.word	0x080274a4

08015a2c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015a2c:	b5b0      	push	{r4, r5, r7, lr}
 8015a2e:	b088      	sub	sp, #32
 8015a30:	af04      	add	r7, sp, #16
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	460b      	mov	r3, r1
 8015a36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d106      	bne.n	8015a4c <tcp_close_shutdown+0x20>
 8015a3e:	4b63      	ldr	r3, [pc, #396]	; (8015bcc <tcp_close_shutdown+0x1a0>)
 8015a40:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015a44:	4962      	ldr	r1, [pc, #392]	; (8015bd0 <tcp_close_shutdown+0x1a4>)
 8015a46:	4863      	ldr	r0, [pc, #396]	; (8015bd4 <tcp_close_shutdown+0x1a8>)
 8015a48:	f00b fd30 	bl	80214ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015a4c:	78fb      	ldrb	r3, [r7, #3]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d066      	beq.n	8015b20 <tcp_close_shutdown+0xf4>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	7d1b      	ldrb	r3, [r3, #20]
 8015a56:	2b04      	cmp	r3, #4
 8015a58:	d003      	beq.n	8015a62 <tcp_close_shutdown+0x36>
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	7d1b      	ldrb	r3, [r3, #20]
 8015a5e:	2b07      	cmp	r3, #7
 8015a60:	d15e      	bne.n	8015b20 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d104      	bne.n	8015a74 <tcp_close_shutdown+0x48>
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015a72:	d055      	beq.n	8015b20 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	8b5b      	ldrh	r3, [r3, #26]
 8015a78:	f003 0310 	and.w	r3, r3, #16
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d106      	bne.n	8015a8e <tcp_close_shutdown+0x62>
 8015a80:	4b52      	ldr	r3, [pc, #328]	; (8015bcc <tcp_close_shutdown+0x1a0>)
 8015a82:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015a86:	4954      	ldr	r1, [pc, #336]	; (8015bd8 <tcp_close_shutdown+0x1ac>)
 8015a88:	4852      	ldr	r0, [pc, #328]	; (8015bd4 <tcp_close_shutdown+0x1a8>)
 8015a8a:	f00b fd0f 	bl	80214ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015a96:	687d      	ldr	r5, [r7, #4]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	3304      	adds	r3, #4
 8015a9c:	687a      	ldr	r2, [r7, #4]
 8015a9e:	8ad2      	ldrh	r2, [r2, #22]
 8015aa0:	6879      	ldr	r1, [r7, #4]
 8015aa2:	8b09      	ldrh	r1, [r1, #24]
 8015aa4:	9102      	str	r1, [sp, #8]
 8015aa6:	9201      	str	r2, [sp, #4]
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	462b      	mov	r3, r5
 8015aac:	4622      	mov	r2, r4
 8015aae:	4601      	mov	r1, r0
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f005 fd6d 	bl	801b590 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f001 fb4e 	bl	8017158 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015abc:	4b47      	ldr	r3, [pc, #284]	; (8015bdc <tcp_close_shutdown+0x1b0>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d105      	bne.n	8015ad2 <tcp_close_shutdown+0xa6>
 8015ac6:	4b45      	ldr	r3, [pc, #276]	; (8015bdc <tcp_close_shutdown+0x1b0>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	68db      	ldr	r3, [r3, #12]
 8015acc:	4a43      	ldr	r2, [pc, #268]	; (8015bdc <tcp_close_shutdown+0x1b0>)
 8015ace:	6013      	str	r3, [r2, #0]
 8015ad0:	e013      	b.n	8015afa <tcp_close_shutdown+0xce>
 8015ad2:	4b42      	ldr	r3, [pc, #264]	; (8015bdc <tcp_close_shutdown+0x1b0>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	60fb      	str	r3, [r7, #12]
 8015ad8:	e00c      	b.n	8015af4 <tcp_close_shutdown+0xc8>
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	68db      	ldr	r3, [r3, #12]
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d104      	bne.n	8015aee <tcp_close_shutdown+0xc2>
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	68da      	ldr	r2, [r3, #12]
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	60da      	str	r2, [r3, #12]
 8015aec:	e005      	b.n	8015afa <tcp_close_shutdown+0xce>
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	68db      	ldr	r3, [r3, #12]
 8015af2:	60fb      	str	r3, [r7, #12]
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d1ef      	bne.n	8015ada <tcp_close_shutdown+0xae>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2200      	movs	r2, #0
 8015afe:	60da      	str	r2, [r3, #12]
 8015b00:	4b37      	ldr	r3, [pc, #220]	; (8015be0 <tcp_close_shutdown+0x1b4>)
 8015b02:	2201      	movs	r2, #1
 8015b04:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015b06:	4b37      	ldr	r3, [pc, #220]	; (8015be4 <tcp_close_shutdown+0x1b8>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d102      	bne.n	8015b16 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015b10:	f003 ffe2 	bl	8019ad8 <tcp_trigger_input_pcb_close>
 8015b14:	e002      	b.n	8015b1c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f7ff fed6 	bl	80158c8 <tcp_free>
      }
      return ERR_OK;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	e050      	b.n	8015bc2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	7d1b      	ldrb	r3, [r3, #20]
 8015b24:	2b02      	cmp	r3, #2
 8015b26:	d03b      	beq.n	8015ba0 <tcp_close_shutdown+0x174>
 8015b28:	2b02      	cmp	r3, #2
 8015b2a:	dc44      	bgt.n	8015bb6 <tcp_close_shutdown+0x18a>
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d002      	beq.n	8015b36 <tcp_close_shutdown+0x10a>
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	d02a      	beq.n	8015b8a <tcp_close_shutdown+0x15e>
 8015b34:	e03f      	b.n	8015bb6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	8adb      	ldrh	r3, [r3, #22]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d021      	beq.n	8015b82 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015b3e:	4b2a      	ldr	r3, [pc, #168]	; (8015be8 <tcp_close_shutdown+0x1bc>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	429a      	cmp	r2, r3
 8015b46:	d105      	bne.n	8015b54 <tcp_close_shutdown+0x128>
 8015b48:	4b27      	ldr	r3, [pc, #156]	; (8015be8 <tcp_close_shutdown+0x1bc>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	4a26      	ldr	r2, [pc, #152]	; (8015be8 <tcp_close_shutdown+0x1bc>)
 8015b50:	6013      	str	r3, [r2, #0]
 8015b52:	e013      	b.n	8015b7c <tcp_close_shutdown+0x150>
 8015b54:	4b24      	ldr	r3, [pc, #144]	; (8015be8 <tcp_close_shutdown+0x1bc>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	60bb      	str	r3, [r7, #8]
 8015b5a:	e00c      	b.n	8015b76 <tcp_close_shutdown+0x14a>
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	687a      	ldr	r2, [r7, #4]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d104      	bne.n	8015b70 <tcp_close_shutdown+0x144>
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	68da      	ldr	r2, [r3, #12]
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	60da      	str	r2, [r3, #12]
 8015b6e:	e005      	b.n	8015b7c <tcp_close_shutdown+0x150>
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	68db      	ldr	r3, [r3, #12]
 8015b74:	60bb      	str	r3, [r7, #8]
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d1ef      	bne.n	8015b5c <tcp_close_shutdown+0x130>
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2200      	movs	r2, #0
 8015b80:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7ff fea0 	bl	80158c8 <tcp_free>
      break;
 8015b88:	e01a      	b.n	8015bc0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f7ff ff14 	bl	80159b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015b90:	6879      	ldr	r1, [r7, #4]
 8015b92:	4816      	ldr	r0, [pc, #88]	; (8015bec <tcp_close_shutdown+0x1c0>)
 8015b94:	f001 fb30 	bl	80171f8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f7ff feb1 	bl	8015900 <tcp_free_listen>
      break;
 8015b9e:	e00f      	b.n	8015bc0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015ba0:	6879      	ldr	r1, [r7, #4]
 8015ba2:	480e      	ldr	r0, [pc, #56]	; (8015bdc <tcp_close_shutdown+0x1b0>)
 8015ba4:	f001 fb28 	bl	80171f8 <tcp_pcb_remove>
 8015ba8:	4b0d      	ldr	r3, [pc, #52]	; (8015be0 <tcp_close_shutdown+0x1b4>)
 8015baa:	2201      	movs	r2, #1
 8015bac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f7ff fe8a 	bl	80158c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015bb4:	e004      	b.n	8015bc0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f000 f81a 	bl	8015bf0 <tcp_close_shutdown_fin>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	e000      	b.n	8015bc2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015bc0:	2300      	movs	r3, #0
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3710      	adds	r7, #16
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8015bca:	bf00      	nop
 8015bcc:	08024e44 	.word	0x08024e44
 8015bd0:	08024f18 	.word	0x08024f18
 8015bd4:	08024e88 	.word	0x08024e88
 8015bd8:	08024f38 	.word	0x08024f38
 8015bdc:	20016c4c 	.word	0x20016c4c
 8015be0:	20016c48 	.word	0x20016c48
 8015be4:	20016c60 	.word	0x20016c60
 8015be8:	20016c58 	.word	0x20016c58
 8015bec:	20016c54 	.word	0x20016c54

08015bf0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <tcp_close_shutdown_fin+0x1c>
 8015bfe:	4b2e      	ldr	r3, [pc, #184]	; (8015cb8 <tcp_close_shutdown_fin+0xc8>)
 8015c00:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015c04:	492d      	ldr	r1, [pc, #180]	; (8015cbc <tcp_close_shutdown_fin+0xcc>)
 8015c06:	482e      	ldr	r0, [pc, #184]	; (8015cc0 <tcp_close_shutdown_fin+0xd0>)
 8015c08:	f00b fc50 	bl	80214ac <iprintf>

  switch (pcb->state) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	7d1b      	ldrb	r3, [r3, #20]
 8015c10:	2b07      	cmp	r3, #7
 8015c12:	d020      	beq.n	8015c56 <tcp_close_shutdown_fin+0x66>
 8015c14:	2b07      	cmp	r3, #7
 8015c16:	dc2b      	bgt.n	8015c70 <tcp_close_shutdown_fin+0x80>
 8015c18:	2b03      	cmp	r3, #3
 8015c1a:	d002      	beq.n	8015c22 <tcp_close_shutdown_fin+0x32>
 8015c1c:	2b04      	cmp	r3, #4
 8015c1e:	d00d      	beq.n	8015c3c <tcp_close_shutdown_fin+0x4c>
 8015c20:	e026      	b.n	8015c70 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f004 fdc2 	bl	801a7ac <tcp_send_fin>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d11f      	bne.n	8015c74 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2205      	movs	r2, #5
 8015c38:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015c3a:	e01b      	b.n	8015c74 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f004 fdb5 	bl	801a7ac <tcp_send_fin>
 8015c42:	4603      	mov	r3, r0
 8015c44:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d114      	bne.n	8015c78 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2205      	movs	r2, #5
 8015c52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015c54:	e010      	b.n	8015c78 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f004 fda8 	bl	801a7ac <tcp_send_fin>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d109      	bne.n	8015c7c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2209      	movs	r2, #9
 8015c6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015c6e:	e005      	b.n	8015c7c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015c70:	2300      	movs	r3, #0
 8015c72:	e01c      	b.n	8015cae <tcp_close_shutdown_fin+0xbe>
      break;
 8015c74:	bf00      	nop
 8015c76:	e002      	b.n	8015c7e <tcp_close_shutdown_fin+0x8e>
      break;
 8015c78:	bf00      	nop
 8015c7a:	e000      	b.n	8015c7e <tcp_close_shutdown_fin+0x8e>
      break;
 8015c7c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d103      	bne.n	8015c8e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	f004 fece 	bl	801aa28 <tcp_output>
 8015c8c:	e00d      	b.n	8015caa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c96:	d108      	bne.n	8015caa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	8b5b      	ldrh	r3, [r3, #26]
 8015c9c:	f043 0308 	orr.w	r3, r3, #8
 8015ca0:	b29a      	uxth	r2, r3
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	e001      	b.n	8015cae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	08024e44 	.word	0x08024e44
 8015cbc:	08024ef4 	.word	0x08024ef4
 8015cc0:	08024e88 	.word	0x08024e88

08015cc4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d109      	bne.n	8015ce6 <tcp_close+0x22>
 8015cd2:	4b0f      	ldr	r3, [pc, #60]	; (8015d10 <tcp_close+0x4c>)
 8015cd4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015cd8:	490e      	ldr	r1, [pc, #56]	; (8015d14 <tcp_close+0x50>)
 8015cda:	480f      	ldr	r0, [pc, #60]	; (8015d18 <tcp_close+0x54>)
 8015cdc:	f00b fbe6 	bl	80214ac <iprintf>
 8015ce0:	f06f 030f 	mvn.w	r3, #15
 8015ce4:	e00f      	b.n	8015d06 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	7d1b      	ldrb	r3, [r3, #20]
 8015cea:	2b01      	cmp	r3, #1
 8015cec:	d006      	beq.n	8015cfc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	8b5b      	ldrh	r3, [r3, #26]
 8015cf2:	f043 0310 	orr.w	r3, r3, #16
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015cfc:	2101      	movs	r1, #1
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ff fe94 	bl	8015a2c <tcp_close_shutdown>
 8015d04:	4603      	mov	r3, r0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3708      	adds	r7, #8
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	08024e44 	.word	0x08024e44
 8015d14:	08024f54 	.word	0x08024f54
 8015d18:	08024e88 	.word	0x08024e88

08015d1c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b084      	sub	sp, #16
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d109      	bne.n	8015d42 <tcp_shutdown+0x26>
 8015d2e:	4b26      	ldr	r3, [pc, #152]	; (8015dc8 <tcp_shutdown+0xac>)
 8015d30:	f240 2207 	movw	r2, #519	; 0x207
 8015d34:	4925      	ldr	r1, [pc, #148]	; (8015dcc <tcp_shutdown+0xb0>)
 8015d36:	4826      	ldr	r0, [pc, #152]	; (8015dd0 <tcp_shutdown+0xb4>)
 8015d38:	f00b fbb8 	bl	80214ac <iprintf>
 8015d3c:	f06f 030f 	mvn.w	r3, #15
 8015d40:	e03d      	b.n	8015dbe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	7d1b      	ldrb	r3, [r3, #20]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d102      	bne.n	8015d50 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015d4a:	f06f 030a 	mvn.w	r3, #10
 8015d4e:	e036      	b.n	8015dbe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d01b      	beq.n	8015d8e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	8b5b      	ldrh	r3, [r3, #26]
 8015d5a:	f043 0310 	orr.w	r3, r3, #16
 8015d5e:	b29a      	uxth	r2, r3
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d005      	beq.n	8015d76 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	f7ff fe5d 	bl	8015a2c <tcp_close_shutdown>
 8015d72:	4603      	mov	r3, r0
 8015d74:	e023      	b.n	8015dbe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d007      	beq.n	8015d8e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7ff f968 	bl	8015058 <pbuf_free>
      pcb->refused_data = NULL;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d013      	beq.n	8015dbc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	7d1b      	ldrb	r3, [r3, #20]
 8015d98:	2b04      	cmp	r3, #4
 8015d9a:	dc02      	bgt.n	8015da2 <tcp_shutdown+0x86>
 8015d9c:	2b03      	cmp	r3, #3
 8015d9e:	da02      	bge.n	8015da6 <tcp_shutdown+0x8a>
 8015da0:	e009      	b.n	8015db6 <tcp_shutdown+0x9a>
 8015da2:	2b07      	cmp	r3, #7
 8015da4:	d107      	bne.n	8015db6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	b2db      	uxtb	r3, r3
 8015daa:	4619      	mov	r1, r3
 8015dac:	68f8      	ldr	r0, [r7, #12]
 8015dae:	f7ff fe3d 	bl	8015a2c <tcp_close_shutdown>
 8015db2:	4603      	mov	r3, r0
 8015db4:	e003      	b.n	8015dbe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8015db6:	f06f 030a 	mvn.w	r3, #10
 8015dba:	e000      	b.n	8015dbe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015dbc:	2300      	movs	r3, #0
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	08024e44 	.word	0x08024e44
 8015dcc:	08024f6c 	.word	0x08024f6c
 8015dd0:	08024e88 	.word	0x08024e88

08015dd4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b08e      	sub	sp, #56	; 0x38
 8015dd8:	af04      	add	r7, sp, #16
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d107      	bne.n	8015df4 <tcp_abandon+0x20>
 8015de4:	4b52      	ldr	r3, [pc, #328]	; (8015f30 <tcp_abandon+0x15c>)
 8015de6:	f240 223d 	movw	r2, #573	; 0x23d
 8015dea:	4952      	ldr	r1, [pc, #328]	; (8015f34 <tcp_abandon+0x160>)
 8015dec:	4852      	ldr	r0, [pc, #328]	; (8015f38 <tcp_abandon+0x164>)
 8015dee:	f00b fb5d 	bl	80214ac <iprintf>
 8015df2:	e099      	b.n	8015f28 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	7d1b      	ldrb	r3, [r3, #20]
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d106      	bne.n	8015e0a <tcp_abandon+0x36>
 8015dfc:	4b4c      	ldr	r3, [pc, #304]	; (8015f30 <tcp_abandon+0x15c>)
 8015dfe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015e02:	494e      	ldr	r1, [pc, #312]	; (8015f3c <tcp_abandon+0x168>)
 8015e04:	484c      	ldr	r0, [pc, #304]	; (8015f38 <tcp_abandon+0x164>)
 8015e06:	f00b fb51 	bl	80214ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	7d1b      	ldrb	r3, [r3, #20]
 8015e0e:	2b0a      	cmp	r3, #10
 8015e10:	d107      	bne.n	8015e22 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015e12:	6879      	ldr	r1, [r7, #4]
 8015e14:	484a      	ldr	r0, [pc, #296]	; (8015f40 <tcp_abandon+0x16c>)
 8015e16:	f001 f9ef 	bl	80171f8 <tcp_pcb_remove>
    tcp_free(pcb);
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f7ff fd54 	bl	80158c8 <tcp_free>
 8015e20:	e082      	b.n	8015f28 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8015e26:	2300      	movs	r3, #0
 8015e28:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e2e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e34:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e3c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	691b      	ldr	r3, [r3, #16]
 8015e42:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	7d1b      	ldrb	r3, [r3, #20]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d126      	bne.n	8015e9a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	8adb      	ldrh	r3, [r3, #22]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d02e      	beq.n	8015eb2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015e54:	4b3b      	ldr	r3, [pc, #236]	; (8015f44 <tcp_abandon+0x170>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d105      	bne.n	8015e6a <tcp_abandon+0x96>
 8015e5e:	4b39      	ldr	r3, [pc, #228]	; (8015f44 <tcp_abandon+0x170>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	68db      	ldr	r3, [r3, #12]
 8015e64:	4a37      	ldr	r2, [pc, #220]	; (8015f44 <tcp_abandon+0x170>)
 8015e66:	6013      	str	r3, [r2, #0]
 8015e68:	e013      	b.n	8015e92 <tcp_abandon+0xbe>
 8015e6a:	4b36      	ldr	r3, [pc, #216]	; (8015f44 <tcp_abandon+0x170>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	61fb      	str	r3, [r7, #28]
 8015e70:	e00c      	b.n	8015e8c <tcp_abandon+0xb8>
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	68db      	ldr	r3, [r3, #12]
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d104      	bne.n	8015e86 <tcp_abandon+0xb2>
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	68da      	ldr	r2, [r3, #12]
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	60da      	str	r2, [r3, #12]
 8015e84:	e005      	b.n	8015e92 <tcp_abandon+0xbe>
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	68db      	ldr	r3, [r3, #12]
 8015e8a:	61fb      	str	r3, [r7, #28]
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d1ef      	bne.n	8015e72 <tcp_abandon+0x9e>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	2200      	movs	r2, #0
 8015e96:	60da      	str	r2, [r3, #12]
 8015e98:	e00b      	b.n	8015eb2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	8adb      	ldrh	r3, [r3, #22]
 8015ea2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015ea4:	6879      	ldr	r1, [r7, #4]
 8015ea6:	4828      	ldr	r0, [pc, #160]	; (8015f48 <tcp_abandon+0x174>)
 8015ea8:	f001 f9a6 	bl	80171f8 <tcp_pcb_remove>
 8015eac:	4b27      	ldr	r3, [pc, #156]	; (8015f4c <tcp_abandon+0x178>)
 8015eae:	2201      	movs	r2, #1
 8015eb0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d004      	beq.n	8015ec4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f000 fe7a 	bl	8016bb8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d004      	beq.n	8015ed6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f000 fe71 	bl	8016bb8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d004      	beq.n	8015ee8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f000 fe68 	bl	8016bb8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d00e      	beq.n	8015f0c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015eee:	6879      	ldr	r1, [r7, #4]
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	3304      	adds	r3, #4
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	8b12      	ldrh	r2, [r2, #24]
 8015ef8:	9202      	str	r2, [sp, #8]
 8015efa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015efc:	9201      	str	r2, [sp, #4]
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	460b      	mov	r3, r1
 8015f02:	697a      	ldr	r2, [r7, #20]
 8015f04:	69b9      	ldr	r1, [r7, #24]
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f005 fb42 	bl	801b590 <tcp_rst>
    }
    last_state = pcb->state;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	7d1b      	ldrb	r3, [r3, #20]
 8015f10:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7ff fcd8 	bl	80158c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d004      	beq.n	8015f28 <tcp_abandon+0x154>
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	f06f 010c 	mvn.w	r1, #12
 8015f24:	68f8      	ldr	r0, [r7, #12]
 8015f26:	4798      	blx	r3
  }
}
 8015f28:	3728      	adds	r7, #40	; 0x28
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	bf00      	nop
 8015f30:	08024e44 	.word	0x08024e44
 8015f34:	08024f88 	.word	0x08024f88
 8015f38:	08024e88 	.word	0x08024e88
 8015f3c:	08024fa4 	.word	0x08024fa4
 8015f40:	20016c5c 	.word	0x20016c5c
 8015f44:	20016c58 	.word	0x20016c58
 8015f48:	20016c4c 	.word	0x20016c4c
 8015f4c:	20016c48 	.word	0x20016c48

08015f50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015f58:	2101      	movs	r1, #1
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7ff ff3a 	bl	8015dd4 <tcp_abandon>
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b084      	sub	sp, #16
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d106      	bne.n	8015f84 <tcp_update_rcv_ann_wnd+0x1c>
 8015f76:	4b25      	ldr	r3, [pc, #148]	; (801600c <tcp_update_rcv_ann_wnd+0xa4>)
 8015f78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015f7c:	4924      	ldr	r1, [pc, #144]	; (8016010 <tcp_update_rcv_ann_wnd+0xa8>)
 8015f7e:	4825      	ldr	r0, [pc, #148]	; (8016014 <tcp_update_rcv_ann_wnd+0xac>)
 8015f80:	f00b fa94 	bl	80214ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015f8c:	4413      	add	r3, r2
 8015f8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015f98:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015f9c:	bf28      	it	cs
 8015f9e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015fa2:	b292      	uxth	r2, r2
 8015fa4:	4413      	add	r3, r2
 8015fa6:	68fa      	ldr	r2, [r7, #12]
 8015fa8:	1ad3      	subs	r3, r2, r3
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	db08      	blt.n	8015fc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fba:	68fa      	ldr	r2, [r7, #12]
 8015fbc:	1ad3      	subs	r3, r2, r3
 8015fbe:	e020      	b.n	8016002 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	dd03      	ble.n	8015fd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015fd4:	e014      	b.n	8016000 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fde:	1ad3      	subs	r3, r2, r3
 8015fe0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fe8:	d306      	bcc.n	8015ff8 <tcp_update_rcv_ann_wnd+0x90>
 8015fea:	4b08      	ldr	r3, [pc, #32]	; (801600c <tcp_update_rcv_ann_wnd+0xa4>)
 8015fec:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015ff0:	4909      	ldr	r1, [pc, #36]	; (8016018 <tcp_update_rcv_ann_wnd+0xb0>)
 8015ff2:	4808      	ldr	r0, [pc, #32]	; (8016014 <tcp_update_rcv_ann_wnd+0xac>)
 8015ff4:	f00b fa5a 	bl	80214ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016000:	2300      	movs	r3, #0
  }
}
 8016002:	4618      	mov	r0, r3
 8016004:	3710      	adds	r7, #16
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop
 801600c:	08024e44 	.word	0x08024e44
 8016010:	080250a0 	.word	0x080250a0
 8016014:	08024e88 	.word	0x08024e88
 8016018:	080250c4 	.word	0x080250c4

0801601c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	460b      	mov	r3, r1
 8016026:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d107      	bne.n	801603e <tcp_recved+0x22>
 801602e:	4b1f      	ldr	r3, [pc, #124]	; (80160ac <tcp_recved+0x90>)
 8016030:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016034:	491e      	ldr	r1, [pc, #120]	; (80160b0 <tcp_recved+0x94>)
 8016036:	481f      	ldr	r0, [pc, #124]	; (80160b4 <tcp_recved+0x98>)
 8016038:	f00b fa38 	bl	80214ac <iprintf>
 801603c:	e032      	b.n	80160a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	7d1b      	ldrb	r3, [r3, #20]
 8016042:	2b01      	cmp	r3, #1
 8016044:	d106      	bne.n	8016054 <tcp_recved+0x38>
 8016046:	4b19      	ldr	r3, [pc, #100]	; (80160ac <tcp_recved+0x90>)
 8016048:	f240 32d2 	movw	r2, #978	; 0x3d2
 801604c:	491a      	ldr	r1, [pc, #104]	; (80160b8 <tcp_recved+0x9c>)
 801604e:	4819      	ldr	r0, [pc, #100]	; (80160b4 <tcp_recved+0x98>)
 8016050:	f00b fa2c 	bl	80214ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016058:	887b      	ldrh	r3, [r7, #2]
 801605a:	4413      	add	r3, r2
 801605c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801605e:	89fb      	ldrh	r3, [r7, #14]
 8016060:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016064:	d804      	bhi.n	8016070 <tcp_recved+0x54>
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801606a:	89fa      	ldrh	r2, [r7, #14]
 801606c:	429a      	cmp	r2, r3
 801606e:	d204      	bcs.n	801607a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016076:	851a      	strh	r2, [r3, #40]	; 0x28
 8016078:	e002      	b.n	8016080 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	89fa      	ldrh	r2, [r7, #14]
 801607e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ff ff71 	bl	8015f68 <tcp_update_rcv_ann_wnd>
 8016086:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801608e:	d309      	bcc.n	80160a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	8b5b      	ldrh	r3, [r3, #26]
 8016094:	f043 0302 	orr.w	r3, r3, #2
 8016098:	b29a      	uxth	r2, r3
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f004 fcc2 	bl	801aa28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80160a4:	3710      	adds	r7, #16
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
 80160aa:	bf00      	nop
 80160ac:	08024e44 	.word	0x08024e44
 80160b0:	080250e0 	.word	0x080250e0
 80160b4:	08024e88 	.word	0x08024e88
 80160b8:	080250f8 	.word	0x080250f8

080160bc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80160bc:	b480      	push	{r7}
 80160be:	b083      	sub	sp, #12
 80160c0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80160c6:	4b1e      	ldr	r3, [pc, #120]	; (8016140 <tcp_new_port+0x84>)
 80160c8:	881b      	ldrh	r3, [r3, #0]
 80160ca:	3301      	adds	r3, #1
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	4b1c      	ldr	r3, [pc, #112]	; (8016140 <tcp_new_port+0x84>)
 80160d0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80160d2:	4b1b      	ldr	r3, [pc, #108]	; (8016140 <tcp_new_port+0x84>)
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160da:	4293      	cmp	r3, r2
 80160dc:	d103      	bne.n	80160e6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80160de:	4b18      	ldr	r3, [pc, #96]	; (8016140 <tcp_new_port+0x84>)
 80160e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80160e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80160e6:	2300      	movs	r3, #0
 80160e8:	71fb      	strb	r3, [r7, #7]
 80160ea:	e01e      	b.n	801612a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80160ec:	79fb      	ldrb	r3, [r7, #7]
 80160ee:	4a15      	ldr	r2, [pc, #84]	; (8016144 <tcp_new_port+0x88>)
 80160f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	603b      	str	r3, [r7, #0]
 80160f8:	e011      	b.n	801611e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	8ada      	ldrh	r2, [r3, #22]
 80160fe:	4b10      	ldr	r3, [pc, #64]	; (8016140 <tcp_new_port+0x84>)
 8016100:	881b      	ldrh	r3, [r3, #0]
 8016102:	429a      	cmp	r2, r3
 8016104:	d108      	bne.n	8016118 <tcp_new_port+0x5c>
        n++;
 8016106:	88bb      	ldrh	r3, [r7, #4]
 8016108:	3301      	adds	r3, #1
 801610a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801610c:	88bb      	ldrh	r3, [r7, #4]
 801610e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016112:	d3d8      	bcc.n	80160c6 <tcp_new_port+0xa>
          return 0;
 8016114:	2300      	movs	r3, #0
 8016116:	e00d      	b.n	8016134 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	603b      	str	r3, [r7, #0]
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d1ea      	bne.n	80160fa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016124:	79fb      	ldrb	r3, [r7, #7]
 8016126:	3301      	adds	r3, #1
 8016128:	71fb      	strb	r3, [r7, #7]
 801612a:	79fb      	ldrb	r3, [r7, #7]
 801612c:	2b03      	cmp	r3, #3
 801612e:	d9dd      	bls.n	80160ec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016130:	4b03      	ldr	r3, [pc, #12]	; (8016140 <tcp_new_port+0x84>)
 8016132:	881b      	ldrh	r3, [r3, #0]
}
 8016134:	4618      	mov	r0, r3
 8016136:	370c      	adds	r7, #12
 8016138:	46bd      	mov	sp, r7
 801613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613e:	4770      	bx	lr
 8016140:	20000360 	.word	0x20000360
 8016144:	080274a4 	.word	0x080274a4

08016148 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b08a      	sub	sp, #40	; 0x28
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	603b      	str	r3, [r7, #0]
 8016154:	4613      	mov	r3, r2
 8016156:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016158:	2300      	movs	r3, #0
 801615a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d109      	bne.n	8016176 <tcp_connect+0x2e>
 8016162:	4b7d      	ldr	r3, [pc, #500]	; (8016358 <tcp_connect+0x210>)
 8016164:	f240 4235 	movw	r2, #1077	; 0x435
 8016168:	497c      	ldr	r1, [pc, #496]	; (801635c <tcp_connect+0x214>)
 801616a:	487d      	ldr	r0, [pc, #500]	; (8016360 <tcp_connect+0x218>)
 801616c:	f00b f99e 	bl	80214ac <iprintf>
 8016170:	f06f 030f 	mvn.w	r3, #15
 8016174:	e0ec      	b.n	8016350 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d109      	bne.n	8016190 <tcp_connect+0x48>
 801617c:	4b76      	ldr	r3, [pc, #472]	; (8016358 <tcp_connect+0x210>)
 801617e:	f240 4236 	movw	r2, #1078	; 0x436
 8016182:	4978      	ldr	r1, [pc, #480]	; (8016364 <tcp_connect+0x21c>)
 8016184:	4876      	ldr	r0, [pc, #472]	; (8016360 <tcp_connect+0x218>)
 8016186:	f00b f991 	bl	80214ac <iprintf>
 801618a:	f06f 030f 	mvn.w	r3, #15
 801618e:	e0df      	b.n	8016350 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	7d1b      	ldrb	r3, [r3, #20]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d009      	beq.n	80161ac <tcp_connect+0x64>
 8016198:	4b6f      	ldr	r3, [pc, #444]	; (8016358 <tcp_connect+0x210>)
 801619a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801619e:	4972      	ldr	r1, [pc, #456]	; (8016368 <tcp_connect+0x220>)
 80161a0:	486f      	ldr	r0, [pc, #444]	; (8016360 <tcp_connect+0x218>)
 80161a2:	f00b f983 	bl	80214ac <iprintf>
 80161a6:	f06f 0309 	mvn.w	r3, #9
 80161aa:	e0d1      	b.n	8016350 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d002      	beq.n	80161b8 <tcp_connect+0x70>
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	e000      	b.n	80161ba <tcp_connect+0x72>
 80161b8:	2300      	movs	r3, #0
 80161ba:	68fa      	ldr	r2, [r7, #12]
 80161bc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	88fa      	ldrh	r2, [r7, #6]
 80161c2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	7a1b      	ldrb	r3, [r3, #8]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d006      	beq.n	80161da <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	7a1b      	ldrb	r3, [r3, #8]
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7fe fbb3 	bl	801493c <netif_get_by_index>
 80161d6:	6278      	str	r0, [r7, #36]	; 0x24
 80161d8:	e005      	b.n	80161e6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	3304      	adds	r3, #4
 80161de:	4618      	mov	r0, r3
 80161e0:	f009 fa52 	bl	801f688 <ip4_route>
 80161e4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80161e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d102      	bne.n	80161f2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80161ec:	f06f 0303 	mvn.w	r3, #3
 80161f0:	e0ae      	b.n	8016350 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d003      	beq.n	8016200 <tcp_connect+0xb8>
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d111      	bne.n	8016224 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016202:	2b00      	cmp	r3, #0
 8016204:	d002      	beq.n	801620c <tcp_connect+0xc4>
 8016206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016208:	3304      	adds	r3, #4
 801620a:	e000      	b.n	801620e <tcp_connect+0xc6>
 801620c:	2300      	movs	r3, #0
 801620e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d102      	bne.n	801621c <tcp_connect+0xd4>
      return ERR_RTE;
 8016216:	f06f 0303 	mvn.w	r3, #3
 801621a:	e099      	b.n	8016350 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801621c:	69fb      	ldr	r3, [r7, #28]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	8adb      	ldrh	r3, [r3, #22]
 8016228:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	8adb      	ldrh	r3, [r3, #22]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d10c      	bne.n	801624c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016232:	f7ff ff43 	bl	80160bc <tcp_new_port>
 8016236:	4603      	mov	r3, r0
 8016238:	461a      	mov	r2, r3
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	8adb      	ldrh	r3, [r3, #22]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d102      	bne.n	801624c <tcp_connect+0x104>
      return ERR_BUF;
 8016246:	f06f 0301 	mvn.w	r3, #1
 801624a:	e081      	b.n	8016350 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801624c:	68f8      	ldr	r0, [r7, #12]
 801624e:	f001 f867 	bl	8017320 <tcp_next_iss>
 8016252:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	2200      	movs	r2, #0
 8016258:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	697a      	ldr	r2, [r7, #20]
 801625e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	1e5a      	subs	r2, r3, #1
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	1e5a      	subs	r2, r3, #1
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	1e5a      	subs	r2, r3, #1
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801627e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	f44f 7206 	mov.w	r2, #536	; 0x218
 80162a0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	3304      	adds	r3, #4
 80162aa:	461a      	mov	r2, r3
 80162ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162ae:	f001 f85d 	bl	801736c <tcp_eff_send_mss_netif>
 80162b2:	4603      	mov	r3, r0
 80162b4:	461a      	mov	r2, r3
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	2201      	movs	r2, #1
 80162be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	683a      	ldr	r2, [r7, #0]
 80162c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80162ca:	2102      	movs	r1, #2
 80162cc:	68f8      	ldr	r0, [r7, #12]
 80162ce:	f004 fabd 	bl	801a84c <tcp_enqueue_flags>
 80162d2:	4603      	mov	r3, r0
 80162d4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80162d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d136      	bne.n	801634c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	2202      	movs	r2, #2
 80162e2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80162e4:	8b7b      	ldrh	r3, [r7, #26]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d021      	beq.n	801632e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80162ea:	4b20      	ldr	r3, [pc, #128]	; (801636c <tcp_connect+0x224>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	68fa      	ldr	r2, [r7, #12]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d105      	bne.n	8016300 <tcp_connect+0x1b8>
 80162f4:	4b1d      	ldr	r3, [pc, #116]	; (801636c <tcp_connect+0x224>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	4a1c      	ldr	r2, [pc, #112]	; (801636c <tcp_connect+0x224>)
 80162fc:	6013      	str	r3, [r2, #0]
 80162fe:	e013      	b.n	8016328 <tcp_connect+0x1e0>
 8016300:	4b1a      	ldr	r3, [pc, #104]	; (801636c <tcp_connect+0x224>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	623b      	str	r3, [r7, #32]
 8016306:	e00c      	b.n	8016322 <tcp_connect+0x1da>
 8016308:	6a3b      	ldr	r3, [r7, #32]
 801630a:	68db      	ldr	r3, [r3, #12]
 801630c:	68fa      	ldr	r2, [r7, #12]
 801630e:	429a      	cmp	r2, r3
 8016310:	d104      	bne.n	801631c <tcp_connect+0x1d4>
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	68da      	ldr	r2, [r3, #12]
 8016316:	6a3b      	ldr	r3, [r7, #32]
 8016318:	60da      	str	r2, [r3, #12]
 801631a:	e005      	b.n	8016328 <tcp_connect+0x1e0>
 801631c:	6a3b      	ldr	r3, [r7, #32]
 801631e:	68db      	ldr	r3, [r3, #12]
 8016320:	623b      	str	r3, [r7, #32]
 8016322:	6a3b      	ldr	r3, [r7, #32]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d1ef      	bne.n	8016308 <tcp_connect+0x1c0>
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2200      	movs	r2, #0
 801632c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801632e:	4b10      	ldr	r3, [pc, #64]	; (8016370 <tcp_connect+0x228>)
 8016330:	681a      	ldr	r2, [r3, #0]
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	60da      	str	r2, [r3, #12]
 8016336:	4a0e      	ldr	r2, [pc, #56]	; (8016370 <tcp_connect+0x228>)
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	6013      	str	r3, [r2, #0]
 801633c:	f005 faea 	bl	801b914 <tcp_timer_needed>
 8016340:	4b0c      	ldr	r3, [pc, #48]	; (8016374 <tcp_connect+0x22c>)
 8016342:	2201      	movs	r2, #1
 8016344:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f004 fb6e 	bl	801aa28 <tcp_output>
  }
  return ret;
 801634c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016350:	4618      	mov	r0, r3
 8016352:	3728      	adds	r7, #40	; 0x28
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	08024e44 	.word	0x08024e44
 801635c:	08025120 	.word	0x08025120
 8016360:	08024e88 	.word	0x08024e88
 8016364:	0802513c 	.word	0x0802513c
 8016368:	08025158 	.word	0x08025158
 801636c:	20016c58 	.word	0x20016c58
 8016370:	20016c4c 	.word	0x20016c4c
 8016374:	20016c48 	.word	0x20016c48

08016378 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016378:	b5b0      	push	{r4, r5, r7, lr}
 801637a:	b090      	sub	sp, #64	; 0x40
 801637c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801637e:	2300      	movs	r3, #0
 8016380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016384:	4b94      	ldr	r3, [pc, #592]	; (80165d8 <tcp_slowtmr+0x260>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	3301      	adds	r3, #1
 801638a:	4a93      	ldr	r2, [pc, #588]	; (80165d8 <tcp_slowtmr+0x260>)
 801638c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801638e:	4b93      	ldr	r3, [pc, #588]	; (80165dc <tcp_slowtmr+0x264>)
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	3301      	adds	r3, #1
 8016394:	b2da      	uxtb	r2, r3
 8016396:	4b91      	ldr	r3, [pc, #580]	; (80165dc <tcp_slowtmr+0x264>)
 8016398:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801639a:	2300      	movs	r3, #0
 801639c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801639e:	4b90      	ldr	r3, [pc, #576]	; (80165e0 <tcp_slowtmr+0x268>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80163a4:	e29f      	b.n	80168e6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80163a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a8:	7d1b      	ldrb	r3, [r3, #20]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d106      	bne.n	80163bc <tcp_slowtmr+0x44>
 80163ae:	4b8d      	ldr	r3, [pc, #564]	; (80165e4 <tcp_slowtmr+0x26c>)
 80163b0:	f240 42be 	movw	r2, #1214	; 0x4be
 80163b4:	498c      	ldr	r1, [pc, #560]	; (80165e8 <tcp_slowtmr+0x270>)
 80163b6:	488d      	ldr	r0, [pc, #564]	; (80165ec <tcp_slowtmr+0x274>)
 80163b8:	f00b f878 	bl	80214ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80163bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163be:	7d1b      	ldrb	r3, [r3, #20]
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	d106      	bne.n	80163d2 <tcp_slowtmr+0x5a>
 80163c4:	4b87      	ldr	r3, [pc, #540]	; (80165e4 <tcp_slowtmr+0x26c>)
 80163c6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80163ca:	4989      	ldr	r1, [pc, #548]	; (80165f0 <tcp_slowtmr+0x278>)
 80163cc:	4887      	ldr	r0, [pc, #540]	; (80165ec <tcp_slowtmr+0x274>)
 80163ce:	f00b f86d 	bl	80214ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80163d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d4:	7d1b      	ldrb	r3, [r3, #20]
 80163d6:	2b0a      	cmp	r3, #10
 80163d8:	d106      	bne.n	80163e8 <tcp_slowtmr+0x70>
 80163da:	4b82      	ldr	r3, [pc, #520]	; (80165e4 <tcp_slowtmr+0x26c>)
 80163dc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80163e0:	4984      	ldr	r1, [pc, #528]	; (80165f4 <tcp_slowtmr+0x27c>)
 80163e2:	4882      	ldr	r0, [pc, #520]	; (80165ec <tcp_slowtmr+0x274>)
 80163e4:	f00b f862 	bl	80214ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80163e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ea:	7f9a      	ldrb	r2, [r3, #30]
 80163ec:	4b7b      	ldr	r3, [pc, #492]	; (80165dc <tcp_slowtmr+0x264>)
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d105      	bne.n	8016400 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80163f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80163f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fa:	68db      	ldr	r3, [r3, #12]
 80163fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80163fe:	e272      	b.n	80168e6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016400:	4b76      	ldr	r3, [pc, #472]	; (80165dc <tcp_slowtmr+0x264>)
 8016402:	781a      	ldrb	r2, [r3, #0]
 8016404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016406:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016408:	2300      	movs	r3, #0
 801640a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801640e:	2300      	movs	r3, #0
 8016410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016416:	7d1b      	ldrb	r3, [r3, #20]
 8016418:	2b02      	cmp	r3, #2
 801641a:	d10a      	bne.n	8016432 <tcp_slowtmr+0xba>
 801641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016422:	2b05      	cmp	r3, #5
 8016424:	d905      	bls.n	8016432 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801642a:	3301      	adds	r3, #1
 801642c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016430:	e11e      	b.n	8016670 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016438:	2b0b      	cmp	r3, #11
 801643a:	d905      	bls.n	8016448 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801643c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016440:	3301      	adds	r3, #1
 8016442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016446:	e113      	b.n	8016670 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801644e:	2b00      	cmp	r3, #0
 8016450:	d075      	beq.n	801653e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016456:	2b00      	cmp	r3, #0
 8016458:	d006      	beq.n	8016468 <tcp_slowtmr+0xf0>
 801645a:	4b62      	ldr	r3, [pc, #392]	; (80165e4 <tcp_slowtmr+0x26c>)
 801645c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016460:	4965      	ldr	r1, [pc, #404]	; (80165f8 <tcp_slowtmr+0x280>)
 8016462:	4862      	ldr	r0, [pc, #392]	; (80165ec <tcp_slowtmr+0x274>)
 8016464:	f00b f822 	bl	80214ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801646c:	2b00      	cmp	r3, #0
 801646e:	d106      	bne.n	801647e <tcp_slowtmr+0x106>
 8016470:	4b5c      	ldr	r3, [pc, #368]	; (80165e4 <tcp_slowtmr+0x26c>)
 8016472:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016476:	4961      	ldr	r1, [pc, #388]	; (80165fc <tcp_slowtmr+0x284>)
 8016478:	485c      	ldr	r0, [pc, #368]	; (80165ec <tcp_slowtmr+0x274>)
 801647a:	f00b f817 	bl	80214ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016480:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016484:	2b0b      	cmp	r3, #11
 8016486:	d905      	bls.n	8016494 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801648c:	3301      	adds	r3, #1
 801648e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016492:	e0ed      	b.n	8016670 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016496:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801649a:	3b01      	subs	r3, #1
 801649c:	4a58      	ldr	r2, [pc, #352]	; (8016600 <tcp_slowtmr+0x288>)
 801649e:	5cd3      	ldrb	r3, [r2, r3]
 80164a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80164a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80164a8:	7c7a      	ldrb	r2, [r7, #17]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d907      	bls.n	80164be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80164ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80164b4:	3301      	adds	r3, #1
 80164b6:	b2da      	uxtb	r2, r3
 80164b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80164be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80164c4:	7c7a      	ldrb	r2, [r7, #17]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	f200 80d2 	bhi.w	8016670 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80164cc:	2301      	movs	r3, #1
 80164ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80164d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d108      	bne.n	80164ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80164da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164dc:	f005 f94c 	bl	801b778 <tcp_zero_window_probe>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d014      	beq.n	8016510 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80164e6:	2300      	movs	r3, #0
 80164e8:	623b      	str	r3, [r7, #32]
 80164ea:	e011      	b.n	8016510 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80164ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164f2:	4619      	mov	r1, r3
 80164f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164f6:	f004 f811 	bl	801a51c <tcp_split_unsent_seg>
 80164fa:	4603      	mov	r3, r0
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d107      	bne.n	8016510 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016502:	f004 fa91 	bl	801aa28 <tcp_output>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	d101      	bne.n	8016510 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801650c:	2300      	movs	r3, #0
 801650e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016510:	6a3b      	ldr	r3, [r7, #32]
 8016512:	2b00      	cmp	r3, #0
 8016514:	f000 80ac 	beq.w	8016670 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651a:	2200      	movs	r2, #0
 801651c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016522:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016526:	2b06      	cmp	r3, #6
 8016528:	f200 80a2 	bhi.w	8016670 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016532:	3301      	adds	r3, #1
 8016534:	b2da      	uxtb	r2, r3
 8016536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016538:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801653c:	e098      	b.n	8016670 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016540:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016544:	2b00      	cmp	r3, #0
 8016546:	db0f      	blt.n	8016568 <tcp_slowtmr+0x1f0>
 8016548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801654e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016552:	4293      	cmp	r3, r2
 8016554:	d008      	beq.n	8016568 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016558:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801655c:	b29b      	uxth	r3, r3
 801655e:	3301      	adds	r3, #1
 8016560:	b29b      	uxth	r3, r3
 8016562:	b21a      	sxth	r2, r3
 8016564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016566:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016570:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016574:	429a      	cmp	r2, r3
 8016576:	db7b      	blt.n	8016670 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801657a:	f004 fd47 	bl	801b00c <tcp_rexmit_rto_prepare>
 801657e:	4603      	mov	r3, r0
 8016580:	2b00      	cmp	r3, #0
 8016582:	d007      	beq.n	8016594 <tcp_slowtmr+0x21c>
 8016584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016588:	2b00      	cmp	r3, #0
 801658a:	d171      	bne.n	8016670 <tcp_slowtmr+0x2f8>
 801658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016590:	2b00      	cmp	r3, #0
 8016592:	d06d      	beq.n	8016670 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016596:	7d1b      	ldrb	r3, [r3, #20]
 8016598:	2b02      	cmp	r3, #2
 801659a:	d03a      	beq.n	8016612 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801659e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80165a2:	2b0c      	cmp	r3, #12
 80165a4:	bf28      	it	cs
 80165a6:	230c      	movcs	r3, #12
 80165a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80165aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80165b0:	10db      	asrs	r3, r3, #3
 80165b2:	b21b      	sxth	r3, r3
 80165b4:	461a      	mov	r2, r3
 80165b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80165bc:	4413      	add	r3, r2
 80165be:	7efa      	ldrb	r2, [r7, #27]
 80165c0:	4910      	ldr	r1, [pc, #64]	; (8016604 <tcp_slowtmr+0x28c>)
 80165c2:	5c8a      	ldrb	r2, [r1, r2]
 80165c4:	4093      	lsls	r3, r2
 80165c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80165ce:	4293      	cmp	r3, r2
 80165d0:	dc1a      	bgt.n	8016608 <tcp_slowtmr+0x290>
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	b21a      	sxth	r2, r3
 80165d6:	e019      	b.n	801660c <tcp_slowtmr+0x294>
 80165d8:	20016c50 	.word	0x20016c50
 80165dc:	20005586 	.word	0x20005586
 80165e0:	20016c4c 	.word	0x20016c4c
 80165e4:	08024e44 	.word	0x08024e44
 80165e8:	08025188 	.word	0x08025188
 80165ec:	08024e88 	.word	0x08024e88
 80165f0:	080251b4 	.word	0x080251b4
 80165f4:	080251e0 	.word	0x080251e0
 80165f8:	08025210 	.word	0x08025210
 80165fc:	08025244 	.word	0x08025244
 8016600:	0802749c 	.word	0x0802749c
 8016604:	0802748c 	.word	0x0802748c
 8016608:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016614:	2200      	movs	r2, #0
 8016616:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016620:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016624:	4293      	cmp	r3, r2
 8016626:	bf28      	it	cs
 8016628:	4613      	movcs	r3, r2
 801662a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801662c:	8a7b      	ldrh	r3, [r7, #18]
 801662e:	085b      	lsrs	r3, r3, #1
 8016630:	b29a      	uxth	r2, r3
 8016632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016634:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801663a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	b29b      	uxth	r3, r3
 8016646:	429a      	cmp	r2, r3
 8016648:	d206      	bcs.n	8016658 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	b29a      	uxth	r2, r3
 8016652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016654:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016664:	2200      	movs	r2, #0
 8016666:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801666a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801666c:	f004 fd3e 	bl	801b0ec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016672:	7d1b      	ldrb	r3, [r3, #20]
 8016674:	2b06      	cmp	r3, #6
 8016676:	d111      	bne.n	801669c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	8b5b      	ldrh	r3, [r3, #26]
 801667c:	f003 0310 	and.w	r3, r3, #16
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00b      	beq.n	801669c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016684:	4b9d      	ldr	r3, [pc, #628]	; (80168fc <tcp_slowtmr+0x584>)
 8016686:	681a      	ldr	r2, [r3, #0]
 8016688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668a:	6a1b      	ldr	r3, [r3, #32]
 801668c:	1ad3      	subs	r3, r2, r3
 801668e:	2b28      	cmp	r3, #40	; 0x28
 8016690:	d904      	bls.n	801669c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016696:	3301      	adds	r3, #1
 8016698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669e:	7a5b      	ldrb	r3, [r3, #9]
 80166a0:	f003 0308 	and.w	r3, r3, #8
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d04c      	beq.n	8016742 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80166a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80166ac:	2b04      	cmp	r3, #4
 80166ae:	d003      	beq.n	80166b8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80166b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80166b4:	2b07      	cmp	r3, #7
 80166b6:	d144      	bne.n	8016742 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166b8:	4b90      	ldr	r3, [pc, #576]	; (80168fc <tcp_slowtmr+0x584>)
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166be:	6a1b      	ldr	r3, [r3, #32]
 80166c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80166c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80166c8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80166cc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80166d0:	498b      	ldr	r1, [pc, #556]	; (8016900 <tcp_slowtmr+0x588>)
 80166d2:	fba1 1303 	umull	r1, r3, r1, r3
 80166d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166d8:	429a      	cmp	r2, r3
 80166da:	d90a      	bls.n	80166f2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80166dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166e0:	3301      	adds	r3, #1
 80166e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80166e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80166ea:	3301      	adds	r3, #1
 80166ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80166f0:	e027      	b.n	8016742 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166f2:	4b82      	ldr	r3, [pc, #520]	; (80168fc <tcp_slowtmr+0x584>)
 80166f4:	681a      	ldr	r2, [r3, #0]
 80166f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f8:	6a1b      	ldr	r3, [r3, #32]
 80166fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80166fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016704:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016708:	4618      	mov	r0, r3
 801670a:	4b7e      	ldr	r3, [pc, #504]	; (8016904 <tcp_slowtmr+0x58c>)
 801670c:	fb03 f300 	mul.w	r3, r3, r0
 8016710:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016712:	497b      	ldr	r1, [pc, #492]	; (8016900 <tcp_slowtmr+0x588>)
 8016714:	fba1 1303 	umull	r1, r3, r1, r3
 8016718:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801671a:	429a      	cmp	r2, r3
 801671c:	d911      	bls.n	8016742 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801671e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016720:	f004 ffea 	bl	801b6f8 <tcp_keepalive>
 8016724:	4603      	mov	r3, r0
 8016726:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801672a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801672e:	2b00      	cmp	r3, #0
 8016730:	d107      	bne.n	8016742 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8016732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016734:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016738:	3301      	adds	r3, #1
 801673a:	b2da      	uxtb	r2, r3
 801673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801673e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016746:	2b00      	cmp	r3, #0
 8016748:	d011      	beq.n	801676e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801674a:	4b6c      	ldr	r3, [pc, #432]	; (80168fc <tcp_slowtmr+0x584>)
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016750:	6a1b      	ldr	r3, [r3, #32]
 8016752:	1ad2      	subs	r2, r2, r3
 8016754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016756:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801675a:	4619      	mov	r1, r3
 801675c:	460b      	mov	r3, r1
 801675e:	005b      	lsls	r3, r3, #1
 8016760:	440b      	add	r3, r1
 8016762:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016764:	429a      	cmp	r2, r3
 8016766:	d302      	bcc.n	801676e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801676a:	f000 fea9 	bl	80174c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016770:	7d1b      	ldrb	r3, [r3, #20]
 8016772:	2b03      	cmp	r3, #3
 8016774:	d10b      	bne.n	801678e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016776:	4b61      	ldr	r3, [pc, #388]	; (80168fc <tcp_slowtmr+0x584>)
 8016778:	681a      	ldr	r2, [r3, #0]
 801677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677c:	6a1b      	ldr	r3, [r3, #32]
 801677e:	1ad3      	subs	r3, r2, r3
 8016780:	2b28      	cmp	r3, #40	; 0x28
 8016782:	d904      	bls.n	801678e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016788:	3301      	adds	r3, #1
 801678a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016790:	7d1b      	ldrb	r3, [r3, #20]
 8016792:	2b09      	cmp	r3, #9
 8016794:	d10b      	bne.n	80167ae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016796:	4b59      	ldr	r3, [pc, #356]	; (80168fc <tcp_slowtmr+0x584>)
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679c:	6a1b      	ldr	r3, [r3, #32]
 801679e:	1ad3      	subs	r3, r2, r3
 80167a0:	2bf0      	cmp	r3, #240	; 0xf0
 80167a2:	d904      	bls.n	80167ae <tcp_slowtmr+0x436>
        ++pcb_remove;
 80167a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167a8:	3301      	adds	r3, #1
 80167aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80167ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d060      	beq.n	8016878 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80167bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80167be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167c0:	f000 fcca 	bl	8017158 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80167c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d010      	beq.n	80167ec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80167ca:	4b4f      	ldr	r3, [pc, #316]	; (8016908 <tcp_slowtmr+0x590>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d106      	bne.n	80167e2 <tcp_slowtmr+0x46a>
 80167d4:	4b4d      	ldr	r3, [pc, #308]	; (801690c <tcp_slowtmr+0x594>)
 80167d6:	f240 526d 	movw	r2, #1389	; 0x56d
 80167da:	494d      	ldr	r1, [pc, #308]	; (8016910 <tcp_slowtmr+0x598>)
 80167dc:	484d      	ldr	r0, [pc, #308]	; (8016914 <tcp_slowtmr+0x59c>)
 80167de:	f00a fe65 	bl	80214ac <iprintf>
        prev->next = pcb->next;
 80167e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e4:	68da      	ldr	r2, [r3, #12]
 80167e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e8:	60da      	str	r2, [r3, #12]
 80167ea:	e00f      	b.n	801680c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80167ec:	4b46      	ldr	r3, [pc, #280]	; (8016908 <tcp_slowtmr+0x590>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d006      	beq.n	8016804 <tcp_slowtmr+0x48c>
 80167f6:	4b45      	ldr	r3, [pc, #276]	; (801690c <tcp_slowtmr+0x594>)
 80167f8:	f240 5271 	movw	r2, #1393	; 0x571
 80167fc:	4946      	ldr	r1, [pc, #280]	; (8016918 <tcp_slowtmr+0x5a0>)
 80167fe:	4845      	ldr	r0, [pc, #276]	; (8016914 <tcp_slowtmr+0x59c>)
 8016800:	f00a fe54 	bl	80214ac <iprintf>
        tcp_active_pcbs = pcb->next;
 8016804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016806:	68db      	ldr	r3, [r3, #12]
 8016808:	4a3f      	ldr	r2, [pc, #252]	; (8016908 <tcp_slowtmr+0x590>)
 801680a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801680c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016810:	2b00      	cmp	r3, #0
 8016812:	d013      	beq.n	801683c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016816:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801681c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016820:	3304      	adds	r3, #4
 8016822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016824:	8ad2      	ldrh	r2, [r2, #22]
 8016826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016828:	8b09      	ldrh	r1, [r1, #24]
 801682a:	9102      	str	r1, [sp, #8]
 801682c:	9201      	str	r2, [sp, #4]
 801682e:	9300      	str	r3, [sp, #0]
 8016830:	462b      	mov	r3, r5
 8016832:	4622      	mov	r2, r4
 8016834:	4601      	mov	r1, r0
 8016836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016838:	f004 feaa 	bl	801b590 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801683e:	691b      	ldr	r3, [r3, #16]
 8016840:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016844:	7d1b      	ldrb	r3, [r3, #20]
 8016846:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801684a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016852:	6838      	ldr	r0, [r7, #0]
 8016854:	f7ff f838 	bl	80158c8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016858:	4b30      	ldr	r3, [pc, #192]	; (801691c <tcp_slowtmr+0x5a4>)
 801685a:	2200      	movs	r2, #0
 801685c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d004      	beq.n	801686e <tcp_slowtmr+0x4f6>
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f06f 010c 	mvn.w	r1, #12
 801686a:	68b8      	ldr	r0, [r7, #8]
 801686c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801686e:	4b2b      	ldr	r3, [pc, #172]	; (801691c <tcp_slowtmr+0x5a4>)
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d037      	beq.n	80168e6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016876:	e590      	b.n	801639a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687e:	68db      	ldr	r3, [r3, #12]
 8016880:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016884:	7f1b      	ldrb	r3, [r3, #28]
 8016886:	3301      	adds	r3, #1
 8016888:	b2da      	uxtb	r2, r3
 801688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801688c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016890:	7f1a      	ldrb	r2, [r3, #28]
 8016892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016894:	7f5b      	ldrb	r3, [r3, #29]
 8016896:	429a      	cmp	r2, r3
 8016898:	d325      	bcc.n	80168e6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801689c:	2200      	movs	r2, #0
 801689e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80168a0:	4b1e      	ldr	r3, [pc, #120]	; (801691c <tcp_slowtmr+0x5a4>)
 80168a2:	2200      	movs	r2, #0
 80168a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80168a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d00b      	beq.n	80168c8 <tcp_slowtmr+0x550>
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80168b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168b8:	6912      	ldr	r2, [r2, #16]
 80168ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168bc:	4610      	mov	r0, r2
 80168be:	4798      	blx	r3
 80168c0:	4603      	mov	r3, r0
 80168c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80168c6:	e002      	b.n	80168ce <tcp_slowtmr+0x556>
 80168c8:	2300      	movs	r3, #0
 80168ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80168ce:	4b13      	ldr	r3, [pc, #76]	; (801691c <tcp_slowtmr+0x5a4>)
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d000      	beq.n	80168d8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80168d6:	e560      	b.n	801639a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80168d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d102      	bne.n	80168e6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80168e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168e2:	f004 f8a1 	bl	801aa28 <tcp_output>
  while (pcb != NULL) {
 80168e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f47f ad5c 	bne.w	80163a6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80168ee:	2300      	movs	r3, #0
 80168f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80168f2:	4b0b      	ldr	r3, [pc, #44]	; (8016920 <tcp_slowtmr+0x5a8>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80168f8:	e067      	b.n	80169ca <tcp_slowtmr+0x652>
 80168fa:	bf00      	nop
 80168fc:	20016c50 	.word	0x20016c50
 8016900:	10624dd3 	.word	0x10624dd3
 8016904:	000124f8 	.word	0x000124f8
 8016908:	20016c4c 	.word	0x20016c4c
 801690c:	08024e44 	.word	0x08024e44
 8016910:	0802527c 	.word	0x0802527c
 8016914:	08024e88 	.word	0x08024e88
 8016918:	080252a8 	.word	0x080252a8
 801691c:	20016c48 	.word	0x20016c48
 8016920:	20016c5c 	.word	0x20016c5c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016926:	7d1b      	ldrb	r3, [r3, #20]
 8016928:	2b0a      	cmp	r3, #10
 801692a:	d006      	beq.n	801693a <tcp_slowtmr+0x5c2>
 801692c:	4b2b      	ldr	r3, [pc, #172]	; (80169dc <tcp_slowtmr+0x664>)
 801692e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8016932:	492b      	ldr	r1, [pc, #172]	; (80169e0 <tcp_slowtmr+0x668>)
 8016934:	482b      	ldr	r0, [pc, #172]	; (80169e4 <tcp_slowtmr+0x66c>)
 8016936:	f00a fdb9 	bl	80214ac <iprintf>
    pcb_remove = 0;
 801693a:	2300      	movs	r3, #0
 801693c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016940:	4b29      	ldr	r3, [pc, #164]	; (80169e8 <tcp_slowtmr+0x670>)
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016946:	6a1b      	ldr	r3, [r3, #32]
 8016948:	1ad3      	subs	r3, r2, r3
 801694a:	2bf0      	cmp	r3, #240	; 0xf0
 801694c:	d904      	bls.n	8016958 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801694e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016952:	3301      	adds	r3, #1
 8016954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801695c:	2b00      	cmp	r3, #0
 801695e:	d02f      	beq.n	80169c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016962:	f000 fbf9 	bl	8017158 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016968:	2b00      	cmp	r3, #0
 801696a:	d010      	beq.n	801698e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801696c:	4b1f      	ldr	r3, [pc, #124]	; (80169ec <tcp_slowtmr+0x674>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016972:	429a      	cmp	r2, r3
 8016974:	d106      	bne.n	8016984 <tcp_slowtmr+0x60c>
 8016976:	4b19      	ldr	r3, [pc, #100]	; (80169dc <tcp_slowtmr+0x664>)
 8016978:	f240 52af 	movw	r2, #1455	; 0x5af
 801697c:	491c      	ldr	r1, [pc, #112]	; (80169f0 <tcp_slowtmr+0x678>)
 801697e:	4819      	ldr	r0, [pc, #100]	; (80169e4 <tcp_slowtmr+0x66c>)
 8016980:	f00a fd94 	bl	80214ac <iprintf>
        prev->next = pcb->next;
 8016984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016986:	68da      	ldr	r2, [r3, #12]
 8016988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698a:	60da      	str	r2, [r3, #12]
 801698c:	e00f      	b.n	80169ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801698e:	4b17      	ldr	r3, [pc, #92]	; (80169ec <tcp_slowtmr+0x674>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016994:	429a      	cmp	r2, r3
 8016996:	d006      	beq.n	80169a6 <tcp_slowtmr+0x62e>
 8016998:	4b10      	ldr	r3, [pc, #64]	; (80169dc <tcp_slowtmr+0x664>)
 801699a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801699e:	4915      	ldr	r1, [pc, #84]	; (80169f4 <tcp_slowtmr+0x67c>)
 80169a0:	4810      	ldr	r0, [pc, #64]	; (80169e4 <tcp_slowtmr+0x66c>)
 80169a2:	f00a fd83 	bl	80214ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 80169a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a8:	68db      	ldr	r3, [r3, #12]
 80169aa:	4a10      	ldr	r2, [pc, #64]	; (80169ec <tcp_slowtmr+0x674>)
 80169ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80169ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80169b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b4:	68db      	ldr	r3, [r3, #12]
 80169b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80169b8:	69f8      	ldr	r0, [r7, #28]
 80169ba:	f7fe ff85 	bl	80158c8 <tcp_free>
 80169be:	e004      	b.n	80169ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80169c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80169c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80169ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d1a9      	bne.n	8016924 <tcp_slowtmr+0x5ac>
    }
  }
}
 80169d0:	bf00      	nop
 80169d2:	bf00      	nop
 80169d4:	3730      	adds	r7, #48	; 0x30
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bdb0      	pop	{r4, r5, r7, pc}
 80169da:	bf00      	nop
 80169dc:	08024e44 	.word	0x08024e44
 80169e0:	080252d4 	.word	0x080252d4
 80169e4:	08024e88 	.word	0x08024e88
 80169e8:	20016c50 	.word	0x20016c50
 80169ec:	20016c5c 	.word	0x20016c5c
 80169f0:	08025304 	.word	0x08025304
 80169f4:	0802532c 	.word	0x0802532c

080169f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80169fe:	4b2d      	ldr	r3, [pc, #180]	; (8016ab4 <tcp_fasttmr+0xbc>)
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	3301      	adds	r3, #1
 8016a04:	b2da      	uxtb	r2, r3
 8016a06:	4b2b      	ldr	r3, [pc, #172]	; (8016ab4 <tcp_fasttmr+0xbc>)
 8016a08:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016a0a:	4b2b      	ldr	r3, [pc, #172]	; (8016ab8 <tcp_fasttmr+0xc0>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016a10:	e048      	b.n	8016aa4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	7f9a      	ldrb	r2, [r3, #30]
 8016a16:	4b27      	ldr	r3, [pc, #156]	; (8016ab4 <tcp_fasttmr+0xbc>)
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d03f      	beq.n	8016a9e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016a1e:	4b25      	ldr	r3, [pc, #148]	; (8016ab4 <tcp_fasttmr+0xbc>)
 8016a20:	781a      	ldrb	r2, [r3, #0]
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	8b5b      	ldrh	r3, [r3, #26]
 8016a2a:	f003 0301 	and.w	r3, r3, #1
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d010      	beq.n	8016a54 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	8b5b      	ldrh	r3, [r3, #26]
 8016a36:	f043 0302 	orr.w	r3, r3, #2
 8016a3a:	b29a      	uxth	r2, r3
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f003 fff1 	bl	801aa28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	8b5b      	ldrh	r3, [r3, #26]
 8016a4a:	f023 0303 	bic.w	r3, r3, #3
 8016a4e:	b29a      	uxth	r2, r3
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	8b5b      	ldrh	r3, [r3, #26]
 8016a58:	f003 0308 	and.w	r3, r3, #8
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d009      	beq.n	8016a74 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	8b5b      	ldrh	r3, [r3, #26]
 8016a64:	f023 0308 	bic.w	r3, r3, #8
 8016a68:	b29a      	uxth	r2, r3
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f7ff f8be 	bl	8015bf0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	68db      	ldr	r3, [r3, #12]
 8016a78:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d00a      	beq.n	8016a98 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016a82:	4b0e      	ldr	r3, [pc, #56]	; (8016abc <tcp_fasttmr+0xc4>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f000 f819 	bl	8016ac0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016a8e:	4b0b      	ldr	r3, [pc, #44]	; (8016abc <tcp_fasttmr+0xc4>)
 8016a90:	781b      	ldrb	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d000      	beq.n	8016a98 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016a96:	e7b8      	b.n	8016a0a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	607b      	str	r3, [r7, #4]
 8016a9c:	e002      	b.n	8016aa4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	68db      	ldr	r3, [r3, #12]
 8016aa2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d1b3      	bne.n	8016a12 <tcp_fasttmr+0x1a>
    }
  }
}
 8016aaa:	bf00      	nop
 8016aac:	bf00      	nop
 8016aae:	3708      	adds	r7, #8
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}
 8016ab4:	20005586 	.word	0x20005586
 8016ab8:	20016c4c 	.word	0x20016c4c
 8016abc:	20016c48 	.word	0x20016c48

08016ac0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016ac0:	b590      	push	{r4, r7, lr}
 8016ac2:	b085      	sub	sp, #20
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d109      	bne.n	8016ae2 <tcp_process_refused_data+0x22>
 8016ace:	4b37      	ldr	r3, [pc, #220]	; (8016bac <tcp_process_refused_data+0xec>)
 8016ad0:	f240 6209 	movw	r2, #1545	; 0x609
 8016ad4:	4936      	ldr	r1, [pc, #216]	; (8016bb0 <tcp_process_refused_data+0xf0>)
 8016ad6:	4837      	ldr	r0, [pc, #220]	; (8016bb4 <tcp_process_refused_data+0xf4>)
 8016ad8:	f00a fce8 	bl	80214ac <iprintf>
 8016adc:	f06f 030f 	mvn.w	r3, #15
 8016ae0:	e060      	b.n	8016ba4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ae6:	7b5b      	ldrb	r3, [r3, #13]
 8016ae8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016aee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2200      	movs	r2, #0
 8016af4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d00b      	beq.n	8016b18 <tcp_process_refused_data+0x58>
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6918      	ldr	r0, [r3, #16]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	68ba      	ldr	r2, [r7, #8]
 8016b0e:	6879      	ldr	r1, [r7, #4]
 8016b10:	47a0      	blx	r4
 8016b12:	4603      	mov	r3, r0
 8016b14:	73fb      	strb	r3, [r7, #15]
 8016b16:	e007      	b.n	8016b28 <tcp_process_refused_data+0x68>
 8016b18:	2300      	movs	r3, #0
 8016b1a:	68ba      	ldr	r2, [r7, #8]
 8016b1c:	6879      	ldr	r1, [r7, #4]
 8016b1e:	2000      	movs	r0, #0
 8016b20:	f000 f8a4 	bl	8016c6c <tcp_recv_null>
 8016b24:	4603      	mov	r3, r0
 8016b26:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d12a      	bne.n	8016b86 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016b30:	7bbb      	ldrb	r3, [r7, #14]
 8016b32:	f003 0320 	and.w	r3, r3, #32
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d033      	beq.n	8016ba2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016b42:	d005      	beq.n	8016b50 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b48:	3301      	adds	r3, #1
 8016b4a:	b29a      	uxth	r2, r3
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d00b      	beq.n	8016b72 <tcp_process_refused_data+0xb2>
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	6918      	ldr	r0, [r3, #16]
 8016b64:	2300      	movs	r3, #0
 8016b66:	2200      	movs	r2, #0
 8016b68:	6879      	ldr	r1, [r7, #4]
 8016b6a:	47a0      	blx	r4
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	73fb      	strb	r3, [r7, #15]
 8016b70:	e001      	b.n	8016b76 <tcp_process_refused_data+0xb6>
 8016b72:	2300      	movs	r3, #0
 8016b74:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b7a:	f113 0f0d 	cmn.w	r3, #13
 8016b7e:	d110      	bne.n	8016ba2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016b80:	f06f 030c 	mvn.w	r3, #12
 8016b84:	e00e      	b.n	8016ba4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b8a:	f113 0f0d 	cmn.w	r3, #13
 8016b8e:	d102      	bne.n	8016b96 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016b90:	f06f 030c 	mvn.w	r3, #12
 8016b94:	e006      	b.n	8016ba4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68ba      	ldr	r2, [r7, #8]
 8016b9a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016b9c:	f06f 0304 	mvn.w	r3, #4
 8016ba0:	e000      	b.n	8016ba4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3714      	adds	r7, #20
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd90      	pop	{r4, r7, pc}
 8016bac:	08024e44 	.word	0x08024e44
 8016bb0:	08025354 	.word	0x08025354
 8016bb4:	08024e88 	.word	0x08024e88

08016bb8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016bc0:	e007      	b.n	8016bd2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f000 f80a 	bl	8016be2 <tcp_seg_free>
    seg = next;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d1f4      	bne.n	8016bc2 <tcp_segs_free+0xa>
  }
}
 8016bd8:	bf00      	nop
 8016bda:	bf00      	nop
 8016bdc:	3710      	adds	r7, #16
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}

08016be2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b082      	sub	sp, #8
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d00c      	beq.n	8016c0a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d004      	beq.n	8016c02 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7fe fa2b 	bl	8015058 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016c02:	6879      	ldr	r1, [r7, #4]
 8016c04:	2003      	movs	r0, #3
 8016c06:	f7fd fb77 	bl	80142f8 <memp_free>
  }
}
 8016c0a:	bf00      	nop
 8016c0c:	3708      	adds	r7, #8
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
	...

08016c14 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b084      	sub	sp, #16
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d106      	bne.n	8016c30 <tcp_seg_copy+0x1c>
 8016c22:	4b0f      	ldr	r3, [pc, #60]	; (8016c60 <tcp_seg_copy+0x4c>)
 8016c24:	f240 6282 	movw	r2, #1666	; 0x682
 8016c28:	490e      	ldr	r1, [pc, #56]	; (8016c64 <tcp_seg_copy+0x50>)
 8016c2a:	480f      	ldr	r0, [pc, #60]	; (8016c68 <tcp_seg_copy+0x54>)
 8016c2c:	f00a fc3e 	bl	80214ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016c30:	2003      	movs	r0, #3
 8016c32:	f7fd fb0f 	bl	8014254 <memp_malloc>
 8016c36:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d101      	bne.n	8016c42 <tcp_seg_copy+0x2e>
    return NULL;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	e00a      	b.n	8016c58 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016c42:	2210      	movs	r2, #16
 8016c44:	6879      	ldr	r1, [r7, #4]
 8016c46:	68f8      	ldr	r0, [r7, #12]
 8016c48:	f00a fb46 	bl	80212d8 <memcpy>
  pbuf_ref(cseg->p);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7fe faa7 	bl	80151a4 <pbuf_ref>
  return cseg;
 8016c56:	68fb      	ldr	r3, [r7, #12]
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3710      	adds	r7, #16
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	08024e44 	.word	0x08024e44
 8016c64:	08025398 	.word	0x08025398
 8016c68:	08024e88 	.word	0x08024e88

08016c6c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b084      	sub	sp, #16
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
 8016c78:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d109      	bne.n	8016c94 <tcp_recv_null+0x28>
 8016c80:	4b12      	ldr	r3, [pc, #72]	; (8016ccc <tcp_recv_null+0x60>)
 8016c82:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016c86:	4912      	ldr	r1, [pc, #72]	; (8016cd0 <tcp_recv_null+0x64>)
 8016c88:	4812      	ldr	r0, [pc, #72]	; (8016cd4 <tcp_recv_null+0x68>)
 8016c8a:	f00a fc0f 	bl	80214ac <iprintf>
 8016c8e:	f06f 030f 	mvn.w	r3, #15
 8016c92:	e016      	b.n	8016cc2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d009      	beq.n	8016cae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	891b      	ldrh	r3, [r3, #8]
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	68b8      	ldr	r0, [r7, #8]
 8016ca2:	f7ff f9bb 	bl	801601c <tcp_recved>
    pbuf_free(p);
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f7fe f9d6 	bl	8015058 <pbuf_free>
 8016cac:	e008      	b.n	8016cc0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d104      	bne.n	8016cc0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016cb6:	68b8      	ldr	r0, [r7, #8]
 8016cb8:	f7ff f804 	bl	8015cc4 <tcp_close>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	e000      	b.n	8016cc2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016cc0:	2300      	movs	r3, #0
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3710      	adds	r7, #16
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}
 8016cca:	bf00      	nop
 8016ccc:	08024e44 	.word	0x08024e44
 8016cd0:	080253b4 	.word	0x080253b4
 8016cd4:	08024e88 	.word	0x08024e88

08016cd8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b086      	sub	sp, #24
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	4603      	mov	r3, r0
 8016ce0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	db01      	blt.n	8016cee <tcp_kill_prio+0x16>
 8016cea:	79fb      	ldrb	r3, [r7, #7]
 8016cec:	e000      	b.n	8016cf0 <tcp_kill_prio+0x18>
 8016cee:	237f      	movs	r3, #127	; 0x7f
 8016cf0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016cf2:	7afb      	ldrb	r3, [r7, #11]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d034      	beq.n	8016d62 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016cf8:	7afb      	ldrb	r3, [r7, #11]
 8016cfa:	3b01      	subs	r3, #1
 8016cfc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016d02:	2300      	movs	r3, #0
 8016d04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d06:	4b19      	ldr	r3, [pc, #100]	; (8016d6c <tcp_kill_prio+0x94>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	617b      	str	r3, [r7, #20]
 8016d0c:	e01f      	b.n	8016d4e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	7d5b      	ldrb	r3, [r3, #21]
 8016d12:	7afa      	ldrb	r2, [r7, #11]
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d80c      	bhi.n	8016d32 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016d1c:	7afa      	ldrb	r2, [r7, #11]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d112      	bne.n	8016d48 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016d22:	4b13      	ldr	r3, [pc, #76]	; (8016d70 <tcp_kill_prio+0x98>)
 8016d24:	681a      	ldr	r2, [r3, #0]
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	6a1b      	ldr	r3, [r3, #32]
 8016d2a:	1ad3      	subs	r3, r2, r3
 8016d2c:	68fa      	ldr	r2, [r7, #12]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d80a      	bhi.n	8016d48 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016d32:	4b0f      	ldr	r3, [pc, #60]	; (8016d70 <tcp_kill_prio+0x98>)
 8016d34:	681a      	ldr	r2, [r3, #0]
 8016d36:	697b      	ldr	r3, [r7, #20]
 8016d38:	6a1b      	ldr	r3, [r3, #32]
 8016d3a:	1ad3      	subs	r3, r2, r3
 8016d3c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	7d5b      	ldrb	r3, [r3, #21]
 8016d46:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	617b      	str	r3, [r7, #20]
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d1dc      	bne.n	8016d0e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d004      	beq.n	8016d64 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016d5a:	6938      	ldr	r0, [r7, #16]
 8016d5c:	f7ff f8f8 	bl	8015f50 <tcp_abort>
 8016d60:	e000      	b.n	8016d64 <tcp_kill_prio+0x8c>
    return;
 8016d62:	bf00      	nop
  }
}
 8016d64:	3718      	adds	r7, #24
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	20016c4c 	.word	0x20016c4c
 8016d70:	20016c50 	.word	0x20016c50

08016d74 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b086      	sub	sp, #24
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016d7e:	79fb      	ldrb	r3, [r7, #7]
 8016d80:	2b08      	cmp	r3, #8
 8016d82:	d009      	beq.n	8016d98 <tcp_kill_state+0x24>
 8016d84:	79fb      	ldrb	r3, [r7, #7]
 8016d86:	2b09      	cmp	r3, #9
 8016d88:	d006      	beq.n	8016d98 <tcp_kill_state+0x24>
 8016d8a:	4b1a      	ldr	r3, [pc, #104]	; (8016df4 <tcp_kill_state+0x80>)
 8016d8c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016d90:	4919      	ldr	r1, [pc, #100]	; (8016df8 <tcp_kill_state+0x84>)
 8016d92:	481a      	ldr	r0, [pc, #104]	; (8016dfc <tcp_kill_state+0x88>)
 8016d94:	f00a fb8a 	bl	80214ac <iprintf>

  inactivity = 0;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016da0:	4b17      	ldr	r3, [pc, #92]	; (8016e00 <tcp_kill_state+0x8c>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	617b      	str	r3, [r7, #20]
 8016da6:	e017      	b.n	8016dd8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016da8:	697b      	ldr	r3, [r7, #20]
 8016daa:	7d1b      	ldrb	r3, [r3, #20]
 8016dac:	79fa      	ldrb	r2, [r7, #7]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d10f      	bne.n	8016dd2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016db2:	4b14      	ldr	r3, [pc, #80]	; (8016e04 <tcp_kill_state+0x90>)
 8016db4:	681a      	ldr	r2, [r3, #0]
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	6a1b      	ldr	r3, [r3, #32]
 8016dba:	1ad3      	subs	r3, r2, r3
 8016dbc:	68fa      	ldr	r2, [r7, #12]
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d807      	bhi.n	8016dd2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016dc2:	4b10      	ldr	r3, [pc, #64]	; (8016e04 <tcp_kill_state+0x90>)
 8016dc4:	681a      	ldr	r2, [r3, #0]
 8016dc6:	697b      	ldr	r3, [r7, #20]
 8016dc8:	6a1b      	ldr	r3, [r3, #32]
 8016dca:	1ad3      	subs	r3, r2, r3
 8016dcc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	617b      	str	r3, [r7, #20]
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d1e4      	bne.n	8016da8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d003      	beq.n	8016dec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016de4:	2100      	movs	r1, #0
 8016de6:	6938      	ldr	r0, [r7, #16]
 8016de8:	f7fe fff4 	bl	8015dd4 <tcp_abandon>
  }
}
 8016dec:	bf00      	nop
 8016dee:	3718      	adds	r7, #24
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	08024e44 	.word	0x08024e44
 8016df8:	080253d0 	.word	0x080253d0
 8016dfc:	08024e88 	.word	0x08024e88
 8016e00:	20016c4c 	.word	0x20016c4c
 8016e04:	20016c50 	.word	0x20016c50

08016e08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b084      	sub	sp, #16
 8016e0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016e12:	2300      	movs	r3, #0
 8016e14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e16:	4b12      	ldr	r3, [pc, #72]	; (8016e60 <tcp_kill_timewait+0x58>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	60fb      	str	r3, [r7, #12]
 8016e1c:	e012      	b.n	8016e44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016e1e:	4b11      	ldr	r3, [pc, #68]	; (8016e64 <tcp_kill_timewait+0x5c>)
 8016e20:	681a      	ldr	r2, [r3, #0]
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	6a1b      	ldr	r3, [r3, #32]
 8016e26:	1ad3      	subs	r3, r2, r3
 8016e28:	687a      	ldr	r2, [r7, #4]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d807      	bhi.n	8016e3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016e2e:	4b0d      	ldr	r3, [pc, #52]	; (8016e64 <tcp_kill_timewait+0x5c>)
 8016e30:	681a      	ldr	r2, [r3, #0]
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	6a1b      	ldr	r3, [r3, #32]
 8016e36:	1ad3      	subs	r3, r2, r3
 8016e38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	68db      	ldr	r3, [r3, #12]
 8016e42:	60fb      	str	r3, [r7, #12]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d1e9      	bne.n	8016e1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d002      	beq.n	8016e56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016e50:	68b8      	ldr	r0, [r7, #8]
 8016e52:	f7ff f87d 	bl	8015f50 <tcp_abort>
  }
}
 8016e56:	bf00      	nop
 8016e58:	3710      	adds	r7, #16
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	20016c5c 	.word	0x20016c5c
 8016e64:	20016c50 	.word	0x20016c50

08016e68 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016e6e:	4b10      	ldr	r3, [pc, #64]	; (8016eb0 <tcp_handle_closepend+0x48>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016e74:	e014      	b.n	8016ea0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	68db      	ldr	r3, [r3, #12]
 8016e7a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	8b5b      	ldrh	r3, [r3, #26]
 8016e80:	f003 0308 	and.w	r3, r3, #8
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d009      	beq.n	8016e9c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	8b5b      	ldrh	r3, [r3, #26]
 8016e8c:	f023 0308 	bic.w	r3, r3, #8
 8016e90:	b29a      	uxth	r2, r3
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f7fe feaa 	bl	8015bf0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1e7      	bne.n	8016e76 <tcp_handle_closepend+0xe>
  }
}
 8016ea6:	bf00      	nop
 8016ea8:	bf00      	nop
 8016eaa:	3708      	adds	r7, #8
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}
 8016eb0:	20016c4c 	.word	0x20016c4c

08016eb4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b084      	sub	sp, #16
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	4603      	mov	r3, r0
 8016ebc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016ebe:	2001      	movs	r0, #1
 8016ec0:	f7fd f9c8 	bl	8014254 <memp_malloc>
 8016ec4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d126      	bne.n	8016f1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016ecc:	f7ff ffcc 	bl	8016e68 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016ed0:	f7ff ff9a 	bl	8016e08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016ed4:	2001      	movs	r0, #1
 8016ed6:	f7fd f9bd 	bl	8014254 <memp_malloc>
 8016eda:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d11b      	bne.n	8016f1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016ee2:	2009      	movs	r0, #9
 8016ee4:	f7ff ff46 	bl	8016d74 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016ee8:	2001      	movs	r0, #1
 8016eea:	f7fd f9b3 	bl	8014254 <memp_malloc>
 8016eee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d111      	bne.n	8016f1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016ef6:	2008      	movs	r0, #8
 8016ef8:	f7ff ff3c 	bl	8016d74 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016efc:	2001      	movs	r0, #1
 8016efe:	f7fd f9a9 	bl	8014254 <memp_malloc>
 8016f02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d107      	bne.n	8016f1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016f0a:	79fb      	ldrb	r3, [r7, #7]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7ff fee3 	bl	8016cd8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f12:	2001      	movs	r0, #1
 8016f14:	f7fd f99e 	bl	8014254 <memp_malloc>
 8016f18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d03f      	beq.n	8016fa0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016f20:	229c      	movs	r2, #156	; 0x9c
 8016f22:	2100      	movs	r1, #0
 8016f24:	68f8      	ldr	r0, [r7, #12]
 8016f26:	f00a f9ff 	bl	8021328 <memset>
    pcb->prio = prio;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	79fa      	ldrb	r2, [r7, #7]
 8016f2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016f36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	22ff      	movs	r2, #255	; 0xff
 8016f4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016f56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	2206      	movs	r2, #6
 8016f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	2206      	movs	r2, #6
 8016f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2201      	movs	r2, #1
 8016f72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016f76:	4b0d      	ldr	r3, [pc, #52]	; (8016fac <tcp_alloc+0xf8>)
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016f7e:	4b0c      	ldr	r3, [pc, #48]	; (8016fb0 <tcp_alloc+0xfc>)
 8016f80:	781a      	ldrb	r2, [r3, #0]
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016f8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	4a08      	ldr	r2, [pc, #32]	; (8016fb4 <tcp_alloc+0x100>)
 8016f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	4a07      	ldr	r2, [pc, #28]	; (8016fb8 <tcp_alloc+0x104>)
 8016f9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3710      	adds	r7, #16
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	20016c50 	.word	0x20016c50
 8016fb0:	20005586 	.word	0x20005586
 8016fb4:	08016c6d 	.word	0x08016c6d
 8016fb8:	006ddd00 	.word	0x006ddd00

08016fbc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b084      	sub	sp, #16
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016fc6:	2040      	movs	r0, #64	; 0x40
 8016fc8:	f7ff ff74 	bl	8016eb4 <tcp_alloc>
 8016fcc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016fce:	68fb      	ldr	r3, [r7, #12]
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3710      	adds	r7, #16
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b083      	sub	sp, #12
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d002      	beq.n	8016fee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	683a      	ldr	r2, [r7, #0]
 8016fec:	611a      	str	r2, [r3, #16]
  }
}
 8016fee:	bf00      	nop
 8016ff0:	370c      	adds	r7, #12
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr
	...

08016ffc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d00e      	beq.n	801702a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	7d1b      	ldrb	r3, [r3, #20]
 8017010:	2b01      	cmp	r3, #1
 8017012:	d106      	bne.n	8017022 <tcp_recv+0x26>
 8017014:	4b07      	ldr	r3, [pc, #28]	; (8017034 <tcp_recv+0x38>)
 8017016:	f240 72df 	movw	r2, #2015	; 0x7df
 801701a:	4907      	ldr	r1, [pc, #28]	; (8017038 <tcp_recv+0x3c>)
 801701c:	4807      	ldr	r0, [pc, #28]	; (801703c <tcp_recv+0x40>)
 801701e:	f00a fa45 	bl	80214ac <iprintf>
    pcb->recv = recv;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	683a      	ldr	r2, [r7, #0]
 8017026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801702a:	bf00      	nop
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	08024e44 	.word	0x08024e44
 8017038:	080253e0 	.word	0x080253e0
 801703c:	08024e88 	.word	0x08024e88

08017040 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d00e      	beq.n	801706e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	7d1b      	ldrb	r3, [r3, #20]
 8017054:	2b01      	cmp	r3, #1
 8017056:	d106      	bne.n	8017066 <tcp_sent+0x26>
 8017058:	4b07      	ldr	r3, [pc, #28]	; (8017078 <tcp_sent+0x38>)
 801705a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801705e:	4907      	ldr	r1, [pc, #28]	; (801707c <tcp_sent+0x3c>)
 8017060:	4807      	ldr	r0, [pc, #28]	; (8017080 <tcp_sent+0x40>)
 8017062:	f00a fa23 	bl	80214ac <iprintf>
    pcb->sent = sent;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	683a      	ldr	r2, [r7, #0]
 801706a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801706e:	bf00      	nop
 8017070:	3708      	adds	r7, #8
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	08024e44 	.word	0x08024e44
 801707c:	08025408 	.word	0x08025408
 8017080:	08024e88 	.word	0x08024e88

08017084 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d00e      	beq.n	80170b2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	7d1b      	ldrb	r3, [r3, #20]
 8017098:	2b01      	cmp	r3, #1
 801709a:	d106      	bne.n	80170aa <tcp_err+0x26>
 801709c:	4b07      	ldr	r3, [pc, #28]	; (80170bc <tcp_err+0x38>)
 801709e:	f640 020d 	movw	r2, #2061	; 0x80d
 80170a2:	4907      	ldr	r1, [pc, #28]	; (80170c0 <tcp_err+0x3c>)
 80170a4:	4807      	ldr	r0, [pc, #28]	; (80170c4 <tcp_err+0x40>)
 80170a6:	f00a fa01 	bl	80214ac <iprintf>
    pcb->errf = err;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	683a      	ldr	r2, [r7, #0]
 80170ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80170b2:	bf00      	nop
 80170b4:	3708      	adds	r7, #8
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	08024e44 	.word	0x08024e44
 80170c0:	08025430 	.word	0x08025430
 80170c4:	08024e88 	.word	0x08024e88

080170c8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80170c8:	b480      	push	{r7}
 80170ca:	b085      	sub	sp, #20
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d008      	beq.n	80170ea <tcp_accept+0x22>
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	7d1b      	ldrb	r3, [r3, #20]
 80170dc:	2b01      	cmp	r3, #1
 80170de:	d104      	bne.n	80170ea <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	683a      	ldr	r2, [r7, #0]
 80170e8:	619a      	str	r2, [r3, #24]
  }
}
 80170ea:	bf00      	nop
 80170ec:	3714      	adds	r7, #20
 80170ee:	46bd      	mov	sp, r7
 80170f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f4:	4770      	bx	lr
	...

080170f8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b084      	sub	sp, #16
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	60f8      	str	r0, [r7, #12]
 8017100:	60b9      	str	r1, [r7, #8]
 8017102:	4613      	mov	r3, r2
 8017104:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d107      	bne.n	801711c <tcp_poll+0x24>
 801710c:	4b0e      	ldr	r3, [pc, #56]	; (8017148 <tcp_poll+0x50>)
 801710e:	f640 023d 	movw	r2, #2109	; 0x83d
 8017112:	490e      	ldr	r1, [pc, #56]	; (801714c <tcp_poll+0x54>)
 8017114:	480e      	ldr	r0, [pc, #56]	; (8017150 <tcp_poll+0x58>)
 8017116:	f00a f9c9 	bl	80214ac <iprintf>
 801711a:	e011      	b.n	8017140 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	7d1b      	ldrb	r3, [r3, #20]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d106      	bne.n	8017132 <tcp_poll+0x3a>
 8017124:	4b08      	ldr	r3, [pc, #32]	; (8017148 <tcp_poll+0x50>)
 8017126:	f640 023e 	movw	r2, #2110	; 0x83e
 801712a:	490a      	ldr	r1, [pc, #40]	; (8017154 <tcp_poll+0x5c>)
 801712c:	4808      	ldr	r0, [pc, #32]	; (8017150 <tcp_poll+0x58>)
 801712e:	f00a f9bd 	bl	80214ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	68ba      	ldr	r2, [r7, #8]
 8017136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	79fa      	ldrb	r2, [r7, #7]
 801713e:	775a      	strb	r2, [r3, #29]
}
 8017140:	3710      	adds	r7, #16
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	08024e44 	.word	0x08024e44
 801714c:	08025458 	.word	0x08025458
 8017150:	08024e88 	.word	0x08024e88
 8017154:	08025470 	.word	0x08025470

08017158 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b082      	sub	sp, #8
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d107      	bne.n	8017176 <tcp_pcb_purge+0x1e>
 8017166:	4b21      	ldr	r3, [pc, #132]	; (80171ec <tcp_pcb_purge+0x94>)
 8017168:	f640 0251 	movw	r2, #2129	; 0x851
 801716c:	4920      	ldr	r1, [pc, #128]	; (80171f0 <tcp_pcb_purge+0x98>)
 801716e:	4821      	ldr	r0, [pc, #132]	; (80171f4 <tcp_pcb_purge+0x9c>)
 8017170:	f00a f99c 	bl	80214ac <iprintf>
 8017174:	e037      	b.n	80171e6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	7d1b      	ldrb	r3, [r3, #20]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d033      	beq.n	80171e6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017182:	2b0a      	cmp	r3, #10
 8017184:	d02f      	beq.n	80171e6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801718a:	2b01      	cmp	r3, #1
 801718c:	d02b      	beq.n	80171e6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017192:	2b00      	cmp	r3, #0
 8017194:	d007      	beq.n	80171a6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801719a:	4618      	mov	r0, r3
 801719c:	f7fd ff5c 	bl	8015058 <pbuf_free>
      pcb->refused_data = NULL;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2200      	movs	r2, #0
 80171a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d002      	beq.n	80171b4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 f986 	bl	80174c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171ba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7ff fcf9 	bl	8016bb8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7ff fcf4 	bl	8016bb8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	2200      	movs	r2, #0
 80171d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	2200      	movs	r2, #0
 80171e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80171e6:	3708      	adds	r7, #8
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	08024e44 	.word	0x08024e44
 80171f0:	08025490 	.word	0x08025490
 80171f4:	08024e88 	.word	0x08024e88

080171f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d106      	bne.n	8017216 <tcp_pcb_remove+0x1e>
 8017208:	4b3e      	ldr	r3, [pc, #248]	; (8017304 <tcp_pcb_remove+0x10c>)
 801720a:	f640 0283 	movw	r2, #2179	; 0x883
 801720e:	493e      	ldr	r1, [pc, #248]	; (8017308 <tcp_pcb_remove+0x110>)
 8017210:	483e      	ldr	r0, [pc, #248]	; (801730c <tcp_pcb_remove+0x114>)
 8017212:	f00a f94b 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d106      	bne.n	801722a <tcp_pcb_remove+0x32>
 801721c:	4b39      	ldr	r3, [pc, #228]	; (8017304 <tcp_pcb_remove+0x10c>)
 801721e:	f640 0284 	movw	r2, #2180	; 0x884
 8017222:	493b      	ldr	r1, [pc, #236]	; (8017310 <tcp_pcb_remove+0x118>)
 8017224:	4839      	ldr	r0, [pc, #228]	; (801730c <tcp_pcb_remove+0x114>)
 8017226:	f00a f941 	bl	80214ac <iprintf>

  TCP_RMV(pcblist, pcb);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	683a      	ldr	r2, [r7, #0]
 8017230:	429a      	cmp	r2, r3
 8017232:	d105      	bne.n	8017240 <tcp_pcb_remove+0x48>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	68da      	ldr	r2, [r3, #12]
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	601a      	str	r2, [r3, #0]
 801723e:	e013      	b.n	8017268 <tcp_pcb_remove+0x70>
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	60fb      	str	r3, [r7, #12]
 8017246:	e00c      	b.n	8017262 <tcp_pcb_remove+0x6a>
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	683a      	ldr	r2, [r7, #0]
 801724e:	429a      	cmp	r2, r3
 8017250:	d104      	bne.n	801725c <tcp_pcb_remove+0x64>
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	68da      	ldr	r2, [r3, #12]
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	60da      	str	r2, [r3, #12]
 801725a:	e005      	b.n	8017268 <tcp_pcb_remove+0x70>
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	68db      	ldr	r3, [r3, #12]
 8017260:	60fb      	str	r3, [r7, #12]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d1ef      	bne.n	8017248 <tcp_pcb_remove+0x50>
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	2200      	movs	r2, #0
 801726c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801726e:	6838      	ldr	r0, [r7, #0]
 8017270:	f7ff ff72 	bl	8017158 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017274:	683b      	ldr	r3, [r7, #0]
 8017276:	7d1b      	ldrb	r3, [r3, #20]
 8017278:	2b0a      	cmp	r3, #10
 801727a:	d013      	beq.n	80172a4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017280:	2b01      	cmp	r3, #1
 8017282:	d00f      	beq.n	80172a4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	8b5b      	ldrh	r3, [r3, #26]
 8017288:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801728c:	2b00      	cmp	r3, #0
 801728e:	d009      	beq.n	80172a4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	8b5b      	ldrh	r3, [r3, #26]
 8017294:	f043 0302 	orr.w	r3, r3, #2
 8017298:	b29a      	uxth	r2, r3
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801729e:	6838      	ldr	r0, [r7, #0]
 80172a0:	f003 fbc2 	bl	801aa28 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	7d1b      	ldrb	r3, [r3, #20]
 80172a8:	2b01      	cmp	r3, #1
 80172aa:	d020      	beq.n	80172ee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d006      	beq.n	80172c2 <tcp_pcb_remove+0xca>
 80172b4:	4b13      	ldr	r3, [pc, #76]	; (8017304 <tcp_pcb_remove+0x10c>)
 80172b6:	f640 0293 	movw	r2, #2195	; 0x893
 80172ba:	4916      	ldr	r1, [pc, #88]	; (8017314 <tcp_pcb_remove+0x11c>)
 80172bc:	4813      	ldr	r0, [pc, #76]	; (801730c <tcp_pcb_remove+0x114>)
 80172be:	f00a f8f5 	bl	80214ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d006      	beq.n	80172d8 <tcp_pcb_remove+0xe0>
 80172ca:	4b0e      	ldr	r3, [pc, #56]	; (8017304 <tcp_pcb_remove+0x10c>)
 80172cc:	f640 0294 	movw	r2, #2196	; 0x894
 80172d0:	4911      	ldr	r1, [pc, #68]	; (8017318 <tcp_pcb_remove+0x120>)
 80172d2:	480e      	ldr	r0, [pc, #56]	; (801730c <tcp_pcb_remove+0x114>)
 80172d4:	f00a f8ea 	bl	80214ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d006      	beq.n	80172ee <tcp_pcb_remove+0xf6>
 80172e0:	4b08      	ldr	r3, [pc, #32]	; (8017304 <tcp_pcb_remove+0x10c>)
 80172e2:	f640 0296 	movw	r2, #2198	; 0x896
 80172e6:	490d      	ldr	r1, [pc, #52]	; (801731c <tcp_pcb_remove+0x124>)
 80172e8:	4808      	ldr	r0, [pc, #32]	; (801730c <tcp_pcb_remove+0x114>)
 80172ea:	f00a f8df 	bl	80214ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	2200      	movs	r2, #0
 80172f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	2200      	movs	r2, #0
 80172f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80172fa:	bf00      	nop
 80172fc:	3710      	adds	r7, #16
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd80      	pop	{r7, pc}
 8017302:	bf00      	nop
 8017304:	08024e44 	.word	0x08024e44
 8017308:	080254ac 	.word	0x080254ac
 801730c:	08024e88 	.word	0x08024e88
 8017310:	080254c8 	.word	0x080254c8
 8017314:	080254e8 	.word	0x080254e8
 8017318:	08025500 	.word	0x08025500
 801731c:	0802551c 	.word	0x0802551c

08017320 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d106      	bne.n	801733c <tcp_next_iss+0x1c>
 801732e:	4b0a      	ldr	r3, [pc, #40]	; (8017358 <tcp_next_iss+0x38>)
 8017330:	f640 02af 	movw	r2, #2223	; 0x8af
 8017334:	4909      	ldr	r1, [pc, #36]	; (801735c <tcp_next_iss+0x3c>)
 8017336:	480a      	ldr	r0, [pc, #40]	; (8017360 <tcp_next_iss+0x40>)
 8017338:	f00a f8b8 	bl	80214ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801733c:	4b09      	ldr	r3, [pc, #36]	; (8017364 <tcp_next_iss+0x44>)
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	4b09      	ldr	r3, [pc, #36]	; (8017368 <tcp_next_iss+0x48>)
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	4413      	add	r3, r2
 8017346:	4a07      	ldr	r2, [pc, #28]	; (8017364 <tcp_next_iss+0x44>)
 8017348:	6013      	str	r3, [r2, #0]
  return iss;
 801734a:	4b06      	ldr	r3, [pc, #24]	; (8017364 <tcp_next_iss+0x44>)
 801734c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801734e:	4618      	mov	r0, r3
 8017350:	3708      	adds	r7, #8
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}
 8017356:	bf00      	nop
 8017358:	08024e44 	.word	0x08024e44
 801735c:	08025534 	.word	0x08025534
 8017360:	08024e88 	.word	0x08024e88
 8017364:	20000364 	.word	0x20000364
 8017368:	20016c50 	.word	0x20016c50

0801736c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b086      	sub	sp, #24
 8017370:	af00      	add	r7, sp, #0
 8017372:	4603      	mov	r3, r0
 8017374:	60b9      	str	r1, [r7, #8]
 8017376:	607a      	str	r2, [r7, #4]
 8017378:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d106      	bne.n	801738e <tcp_eff_send_mss_netif+0x22>
 8017380:	4b14      	ldr	r3, [pc, #80]	; (80173d4 <tcp_eff_send_mss_netif+0x68>)
 8017382:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017386:	4914      	ldr	r1, [pc, #80]	; (80173d8 <tcp_eff_send_mss_netif+0x6c>)
 8017388:	4814      	ldr	r0, [pc, #80]	; (80173dc <tcp_eff_send_mss_netif+0x70>)
 801738a:	f00a f88f 	bl	80214ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d101      	bne.n	8017398 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017394:	89fb      	ldrh	r3, [r7, #14]
 8017396:	e019      	b.n	80173cc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801739c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801739e:	8afb      	ldrh	r3, [r7, #22]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d012      	beq.n	80173ca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80173a4:	2328      	movs	r3, #40	; 0x28
 80173a6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80173a8:	8afa      	ldrh	r2, [r7, #22]
 80173aa:	8abb      	ldrh	r3, [r7, #20]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d904      	bls.n	80173ba <tcp_eff_send_mss_netif+0x4e>
 80173b0:	8afa      	ldrh	r2, [r7, #22]
 80173b2:	8abb      	ldrh	r3, [r7, #20]
 80173b4:	1ad3      	subs	r3, r2, r3
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	e000      	b.n	80173bc <tcp_eff_send_mss_netif+0x50>
 80173ba:	2300      	movs	r3, #0
 80173bc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80173be:	8a7a      	ldrh	r2, [r7, #18]
 80173c0:	89fb      	ldrh	r3, [r7, #14]
 80173c2:	4293      	cmp	r3, r2
 80173c4:	bf28      	it	cs
 80173c6:	4613      	movcs	r3, r2
 80173c8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80173ca:	89fb      	ldrh	r3, [r7, #14]
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3718      	adds	r7, #24
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}
 80173d4:	08024e44 	.word	0x08024e44
 80173d8:	08025550 	.word	0x08025550
 80173dc:	08024e88 	.word	0x08024e88

080173e0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d119      	bne.n	8017428 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80173f4:	4b10      	ldr	r3, [pc, #64]	; (8017438 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80173f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80173fa:	4910      	ldr	r1, [pc, #64]	; (801743c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80173fc:	4810      	ldr	r0, [pc, #64]	; (8017440 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80173fe:	f00a f855 	bl	80214ac <iprintf>

  while (pcb != NULL) {
 8017402:	e011      	b.n	8017428 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	681a      	ldr	r2, [r3, #0]
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	429a      	cmp	r2, r3
 801740e:	d108      	bne.n	8017422 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	68db      	ldr	r3, [r3, #12]
 8017414:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017416:	68f8      	ldr	r0, [r7, #12]
 8017418:	f7fe fd9a 	bl	8015f50 <tcp_abort>
      pcb = next;
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	60fb      	str	r3, [r7, #12]
 8017420:	e002      	b.n	8017428 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	68db      	ldr	r3, [r3, #12]
 8017426:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d1ea      	bne.n	8017404 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801742e:	bf00      	nop
 8017430:	bf00      	nop
 8017432:	3710      	adds	r7, #16
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}
 8017438:	08024e44 	.word	0x08024e44
 801743c:	08025578 	.word	0x08025578
 8017440:	08024e88 	.word	0x08024e88

08017444 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b084      	sub	sp, #16
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d02a      	beq.n	80174aa <tcp_netif_ip_addr_changed+0x66>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d026      	beq.n	80174aa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801745c:	4b15      	ldr	r3, [pc, #84]	; (80174b4 <tcp_netif_ip_addr_changed+0x70>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	4619      	mov	r1, r3
 8017462:	6878      	ldr	r0, [r7, #4]
 8017464:	f7ff ffbc 	bl	80173e0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017468:	4b13      	ldr	r3, [pc, #76]	; (80174b8 <tcp_netif_ip_addr_changed+0x74>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	4619      	mov	r1, r3
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f7ff ffb6 	bl	80173e0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d017      	beq.n	80174aa <tcp_netif_ip_addr_changed+0x66>
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d013      	beq.n	80174aa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017482:	4b0e      	ldr	r3, [pc, #56]	; (80174bc <tcp_netif_ip_addr_changed+0x78>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	60fb      	str	r3, [r7, #12]
 8017488:	e00c      	b.n	80174a4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	681a      	ldr	r2, [r3, #0]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	429a      	cmp	r2, r3
 8017494:	d103      	bne.n	801749e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017496:	683b      	ldr	r3, [r7, #0]
 8017498:	681a      	ldr	r2, [r3, #0]
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	68db      	ldr	r3, [r3, #12]
 80174a2:	60fb      	str	r3, [r7, #12]
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d1ef      	bne.n	801748a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80174aa:	bf00      	nop
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	20016c4c 	.word	0x20016c4c
 80174b8:	20016c58 	.word	0x20016c58
 80174bc:	20016c54 	.word	0x20016c54

080174c0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d007      	beq.n	80174e0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7ff fb6f 	bl	8016bb8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	2200      	movs	r2, #0
 80174de:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80174e0:	bf00      	nop
 80174e2:	3708      	adds	r7, #8
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80174e8:	b590      	push	{r4, r7, lr}
 80174ea:	b08d      	sub	sp, #52	; 0x34
 80174ec:	af04      	add	r7, sp, #16
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d105      	bne.n	8017504 <tcp_input+0x1c>
 80174f8:	4b9b      	ldr	r3, [pc, #620]	; (8017768 <tcp_input+0x280>)
 80174fa:	2283      	movs	r2, #131	; 0x83
 80174fc:	499b      	ldr	r1, [pc, #620]	; (801776c <tcp_input+0x284>)
 80174fe:	489c      	ldr	r0, [pc, #624]	; (8017770 <tcp_input+0x288>)
 8017500:	f009 ffd4 	bl	80214ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	685b      	ldr	r3, [r3, #4]
 8017508:	4a9a      	ldr	r2, [pc, #616]	; (8017774 <tcp_input+0x28c>)
 801750a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	895b      	ldrh	r3, [r3, #10]
 8017510:	2b13      	cmp	r3, #19
 8017512:	f240 83c4 	bls.w	8017c9e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017516:	4b98      	ldr	r3, [pc, #608]	; (8017778 <tcp_input+0x290>)
 8017518:	695b      	ldr	r3, [r3, #20]
 801751a:	4a97      	ldr	r2, [pc, #604]	; (8017778 <tcp_input+0x290>)
 801751c:	6812      	ldr	r2, [r2, #0]
 801751e:	4611      	mov	r1, r2
 8017520:	4618      	mov	r0, r3
 8017522:	f008 fb65 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 8017526:	4603      	mov	r3, r0
 8017528:	2b00      	cmp	r3, #0
 801752a:	f040 83ba 	bne.w	8017ca2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801752e:	4b92      	ldr	r3, [pc, #584]	; (8017778 <tcp_input+0x290>)
 8017530:	695b      	ldr	r3, [r3, #20]
 8017532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017536:	2be0      	cmp	r3, #224	; 0xe0
 8017538:	f000 83b3 	beq.w	8017ca2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801753c:	4b8d      	ldr	r3, [pc, #564]	; (8017774 <tcp_input+0x28c>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	899b      	ldrh	r3, [r3, #12]
 8017542:	b29b      	uxth	r3, r3
 8017544:	4618      	mov	r0, r3
 8017546:	f7fb f9f9 	bl	801293c <lwip_htons>
 801754a:	4603      	mov	r3, r0
 801754c:	0b1b      	lsrs	r3, r3, #12
 801754e:	b29b      	uxth	r3, r3
 8017550:	b2db      	uxtb	r3, r3
 8017552:	009b      	lsls	r3, r3, #2
 8017554:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017556:	7cbb      	ldrb	r3, [r7, #18]
 8017558:	2b13      	cmp	r3, #19
 801755a:	f240 83a4 	bls.w	8017ca6 <tcp_input+0x7be>
 801755e:	7cbb      	ldrb	r3, [r7, #18]
 8017560:	b29a      	uxth	r2, r3
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	891b      	ldrh	r3, [r3, #8]
 8017566:	429a      	cmp	r2, r3
 8017568:	f200 839d 	bhi.w	8017ca6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801756c:	7cbb      	ldrb	r3, [r7, #18]
 801756e:	b29b      	uxth	r3, r3
 8017570:	3b14      	subs	r3, #20
 8017572:	b29a      	uxth	r2, r3
 8017574:	4b81      	ldr	r3, [pc, #516]	; (801777c <tcp_input+0x294>)
 8017576:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017578:	4b81      	ldr	r3, [pc, #516]	; (8017780 <tcp_input+0x298>)
 801757a:	2200      	movs	r2, #0
 801757c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	895a      	ldrh	r2, [r3, #10]
 8017582:	7cbb      	ldrb	r3, [r7, #18]
 8017584:	b29b      	uxth	r3, r3
 8017586:	429a      	cmp	r2, r3
 8017588:	d309      	bcc.n	801759e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801758a:	4b7c      	ldr	r3, [pc, #496]	; (801777c <tcp_input+0x294>)
 801758c:	881a      	ldrh	r2, [r3, #0]
 801758e:	4b7d      	ldr	r3, [pc, #500]	; (8017784 <tcp_input+0x29c>)
 8017590:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017592:	7cbb      	ldrb	r3, [r7, #18]
 8017594:	4619      	mov	r1, r3
 8017596:	6878      	ldr	r0, [r7, #4]
 8017598:	f7fd fcd8 	bl	8014f4c <pbuf_remove_header>
 801759c:	e04e      	b.n	801763c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d105      	bne.n	80175b2 <tcp_input+0xca>
 80175a6:	4b70      	ldr	r3, [pc, #448]	; (8017768 <tcp_input+0x280>)
 80175a8:	22c2      	movs	r2, #194	; 0xc2
 80175aa:	4977      	ldr	r1, [pc, #476]	; (8017788 <tcp_input+0x2a0>)
 80175ac:	4870      	ldr	r0, [pc, #448]	; (8017770 <tcp_input+0x288>)
 80175ae:	f009 ff7d 	bl	80214ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80175b2:	2114      	movs	r1, #20
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f7fd fcc9 	bl	8014f4c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	895a      	ldrh	r2, [r3, #10]
 80175be:	4b71      	ldr	r3, [pc, #452]	; (8017784 <tcp_input+0x29c>)
 80175c0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80175c2:	4b6e      	ldr	r3, [pc, #440]	; (801777c <tcp_input+0x294>)
 80175c4:	881a      	ldrh	r2, [r3, #0]
 80175c6:	4b6f      	ldr	r3, [pc, #444]	; (8017784 <tcp_input+0x29c>)
 80175c8:	881b      	ldrh	r3, [r3, #0]
 80175ca:	1ad3      	subs	r3, r2, r3
 80175cc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80175ce:	4b6d      	ldr	r3, [pc, #436]	; (8017784 <tcp_input+0x29c>)
 80175d0:	881b      	ldrh	r3, [r3, #0]
 80175d2:	4619      	mov	r1, r3
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f7fd fcb9 	bl	8014f4c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	895b      	ldrh	r3, [r3, #10]
 80175e0:	8a3a      	ldrh	r2, [r7, #16]
 80175e2:	429a      	cmp	r2, r3
 80175e4:	f200 8361 	bhi.w	8017caa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	685b      	ldr	r3, [r3, #4]
 80175ee:	4a64      	ldr	r2, [pc, #400]	; (8017780 <tcp_input+0x298>)
 80175f0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	8a3a      	ldrh	r2, [r7, #16]
 80175f8:	4611      	mov	r1, r2
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7fd fca6 	bl	8014f4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	891a      	ldrh	r2, [r3, #8]
 8017604:	8a3b      	ldrh	r3, [r7, #16]
 8017606:	1ad3      	subs	r3, r2, r3
 8017608:	b29a      	uxth	r2, r3
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	895b      	ldrh	r3, [r3, #10]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d005      	beq.n	8017622 <tcp_input+0x13a>
 8017616:	4b54      	ldr	r3, [pc, #336]	; (8017768 <tcp_input+0x280>)
 8017618:	22df      	movs	r2, #223	; 0xdf
 801761a:	495c      	ldr	r1, [pc, #368]	; (801778c <tcp_input+0x2a4>)
 801761c:	4854      	ldr	r0, [pc, #336]	; (8017770 <tcp_input+0x288>)
 801761e:	f009 ff45 	bl	80214ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	891a      	ldrh	r2, [r3, #8]
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	891b      	ldrh	r3, [r3, #8]
 801762c:	429a      	cmp	r2, r3
 801762e:	d005      	beq.n	801763c <tcp_input+0x154>
 8017630:	4b4d      	ldr	r3, [pc, #308]	; (8017768 <tcp_input+0x280>)
 8017632:	22e0      	movs	r2, #224	; 0xe0
 8017634:	4956      	ldr	r1, [pc, #344]	; (8017790 <tcp_input+0x2a8>)
 8017636:	484e      	ldr	r0, [pc, #312]	; (8017770 <tcp_input+0x288>)
 8017638:	f009 ff38 	bl	80214ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801763c:	4b4d      	ldr	r3, [pc, #308]	; (8017774 <tcp_input+0x28c>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	881b      	ldrh	r3, [r3, #0]
 8017642:	b29b      	uxth	r3, r3
 8017644:	4a4b      	ldr	r2, [pc, #300]	; (8017774 <tcp_input+0x28c>)
 8017646:	6814      	ldr	r4, [r2, #0]
 8017648:	4618      	mov	r0, r3
 801764a:	f7fb f977 	bl	801293c <lwip_htons>
 801764e:	4603      	mov	r3, r0
 8017650:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017652:	4b48      	ldr	r3, [pc, #288]	; (8017774 <tcp_input+0x28c>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	885b      	ldrh	r3, [r3, #2]
 8017658:	b29b      	uxth	r3, r3
 801765a:	4a46      	ldr	r2, [pc, #280]	; (8017774 <tcp_input+0x28c>)
 801765c:	6814      	ldr	r4, [r2, #0]
 801765e:	4618      	mov	r0, r3
 8017660:	f7fb f96c 	bl	801293c <lwip_htons>
 8017664:	4603      	mov	r3, r0
 8017666:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017668:	4b42      	ldr	r3, [pc, #264]	; (8017774 <tcp_input+0x28c>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	685b      	ldr	r3, [r3, #4]
 801766e:	4a41      	ldr	r2, [pc, #260]	; (8017774 <tcp_input+0x28c>)
 8017670:	6814      	ldr	r4, [r2, #0]
 8017672:	4618      	mov	r0, r3
 8017674:	f7fb f977 	bl	8012966 <lwip_htonl>
 8017678:	4603      	mov	r3, r0
 801767a:	6063      	str	r3, [r4, #4]
 801767c:	6863      	ldr	r3, [r4, #4]
 801767e:	4a45      	ldr	r2, [pc, #276]	; (8017794 <tcp_input+0x2ac>)
 8017680:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017682:	4b3c      	ldr	r3, [pc, #240]	; (8017774 <tcp_input+0x28c>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	689b      	ldr	r3, [r3, #8]
 8017688:	4a3a      	ldr	r2, [pc, #232]	; (8017774 <tcp_input+0x28c>)
 801768a:	6814      	ldr	r4, [r2, #0]
 801768c:	4618      	mov	r0, r3
 801768e:	f7fb f96a 	bl	8012966 <lwip_htonl>
 8017692:	4603      	mov	r3, r0
 8017694:	60a3      	str	r3, [r4, #8]
 8017696:	68a3      	ldr	r3, [r4, #8]
 8017698:	4a3f      	ldr	r2, [pc, #252]	; (8017798 <tcp_input+0x2b0>)
 801769a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801769c:	4b35      	ldr	r3, [pc, #212]	; (8017774 <tcp_input+0x28c>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	89db      	ldrh	r3, [r3, #14]
 80176a2:	b29b      	uxth	r3, r3
 80176a4:	4a33      	ldr	r2, [pc, #204]	; (8017774 <tcp_input+0x28c>)
 80176a6:	6814      	ldr	r4, [r2, #0]
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7fb f947 	bl	801293c <lwip_htons>
 80176ae:	4603      	mov	r3, r0
 80176b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80176b2:	4b30      	ldr	r3, [pc, #192]	; (8017774 <tcp_input+0x28c>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	899b      	ldrh	r3, [r3, #12]
 80176b8:	b29b      	uxth	r3, r3
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7fb f93e 	bl	801293c <lwip_htons>
 80176c0:	4603      	mov	r3, r0
 80176c2:	b2db      	uxtb	r3, r3
 80176c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80176c8:	b2da      	uxtb	r2, r3
 80176ca:	4b34      	ldr	r3, [pc, #208]	; (801779c <tcp_input+0x2b4>)
 80176cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	891a      	ldrh	r2, [r3, #8]
 80176d2:	4b33      	ldr	r3, [pc, #204]	; (80177a0 <tcp_input+0x2b8>)
 80176d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80176d6:	4b31      	ldr	r3, [pc, #196]	; (801779c <tcp_input+0x2b4>)
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	f003 0303 	and.w	r3, r3, #3
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d00c      	beq.n	80176fc <tcp_input+0x214>
    tcplen++;
 80176e2:	4b2f      	ldr	r3, [pc, #188]	; (80177a0 <tcp_input+0x2b8>)
 80176e4:	881b      	ldrh	r3, [r3, #0]
 80176e6:	3301      	adds	r3, #1
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	4b2d      	ldr	r3, [pc, #180]	; (80177a0 <tcp_input+0x2b8>)
 80176ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	891a      	ldrh	r2, [r3, #8]
 80176f2:	4b2b      	ldr	r3, [pc, #172]	; (80177a0 <tcp_input+0x2b8>)
 80176f4:	881b      	ldrh	r3, [r3, #0]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	f200 82d9 	bhi.w	8017cae <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80176fc:	2300      	movs	r3, #0
 80176fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017700:	4b28      	ldr	r3, [pc, #160]	; (80177a4 <tcp_input+0x2bc>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	61fb      	str	r3, [r7, #28]
 8017706:	e09d      	b.n	8017844 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017708:	69fb      	ldr	r3, [r7, #28]
 801770a:	7d1b      	ldrb	r3, [r3, #20]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d105      	bne.n	801771c <tcp_input+0x234>
 8017710:	4b15      	ldr	r3, [pc, #84]	; (8017768 <tcp_input+0x280>)
 8017712:	22fb      	movs	r2, #251	; 0xfb
 8017714:	4924      	ldr	r1, [pc, #144]	; (80177a8 <tcp_input+0x2c0>)
 8017716:	4816      	ldr	r0, [pc, #88]	; (8017770 <tcp_input+0x288>)
 8017718:	f009 fec8 	bl	80214ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801771c:	69fb      	ldr	r3, [r7, #28]
 801771e:	7d1b      	ldrb	r3, [r3, #20]
 8017720:	2b0a      	cmp	r3, #10
 8017722:	d105      	bne.n	8017730 <tcp_input+0x248>
 8017724:	4b10      	ldr	r3, [pc, #64]	; (8017768 <tcp_input+0x280>)
 8017726:	22fc      	movs	r2, #252	; 0xfc
 8017728:	4920      	ldr	r1, [pc, #128]	; (80177ac <tcp_input+0x2c4>)
 801772a:	4811      	ldr	r0, [pc, #68]	; (8017770 <tcp_input+0x288>)
 801772c:	f009 febe 	bl	80214ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	7d1b      	ldrb	r3, [r3, #20]
 8017734:	2b01      	cmp	r3, #1
 8017736:	d105      	bne.n	8017744 <tcp_input+0x25c>
 8017738:	4b0b      	ldr	r3, [pc, #44]	; (8017768 <tcp_input+0x280>)
 801773a:	22fd      	movs	r2, #253	; 0xfd
 801773c:	491c      	ldr	r1, [pc, #112]	; (80177b0 <tcp_input+0x2c8>)
 801773e:	480c      	ldr	r0, [pc, #48]	; (8017770 <tcp_input+0x288>)
 8017740:	f009 feb4 	bl	80214ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017744:	69fb      	ldr	r3, [r7, #28]
 8017746:	7a1b      	ldrb	r3, [r3, #8]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d033      	beq.n	80177b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801774c:	69fb      	ldr	r3, [r7, #28]
 801774e:	7a1a      	ldrb	r2, [r3, #8]
 8017750:	4b09      	ldr	r3, [pc, #36]	; (8017778 <tcp_input+0x290>)
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017758:	3301      	adds	r3, #1
 801775a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801775c:	429a      	cmp	r2, r3
 801775e:	d029      	beq.n	80177b4 <tcp_input+0x2cc>
      prev = pcb;
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	61bb      	str	r3, [r7, #24]
      continue;
 8017764:	e06b      	b.n	801783e <tcp_input+0x356>
 8017766:	bf00      	nop
 8017768:	080255ac 	.word	0x080255ac
 801776c:	080255e0 	.word	0x080255e0
 8017770:	080255f8 	.word	0x080255f8
 8017774:	20005598 	.word	0x20005598
 8017778:	2001346c 	.word	0x2001346c
 801777c:	2000559c 	.word	0x2000559c
 8017780:	200055a0 	.word	0x200055a0
 8017784:	2000559e 	.word	0x2000559e
 8017788:	08025620 	.word	0x08025620
 801778c:	08025630 	.word	0x08025630
 8017790:	0802563c 	.word	0x0802563c
 8017794:	200055a8 	.word	0x200055a8
 8017798:	200055ac 	.word	0x200055ac
 801779c:	200055b4 	.word	0x200055b4
 80177a0:	200055b2 	.word	0x200055b2
 80177a4:	20016c4c 	.word	0x20016c4c
 80177a8:	0802565c 	.word	0x0802565c
 80177ac:	08025684 	.word	0x08025684
 80177b0:	080256b0 	.word	0x080256b0
    }

    if (pcb->remote_port == tcphdr->src &&
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	8b1a      	ldrh	r2, [r3, #24]
 80177b8:	4b94      	ldr	r3, [pc, #592]	; (8017a0c <tcp_input+0x524>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	881b      	ldrh	r3, [r3, #0]
 80177be:	b29b      	uxth	r3, r3
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d13a      	bne.n	801783a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80177c4:	69fb      	ldr	r3, [r7, #28]
 80177c6:	8ada      	ldrh	r2, [r3, #22]
 80177c8:	4b90      	ldr	r3, [pc, #576]	; (8017a0c <tcp_input+0x524>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	885b      	ldrh	r3, [r3, #2]
 80177ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d132      	bne.n	801783a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	685a      	ldr	r2, [r3, #4]
 80177d8:	4b8d      	ldr	r3, [pc, #564]	; (8017a10 <tcp_input+0x528>)
 80177da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80177dc:	429a      	cmp	r2, r3
 80177de:	d12c      	bne.n	801783a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	681a      	ldr	r2, [r3, #0]
 80177e4:	4b8a      	ldr	r3, [pc, #552]	; (8017a10 <tcp_input+0x528>)
 80177e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80177e8:	429a      	cmp	r2, r3
 80177ea:	d126      	bne.n	801783a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	69fa      	ldr	r2, [r7, #28]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d106      	bne.n	8017804 <tcp_input+0x31c>
 80177f6:	4b87      	ldr	r3, [pc, #540]	; (8017a14 <tcp_input+0x52c>)
 80177f8:	f240 120d 	movw	r2, #269	; 0x10d
 80177fc:	4986      	ldr	r1, [pc, #536]	; (8017a18 <tcp_input+0x530>)
 80177fe:	4887      	ldr	r0, [pc, #540]	; (8017a1c <tcp_input+0x534>)
 8017800:	f009 fe54 	bl	80214ac <iprintf>
      if (prev != NULL) {
 8017804:	69bb      	ldr	r3, [r7, #24]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d00a      	beq.n	8017820 <tcp_input+0x338>
        prev->next = pcb->next;
 801780a:	69fb      	ldr	r3, [r7, #28]
 801780c:	68da      	ldr	r2, [r3, #12]
 801780e:	69bb      	ldr	r3, [r7, #24]
 8017810:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017812:	4b83      	ldr	r3, [pc, #524]	; (8017a20 <tcp_input+0x538>)
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	69fb      	ldr	r3, [r7, #28]
 8017818:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801781a:	4a81      	ldr	r2, [pc, #516]	; (8017a20 <tcp_input+0x538>)
 801781c:	69fb      	ldr	r3, [r7, #28]
 801781e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017820:	69fb      	ldr	r3, [r7, #28]
 8017822:	68db      	ldr	r3, [r3, #12]
 8017824:	69fa      	ldr	r2, [r7, #28]
 8017826:	429a      	cmp	r2, r3
 8017828:	d111      	bne.n	801784e <tcp_input+0x366>
 801782a:	4b7a      	ldr	r3, [pc, #488]	; (8017a14 <tcp_input+0x52c>)
 801782c:	f240 1215 	movw	r2, #277	; 0x115
 8017830:	497c      	ldr	r1, [pc, #496]	; (8017a24 <tcp_input+0x53c>)
 8017832:	487a      	ldr	r0, [pc, #488]	; (8017a1c <tcp_input+0x534>)
 8017834:	f009 fe3a 	bl	80214ac <iprintf>
      break;
 8017838:	e009      	b.n	801784e <tcp_input+0x366>
    }
    prev = pcb;
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801783e:	69fb      	ldr	r3, [r7, #28]
 8017840:	68db      	ldr	r3, [r3, #12]
 8017842:	61fb      	str	r3, [r7, #28]
 8017844:	69fb      	ldr	r3, [r7, #28]
 8017846:	2b00      	cmp	r3, #0
 8017848:	f47f af5e 	bne.w	8017708 <tcp_input+0x220>
 801784c:	e000      	b.n	8017850 <tcp_input+0x368>
      break;
 801784e:	bf00      	nop
  }

  if (pcb == NULL) {
 8017850:	69fb      	ldr	r3, [r7, #28]
 8017852:	2b00      	cmp	r3, #0
 8017854:	f040 8095 	bne.w	8017982 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017858:	4b73      	ldr	r3, [pc, #460]	; (8017a28 <tcp_input+0x540>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	61fb      	str	r3, [r7, #28]
 801785e:	e03f      	b.n	80178e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	7d1b      	ldrb	r3, [r3, #20]
 8017864:	2b0a      	cmp	r3, #10
 8017866:	d006      	beq.n	8017876 <tcp_input+0x38e>
 8017868:	4b6a      	ldr	r3, [pc, #424]	; (8017a14 <tcp_input+0x52c>)
 801786a:	f240 121f 	movw	r2, #287	; 0x11f
 801786e:	496f      	ldr	r1, [pc, #444]	; (8017a2c <tcp_input+0x544>)
 8017870:	486a      	ldr	r0, [pc, #424]	; (8017a1c <tcp_input+0x534>)
 8017872:	f009 fe1b 	bl	80214ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017876:	69fb      	ldr	r3, [r7, #28]
 8017878:	7a1b      	ldrb	r3, [r3, #8]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d009      	beq.n	8017892 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	7a1a      	ldrb	r2, [r3, #8]
 8017882:	4b63      	ldr	r3, [pc, #396]	; (8017a10 <tcp_input+0x528>)
 8017884:	685b      	ldr	r3, [r3, #4]
 8017886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801788a:	3301      	adds	r3, #1
 801788c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801788e:	429a      	cmp	r2, r3
 8017890:	d122      	bne.n	80178d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017892:	69fb      	ldr	r3, [r7, #28]
 8017894:	8b1a      	ldrh	r2, [r3, #24]
 8017896:	4b5d      	ldr	r3, [pc, #372]	; (8017a0c <tcp_input+0x524>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	881b      	ldrh	r3, [r3, #0]
 801789c:	b29b      	uxth	r3, r3
 801789e:	429a      	cmp	r2, r3
 80178a0:	d11b      	bne.n	80178da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80178a2:	69fb      	ldr	r3, [r7, #28]
 80178a4:	8ada      	ldrh	r2, [r3, #22]
 80178a6:	4b59      	ldr	r3, [pc, #356]	; (8017a0c <tcp_input+0x524>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	885b      	ldrh	r3, [r3, #2]
 80178ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d113      	bne.n	80178da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80178b2:	69fb      	ldr	r3, [r7, #28]
 80178b4:	685a      	ldr	r2, [r3, #4]
 80178b6:	4b56      	ldr	r3, [pc, #344]	; (8017a10 <tcp_input+0x528>)
 80178b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80178ba:	429a      	cmp	r2, r3
 80178bc:	d10d      	bne.n	80178da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80178be:	69fb      	ldr	r3, [r7, #28]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	4b53      	ldr	r3, [pc, #332]	; (8017a10 <tcp_input+0x528>)
 80178c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80178c6:	429a      	cmp	r2, r3
 80178c8:	d107      	bne.n	80178da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80178ca:	69f8      	ldr	r0, [r7, #28]
 80178cc:	f000 fb54 	bl	8017f78 <tcp_timewait_input>
        }
        pbuf_free(p);
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f7fd fbc1 	bl	8015058 <pbuf_free>
        return;
 80178d6:	e1f0      	b.n	8017cba <tcp_input+0x7d2>
        continue;
 80178d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80178da:	69fb      	ldr	r3, [r7, #28]
 80178dc:	68db      	ldr	r3, [r3, #12]
 80178de:	61fb      	str	r3, [r7, #28]
 80178e0:	69fb      	ldr	r3, [r7, #28]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d1bc      	bne.n	8017860 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80178e6:	2300      	movs	r3, #0
 80178e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80178ea:	4b51      	ldr	r3, [pc, #324]	; (8017a30 <tcp_input+0x548>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	617b      	str	r3, [r7, #20]
 80178f0:	e02a      	b.n	8017948 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	7a1b      	ldrb	r3, [r3, #8]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d00c      	beq.n	8017914 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	7a1a      	ldrb	r2, [r3, #8]
 80178fe:	4b44      	ldr	r3, [pc, #272]	; (8017a10 <tcp_input+0x528>)
 8017900:	685b      	ldr	r3, [r3, #4]
 8017902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017906:	3301      	adds	r3, #1
 8017908:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801790a:	429a      	cmp	r2, r3
 801790c:	d002      	beq.n	8017914 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	61bb      	str	r3, [r7, #24]
        continue;
 8017912:	e016      	b.n	8017942 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	8ada      	ldrh	r2, [r3, #22]
 8017918:	4b3c      	ldr	r3, [pc, #240]	; (8017a0c <tcp_input+0x524>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	885b      	ldrh	r3, [r3, #2]
 801791e:	b29b      	uxth	r3, r3
 8017920:	429a      	cmp	r2, r3
 8017922:	d10c      	bne.n	801793e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	681a      	ldr	r2, [r3, #0]
 8017928:	4b39      	ldr	r3, [pc, #228]	; (8017a10 <tcp_input+0x528>)
 801792a:	695b      	ldr	r3, [r3, #20]
 801792c:	429a      	cmp	r2, r3
 801792e:	d00f      	beq.n	8017950 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d00d      	beq.n	8017952 <tcp_input+0x46a>
 8017936:	697b      	ldr	r3, [r7, #20]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d009      	beq.n	8017952 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017942:	697b      	ldr	r3, [r7, #20]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	617b      	str	r3, [r7, #20]
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d1d1      	bne.n	80178f2 <tcp_input+0x40a>
 801794e:	e000      	b.n	8017952 <tcp_input+0x46a>
            break;
 8017950:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d014      	beq.n	8017982 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017958:	69bb      	ldr	r3, [r7, #24]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d00a      	beq.n	8017974 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801795e:	697b      	ldr	r3, [r7, #20]
 8017960:	68da      	ldr	r2, [r3, #12]
 8017962:	69bb      	ldr	r3, [r7, #24]
 8017964:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017966:	4b32      	ldr	r3, [pc, #200]	; (8017a30 <tcp_input+0x548>)
 8017968:	681a      	ldr	r2, [r3, #0]
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801796e:	4a30      	ldr	r2, [pc, #192]	; (8017a30 <tcp_input+0x548>)
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017974:	6978      	ldr	r0, [r7, #20]
 8017976:	f000 fa01 	bl	8017d7c <tcp_listen_input>
      }
      pbuf_free(p);
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f7fd fb6c 	bl	8015058 <pbuf_free>
      return;
 8017980:	e19b      	b.n	8017cba <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017982:	69fb      	ldr	r3, [r7, #28]
 8017984:	2b00      	cmp	r3, #0
 8017986:	f000 8160 	beq.w	8017c4a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801798a:	4b2a      	ldr	r3, [pc, #168]	; (8017a34 <tcp_input+0x54c>)
 801798c:	2200      	movs	r2, #0
 801798e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	891a      	ldrh	r2, [r3, #8]
 8017994:	4b27      	ldr	r3, [pc, #156]	; (8017a34 <tcp_input+0x54c>)
 8017996:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017998:	4a26      	ldr	r2, [pc, #152]	; (8017a34 <tcp_input+0x54c>)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801799e:	4b1b      	ldr	r3, [pc, #108]	; (8017a0c <tcp_input+0x524>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	4a24      	ldr	r2, [pc, #144]	; (8017a34 <tcp_input+0x54c>)
 80179a4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80179a6:	4b24      	ldr	r3, [pc, #144]	; (8017a38 <tcp_input+0x550>)
 80179a8:	2200      	movs	r2, #0
 80179aa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80179ac:	4b23      	ldr	r3, [pc, #140]	; (8017a3c <tcp_input+0x554>)
 80179ae:	2200      	movs	r2, #0
 80179b0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80179b2:	4b23      	ldr	r3, [pc, #140]	; (8017a40 <tcp_input+0x558>)
 80179b4:	2200      	movs	r2, #0
 80179b6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80179b8:	4b22      	ldr	r3, [pc, #136]	; (8017a44 <tcp_input+0x55c>)
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	f003 0308 	and.w	r3, r3, #8
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d006      	beq.n	80179d2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	7b5b      	ldrb	r3, [r3, #13]
 80179c8:	f043 0301 	orr.w	r3, r3, #1
 80179cc:	b2da      	uxtb	r2, r3
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80179d2:	69fb      	ldr	r3, [r7, #28]
 80179d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d038      	beq.n	8017a4c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80179da:	69f8      	ldr	r0, [r7, #28]
 80179dc:	f7ff f870 	bl	8016ac0 <tcp_process_refused_data>
 80179e0:	4603      	mov	r3, r0
 80179e2:	f113 0f0d 	cmn.w	r3, #13
 80179e6:	d007      	beq.n	80179f8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d02d      	beq.n	8017a4c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80179f0:	4b15      	ldr	r3, [pc, #84]	; (8017a48 <tcp_input+0x560>)
 80179f2:	881b      	ldrh	r3, [r3, #0]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d029      	beq.n	8017a4c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80179f8:	69fb      	ldr	r3, [r7, #28]
 80179fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	f040 8104 	bne.w	8017c0a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017a02:	69f8      	ldr	r0, [r7, #28]
 8017a04:	f003 fe16 	bl	801b634 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017a08:	e0ff      	b.n	8017c0a <tcp_input+0x722>
 8017a0a:	bf00      	nop
 8017a0c:	20005598 	.word	0x20005598
 8017a10:	2001346c 	.word	0x2001346c
 8017a14:	080255ac 	.word	0x080255ac
 8017a18:	080256d8 	.word	0x080256d8
 8017a1c:	080255f8 	.word	0x080255f8
 8017a20:	20016c4c 	.word	0x20016c4c
 8017a24:	08025704 	.word	0x08025704
 8017a28:	20016c5c 	.word	0x20016c5c
 8017a2c:	08025730 	.word	0x08025730
 8017a30:	20016c54 	.word	0x20016c54
 8017a34:	20005588 	.word	0x20005588
 8017a38:	200055b8 	.word	0x200055b8
 8017a3c:	200055b5 	.word	0x200055b5
 8017a40:	200055b0 	.word	0x200055b0
 8017a44:	200055b4 	.word	0x200055b4
 8017a48:	200055b2 	.word	0x200055b2
      }
    }
    tcp_input_pcb = pcb;
 8017a4c:	4a9c      	ldr	r2, [pc, #624]	; (8017cc0 <tcp_input+0x7d8>)
 8017a4e:	69fb      	ldr	r3, [r7, #28]
 8017a50:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017a52:	69f8      	ldr	r0, [r7, #28]
 8017a54:	f000 fb0a 	bl	801806c <tcp_process>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017a5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017a60:	f113 0f0d 	cmn.w	r3, #13
 8017a64:	f000 80d3 	beq.w	8017c0e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017a68:	4b96      	ldr	r3, [pc, #600]	; (8017cc4 <tcp_input+0x7dc>)
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	f003 0308 	and.w	r3, r3, #8
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d015      	beq.n	8017aa0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d008      	beq.n	8017a90 <tcp_input+0x5a8>
 8017a7e:	69fb      	ldr	r3, [r7, #28]
 8017a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a84:	69fa      	ldr	r2, [r7, #28]
 8017a86:	6912      	ldr	r2, [r2, #16]
 8017a88:	f06f 010d 	mvn.w	r1, #13
 8017a8c:	4610      	mov	r0, r2
 8017a8e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017a90:	69f9      	ldr	r1, [r7, #28]
 8017a92:	488d      	ldr	r0, [pc, #564]	; (8017cc8 <tcp_input+0x7e0>)
 8017a94:	f7ff fbb0 	bl	80171f8 <tcp_pcb_remove>
        tcp_free(pcb);
 8017a98:	69f8      	ldr	r0, [r7, #28]
 8017a9a:	f7fd ff15 	bl	80158c8 <tcp_free>
 8017a9e:	e0c1      	b.n	8017c24 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017aa4:	4b89      	ldr	r3, [pc, #548]	; (8017ccc <tcp_input+0x7e4>)
 8017aa6:	881b      	ldrh	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d01d      	beq.n	8017ae8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017aac:	4b87      	ldr	r3, [pc, #540]	; (8017ccc <tcp_input+0x7e4>)
 8017aae:	881b      	ldrh	r3, [r3, #0]
 8017ab0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d00a      	beq.n	8017ad2 <tcp_input+0x5ea>
 8017abc:	69fb      	ldr	r3, [r7, #28]
 8017abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017ac2:	69fa      	ldr	r2, [r7, #28]
 8017ac4:	6910      	ldr	r0, [r2, #16]
 8017ac6:	89fa      	ldrh	r2, [r7, #14]
 8017ac8:	69f9      	ldr	r1, [r7, #28]
 8017aca:	4798      	blx	r3
 8017acc:	4603      	mov	r3, r0
 8017ace:	74fb      	strb	r3, [r7, #19]
 8017ad0:	e001      	b.n	8017ad6 <tcp_input+0x5ee>
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017ad6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017ada:	f113 0f0d 	cmn.w	r3, #13
 8017ade:	f000 8098 	beq.w	8017c12 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017ae2:	4b7a      	ldr	r3, [pc, #488]	; (8017ccc <tcp_input+0x7e4>)
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017ae8:	69f8      	ldr	r0, [r7, #28]
 8017aea:	f000 f907 	bl	8017cfc <tcp_input_delayed_close>
 8017aee:	4603      	mov	r3, r0
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f040 8090 	bne.w	8017c16 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017af6:	4b76      	ldr	r3, [pc, #472]	; (8017cd0 <tcp_input+0x7e8>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d041      	beq.n	8017b82 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017afe:	69fb      	ldr	r3, [r7, #28]
 8017b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d006      	beq.n	8017b14 <tcp_input+0x62c>
 8017b06:	4b73      	ldr	r3, [pc, #460]	; (8017cd4 <tcp_input+0x7ec>)
 8017b08:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017b0c:	4972      	ldr	r1, [pc, #456]	; (8017cd8 <tcp_input+0x7f0>)
 8017b0e:	4873      	ldr	r0, [pc, #460]	; (8017cdc <tcp_input+0x7f4>)
 8017b10:	f009 fccc 	bl	80214ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	8b5b      	ldrh	r3, [r3, #26]
 8017b18:	f003 0310 	and.w	r3, r3, #16
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d008      	beq.n	8017b32 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017b20:	4b6b      	ldr	r3, [pc, #428]	; (8017cd0 <tcp_input+0x7e8>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7fd fa97 	bl	8015058 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017b2a:	69f8      	ldr	r0, [r7, #28]
 8017b2c:	f7fe fa10 	bl	8015f50 <tcp_abort>
            goto aborted;
 8017b30:	e078      	b.n	8017c24 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d00c      	beq.n	8017b56 <tcp_input+0x66e>
 8017b3c:	69fb      	ldr	r3, [r7, #28]
 8017b3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	6918      	ldr	r0, [r3, #16]
 8017b46:	4b62      	ldr	r3, [pc, #392]	; (8017cd0 <tcp_input+0x7e8>)
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	69f9      	ldr	r1, [r7, #28]
 8017b4e:	47a0      	blx	r4
 8017b50:	4603      	mov	r3, r0
 8017b52:	74fb      	strb	r3, [r7, #19]
 8017b54:	e008      	b.n	8017b68 <tcp_input+0x680>
 8017b56:	4b5e      	ldr	r3, [pc, #376]	; (8017cd0 <tcp_input+0x7e8>)
 8017b58:	681a      	ldr	r2, [r3, #0]
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	69f9      	ldr	r1, [r7, #28]
 8017b5e:	2000      	movs	r0, #0
 8017b60:	f7ff f884 	bl	8016c6c <tcp_recv_null>
 8017b64:	4603      	mov	r3, r0
 8017b66:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017b68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b6c:	f113 0f0d 	cmn.w	r3, #13
 8017b70:	d053      	beq.n	8017c1a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017b72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d003      	beq.n	8017b82 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017b7a:	4b55      	ldr	r3, [pc, #340]	; (8017cd0 <tcp_input+0x7e8>)
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	69fb      	ldr	r3, [r7, #28]
 8017b80:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017b82:	4b50      	ldr	r3, [pc, #320]	; (8017cc4 <tcp_input+0x7dc>)
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	f003 0320 	and.w	r3, r3, #32
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d030      	beq.n	8017bf0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d009      	beq.n	8017baa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b9a:	7b5a      	ldrb	r2, [r3, #13]
 8017b9c:	69fb      	ldr	r3, [r7, #28]
 8017b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ba0:	f042 0220 	orr.w	r2, r2, #32
 8017ba4:	b2d2      	uxtb	r2, r2
 8017ba6:	735a      	strb	r2, [r3, #13]
 8017ba8:	e022      	b.n	8017bf0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017bb2:	d005      	beq.n	8017bc0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bb8:	3301      	adds	r3, #1
 8017bba:	b29a      	uxth	r2, r3
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d00b      	beq.n	8017be2 <tcp_input+0x6fa>
 8017bca:	69fb      	ldr	r3, [r7, #28]
 8017bcc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	6918      	ldr	r0, [r3, #16]
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	69f9      	ldr	r1, [r7, #28]
 8017bda:	47a0      	blx	r4
 8017bdc:	4603      	mov	r3, r0
 8017bde:	74fb      	strb	r3, [r7, #19]
 8017be0:	e001      	b.n	8017be6 <tcp_input+0x6fe>
 8017be2:	2300      	movs	r3, #0
 8017be4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017be6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017bea:	f113 0f0d 	cmn.w	r3, #13
 8017bee:	d016      	beq.n	8017c1e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017bf0:	4b33      	ldr	r3, [pc, #204]	; (8017cc0 <tcp_input+0x7d8>)
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017bf6:	69f8      	ldr	r0, [r7, #28]
 8017bf8:	f000 f880 	bl	8017cfc <tcp_input_delayed_close>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d10f      	bne.n	8017c22 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017c02:	69f8      	ldr	r0, [r7, #28]
 8017c04:	f002 ff10 	bl	801aa28 <tcp_output>
 8017c08:	e00c      	b.n	8017c24 <tcp_input+0x73c>
        goto aborted;
 8017c0a:	bf00      	nop
 8017c0c:	e00a      	b.n	8017c24 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017c0e:	bf00      	nop
 8017c10:	e008      	b.n	8017c24 <tcp_input+0x73c>
              goto aborted;
 8017c12:	bf00      	nop
 8017c14:	e006      	b.n	8017c24 <tcp_input+0x73c>
          goto aborted;
 8017c16:	bf00      	nop
 8017c18:	e004      	b.n	8017c24 <tcp_input+0x73c>
            goto aborted;
 8017c1a:	bf00      	nop
 8017c1c:	e002      	b.n	8017c24 <tcp_input+0x73c>
              goto aborted;
 8017c1e:	bf00      	nop
 8017c20:	e000      	b.n	8017c24 <tcp_input+0x73c>
          goto aborted;
 8017c22:	bf00      	nop
    tcp_input_pcb = NULL;
 8017c24:	4b26      	ldr	r3, [pc, #152]	; (8017cc0 <tcp_input+0x7d8>)
 8017c26:	2200      	movs	r2, #0
 8017c28:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017c2a:	4b29      	ldr	r3, [pc, #164]	; (8017cd0 <tcp_input+0x7e8>)
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017c30:	4b2b      	ldr	r3, [pc, #172]	; (8017ce0 <tcp_input+0x7f8>)
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d03f      	beq.n	8017cb8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8017c38:	4b29      	ldr	r3, [pc, #164]	; (8017ce0 <tcp_input+0x7f8>)
 8017c3a:	685b      	ldr	r3, [r3, #4]
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7fd fa0b 	bl	8015058 <pbuf_free>
      inseg.p = NULL;
 8017c42:	4b27      	ldr	r3, [pc, #156]	; (8017ce0 <tcp_input+0x7f8>)
 8017c44:	2200      	movs	r2, #0
 8017c46:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017c48:	e036      	b.n	8017cb8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017c4a:	4b26      	ldr	r3, [pc, #152]	; (8017ce4 <tcp_input+0x7fc>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	899b      	ldrh	r3, [r3, #12]
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	4618      	mov	r0, r3
 8017c54:	f7fa fe72 	bl	801293c <lwip_htons>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	b2db      	uxtb	r3, r3
 8017c5c:	f003 0304 	and.w	r3, r3, #4
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d118      	bne.n	8017c96 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c64:	4b20      	ldr	r3, [pc, #128]	; (8017ce8 <tcp_input+0x800>)
 8017c66:	6819      	ldr	r1, [r3, #0]
 8017c68:	4b20      	ldr	r3, [pc, #128]	; (8017cec <tcp_input+0x804>)
 8017c6a:	881b      	ldrh	r3, [r3, #0]
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	4b20      	ldr	r3, [pc, #128]	; (8017cf0 <tcp_input+0x808>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c74:	4b1b      	ldr	r3, [pc, #108]	; (8017ce4 <tcp_input+0x7fc>)
 8017c76:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c78:	885b      	ldrh	r3, [r3, #2]
 8017c7a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c7c:	4a19      	ldr	r2, [pc, #100]	; (8017ce4 <tcp_input+0x7fc>)
 8017c7e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c80:	8812      	ldrh	r2, [r2, #0]
 8017c82:	b292      	uxth	r2, r2
 8017c84:	9202      	str	r2, [sp, #8]
 8017c86:	9301      	str	r3, [sp, #4]
 8017c88:	4b1a      	ldr	r3, [pc, #104]	; (8017cf4 <tcp_input+0x80c>)
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	4b1a      	ldr	r3, [pc, #104]	; (8017cf8 <tcp_input+0x810>)
 8017c8e:	4602      	mov	r2, r0
 8017c90:	2000      	movs	r0, #0
 8017c92:	f003 fc7d 	bl	801b590 <tcp_rst>
    pbuf_free(p);
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f7fd f9de 	bl	8015058 <pbuf_free>
  return;
 8017c9c:	e00c      	b.n	8017cb8 <tcp_input+0x7d0>
    goto dropped;
 8017c9e:	bf00      	nop
 8017ca0:	e006      	b.n	8017cb0 <tcp_input+0x7c8>
    goto dropped;
 8017ca2:	bf00      	nop
 8017ca4:	e004      	b.n	8017cb0 <tcp_input+0x7c8>
    goto dropped;
 8017ca6:	bf00      	nop
 8017ca8:	e002      	b.n	8017cb0 <tcp_input+0x7c8>
      goto dropped;
 8017caa:	bf00      	nop
 8017cac:	e000      	b.n	8017cb0 <tcp_input+0x7c8>
      goto dropped;
 8017cae:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f7fd f9d1 	bl	8015058 <pbuf_free>
 8017cb6:	e000      	b.n	8017cba <tcp_input+0x7d2>
  return;
 8017cb8:	bf00      	nop
}
 8017cba:	3724      	adds	r7, #36	; 0x24
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd90      	pop	{r4, r7, pc}
 8017cc0:	20016c60 	.word	0x20016c60
 8017cc4:	200055b5 	.word	0x200055b5
 8017cc8:	20016c4c 	.word	0x20016c4c
 8017ccc:	200055b0 	.word	0x200055b0
 8017cd0:	200055b8 	.word	0x200055b8
 8017cd4:	080255ac 	.word	0x080255ac
 8017cd8:	08025760 	.word	0x08025760
 8017cdc:	080255f8 	.word	0x080255f8
 8017ce0:	20005588 	.word	0x20005588
 8017ce4:	20005598 	.word	0x20005598
 8017ce8:	200055ac 	.word	0x200055ac
 8017cec:	200055b2 	.word	0x200055b2
 8017cf0:	200055a8 	.word	0x200055a8
 8017cf4:	2001347c 	.word	0x2001347c
 8017cf8:	20013480 	.word	0x20013480

08017cfc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d106      	bne.n	8017d18 <tcp_input_delayed_close+0x1c>
 8017d0a:	4b17      	ldr	r3, [pc, #92]	; (8017d68 <tcp_input_delayed_close+0x6c>)
 8017d0c:	f240 225a 	movw	r2, #602	; 0x25a
 8017d10:	4916      	ldr	r1, [pc, #88]	; (8017d6c <tcp_input_delayed_close+0x70>)
 8017d12:	4817      	ldr	r0, [pc, #92]	; (8017d70 <tcp_input_delayed_close+0x74>)
 8017d14:	f009 fbca 	bl	80214ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017d18:	4b16      	ldr	r3, [pc, #88]	; (8017d74 <tcp_input_delayed_close+0x78>)
 8017d1a:	781b      	ldrb	r3, [r3, #0]
 8017d1c:	f003 0310 	and.w	r3, r3, #16
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d01c      	beq.n	8017d5e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	8b5b      	ldrh	r3, [r3, #26]
 8017d28:	f003 0310 	and.w	r3, r3, #16
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d10d      	bne.n	8017d4c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d008      	beq.n	8017d4c <tcp_input_delayed_close+0x50>
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d40:	687a      	ldr	r2, [r7, #4]
 8017d42:	6912      	ldr	r2, [r2, #16]
 8017d44:	f06f 010e 	mvn.w	r1, #14
 8017d48:	4610      	mov	r0, r2
 8017d4a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017d4c:	6879      	ldr	r1, [r7, #4]
 8017d4e:	480a      	ldr	r0, [pc, #40]	; (8017d78 <tcp_input_delayed_close+0x7c>)
 8017d50:	f7ff fa52 	bl	80171f8 <tcp_pcb_remove>
    tcp_free(pcb);
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7fd fdb7 	bl	80158c8 <tcp_free>
    return 1;
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	e000      	b.n	8017d60 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017d5e:	2300      	movs	r3, #0
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3708      	adds	r7, #8
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}
 8017d68:	080255ac 	.word	0x080255ac
 8017d6c:	0802577c 	.word	0x0802577c
 8017d70:	080255f8 	.word	0x080255f8
 8017d74:	200055b5 	.word	0x200055b5
 8017d78:	20016c4c 	.word	0x20016c4c

08017d7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017d7c:	b590      	push	{r4, r7, lr}
 8017d7e:	b08b      	sub	sp, #44	; 0x2c
 8017d80:	af04      	add	r7, sp, #16
 8017d82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017d84:	4b6f      	ldr	r3, [pc, #444]	; (8017f44 <tcp_listen_input+0x1c8>)
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	f003 0304 	and.w	r3, r3, #4
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	f040 80d2 	bne.w	8017f36 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d106      	bne.n	8017da6 <tcp_listen_input+0x2a>
 8017d98:	4b6b      	ldr	r3, [pc, #428]	; (8017f48 <tcp_listen_input+0x1cc>)
 8017d9a:	f240 2281 	movw	r2, #641	; 0x281
 8017d9e:	496b      	ldr	r1, [pc, #428]	; (8017f4c <tcp_listen_input+0x1d0>)
 8017da0:	486b      	ldr	r0, [pc, #428]	; (8017f50 <tcp_listen_input+0x1d4>)
 8017da2:	f009 fb83 	bl	80214ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017da6:	4b67      	ldr	r3, [pc, #412]	; (8017f44 <tcp_listen_input+0x1c8>)
 8017da8:	781b      	ldrb	r3, [r3, #0]
 8017daa:	f003 0310 	and.w	r3, r3, #16
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d019      	beq.n	8017de6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017db2:	4b68      	ldr	r3, [pc, #416]	; (8017f54 <tcp_listen_input+0x1d8>)
 8017db4:	6819      	ldr	r1, [r3, #0]
 8017db6:	4b68      	ldr	r3, [pc, #416]	; (8017f58 <tcp_listen_input+0x1dc>)
 8017db8:	881b      	ldrh	r3, [r3, #0]
 8017dba:	461a      	mov	r2, r3
 8017dbc:	4b67      	ldr	r3, [pc, #412]	; (8017f5c <tcp_listen_input+0x1e0>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017dc2:	4b67      	ldr	r3, [pc, #412]	; (8017f60 <tcp_listen_input+0x1e4>)
 8017dc4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017dc6:	885b      	ldrh	r3, [r3, #2]
 8017dc8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017dca:	4a65      	ldr	r2, [pc, #404]	; (8017f60 <tcp_listen_input+0x1e4>)
 8017dcc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017dce:	8812      	ldrh	r2, [r2, #0]
 8017dd0:	b292      	uxth	r2, r2
 8017dd2:	9202      	str	r2, [sp, #8]
 8017dd4:	9301      	str	r3, [sp, #4]
 8017dd6:	4b63      	ldr	r3, [pc, #396]	; (8017f64 <tcp_listen_input+0x1e8>)
 8017dd8:	9300      	str	r3, [sp, #0]
 8017dda:	4b63      	ldr	r3, [pc, #396]	; (8017f68 <tcp_listen_input+0x1ec>)
 8017ddc:	4602      	mov	r2, r0
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f003 fbd6 	bl	801b590 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017de4:	e0a9      	b.n	8017f3a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017de6:	4b57      	ldr	r3, [pc, #348]	; (8017f44 <tcp_listen_input+0x1c8>)
 8017de8:	781b      	ldrb	r3, [r3, #0]
 8017dea:	f003 0302 	and.w	r3, r3, #2
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	f000 80a3 	beq.w	8017f3a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	7d5b      	ldrb	r3, [r3, #21]
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7ff f85b 	bl	8016eb4 <tcp_alloc>
 8017dfe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017e00:	697b      	ldr	r3, [r7, #20]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d111      	bne.n	8017e2a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	699b      	ldr	r3, [r3, #24]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d00a      	beq.n	8017e24 <tcp_listen_input+0xa8>
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	699b      	ldr	r3, [r3, #24]
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	6910      	ldr	r0, [r2, #16]
 8017e16:	f04f 32ff 	mov.w	r2, #4294967295
 8017e1a:	2100      	movs	r1, #0
 8017e1c:	4798      	blx	r3
 8017e1e:	4603      	mov	r3, r0
 8017e20:	73bb      	strb	r3, [r7, #14]
      return;
 8017e22:	e08b      	b.n	8017f3c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017e24:	23f0      	movs	r3, #240	; 0xf0
 8017e26:	73bb      	strb	r3, [r7, #14]
      return;
 8017e28:	e088      	b.n	8017f3c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017e2a:	4b50      	ldr	r3, [pc, #320]	; (8017f6c <tcp_listen_input+0x1f0>)
 8017e2c:	695a      	ldr	r2, [r3, #20]
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017e32:	4b4e      	ldr	r3, [pc, #312]	; (8017f6c <tcp_listen_input+0x1f0>)
 8017e34:	691a      	ldr	r2, [r3, #16]
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	8ada      	ldrh	r2, [r3, #22]
 8017e3e:	697b      	ldr	r3, [r7, #20]
 8017e40:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017e42:	4b47      	ldr	r3, [pc, #284]	; (8017f60 <tcp_listen_input+0x1e4>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	881b      	ldrh	r3, [r3, #0]
 8017e48:	b29a      	uxth	r2, r3
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	2203      	movs	r2, #3
 8017e52:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017e54:	4b41      	ldr	r3, [pc, #260]	; (8017f5c <tcp_listen_input+0x1e0>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	1c5a      	adds	r2, r3, #1
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017e66:	6978      	ldr	r0, [r7, #20]
 8017e68:	f7ff fa5a 	bl	8017320 <tcp_next_iss>
 8017e6c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	693a      	ldr	r2, [r7, #16]
 8017e72:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	693a      	ldr	r2, [r7, #16]
 8017e78:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8017e7a:	697b      	ldr	r3, [r7, #20]
 8017e7c:	693a      	ldr	r2, [r7, #16]
 8017e7e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017e80:	697b      	ldr	r3, [r7, #20]
 8017e82:	693a      	ldr	r2, [r7, #16]
 8017e84:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017e86:	4b35      	ldr	r3, [pc, #212]	; (8017f5c <tcp_listen_input+0x1e0>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	1e5a      	subs	r2, r3, #1
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	691a      	ldr	r2, [r3, #16]
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	687a      	ldr	r2, [r7, #4]
 8017e9c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	7a5b      	ldrb	r3, [r3, #9]
 8017ea2:	f003 030c 	and.w	r3, r3, #12
 8017ea6:	b2da      	uxtb	r2, r3
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	7a1a      	ldrb	r2, [r3, #8]
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017eb4:	4b2e      	ldr	r3, [pc, #184]	; (8017f70 <tcp_listen_input+0x1f4>)
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	60da      	str	r2, [r3, #12]
 8017ebc:	4a2c      	ldr	r2, [pc, #176]	; (8017f70 <tcp_listen_input+0x1f4>)
 8017ebe:	697b      	ldr	r3, [r7, #20]
 8017ec0:	6013      	str	r3, [r2, #0]
 8017ec2:	f003 fd27 	bl	801b914 <tcp_timer_needed>
 8017ec6:	4b2b      	ldr	r3, [pc, #172]	; (8017f74 <tcp_listen_input+0x1f8>)
 8017ec8:	2201      	movs	r2, #1
 8017eca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017ecc:	6978      	ldr	r0, [r7, #20]
 8017ece:	f001 fd8d 	bl	80199ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017ed2:	4b23      	ldr	r3, [pc, #140]	; (8017f60 <tcp_listen_input+0x1e4>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	89db      	ldrh	r3, [r3, #14]
 8017ed8:	b29a      	uxth	r2, r3
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	3304      	adds	r3, #4
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f007 fbc7 	bl	801f688 <ip4_route>
 8017efa:	4601      	mov	r1, r0
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	3304      	adds	r3, #4
 8017f00:	461a      	mov	r2, r3
 8017f02:	4620      	mov	r0, r4
 8017f04:	f7ff fa32 	bl	801736c <tcp_eff_send_mss_netif>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	461a      	mov	r2, r3
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017f10:	2112      	movs	r1, #18
 8017f12:	6978      	ldr	r0, [r7, #20]
 8017f14:	f002 fc9a 	bl	801a84c <tcp_enqueue_flags>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d004      	beq.n	8017f2e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017f24:	2100      	movs	r1, #0
 8017f26:	6978      	ldr	r0, [r7, #20]
 8017f28:	f7fd ff54 	bl	8015dd4 <tcp_abandon>
      return;
 8017f2c:	e006      	b.n	8017f3c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017f2e:	6978      	ldr	r0, [r7, #20]
 8017f30:	f002 fd7a 	bl	801aa28 <tcp_output>
  return;
 8017f34:	e001      	b.n	8017f3a <tcp_listen_input+0x1be>
    return;
 8017f36:	bf00      	nop
 8017f38:	e000      	b.n	8017f3c <tcp_listen_input+0x1c0>
  return;
 8017f3a:	bf00      	nop
}
 8017f3c:	371c      	adds	r7, #28
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd90      	pop	{r4, r7, pc}
 8017f42:	bf00      	nop
 8017f44:	200055b4 	.word	0x200055b4
 8017f48:	080255ac 	.word	0x080255ac
 8017f4c:	080257a4 	.word	0x080257a4
 8017f50:	080255f8 	.word	0x080255f8
 8017f54:	200055ac 	.word	0x200055ac
 8017f58:	200055b2 	.word	0x200055b2
 8017f5c:	200055a8 	.word	0x200055a8
 8017f60:	20005598 	.word	0x20005598
 8017f64:	2001347c 	.word	0x2001347c
 8017f68:	20013480 	.word	0x20013480
 8017f6c:	2001346c 	.word	0x2001346c
 8017f70:	20016c4c 	.word	0x20016c4c
 8017f74:	20016c48 	.word	0x20016c48

08017f78 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b086      	sub	sp, #24
 8017f7c:	af04      	add	r7, sp, #16
 8017f7e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017f80:	4b2f      	ldr	r3, [pc, #188]	; (8018040 <tcp_timewait_input+0xc8>)
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	f003 0304 	and.w	r3, r3, #4
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d153      	bne.n	8018034 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d106      	bne.n	8017fa0 <tcp_timewait_input+0x28>
 8017f92:	4b2c      	ldr	r3, [pc, #176]	; (8018044 <tcp_timewait_input+0xcc>)
 8017f94:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017f98:	492b      	ldr	r1, [pc, #172]	; (8018048 <tcp_timewait_input+0xd0>)
 8017f9a:	482c      	ldr	r0, [pc, #176]	; (801804c <tcp_timewait_input+0xd4>)
 8017f9c:	f009 fa86 	bl	80214ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017fa0:	4b27      	ldr	r3, [pc, #156]	; (8018040 <tcp_timewait_input+0xc8>)
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	f003 0302 	and.w	r3, r3, #2
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d02a      	beq.n	8018002 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017fac:	4b28      	ldr	r3, [pc, #160]	; (8018050 <tcp_timewait_input+0xd8>)
 8017fae:	681a      	ldr	r2, [r3, #0]
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fb4:	1ad3      	subs	r3, r2, r3
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	db2d      	blt.n	8018016 <tcp_timewait_input+0x9e>
 8017fba:	4b25      	ldr	r3, [pc, #148]	; (8018050 <tcp_timewait_input+0xd8>)
 8017fbc:	681a      	ldr	r2, [r3, #0]
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fc2:	6879      	ldr	r1, [r7, #4]
 8017fc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017fc6:	440b      	add	r3, r1
 8017fc8:	1ad3      	subs	r3, r2, r3
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	dc23      	bgt.n	8018016 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017fce:	4b21      	ldr	r3, [pc, #132]	; (8018054 <tcp_timewait_input+0xdc>)
 8017fd0:	6819      	ldr	r1, [r3, #0]
 8017fd2:	4b21      	ldr	r3, [pc, #132]	; (8018058 <tcp_timewait_input+0xe0>)
 8017fd4:	881b      	ldrh	r3, [r3, #0]
 8017fd6:	461a      	mov	r2, r3
 8017fd8:	4b1d      	ldr	r3, [pc, #116]	; (8018050 <tcp_timewait_input+0xd8>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017fde:	4b1f      	ldr	r3, [pc, #124]	; (801805c <tcp_timewait_input+0xe4>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017fe2:	885b      	ldrh	r3, [r3, #2]
 8017fe4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017fe6:	4a1d      	ldr	r2, [pc, #116]	; (801805c <tcp_timewait_input+0xe4>)
 8017fe8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017fea:	8812      	ldrh	r2, [r2, #0]
 8017fec:	b292      	uxth	r2, r2
 8017fee:	9202      	str	r2, [sp, #8]
 8017ff0:	9301      	str	r3, [sp, #4]
 8017ff2:	4b1b      	ldr	r3, [pc, #108]	; (8018060 <tcp_timewait_input+0xe8>)
 8017ff4:	9300      	str	r3, [sp, #0]
 8017ff6:	4b1b      	ldr	r3, [pc, #108]	; (8018064 <tcp_timewait_input+0xec>)
 8017ff8:	4602      	mov	r2, r0
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f003 fac8 	bl	801b590 <tcp_rst>
      return;
 8018000:	e01b      	b.n	801803a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018002:	4b0f      	ldr	r3, [pc, #60]	; (8018040 <tcp_timewait_input+0xc8>)
 8018004:	781b      	ldrb	r3, [r3, #0]
 8018006:	f003 0301 	and.w	r3, r3, #1
 801800a:	2b00      	cmp	r3, #0
 801800c:	d003      	beq.n	8018016 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801800e:	4b16      	ldr	r3, [pc, #88]	; (8018068 <tcp_timewait_input+0xf0>)
 8018010:	681a      	ldr	r2, [r3, #0]
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018016:	4b10      	ldr	r3, [pc, #64]	; (8018058 <tcp_timewait_input+0xe0>)
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d00c      	beq.n	8018038 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	8b5b      	ldrh	r3, [r3, #26]
 8018022:	f043 0302 	orr.w	r3, r3, #2
 8018026:	b29a      	uxth	r2, r3
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	f002 fcfb 	bl	801aa28 <tcp_output>
  }
  return;
 8018032:	e001      	b.n	8018038 <tcp_timewait_input+0xc0>
    return;
 8018034:	bf00      	nop
 8018036:	e000      	b.n	801803a <tcp_timewait_input+0xc2>
  return;
 8018038:	bf00      	nop
}
 801803a:	3708      	adds	r7, #8
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}
 8018040:	200055b4 	.word	0x200055b4
 8018044:	080255ac 	.word	0x080255ac
 8018048:	080257c4 	.word	0x080257c4
 801804c:	080255f8 	.word	0x080255f8
 8018050:	200055a8 	.word	0x200055a8
 8018054:	200055ac 	.word	0x200055ac
 8018058:	200055b2 	.word	0x200055b2
 801805c:	20005598 	.word	0x20005598
 8018060:	2001347c 	.word	0x2001347c
 8018064:	20013480 	.word	0x20013480
 8018068:	20016c50 	.word	0x20016c50

0801806c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801806c:	b590      	push	{r4, r7, lr}
 801806e:	b08d      	sub	sp, #52	; 0x34
 8018070:	af04      	add	r7, sp, #16
 8018072:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018074:	2300      	movs	r3, #0
 8018076:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018078:	2300      	movs	r3, #0
 801807a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d106      	bne.n	8018090 <tcp_process+0x24>
 8018082:	4ba5      	ldr	r3, [pc, #660]	; (8018318 <tcp_process+0x2ac>)
 8018084:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018088:	49a4      	ldr	r1, [pc, #656]	; (801831c <tcp_process+0x2b0>)
 801808a:	48a5      	ldr	r0, [pc, #660]	; (8018320 <tcp_process+0x2b4>)
 801808c:	f009 fa0e 	bl	80214ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018090:	4ba4      	ldr	r3, [pc, #656]	; (8018324 <tcp_process+0x2b8>)
 8018092:	781b      	ldrb	r3, [r3, #0]
 8018094:	f003 0304 	and.w	r3, r3, #4
 8018098:	2b00      	cmp	r3, #0
 801809a:	d04e      	beq.n	801813a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	7d1b      	ldrb	r3, [r3, #20]
 80180a0:	2b02      	cmp	r3, #2
 80180a2:	d108      	bne.n	80180b6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80180a8:	4b9f      	ldr	r3, [pc, #636]	; (8018328 <tcp_process+0x2bc>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d123      	bne.n	80180f8 <tcp_process+0x8c>
        acceptable = 1;
 80180b0:	2301      	movs	r3, #1
 80180b2:	76fb      	strb	r3, [r7, #27]
 80180b4:	e020      	b.n	80180f8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180ba:	4b9c      	ldr	r3, [pc, #624]	; (801832c <tcp_process+0x2c0>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d102      	bne.n	80180c8 <tcp_process+0x5c>
        acceptable = 1;
 80180c2:	2301      	movs	r3, #1
 80180c4:	76fb      	strb	r3, [r7, #27]
 80180c6:	e017      	b.n	80180f8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80180c8:	4b98      	ldr	r3, [pc, #608]	; (801832c <tcp_process+0x2c0>)
 80180ca:	681a      	ldr	r2, [r3, #0]
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180d0:	1ad3      	subs	r3, r2, r3
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	db10      	blt.n	80180f8 <tcp_process+0x8c>
 80180d6:	4b95      	ldr	r3, [pc, #596]	; (801832c <tcp_process+0x2c0>)
 80180d8:	681a      	ldr	r2, [r3, #0]
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180de:	6879      	ldr	r1, [r7, #4]
 80180e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80180e2:	440b      	add	r3, r1
 80180e4:	1ad3      	subs	r3, r2, r3
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	dc06      	bgt.n	80180f8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	8b5b      	ldrh	r3, [r3, #26]
 80180ee:	f043 0302 	orr.w	r3, r3, #2
 80180f2:	b29a      	uxth	r2, r3
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80180f8:	7efb      	ldrb	r3, [r7, #27]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d01b      	beq.n	8018136 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	7d1b      	ldrb	r3, [r3, #20]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d106      	bne.n	8018114 <tcp_process+0xa8>
 8018106:	4b84      	ldr	r3, [pc, #528]	; (8018318 <tcp_process+0x2ac>)
 8018108:	f44f 724e 	mov.w	r2, #824	; 0x338
 801810c:	4988      	ldr	r1, [pc, #544]	; (8018330 <tcp_process+0x2c4>)
 801810e:	4884      	ldr	r0, [pc, #528]	; (8018320 <tcp_process+0x2b4>)
 8018110:	f009 f9cc 	bl	80214ac <iprintf>
      recv_flags |= TF_RESET;
 8018114:	4b87      	ldr	r3, [pc, #540]	; (8018334 <tcp_process+0x2c8>)
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	f043 0308 	orr.w	r3, r3, #8
 801811c:	b2da      	uxtb	r2, r3
 801811e:	4b85      	ldr	r3, [pc, #532]	; (8018334 <tcp_process+0x2c8>)
 8018120:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	8b5b      	ldrh	r3, [r3, #26]
 8018126:	f023 0301 	bic.w	r3, r3, #1
 801812a:	b29a      	uxth	r2, r3
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018130:	f06f 030d 	mvn.w	r3, #13
 8018134:	e37a      	b.n	801882c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018136:	2300      	movs	r3, #0
 8018138:	e378      	b.n	801882c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801813a:	4b7a      	ldr	r3, [pc, #488]	; (8018324 <tcp_process+0x2b8>)
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	f003 0302 	and.w	r3, r3, #2
 8018142:	2b00      	cmp	r3, #0
 8018144:	d010      	beq.n	8018168 <tcp_process+0xfc>
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	7d1b      	ldrb	r3, [r3, #20]
 801814a:	2b02      	cmp	r3, #2
 801814c:	d00c      	beq.n	8018168 <tcp_process+0xfc>
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	7d1b      	ldrb	r3, [r3, #20]
 8018152:	2b03      	cmp	r3, #3
 8018154:	d008      	beq.n	8018168 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	8b5b      	ldrh	r3, [r3, #26]
 801815a:	f043 0302 	orr.w	r3, r3, #2
 801815e:	b29a      	uxth	r2, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018164:	2300      	movs	r3, #0
 8018166:	e361      	b.n	801882c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	8b5b      	ldrh	r3, [r3, #26]
 801816c:	f003 0310 	and.w	r3, r3, #16
 8018170:	2b00      	cmp	r3, #0
 8018172:	d103      	bne.n	801817c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018174:	4b70      	ldr	r3, [pc, #448]	; (8018338 <tcp_process+0x2cc>)
 8018176:	681a      	ldr	r2, [r3, #0]
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	2200      	movs	r2, #0
 8018180:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2200      	movs	r2, #0
 8018188:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f001 fc2d 	bl	80199ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	7d1b      	ldrb	r3, [r3, #20]
 8018196:	3b02      	subs	r3, #2
 8018198:	2b07      	cmp	r3, #7
 801819a:	f200 8337 	bhi.w	801880c <tcp_process+0x7a0>
 801819e:	a201      	add	r2, pc, #4	; (adr r2, 80181a4 <tcp_process+0x138>)
 80181a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a4:	080181c5 	.word	0x080181c5
 80181a8:	080183f5 	.word	0x080183f5
 80181ac:	0801856d 	.word	0x0801856d
 80181b0:	08018597 	.word	0x08018597
 80181b4:	080186bb 	.word	0x080186bb
 80181b8:	0801856d 	.word	0x0801856d
 80181bc:	08018747 	.word	0x08018747
 80181c0:	080187d7 	.word	0x080187d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80181c4:	4b57      	ldr	r3, [pc, #348]	; (8018324 <tcp_process+0x2b8>)
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	f003 0310 	and.w	r3, r3, #16
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	f000 80e4 	beq.w	801839a <tcp_process+0x32e>
 80181d2:	4b54      	ldr	r3, [pc, #336]	; (8018324 <tcp_process+0x2b8>)
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	f003 0302 	and.w	r3, r3, #2
 80181da:	2b00      	cmp	r3, #0
 80181dc:	f000 80dd 	beq.w	801839a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181e4:	1c5a      	adds	r2, r3, #1
 80181e6:	4b50      	ldr	r3, [pc, #320]	; (8018328 <tcp_process+0x2bc>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	f040 80d5 	bne.w	801839a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80181f0:	4b4e      	ldr	r3, [pc, #312]	; (801832c <tcp_process+0x2c0>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	1c5a      	adds	r2, r3, #1
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018202:	4b49      	ldr	r3, [pc, #292]	; (8018328 <tcp_process+0x2bc>)
 8018204:	681a      	ldr	r2, [r3, #0]
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801820a:	4b4c      	ldr	r3, [pc, #304]	; (801833c <tcp_process+0x2d0>)
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	89db      	ldrh	r3, [r3, #14]
 8018210:	b29a      	uxth	r2, r3
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018224:	4b41      	ldr	r3, [pc, #260]	; (801832c <tcp_process+0x2c0>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	1e5a      	subs	r2, r3, #1
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	2204      	movs	r2, #4
 8018232:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	3304      	adds	r3, #4
 801823c:	4618      	mov	r0, r3
 801823e:	f007 fa23 	bl	801f688 <ip4_route>
 8018242:	4601      	mov	r1, r0
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	3304      	adds	r3, #4
 8018248:	461a      	mov	r2, r3
 801824a:	4620      	mov	r0, r4
 801824c:	f7ff f88e 	bl	801736c <tcp_eff_send_mss_netif>
 8018250:	4603      	mov	r3, r0
 8018252:	461a      	mov	r2, r3
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801825c:	009a      	lsls	r2, r3, #2
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018262:	005b      	lsls	r3, r3, #1
 8018264:	f241 111c 	movw	r1, #4380	; 0x111c
 8018268:	428b      	cmp	r3, r1
 801826a:	bf38      	it	cc
 801826c:	460b      	movcc	r3, r1
 801826e:	429a      	cmp	r2, r3
 8018270:	d204      	bcs.n	801827c <tcp_process+0x210>
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	b29b      	uxth	r3, r3
 801827a:	e00d      	b.n	8018298 <tcp_process+0x22c>
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018280:	005b      	lsls	r3, r3, #1
 8018282:	f241 121c 	movw	r2, #4380	; 0x111c
 8018286:	4293      	cmp	r3, r2
 8018288:	d904      	bls.n	8018294 <tcp_process+0x228>
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801828e:	005b      	lsls	r3, r3, #1
 8018290:	b29b      	uxth	r3, r3
 8018292:	e001      	b.n	8018298 <tcp_process+0x22c>
 8018294:	f241 131c 	movw	r3, #4380	; 0x111c
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d106      	bne.n	80182b6 <tcp_process+0x24a>
 80182a8:	4b1b      	ldr	r3, [pc, #108]	; (8018318 <tcp_process+0x2ac>)
 80182aa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80182ae:	4924      	ldr	r1, [pc, #144]	; (8018340 <tcp_process+0x2d4>)
 80182b0:	481b      	ldr	r0, [pc, #108]	; (8018320 <tcp_process+0x2b4>)
 80182b2:	f009 f8fb 	bl	80214ac <iprintf>
        --pcb->snd_queuelen;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182bc:	3b01      	subs	r3, #1
 80182be:	b29a      	uxth	r2, r3
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182ca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80182cc:	69fb      	ldr	r3, [r7, #28]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d111      	bne.n	80182f6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182d6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80182d8:	69fb      	ldr	r3, [r7, #28]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d106      	bne.n	80182ec <tcp_process+0x280>
 80182de:	4b0e      	ldr	r3, [pc, #56]	; (8018318 <tcp_process+0x2ac>)
 80182e0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80182e4:	4917      	ldr	r1, [pc, #92]	; (8018344 <tcp_process+0x2d8>)
 80182e6:	480e      	ldr	r0, [pc, #56]	; (8018320 <tcp_process+0x2b4>)
 80182e8:	f009 f8e0 	bl	80214ac <iprintf>
          pcb->unsent = rseg->next;
 80182ec:	69fb      	ldr	r3, [r7, #28]
 80182ee:	681a      	ldr	r2, [r3, #0]
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80182f4:	e003      	b.n	80182fe <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80182f6:	69fb      	ldr	r3, [r7, #28]
 80182f8:	681a      	ldr	r2, [r3, #0]
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80182fe:	69f8      	ldr	r0, [r7, #28]
 8018300:	f7fe fc6f 	bl	8016be2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018308:	2b00      	cmp	r3, #0
 801830a:	d11d      	bne.n	8018348 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018312:	861a      	strh	r2, [r3, #48]	; 0x30
 8018314:	e01f      	b.n	8018356 <tcp_process+0x2ea>
 8018316:	bf00      	nop
 8018318:	080255ac 	.word	0x080255ac
 801831c:	080257e4 	.word	0x080257e4
 8018320:	080255f8 	.word	0x080255f8
 8018324:	200055b4 	.word	0x200055b4
 8018328:	200055ac 	.word	0x200055ac
 801832c:	200055a8 	.word	0x200055a8
 8018330:	08025800 	.word	0x08025800
 8018334:	200055b5 	.word	0x200055b5
 8018338:	20016c50 	.word	0x20016c50
 801833c:	20005598 	.word	0x20005598
 8018340:	08025820 	.word	0x08025820
 8018344:	08025838 	.word	0x08025838
        } else {
          pcb->rtime = 0;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	2200      	movs	r2, #0
 801834c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	2200      	movs	r2, #0
 8018352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801835c:	2b00      	cmp	r3, #0
 801835e:	d00a      	beq.n	8018376 <tcp_process+0x30a>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018366:	687a      	ldr	r2, [r7, #4]
 8018368:	6910      	ldr	r0, [r2, #16]
 801836a:	2200      	movs	r2, #0
 801836c:	6879      	ldr	r1, [r7, #4]
 801836e:	4798      	blx	r3
 8018370:	4603      	mov	r3, r0
 8018372:	76bb      	strb	r3, [r7, #26]
 8018374:	e001      	b.n	801837a <tcp_process+0x30e>
 8018376:	2300      	movs	r3, #0
 8018378:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801837a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801837e:	f113 0f0d 	cmn.w	r3, #13
 8018382:	d102      	bne.n	801838a <tcp_process+0x31e>
          return ERR_ABRT;
 8018384:	f06f 030c 	mvn.w	r3, #12
 8018388:	e250      	b.n	801882c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	8b5b      	ldrh	r3, [r3, #26]
 801838e:	f043 0302 	orr.w	r3, r3, #2
 8018392:	b29a      	uxth	r2, r3
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018398:	e23a      	b.n	8018810 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801839a:	4b9d      	ldr	r3, [pc, #628]	; (8018610 <tcp_process+0x5a4>)
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	f003 0310 	and.w	r3, r3, #16
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	f000 8234 	beq.w	8018810 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183a8:	4b9a      	ldr	r3, [pc, #616]	; (8018614 <tcp_process+0x5a8>)
 80183aa:	6819      	ldr	r1, [r3, #0]
 80183ac:	4b9a      	ldr	r3, [pc, #616]	; (8018618 <tcp_process+0x5ac>)
 80183ae:	881b      	ldrh	r3, [r3, #0]
 80183b0:	461a      	mov	r2, r3
 80183b2:	4b9a      	ldr	r3, [pc, #616]	; (801861c <tcp_process+0x5b0>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183b8:	4b99      	ldr	r3, [pc, #612]	; (8018620 <tcp_process+0x5b4>)
 80183ba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183bc:	885b      	ldrh	r3, [r3, #2]
 80183be:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183c0:	4a97      	ldr	r2, [pc, #604]	; (8018620 <tcp_process+0x5b4>)
 80183c2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183c4:	8812      	ldrh	r2, [r2, #0]
 80183c6:	b292      	uxth	r2, r2
 80183c8:	9202      	str	r2, [sp, #8]
 80183ca:	9301      	str	r3, [sp, #4]
 80183cc:	4b95      	ldr	r3, [pc, #596]	; (8018624 <tcp_process+0x5b8>)
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	4b95      	ldr	r3, [pc, #596]	; (8018628 <tcp_process+0x5bc>)
 80183d2:	4602      	mov	r2, r0
 80183d4:	6878      	ldr	r0, [r7, #4]
 80183d6:	f003 f8db 	bl	801b590 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80183e0:	2b05      	cmp	r3, #5
 80183e2:	f200 8215 	bhi.w	8018810 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	2200      	movs	r2, #0
 80183ea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f002 fea5 	bl	801b13c <tcp_rexmit_rto>
      break;
 80183f2:	e20d      	b.n	8018810 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80183f4:	4b86      	ldr	r3, [pc, #536]	; (8018610 <tcp_process+0x5a4>)
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	f003 0310 	and.w	r3, r3, #16
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	f000 80a1 	beq.w	8018544 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018402:	4b84      	ldr	r3, [pc, #528]	; (8018614 <tcp_process+0x5a8>)
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801840a:	1ad3      	subs	r3, r2, r3
 801840c:	3b01      	subs	r3, #1
 801840e:	2b00      	cmp	r3, #0
 8018410:	db7e      	blt.n	8018510 <tcp_process+0x4a4>
 8018412:	4b80      	ldr	r3, [pc, #512]	; (8018614 <tcp_process+0x5a8>)
 8018414:	681a      	ldr	r2, [r3, #0]
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801841a:	1ad3      	subs	r3, r2, r3
 801841c:	2b00      	cmp	r3, #0
 801841e:	dc77      	bgt.n	8018510 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2204      	movs	r2, #4
 8018424:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801842a:	2b00      	cmp	r3, #0
 801842c:	d102      	bne.n	8018434 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801842e:	23fa      	movs	r3, #250	; 0xfa
 8018430:	76bb      	strb	r3, [r7, #26]
 8018432:	e01d      	b.n	8018470 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018438:	699b      	ldr	r3, [r3, #24]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d106      	bne.n	801844c <tcp_process+0x3e0>
 801843e:	4b7b      	ldr	r3, [pc, #492]	; (801862c <tcp_process+0x5c0>)
 8018440:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018444:	497a      	ldr	r1, [pc, #488]	; (8018630 <tcp_process+0x5c4>)
 8018446:	487b      	ldr	r0, [pc, #492]	; (8018634 <tcp_process+0x5c8>)
 8018448:	f009 f830 	bl	80214ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018450:	699b      	ldr	r3, [r3, #24]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d00a      	beq.n	801846c <tcp_process+0x400>
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801845a:	699b      	ldr	r3, [r3, #24]
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	6910      	ldr	r0, [r2, #16]
 8018460:	2200      	movs	r2, #0
 8018462:	6879      	ldr	r1, [r7, #4]
 8018464:	4798      	blx	r3
 8018466:	4603      	mov	r3, r0
 8018468:	76bb      	strb	r3, [r7, #26]
 801846a:	e001      	b.n	8018470 <tcp_process+0x404>
 801846c:	23f0      	movs	r3, #240	; 0xf0
 801846e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018470:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d00a      	beq.n	801848e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018478:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801847c:	f113 0f0d 	cmn.w	r3, #13
 8018480:	d002      	beq.n	8018488 <tcp_process+0x41c>
              tcp_abort(pcb);
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f7fd fd64 	bl	8015f50 <tcp_abort>
            }
            return ERR_ABRT;
 8018488:	f06f 030c 	mvn.w	r3, #12
 801848c:	e1ce      	b.n	801882c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801848e:	6878      	ldr	r0, [r7, #4]
 8018490:	f000 fae0 	bl	8018a54 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018494:	4b68      	ldr	r3, [pc, #416]	; (8018638 <tcp_process+0x5cc>)
 8018496:	881b      	ldrh	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d005      	beq.n	80184a8 <tcp_process+0x43c>
            recv_acked--;
 801849c:	4b66      	ldr	r3, [pc, #408]	; (8018638 <tcp_process+0x5cc>)
 801849e:	881b      	ldrh	r3, [r3, #0]
 80184a0:	3b01      	subs	r3, #1
 80184a2:	b29a      	uxth	r2, r3
 80184a4:	4b64      	ldr	r3, [pc, #400]	; (8018638 <tcp_process+0x5cc>)
 80184a6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184ac:	009a      	lsls	r2, r3, #2
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184b2:	005b      	lsls	r3, r3, #1
 80184b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80184b8:	428b      	cmp	r3, r1
 80184ba:	bf38      	it	cc
 80184bc:	460b      	movcc	r3, r1
 80184be:	429a      	cmp	r2, r3
 80184c0:	d204      	bcs.n	80184cc <tcp_process+0x460>
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184c6:	009b      	lsls	r3, r3, #2
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	e00d      	b.n	80184e8 <tcp_process+0x47c>
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184d0:	005b      	lsls	r3, r3, #1
 80184d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80184d6:	4293      	cmp	r3, r2
 80184d8:	d904      	bls.n	80184e4 <tcp_process+0x478>
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184de:	005b      	lsls	r3, r3, #1
 80184e0:	b29b      	uxth	r3, r3
 80184e2:	e001      	b.n	80184e8 <tcp_process+0x47c>
 80184e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80184ee:	4b53      	ldr	r3, [pc, #332]	; (801863c <tcp_process+0x5d0>)
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	f003 0320 	and.w	r3, r3, #32
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d037      	beq.n	801856a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	8b5b      	ldrh	r3, [r3, #26]
 80184fe:	f043 0302 	orr.w	r3, r3, #2
 8018502:	b29a      	uxth	r2, r3
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	2207      	movs	r2, #7
 801850c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801850e:	e02c      	b.n	801856a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018510:	4b40      	ldr	r3, [pc, #256]	; (8018614 <tcp_process+0x5a8>)
 8018512:	6819      	ldr	r1, [r3, #0]
 8018514:	4b40      	ldr	r3, [pc, #256]	; (8018618 <tcp_process+0x5ac>)
 8018516:	881b      	ldrh	r3, [r3, #0]
 8018518:	461a      	mov	r2, r3
 801851a:	4b40      	ldr	r3, [pc, #256]	; (801861c <tcp_process+0x5b0>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018520:	4b3f      	ldr	r3, [pc, #252]	; (8018620 <tcp_process+0x5b4>)
 8018522:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018524:	885b      	ldrh	r3, [r3, #2]
 8018526:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018528:	4a3d      	ldr	r2, [pc, #244]	; (8018620 <tcp_process+0x5b4>)
 801852a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801852c:	8812      	ldrh	r2, [r2, #0]
 801852e:	b292      	uxth	r2, r2
 8018530:	9202      	str	r2, [sp, #8]
 8018532:	9301      	str	r3, [sp, #4]
 8018534:	4b3b      	ldr	r3, [pc, #236]	; (8018624 <tcp_process+0x5b8>)
 8018536:	9300      	str	r3, [sp, #0]
 8018538:	4b3b      	ldr	r3, [pc, #236]	; (8018628 <tcp_process+0x5bc>)
 801853a:	4602      	mov	r2, r0
 801853c:	6878      	ldr	r0, [r7, #4]
 801853e:	f003 f827 	bl	801b590 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018542:	e167      	b.n	8018814 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018544:	4b32      	ldr	r3, [pc, #200]	; (8018610 <tcp_process+0x5a4>)
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	f003 0302 	and.w	r3, r3, #2
 801854c:	2b00      	cmp	r3, #0
 801854e:	f000 8161 	beq.w	8018814 <tcp_process+0x7a8>
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018556:	1e5a      	subs	r2, r3, #1
 8018558:	4b30      	ldr	r3, [pc, #192]	; (801861c <tcp_process+0x5b0>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	429a      	cmp	r2, r3
 801855e:	f040 8159 	bne.w	8018814 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	f002 fe0c 	bl	801b180 <tcp_rexmit>
      break;
 8018568:	e154      	b.n	8018814 <tcp_process+0x7a8>
 801856a:	e153      	b.n	8018814 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f000 fa71 	bl	8018a54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018572:	4b32      	ldr	r3, [pc, #200]	; (801863c <tcp_process+0x5d0>)
 8018574:	781b      	ldrb	r3, [r3, #0]
 8018576:	f003 0320 	and.w	r3, r3, #32
 801857a:	2b00      	cmp	r3, #0
 801857c:	f000 814c 	beq.w	8018818 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	8b5b      	ldrh	r3, [r3, #26]
 8018584:	f043 0302 	orr.w	r3, r3, #2
 8018588:	b29a      	uxth	r2, r3
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2207      	movs	r2, #7
 8018592:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018594:	e140      	b.n	8018818 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f000 fa5c 	bl	8018a54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801859c:	4b27      	ldr	r3, [pc, #156]	; (801863c <tcp_process+0x5d0>)
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	f003 0320 	and.w	r3, r3, #32
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d071      	beq.n	801868c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80185a8:	4b19      	ldr	r3, [pc, #100]	; (8018610 <tcp_process+0x5a4>)
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	f003 0310 	and.w	r3, r3, #16
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d060      	beq.n	8018676 <tcp_process+0x60a>
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80185b8:	4b16      	ldr	r3, [pc, #88]	; (8018614 <tcp_process+0x5a8>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	429a      	cmp	r2, r3
 80185be:	d15a      	bne.n	8018676 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d156      	bne.n	8018676 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	8b5b      	ldrh	r3, [r3, #26]
 80185cc:	f043 0302 	orr.w	r3, r3, #2
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f7fe fdbe 	bl	8017158 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80185dc:	4b18      	ldr	r3, [pc, #96]	; (8018640 <tcp_process+0x5d4>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	687a      	ldr	r2, [r7, #4]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d105      	bne.n	80185f2 <tcp_process+0x586>
 80185e6:	4b16      	ldr	r3, [pc, #88]	; (8018640 <tcp_process+0x5d4>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	68db      	ldr	r3, [r3, #12]
 80185ec:	4a14      	ldr	r2, [pc, #80]	; (8018640 <tcp_process+0x5d4>)
 80185ee:	6013      	str	r3, [r2, #0]
 80185f0:	e02e      	b.n	8018650 <tcp_process+0x5e4>
 80185f2:	4b13      	ldr	r3, [pc, #76]	; (8018640 <tcp_process+0x5d4>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	617b      	str	r3, [r7, #20]
 80185f8:	e027      	b.n	801864a <tcp_process+0x5de>
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	68db      	ldr	r3, [r3, #12]
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	429a      	cmp	r2, r3
 8018602:	d11f      	bne.n	8018644 <tcp_process+0x5d8>
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	68da      	ldr	r2, [r3, #12]
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	60da      	str	r2, [r3, #12]
 801860c:	e020      	b.n	8018650 <tcp_process+0x5e4>
 801860e:	bf00      	nop
 8018610:	200055b4 	.word	0x200055b4
 8018614:	200055ac 	.word	0x200055ac
 8018618:	200055b2 	.word	0x200055b2
 801861c:	200055a8 	.word	0x200055a8
 8018620:	20005598 	.word	0x20005598
 8018624:	2001347c 	.word	0x2001347c
 8018628:	20013480 	.word	0x20013480
 801862c:	080255ac 	.word	0x080255ac
 8018630:	0802584c 	.word	0x0802584c
 8018634:	080255f8 	.word	0x080255f8
 8018638:	200055b0 	.word	0x200055b0
 801863c:	200055b5 	.word	0x200055b5
 8018640:	20016c4c 	.word	0x20016c4c
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	68db      	ldr	r3, [r3, #12]
 8018648:	617b      	str	r3, [r7, #20]
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d1d4      	bne.n	80185fa <tcp_process+0x58e>
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2200      	movs	r2, #0
 8018654:	60da      	str	r2, [r3, #12]
 8018656:	4b77      	ldr	r3, [pc, #476]	; (8018834 <tcp_process+0x7c8>)
 8018658:	2201      	movs	r2, #1
 801865a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	220a      	movs	r2, #10
 8018660:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018662:	4b75      	ldr	r3, [pc, #468]	; (8018838 <tcp_process+0x7cc>)
 8018664:	681a      	ldr	r2, [r3, #0]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	60da      	str	r2, [r3, #12]
 801866a:	4a73      	ldr	r2, [pc, #460]	; (8018838 <tcp_process+0x7cc>)
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	6013      	str	r3, [r2, #0]
 8018670:	f003 f950 	bl	801b914 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018674:	e0d2      	b.n	801881c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	8b5b      	ldrh	r3, [r3, #26]
 801867a:	f043 0302 	orr.w	r3, r3, #2
 801867e:	b29a      	uxth	r2, r3
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	2208      	movs	r2, #8
 8018688:	751a      	strb	r2, [r3, #20]
      break;
 801868a:	e0c7      	b.n	801881c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801868c:	4b6b      	ldr	r3, [pc, #428]	; (801883c <tcp_process+0x7d0>)
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	f003 0310 	and.w	r3, r3, #16
 8018694:	2b00      	cmp	r3, #0
 8018696:	f000 80c1 	beq.w	801881c <tcp_process+0x7b0>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801869e:	4b68      	ldr	r3, [pc, #416]	; (8018840 <tcp_process+0x7d4>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	f040 80ba 	bne.w	801881c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	f040 80b5 	bne.w	801881c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2206      	movs	r2, #6
 80186b6:	751a      	strb	r2, [r3, #20]
      break;
 80186b8:	e0b0      	b.n	801881c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80186ba:	6878      	ldr	r0, [r7, #4]
 80186bc:	f000 f9ca 	bl	8018a54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80186c0:	4b60      	ldr	r3, [pc, #384]	; (8018844 <tcp_process+0x7d8>)
 80186c2:	781b      	ldrb	r3, [r3, #0]
 80186c4:	f003 0320 	and.w	r3, r3, #32
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	f000 80a9 	beq.w	8018820 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	8b5b      	ldrh	r3, [r3, #26]
 80186d2:	f043 0302 	orr.w	r3, r3, #2
 80186d6:	b29a      	uxth	r2, r3
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80186dc:	6878      	ldr	r0, [r7, #4]
 80186de:	f7fe fd3b 	bl	8017158 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80186e2:	4b59      	ldr	r3, [pc, #356]	; (8018848 <tcp_process+0x7dc>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	687a      	ldr	r2, [r7, #4]
 80186e8:	429a      	cmp	r2, r3
 80186ea:	d105      	bne.n	80186f8 <tcp_process+0x68c>
 80186ec:	4b56      	ldr	r3, [pc, #344]	; (8018848 <tcp_process+0x7dc>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	68db      	ldr	r3, [r3, #12]
 80186f2:	4a55      	ldr	r2, [pc, #340]	; (8018848 <tcp_process+0x7dc>)
 80186f4:	6013      	str	r3, [r2, #0]
 80186f6:	e013      	b.n	8018720 <tcp_process+0x6b4>
 80186f8:	4b53      	ldr	r3, [pc, #332]	; (8018848 <tcp_process+0x7dc>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	613b      	str	r3, [r7, #16]
 80186fe:	e00c      	b.n	801871a <tcp_process+0x6ae>
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	68db      	ldr	r3, [r3, #12]
 8018704:	687a      	ldr	r2, [r7, #4]
 8018706:	429a      	cmp	r2, r3
 8018708:	d104      	bne.n	8018714 <tcp_process+0x6a8>
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	68da      	ldr	r2, [r3, #12]
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	60da      	str	r2, [r3, #12]
 8018712:	e005      	b.n	8018720 <tcp_process+0x6b4>
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	68db      	ldr	r3, [r3, #12]
 8018718:	613b      	str	r3, [r7, #16]
 801871a:	693b      	ldr	r3, [r7, #16]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d1ef      	bne.n	8018700 <tcp_process+0x694>
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2200      	movs	r2, #0
 8018724:	60da      	str	r2, [r3, #12]
 8018726:	4b43      	ldr	r3, [pc, #268]	; (8018834 <tcp_process+0x7c8>)
 8018728:	2201      	movs	r2, #1
 801872a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	220a      	movs	r2, #10
 8018730:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018732:	4b41      	ldr	r3, [pc, #260]	; (8018838 <tcp_process+0x7cc>)
 8018734:	681a      	ldr	r2, [r3, #0]
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	60da      	str	r2, [r3, #12]
 801873a:	4a3f      	ldr	r2, [pc, #252]	; (8018838 <tcp_process+0x7cc>)
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	6013      	str	r3, [r2, #0]
 8018740:	f003 f8e8 	bl	801b914 <tcp_timer_needed>
      }
      break;
 8018744:	e06c      	b.n	8018820 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f000 f984 	bl	8018a54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801874c:	4b3b      	ldr	r3, [pc, #236]	; (801883c <tcp_process+0x7d0>)
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	f003 0310 	and.w	r3, r3, #16
 8018754:	2b00      	cmp	r3, #0
 8018756:	d065      	beq.n	8018824 <tcp_process+0x7b8>
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801875c:	4b38      	ldr	r3, [pc, #224]	; (8018840 <tcp_process+0x7d4>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	429a      	cmp	r2, r3
 8018762:	d15f      	bne.n	8018824 <tcp_process+0x7b8>
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018768:	2b00      	cmp	r3, #0
 801876a:	d15b      	bne.n	8018824 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f7fe fcf3 	bl	8017158 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018772:	4b35      	ldr	r3, [pc, #212]	; (8018848 <tcp_process+0x7dc>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	687a      	ldr	r2, [r7, #4]
 8018778:	429a      	cmp	r2, r3
 801877a:	d105      	bne.n	8018788 <tcp_process+0x71c>
 801877c:	4b32      	ldr	r3, [pc, #200]	; (8018848 <tcp_process+0x7dc>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	68db      	ldr	r3, [r3, #12]
 8018782:	4a31      	ldr	r2, [pc, #196]	; (8018848 <tcp_process+0x7dc>)
 8018784:	6013      	str	r3, [r2, #0]
 8018786:	e013      	b.n	80187b0 <tcp_process+0x744>
 8018788:	4b2f      	ldr	r3, [pc, #188]	; (8018848 <tcp_process+0x7dc>)
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	60fb      	str	r3, [r7, #12]
 801878e:	e00c      	b.n	80187aa <tcp_process+0x73e>
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	68db      	ldr	r3, [r3, #12]
 8018794:	687a      	ldr	r2, [r7, #4]
 8018796:	429a      	cmp	r2, r3
 8018798:	d104      	bne.n	80187a4 <tcp_process+0x738>
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	68da      	ldr	r2, [r3, #12]
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	60da      	str	r2, [r3, #12]
 80187a2:	e005      	b.n	80187b0 <tcp_process+0x744>
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	68db      	ldr	r3, [r3, #12]
 80187a8:	60fb      	str	r3, [r7, #12]
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d1ef      	bne.n	8018790 <tcp_process+0x724>
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2200      	movs	r2, #0
 80187b4:	60da      	str	r2, [r3, #12]
 80187b6:	4b1f      	ldr	r3, [pc, #124]	; (8018834 <tcp_process+0x7c8>)
 80187b8:	2201      	movs	r2, #1
 80187ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	220a      	movs	r2, #10
 80187c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80187c2:	4b1d      	ldr	r3, [pc, #116]	; (8018838 <tcp_process+0x7cc>)
 80187c4:	681a      	ldr	r2, [r3, #0]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	60da      	str	r2, [r3, #12]
 80187ca:	4a1b      	ldr	r2, [pc, #108]	; (8018838 <tcp_process+0x7cc>)
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	6013      	str	r3, [r2, #0]
 80187d0:	f003 f8a0 	bl	801b914 <tcp_timer_needed>
      }
      break;
 80187d4:	e026      	b.n	8018824 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80187d6:	6878      	ldr	r0, [r7, #4]
 80187d8:	f000 f93c 	bl	8018a54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80187dc:	4b17      	ldr	r3, [pc, #92]	; (801883c <tcp_process+0x7d0>)
 80187de:	781b      	ldrb	r3, [r3, #0]
 80187e0:	f003 0310 	and.w	r3, r3, #16
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d01f      	beq.n	8018828 <tcp_process+0x7bc>
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80187ec:	4b14      	ldr	r3, [pc, #80]	; (8018840 <tcp_process+0x7d4>)
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d119      	bne.n	8018828 <tcp_process+0x7bc>
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d115      	bne.n	8018828 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80187fc:	4b11      	ldr	r3, [pc, #68]	; (8018844 <tcp_process+0x7d8>)
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	f043 0310 	orr.w	r3, r3, #16
 8018804:	b2da      	uxtb	r2, r3
 8018806:	4b0f      	ldr	r3, [pc, #60]	; (8018844 <tcp_process+0x7d8>)
 8018808:	701a      	strb	r2, [r3, #0]
      }
      break;
 801880a:	e00d      	b.n	8018828 <tcp_process+0x7bc>
    default:
      break;
 801880c:	bf00      	nop
 801880e:	e00c      	b.n	801882a <tcp_process+0x7be>
      break;
 8018810:	bf00      	nop
 8018812:	e00a      	b.n	801882a <tcp_process+0x7be>
      break;
 8018814:	bf00      	nop
 8018816:	e008      	b.n	801882a <tcp_process+0x7be>
      break;
 8018818:	bf00      	nop
 801881a:	e006      	b.n	801882a <tcp_process+0x7be>
      break;
 801881c:	bf00      	nop
 801881e:	e004      	b.n	801882a <tcp_process+0x7be>
      break;
 8018820:	bf00      	nop
 8018822:	e002      	b.n	801882a <tcp_process+0x7be>
      break;
 8018824:	bf00      	nop
 8018826:	e000      	b.n	801882a <tcp_process+0x7be>
      break;
 8018828:	bf00      	nop
  }
  return ERR_OK;
 801882a:	2300      	movs	r3, #0
}
 801882c:	4618      	mov	r0, r3
 801882e:	3724      	adds	r7, #36	; 0x24
 8018830:	46bd      	mov	sp, r7
 8018832:	bd90      	pop	{r4, r7, pc}
 8018834:	20016c48 	.word	0x20016c48
 8018838:	20016c5c 	.word	0x20016c5c
 801883c:	200055b4 	.word	0x200055b4
 8018840:	200055ac 	.word	0x200055ac
 8018844:	200055b5 	.word	0x200055b5
 8018848:	20016c4c 	.word	0x20016c4c

0801884c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801884c:	b590      	push	{r4, r7, lr}
 801884e:	b085      	sub	sp, #20
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
 8018854:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d106      	bne.n	801886a <tcp_oos_insert_segment+0x1e>
 801885c:	4b3b      	ldr	r3, [pc, #236]	; (801894c <tcp_oos_insert_segment+0x100>)
 801885e:	f240 421f 	movw	r2, #1055	; 0x41f
 8018862:	493b      	ldr	r1, [pc, #236]	; (8018950 <tcp_oos_insert_segment+0x104>)
 8018864:	483b      	ldr	r0, [pc, #236]	; (8018954 <tcp_oos_insert_segment+0x108>)
 8018866:	f008 fe21 	bl	80214ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	899b      	ldrh	r3, [r3, #12]
 8018870:	b29b      	uxth	r3, r3
 8018872:	4618      	mov	r0, r3
 8018874:	f7fa f862 	bl	801293c <lwip_htons>
 8018878:	4603      	mov	r3, r0
 801887a:	b2db      	uxtb	r3, r3
 801887c:	f003 0301 	and.w	r3, r3, #1
 8018880:	2b00      	cmp	r3, #0
 8018882:	d028      	beq.n	80188d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018884:	6838      	ldr	r0, [r7, #0]
 8018886:	f7fe f997 	bl	8016bb8 <tcp_segs_free>
    next = NULL;
 801888a:	2300      	movs	r3, #0
 801888c:	603b      	str	r3, [r7, #0]
 801888e:	e056      	b.n	801893e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	68db      	ldr	r3, [r3, #12]
 8018894:	899b      	ldrh	r3, [r3, #12]
 8018896:	b29b      	uxth	r3, r3
 8018898:	4618      	mov	r0, r3
 801889a:	f7fa f84f 	bl	801293c <lwip_htons>
 801889e:	4603      	mov	r3, r0
 80188a0:	b2db      	uxtb	r3, r3
 80188a2:	f003 0301 	and.w	r3, r3, #1
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d00d      	beq.n	80188c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	68db      	ldr	r3, [r3, #12]
 80188ae:	899b      	ldrh	r3, [r3, #12]
 80188b0:	b29c      	uxth	r4, r3
 80188b2:	2001      	movs	r0, #1
 80188b4:	f7fa f842 	bl	801293c <lwip_htons>
 80188b8:	4603      	mov	r3, r0
 80188ba:	461a      	mov	r2, r3
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	68db      	ldr	r3, [r3, #12]
 80188c0:	4322      	orrs	r2, r4
 80188c2:	b292      	uxth	r2, r2
 80188c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80188d0:	68f8      	ldr	r0, [r7, #12]
 80188d2:	f7fe f986 	bl	8016be2 <tcp_seg_free>
    while (next &&
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d00e      	beq.n	80188fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	891b      	ldrh	r3, [r3, #8]
 80188e0:	461a      	mov	r2, r3
 80188e2:	4b1d      	ldr	r3, [pc, #116]	; (8018958 <tcp_oos_insert_segment+0x10c>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	441a      	add	r2, r3
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	685b      	ldr	r3, [r3, #4]
 80188ee:	6839      	ldr	r1, [r7, #0]
 80188f0:	8909      	ldrh	r1, [r1, #8]
 80188f2:	440b      	add	r3, r1
 80188f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	daca      	bge.n	8018890 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d01e      	beq.n	801893e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	891b      	ldrh	r3, [r3, #8]
 8018904:	461a      	mov	r2, r3
 8018906:	4b14      	ldr	r3, [pc, #80]	; (8018958 <tcp_oos_insert_segment+0x10c>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	441a      	add	r2, r3
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	68db      	ldr	r3, [r3, #12]
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018914:	2b00      	cmp	r3, #0
 8018916:	dd12      	ble.n	801893e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	b29a      	uxth	r2, r3
 8018920:	4b0d      	ldr	r3, [pc, #52]	; (8018958 <tcp_oos_insert_segment+0x10c>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	b29b      	uxth	r3, r3
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	b29a      	uxth	r2, r3
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	685a      	ldr	r2, [r3, #4]
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	891b      	ldrh	r3, [r3, #8]
 8018936:	4619      	mov	r1, r3
 8018938:	4610      	mov	r0, r2
 801893a:	f7fc fa07 	bl	8014d4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	683a      	ldr	r2, [r7, #0]
 8018942:	601a      	str	r2, [r3, #0]
}
 8018944:	bf00      	nop
 8018946:	3714      	adds	r7, #20
 8018948:	46bd      	mov	sp, r7
 801894a:	bd90      	pop	{r4, r7, pc}
 801894c:	080255ac 	.word	0x080255ac
 8018950:	0802586c 	.word	0x0802586c
 8018954:	080255f8 	.word	0x080255f8
 8018958:	200055a8 	.word	0x200055a8

0801895c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801895c:	b5b0      	push	{r4, r5, r7, lr}
 801895e:	b086      	sub	sp, #24
 8018960:	af00      	add	r7, sp, #0
 8018962:	60f8      	str	r0, [r7, #12]
 8018964:	60b9      	str	r1, [r7, #8]
 8018966:	607a      	str	r2, [r7, #4]
 8018968:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801896a:	e03e      	b.n	80189ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018970:	68bb      	ldr	r3, [r7, #8]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	685b      	ldr	r3, [r3, #4]
 801897a:	4618      	mov	r0, r3
 801897c:	f7fc fbfa 	bl	8015174 <pbuf_clen>
 8018980:	4603      	mov	r3, r0
 8018982:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801898a:	8a7a      	ldrh	r2, [r7, #18]
 801898c:	429a      	cmp	r2, r3
 801898e:	d906      	bls.n	801899e <tcp_free_acked_segments+0x42>
 8018990:	4b2a      	ldr	r3, [pc, #168]	; (8018a3c <tcp_free_acked_segments+0xe0>)
 8018992:	f240 4257 	movw	r2, #1111	; 0x457
 8018996:	492a      	ldr	r1, [pc, #168]	; (8018a40 <tcp_free_acked_segments+0xe4>)
 8018998:	482a      	ldr	r0, [pc, #168]	; (8018a44 <tcp_free_acked_segments+0xe8>)
 801899a:	f008 fd87 	bl	80214ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80189a4:	8a7b      	ldrh	r3, [r7, #18]
 80189a6:	1ad3      	subs	r3, r2, r3
 80189a8:	b29a      	uxth	r2, r3
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	891a      	ldrh	r2, [r3, #8]
 80189b4:	4b24      	ldr	r3, [pc, #144]	; (8018a48 <tcp_free_acked_segments+0xec>)
 80189b6:	881b      	ldrh	r3, [r3, #0]
 80189b8:	4413      	add	r3, r2
 80189ba:	b29a      	uxth	r2, r3
 80189bc:	4b22      	ldr	r3, [pc, #136]	; (8018a48 <tcp_free_acked_segments+0xec>)
 80189be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80189c0:	6978      	ldr	r0, [r7, #20]
 80189c2:	f7fe f90e 	bl	8016be2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00c      	beq.n	80189ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d109      	bne.n	80189ea <tcp_free_acked_segments+0x8e>
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d106      	bne.n	80189ea <tcp_free_acked_segments+0x8e>
 80189dc:	4b17      	ldr	r3, [pc, #92]	; (8018a3c <tcp_free_acked_segments+0xe0>)
 80189de:	f240 4261 	movw	r2, #1121	; 0x461
 80189e2:	491a      	ldr	r1, [pc, #104]	; (8018a4c <tcp_free_acked_segments+0xf0>)
 80189e4:	4817      	ldr	r0, [pc, #92]	; (8018a44 <tcp_free_acked_segments+0xe8>)
 80189e6:	f008 fd61 	bl	80214ac <iprintf>
  while (seg_list != NULL &&
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d020      	beq.n	8018a32 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	68db      	ldr	r3, [r3, #12]
 80189f4:	685b      	ldr	r3, [r3, #4]
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7f9 ffb5 	bl	8012966 <lwip_htonl>
 80189fc:	4604      	mov	r4, r0
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	891b      	ldrh	r3, [r3, #8]
 8018a02:	461d      	mov	r5, r3
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	68db      	ldr	r3, [r3, #12]
 8018a08:	899b      	ldrh	r3, [r3, #12]
 8018a0a:	b29b      	uxth	r3, r3
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f7f9 ff95 	bl	801293c <lwip_htons>
 8018a12:	4603      	mov	r3, r0
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	f003 0303 	and.w	r3, r3, #3
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d001      	beq.n	8018a22 <tcp_free_acked_segments+0xc6>
 8018a1e:	2301      	movs	r3, #1
 8018a20:	e000      	b.n	8018a24 <tcp_free_acked_segments+0xc8>
 8018a22:	2300      	movs	r3, #0
 8018a24:	442b      	add	r3, r5
 8018a26:	18e2      	adds	r2, r4, r3
 8018a28:	4b09      	ldr	r3, [pc, #36]	; (8018a50 <tcp_free_acked_segments+0xf4>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	dd9c      	ble.n	801896c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018a32:	68bb      	ldr	r3, [r7, #8]
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3718      	adds	r7, #24
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8018a3c:	080255ac 	.word	0x080255ac
 8018a40:	08025894 	.word	0x08025894
 8018a44:	080255f8 	.word	0x080255f8
 8018a48:	200055b0 	.word	0x200055b0
 8018a4c:	080258bc 	.word	0x080258bc
 8018a50:	200055ac 	.word	0x200055ac

08018a54 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018a54:	b5b0      	push	{r4, r5, r7, lr}
 8018a56:	b094      	sub	sp, #80	; 0x50
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d106      	bne.n	8018a74 <tcp_receive+0x20>
 8018a66:	4ba6      	ldr	r3, [pc, #664]	; (8018d00 <tcp_receive+0x2ac>)
 8018a68:	f240 427b 	movw	r2, #1147	; 0x47b
 8018a6c:	49a5      	ldr	r1, [pc, #660]	; (8018d04 <tcp_receive+0x2b0>)
 8018a6e:	48a6      	ldr	r0, [pc, #664]	; (8018d08 <tcp_receive+0x2b4>)
 8018a70:	f008 fd1c 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	7d1b      	ldrb	r3, [r3, #20]
 8018a78:	2b03      	cmp	r3, #3
 8018a7a:	d806      	bhi.n	8018a8a <tcp_receive+0x36>
 8018a7c:	4ba0      	ldr	r3, [pc, #640]	; (8018d00 <tcp_receive+0x2ac>)
 8018a7e:	f240 427c 	movw	r2, #1148	; 0x47c
 8018a82:	49a2      	ldr	r1, [pc, #648]	; (8018d0c <tcp_receive+0x2b8>)
 8018a84:	48a0      	ldr	r0, [pc, #640]	; (8018d08 <tcp_receive+0x2b4>)
 8018a86:	f008 fd11 	bl	80214ac <iprintf>

  if (flags & TCP_ACK) {
 8018a8a:	4ba1      	ldr	r3, [pc, #644]	; (8018d10 <tcp_receive+0x2bc>)
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	f003 0310 	and.w	r3, r3, #16
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	f000 8263 	beq.w	8018f5e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018aa4:	4413      	add	r3, r2
 8018aa6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018aac:	4b99      	ldr	r3, [pc, #612]	; (8018d14 <tcp_receive+0x2c0>)
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	1ad3      	subs	r3, r2, r3
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	db1b      	blt.n	8018aee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018aba:	4b96      	ldr	r3, [pc, #600]	; (8018d14 <tcp_receive+0x2c0>)
 8018abc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d106      	bne.n	8018ad0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018ac6:	4b94      	ldr	r3, [pc, #592]	; (8018d18 <tcp_receive+0x2c4>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	db0e      	blt.n	8018aee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018ad4:	4b90      	ldr	r3, [pc, #576]	; (8018d18 <tcp_receive+0x2c4>)
 8018ad6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d125      	bne.n	8018b28 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018adc:	4b8f      	ldr	r3, [pc, #572]	; (8018d1c <tcp_receive+0x2c8>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	89db      	ldrh	r3, [r3, #14]
 8018ae2:	b29a      	uxth	r2, r3
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d91c      	bls.n	8018b28 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018aee:	4b8b      	ldr	r3, [pc, #556]	; (8018d1c <tcp_receive+0x2c8>)
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	89db      	ldrh	r3, [r3, #14]
 8018af4:	b29a      	uxth	r2, r3
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	d205      	bcs.n	8018b18 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018b18:	4b7e      	ldr	r3, [pc, #504]	; (8018d14 <tcp_receive+0x2c0>)
 8018b1a:	681a      	ldr	r2, [r3, #0]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018b20:	4b7d      	ldr	r3, [pc, #500]	; (8018d18 <tcp_receive+0x2c4>)
 8018b22:	681a      	ldr	r2, [r3, #0]
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018b28:	4b7b      	ldr	r3, [pc, #492]	; (8018d18 <tcp_receive+0x2c4>)
 8018b2a:	681a      	ldr	r2, [r3, #0]
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b30:	1ad3      	subs	r3, r2, r3
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	dc58      	bgt.n	8018be8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018b36:	4b7a      	ldr	r3, [pc, #488]	; (8018d20 <tcp_receive+0x2cc>)
 8018b38:	881b      	ldrh	r3, [r3, #0]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d14b      	bne.n	8018bd6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b42:	687a      	ldr	r2, [r7, #4]
 8018b44:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018b48:	4413      	add	r3, r2
 8018b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d142      	bne.n	8018bd6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	db3d      	blt.n	8018bd6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018b5e:	4b6e      	ldr	r3, [pc, #440]	; (8018d18 <tcp_receive+0x2c4>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d137      	bne.n	8018bd6 <tcp_receive+0x182>
              found_dupack = 1;
 8018b66:	2301      	movs	r3, #1
 8018b68:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018b70:	2bff      	cmp	r3, #255	; 0xff
 8018b72:	d007      	beq.n	8018b84 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	b2da      	uxtb	r2, r3
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018b8a:	2b03      	cmp	r3, #3
 8018b8c:	d91b      	bls.n	8018bc6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b98:	4413      	add	r3, r2
 8018b9a:	b29a      	uxth	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018ba2:	429a      	cmp	r2, r3
 8018ba4:	d30a      	bcc.n	8018bbc <tcp_receive+0x168>
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018bb0:	4413      	add	r3, r2
 8018bb2:	b29a      	uxth	r2, r3
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018bba:	e004      	b.n	8018bc6 <tcp_receive+0x172>
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018bc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018bcc:	2b02      	cmp	r3, #2
 8018bce:	d902      	bls.n	8018bd6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018bd0:	6878      	ldr	r0, [r7, #4]
 8018bd2:	f002 fb41 	bl	801b258 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	f040 8160 	bne.w	8018e9e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	2200      	movs	r2, #0
 8018be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018be6:	e15a      	b.n	8018e9e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018be8:	4b4b      	ldr	r3, [pc, #300]	; (8018d18 <tcp_receive+0x2c4>)
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bf0:	1ad3      	subs	r3, r2, r3
 8018bf2:	3b01      	subs	r3, #1
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f2c0 814d 	blt.w	8018e94 <tcp_receive+0x440>
 8018bfa:	4b47      	ldr	r3, [pc, #284]	; (8018d18 <tcp_receive+0x2c4>)
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	f300 8145 	bgt.w	8018e94 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	8b5b      	ldrh	r3, [r3, #26]
 8018c0e:	f003 0304 	and.w	r3, r3, #4
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d010      	beq.n	8018c38 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	8b5b      	ldrh	r3, [r3, #26]
 8018c1a:	f023 0304 	bic.w	r3, r3, #4
 8018c1e:	b29a      	uxth	r2, r3
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2200      	movs	r2, #0
 8018c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018c46:	10db      	asrs	r3, r3, #3
 8018c48:	b21b      	sxth	r3, r3
 8018c4a:	b29a      	uxth	r2, r3
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	4413      	add	r3, r2
 8018c56:	b29b      	uxth	r3, r3
 8018c58:	b21a      	sxth	r2, r3
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018c60:	4b2d      	ldr	r3, [pc, #180]	; (8018d18 <tcp_receive+0x2c4>)
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	b29a      	uxth	r2, r3
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c6a:	b29b      	uxth	r3, r3
 8018c6c:	1ad3      	subs	r3, r2, r3
 8018c6e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2200      	movs	r2, #0
 8018c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018c78:	4b27      	ldr	r3, [pc, #156]	; (8018d18 <tcp_receive+0x2c4>)
 8018c7a:	681a      	ldr	r2, [r3, #0]
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	7d1b      	ldrb	r3, [r3, #20]
 8018c84:	2b03      	cmp	r3, #3
 8018c86:	f240 8096 	bls.w	8018db6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d244      	bcs.n	8018d24 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	8b5b      	ldrh	r3, [r3, #26]
 8018c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d001      	beq.n	8018caa <tcp_receive+0x256>
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	e000      	b.n	8018cac <tcp_receive+0x258>
 8018caa:	2302      	movs	r3, #2
 8018cac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018cb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018cb4:	b29a      	uxth	r2, r3
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018cba:	fb12 f303 	smulbb	r3, r2, r3
 8018cbe:	b29b      	uxth	r3, r3
 8018cc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	bf28      	it	cs
 8018cc6:	4613      	movcs	r3, r2
 8018cc8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018cd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018cd2:	4413      	add	r3, r2
 8018cd4:	b29a      	uxth	r2, r3
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018cdc:	429a      	cmp	r2, r3
 8018cde:	d309      	bcc.n	8018cf4 <tcp_receive+0x2a0>
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ce8:	4413      	add	r3, r2
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018cf2:	e060      	b.n	8018db6 <tcp_receive+0x362>
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018cfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018cfe:	e05a      	b.n	8018db6 <tcp_receive+0x362>
 8018d00:	080255ac 	.word	0x080255ac
 8018d04:	080258dc 	.word	0x080258dc
 8018d08:	080255f8 	.word	0x080255f8
 8018d0c:	080258f8 	.word	0x080258f8
 8018d10:	200055b4 	.word	0x200055b4
 8018d14:	200055a8 	.word	0x200055a8
 8018d18:	200055ac 	.word	0x200055ac
 8018d1c:	20005598 	.word	0x20005598
 8018d20:	200055b2 	.word	0x200055b2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018d2c:	4413      	add	r3, r2
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d309      	bcc.n	8018d4e <tcp_receive+0x2fa>
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018d40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018d42:	4413      	add	r3, r2
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8018d4c:	e004      	b.n	8018d58 <tcp_receive+0x304>
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018d64:	429a      	cmp	r2, r3
 8018d66:	d326      	bcc.n	8018db6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018d74:	1ad3      	subs	r3, r2, r3
 8018d76:	b29a      	uxth	r2, r3
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d88:	4413      	add	r3, r2
 8018d8a:	b29a      	uxth	r2, r3
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018d92:	429a      	cmp	r2, r3
 8018d94:	d30a      	bcc.n	8018dac <tcp_receive+0x358>
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018da0:	4413      	add	r3, r2
 8018da2:	b29a      	uxth	r2, r3
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018daa:	e004      	b.n	8018db6 <tcp_receive+0x362>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018db2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018dbe:	4a98      	ldr	r2, [pc, #608]	; (8019020 <tcp_receive+0x5cc>)
 8018dc0:	6878      	ldr	r0, [r7, #4]
 8018dc2:	f7ff fdcb 	bl	801895c <tcp_free_acked_segments>
 8018dc6:	4602      	mov	r2, r0
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018dd4:	4a93      	ldr	r2, [pc, #588]	; (8019024 <tcp_receive+0x5d0>)
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f7ff fdc0 	bl	801895c <tcp_free_acked_segments>
 8018ddc:	4602      	mov	r2, r0
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d104      	bne.n	8018df4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018df0:	861a      	strh	r2, [r3, #48]	; 0x30
 8018df2:	e002      	b.n	8018dfa <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2200      	movs	r2, #0
 8018df8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d103      	bne.n	8018e10 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018e16:	4b84      	ldr	r3, [pc, #528]	; (8019028 <tcp_receive+0x5d4>)
 8018e18:	881b      	ldrh	r3, [r3, #0]
 8018e1a:	4413      	add	r3, r2
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	8b5b      	ldrh	r3, [r3, #26]
 8018e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d035      	beq.n	8018e9c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d118      	bne.n	8018e6a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d00c      	beq.n	8018e5a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7f9 fd8a 	bl	8012966 <lwip_htonl>
 8018e52:	4603      	mov	r3, r0
 8018e54:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	dc20      	bgt.n	8018e9c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	8b5b      	ldrh	r3, [r3, #26]
 8018e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018e68:	e018      	b.n	8018e9c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e72:	68db      	ldr	r3, [r3, #12]
 8018e74:	685b      	ldr	r3, [r3, #4]
 8018e76:	4618      	mov	r0, r3
 8018e78:	f7f9 fd75 	bl	8012966 <lwip_htonl>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	1ae3      	subs	r3, r4, r3
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	dc0b      	bgt.n	8018e9c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	8b5b      	ldrh	r3, [r3, #26]
 8018e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018e8c:	b29a      	uxth	r2, r3
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018e92:	e003      	b.n	8018e9c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018e94:	6878      	ldr	r0, [r7, #4]
 8018e96:	f002 fbcd 	bl	801b634 <tcp_send_empty_ack>
 8018e9a:	e000      	b.n	8018e9e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018e9c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d05b      	beq.n	8018f5e <tcp_receive+0x50a>
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018eaa:	4b60      	ldr	r3, [pc, #384]	; (801902c <tcp_receive+0x5d8>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	1ad3      	subs	r3, r2, r3
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	da54      	bge.n	8018f5e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018eb4:	4b5e      	ldr	r3, [pc, #376]	; (8019030 <tcp_receive+0x5dc>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	b29a      	uxth	r2, r3
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ebe:	b29b      	uxth	r3, r3
 8018ec0:	1ad3      	subs	r3, r2, r3
 8018ec2:	b29b      	uxth	r3, r3
 8018ec4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018ec8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018ed2:	10db      	asrs	r3, r3, #3
 8018ed4:	b21b      	sxth	r3, r3
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	1ad3      	subs	r3, r2, r3
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018ee6:	b29a      	uxth	r2, r3
 8018ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018eec:	4413      	add	r3, r2
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	b21a      	sxth	r2, r3
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018ef6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	da05      	bge.n	8018f0a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8018efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018f02:	425b      	negs	r3, r3
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018f0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018f14:	109b      	asrs	r3, r3, #2
 8018f16:	b21b      	sxth	r3, r3
 8018f18:	b29b      	uxth	r3, r3
 8018f1a:	1ad3      	subs	r3, r2, r3
 8018f1c:	b29b      	uxth	r3, r3
 8018f1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018f28:	b29a      	uxth	r2, r3
 8018f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018f2e:	4413      	add	r3, r2
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	b21a      	sxth	r2, r3
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018f3e:	10db      	asrs	r3, r3, #3
 8018f40:	b21b      	sxth	r3, r3
 8018f42:	b29a      	uxth	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	4413      	add	r3, r2
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	b21a      	sxth	r2, r3
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018f5e:	4b35      	ldr	r3, [pc, #212]	; (8019034 <tcp_receive+0x5e0>)
 8018f60:	881b      	ldrh	r3, [r3, #0]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	f000 84e1 	beq.w	801992a <tcp_receive+0xed6>
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	7d1b      	ldrb	r3, [r3, #20]
 8018f6c:	2b06      	cmp	r3, #6
 8018f6e:	f200 84dc 	bhi.w	801992a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f76:	4b30      	ldr	r3, [pc, #192]	; (8019038 <tcp_receive+0x5e4>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	3b01      	subs	r3, #1
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	f2c0 808e 	blt.w	80190a0 <tcp_receive+0x64c>
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f88:	4b2a      	ldr	r3, [pc, #168]	; (8019034 <tcp_receive+0x5e0>)
 8018f8a:	881b      	ldrh	r3, [r3, #0]
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	4b2a      	ldr	r3, [pc, #168]	; (8019038 <tcp_receive+0x5e4>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	440b      	add	r3, r1
 8018f94:	1ad3      	subs	r3, r2, r3
 8018f96:	3301      	adds	r3, #1
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f300 8081 	bgt.w	80190a0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018f9e:	4b27      	ldr	r3, [pc, #156]	; (801903c <tcp_receive+0x5e8>)
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018fa8:	4b23      	ldr	r3, [pc, #140]	; (8019038 <tcp_receive+0x5e4>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	1ad3      	subs	r3, r2, r3
 8018fae:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018fb0:	4b22      	ldr	r3, [pc, #136]	; (801903c <tcp_receive+0x5e8>)
 8018fb2:	685b      	ldr	r3, [r3, #4]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d106      	bne.n	8018fc6 <tcp_receive+0x572>
 8018fb8:	4b21      	ldr	r3, [pc, #132]	; (8019040 <tcp_receive+0x5ec>)
 8018fba:	f240 5294 	movw	r2, #1428	; 0x594
 8018fbe:	4921      	ldr	r1, [pc, #132]	; (8019044 <tcp_receive+0x5f0>)
 8018fc0:	4821      	ldr	r0, [pc, #132]	; (8019048 <tcp_receive+0x5f4>)
 8018fc2:	f008 fa73 	bl	80214ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018fcc:	4293      	cmp	r3, r2
 8018fce:	d906      	bls.n	8018fde <tcp_receive+0x58a>
 8018fd0:	4b1b      	ldr	r3, [pc, #108]	; (8019040 <tcp_receive+0x5ec>)
 8018fd2:	f240 5295 	movw	r2, #1429	; 0x595
 8018fd6:	491d      	ldr	r1, [pc, #116]	; (801904c <tcp_receive+0x5f8>)
 8018fd8:	481b      	ldr	r0, [pc, #108]	; (8019048 <tcp_receive+0x5f4>)
 8018fda:	f008 fa67 	bl	80214ac <iprintf>
      off = (u16_t)off32;
 8018fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018fe4:	4b15      	ldr	r3, [pc, #84]	; (801903c <tcp_receive+0x5e8>)
 8018fe6:	685b      	ldr	r3, [r3, #4]
 8018fe8:	891b      	ldrh	r3, [r3, #8]
 8018fea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d906      	bls.n	8019000 <tcp_receive+0x5ac>
 8018ff2:	4b13      	ldr	r3, [pc, #76]	; (8019040 <tcp_receive+0x5ec>)
 8018ff4:	f240 5297 	movw	r2, #1431	; 0x597
 8018ff8:	4915      	ldr	r1, [pc, #84]	; (8019050 <tcp_receive+0x5fc>)
 8018ffa:	4813      	ldr	r0, [pc, #76]	; (8019048 <tcp_receive+0x5f4>)
 8018ffc:	f008 fa56 	bl	80214ac <iprintf>
      inseg.len -= off;
 8019000:	4b0e      	ldr	r3, [pc, #56]	; (801903c <tcp_receive+0x5e8>)
 8019002:	891a      	ldrh	r2, [r3, #8]
 8019004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019008:	1ad3      	subs	r3, r2, r3
 801900a:	b29a      	uxth	r2, r3
 801900c:	4b0b      	ldr	r3, [pc, #44]	; (801903c <tcp_receive+0x5e8>)
 801900e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019010:	4b0a      	ldr	r3, [pc, #40]	; (801903c <tcp_receive+0x5e8>)
 8019012:	685b      	ldr	r3, [r3, #4]
 8019014:	891a      	ldrh	r2, [r3, #8]
 8019016:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801901a:	1ad3      	subs	r3, r2, r3
 801901c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801901e:	e029      	b.n	8019074 <tcp_receive+0x620>
 8019020:	08025914 	.word	0x08025914
 8019024:	0802591c 	.word	0x0802591c
 8019028:	200055b0 	.word	0x200055b0
 801902c:	200055ac 	.word	0x200055ac
 8019030:	20016c50 	.word	0x20016c50
 8019034:	200055b2 	.word	0x200055b2
 8019038:	200055a8 	.word	0x200055a8
 801903c:	20005588 	.word	0x20005588
 8019040:	080255ac 	.word	0x080255ac
 8019044:	08025924 	.word	0x08025924
 8019048:	080255f8 	.word	0x080255f8
 801904c:	08025934 	.word	0x08025934
 8019050:	08025944 	.word	0x08025944
        off -= p->len;
 8019054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019056:	895b      	ldrh	r3, [r3, #10]
 8019058:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801905c:	1ad3      	subs	r3, r2, r3
 801905e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019064:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019066:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801906a:	2200      	movs	r2, #0
 801906c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801906e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019076:	895b      	ldrh	r3, [r3, #10]
 8019078:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801907c:	429a      	cmp	r2, r3
 801907e:	d8e9      	bhi.n	8019054 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019084:	4619      	mov	r1, r3
 8019086:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019088:	f7fb ff60 	bl	8014f4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019090:	4a91      	ldr	r2, [pc, #580]	; (80192d8 <tcp_receive+0x884>)
 8019092:	6013      	str	r3, [r2, #0]
 8019094:	4b91      	ldr	r3, [pc, #580]	; (80192dc <tcp_receive+0x888>)
 8019096:	68db      	ldr	r3, [r3, #12]
 8019098:	4a8f      	ldr	r2, [pc, #572]	; (80192d8 <tcp_receive+0x884>)
 801909a:	6812      	ldr	r2, [r2, #0]
 801909c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801909e:	e00d      	b.n	80190bc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80190a0:	4b8d      	ldr	r3, [pc, #564]	; (80192d8 <tcp_receive+0x884>)
 80190a2:	681a      	ldr	r2, [r3, #0]
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190a8:	1ad3      	subs	r3, r2, r3
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	da06      	bge.n	80190bc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	8b5b      	ldrh	r3, [r3, #26]
 80190b2:	f043 0302 	orr.w	r3, r3, #2
 80190b6:	b29a      	uxth	r2, r3
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80190bc:	4b86      	ldr	r3, [pc, #536]	; (80192d8 <tcp_receive+0x884>)
 80190be:	681a      	ldr	r2, [r3, #0]
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c4:	1ad3      	subs	r3, r2, r3
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	f2c0 842a 	blt.w	8019920 <tcp_receive+0xecc>
 80190cc:	4b82      	ldr	r3, [pc, #520]	; (80192d8 <tcp_receive+0x884>)
 80190ce:	681a      	ldr	r2, [r3, #0]
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190d4:	6879      	ldr	r1, [r7, #4]
 80190d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80190d8:	440b      	add	r3, r1
 80190da:	1ad3      	subs	r3, r2, r3
 80190dc:	3301      	adds	r3, #1
 80190de:	2b00      	cmp	r3, #0
 80190e0:	f300 841e 	bgt.w	8019920 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80190e8:	4b7b      	ldr	r3, [pc, #492]	; (80192d8 <tcp_receive+0x884>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	f040 829a 	bne.w	8019626 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80190f2:	4b7a      	ldr	r3, [pc, #488]	; (80192dc <tcp_receive+0x888>)
 80190f4:	891c      	ldrh	r4, [r3, #8]
 80190f6:	4b79      	ldr	r3, [pc, #484]	; (80192dc <tcp_receive+0x888>)
 80190f8:	68db      	ldr	r3, [r3, #12]
 80190fa:	899b      	ldrh	r3, [r3, #12]
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	4618      	mov	r0, r3
 8019100:	f7f9 fc1c 	bl	801293c <lwip_htons>
 8019104:	4603      	mov	r3, r0
 8019106:	b2db      	uxtb	r3, r3
 8019108:	f003 0303 	and.w	r3, r3, #3
 801910c:	2b00      	cmp	r3, #0
 801910e:	d001      	beq.n	8019114 <tcp_receive+0x6c0>
 8019110:	2301      	movs	r3, #1
 8019112:	e000      	b.n	8019116 <tcp_receive+0x6c2>
 8019114:	2300      	movs	r3, #0
 8019116:	4423      	add	r3, r4
 8019118:	b29a      	uxth	r2, r3
 801911a:	4b71      	ldr	r3, [pc, #452]	; (80192e0 <tcp_receive+0x88c>)
 801911c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019122:	4b6f      	ldr	r3, [pc, #444]	; (80192e0 <tcp_receive+0x88c>)
 8019124:	881b      	ldrh	r3, [r3, #0]
 8019126:	429a      	cmp	r2, r3
 8019128:	d275      	bcs.n	8019216 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801912a:	4b6c      	ldr	r3, [pc, #432]	; (80192dc <tcp_receive+0x888>)
 801912c:	68db      	ldr	r3, [r3, #12]
 801912e:	899b      	ldrh	r3, [r3, #12]
 8019130:	b29b      	uxth	r3, r3
 8019132:	4618      	mov	r0, r3
 8019134:	f7f9 fc02 	bl	801293c <lwip_htons>
 8019138:	4603      	mov	r3, r0
 801913a:	b2db      	uxtb	r3, r3
 801913c:	f003 0301 	and.w	r3, r3, #1
 8019140:	2b00      	cmp	r3, #0
 8019142:	d01f      	beq.n	8019184 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019144:	4b65      	ldr	r3, [pc, #404]	; (80192dc <tcp_receive+0x888>)
 8019146:	68db      	ldr	r3, [r3, #12]
 8019148:	899b      	ldrh	r3, [r3, #12]
 801914a:	b29b      	uxth	r3, r3
 801914c:	b21b      	sxth	r3, r3
 801914e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019152:	b21c      	sxth	r4, r3
 8019154:	4b61      	ldr	r3, [pc, #388]	; (80192dc <tcp_receive+0x888>)
 8019156:	68db      	ldr	r3, [r3, #12]
 8019158:	899b      	ldrh	r3, [r3, #12]
 801915a:	b29b      	uxth	r3, r3
 801915c:	4618      	mov	r0, r3
 801915e:	f7f9 fbed 	bl	801293c <lwip_htons>
 8019162:	4603      	mov	r3, r0
 8019164:	b2db      	uxtb	r3, r3
 8019166:	b29b      	uxth	r3, r3
 8019168:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801916c:	b29b      	uxth	r3, r3
 801916e:	4618      	mov	r0, r3
 8019170:	f7f9 fbe4 	bl	801293c <lwip_htons>
 8019174:	4603      	mov	r3, r0
 8019176:	b21b      	sxth	r3, r3
 8019178:	4323      	orrs	r3, r4
 801917a:	b21a      	sxth	r2, r3
 801917c:	4b57      	ldr	r3, [pc, #348]	; (80192dc <tcp_receive+0x888>)
 801917e:	68db      	ldr	r3, [r3, #12]
 8019180:	b292      	uxth	r2, r2
 8019182:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019188:	4b54      	ldr	r3, [pc, #336]	; (80192dc <tcp_receive+0x888>)
 801918a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801918c:	4b53      	ldr	r3, [pc, #332]	; (80192dc <tcp_receive+0x888>)
 801918e:	68db      	ldr	r3, [r3, #12]
 8019190:	899b      	ldrh	r3, [r3, #12]
 8019192:	b29b      	uxth	r3, r3
 8019194:	4618      	mov	r0, r3
 8019196:	f7f9 fbd1 	bl	801293c <lwip_htons>
 801919a:	4603      	mov	r3, r0
 801919c:	b2db      	uxtb	r3, r3
 801919e:	f003 0302 	and.w	r3, r3, #2
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d005      	beq.n	80191b2 <tcp_receive+0x75e>
            inseg.len -= 1;
 80191a6:	4b4d      	ldr	r3, [pc, #308]	; (80192dc <tcp_receive+0x888>)
 80191a8:	891b      	ldrh	r3, [r3, #8]
 80191aa:	3b01      	subs	r3, #1
 80191ac:	b29a      	uxth	r2, r3
 80191ae:	4b4b      	ldr	r3, [pc, #300]	; (80192dc <tcp_receive+0x888>)
 80191b0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80191b2:	4b4a      	ldr	r3, [pc, #296]	; (80192dc <tcp_receive+0x888>)
 80191b4:	685b      	ldr	r3, [r3, #4]
 80191b6:	4a49      	ldr	r2, [pc, #292]	; (80192dc <tcp_receive+0x888>)
 80191b8:	8912      	ldrh	r2, [r2, #8]
 80191ba:	4611      	mov	r1, r2
 80191bc:	4618      	mov	r0, r3
 80191be:	f7fb fdc5 	bl	8014d4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80191c2:	4b46      	ldr	r3, [pc, #280]	; (80192dc <tcp_receive+0x888>)
 80191c4:	891c      	ldrh	r4, [r3, #8]
 80191c6:	4b45      	ldr	r3, [pc, #276]	; (80192dc <tcp_receive+0x888>)
 80191c8:	68db      	ldr	r3, [r3, #12]
 80191ca:	899b      	ldrh	r3, [r3, #12]
 80191cc:	b29b      	uxth	r3, r3
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7f9 fbb4 	bl	801293c <lwip_htons>
 80191d4:	4603      	mov	r3, r0
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	f003 0303 	and.w	r3, r3, #3
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d001      	beq.n	80191e4 <tcp_receive+0x790>
 80191e0:	2301      	movs	r3, #1
 80191e2:	e000      	b.n	80191e6 <tcp_receive+0x792>
 80191e4:	2300      	movs	r3, #0
 80191e6:	4423      	add	r3, r4
 80191e8:	b29a      	uxth	r2, r3
 80191ea:	4b3d      	ldr	r3, [pc, #244]	; (80192e0 <tcp_receive+0x88c>)
 80191ec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80191ee:	4b3c      	ldr	r3, [pc, #240]	; (80192e0 <tcp_receive+0x88c>)
 80191f0:	881b      	ldrh	r3, [r3, #0]
 80191f2:	461a      	mov	r2, r3
 80191f4:	4b38      	ldr	r3, [pc, #224]	; (80192d8 <tcp_receive+0x884>)
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	441a      	add	r2, r3
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191fe:	6879      	ldr	r1, [r7, #4]
 8019200:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019202:	440b      	add	r3, r1
 8019204:	429a      	cmp	r2, r3
 8019206:	d006      	beq.n	8019216 <tcp_receive+0x7c2>
 8019208:	4b36      	ldr	r3, [pc, #216]	; (80192e4 <tcp_receive+0x890>)
 801920a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801920e:	4936      	ldr	r1, [pc, #216]	; (80192e8 <tcp_receive+0x894>)
 8019210:	4836      	ldr	r0, [pc, #216]	; (80192ec <tcp_receive+0x898>)
 8019212:	f008 f94b 	bl	80214ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801921a:	2b00      	cmp	r3, #0
 801921c:	f000 80e7 	beq.w	80193ee <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019220:	4b2e      	ldr	r3, [pc, #184]	; (80192dc <tcp_receive+0x888>)
 8019222:	68db      	ldr	r3, [r3, #12]
 8019224:	899b      	ldrh	r3, [r3, #12]
 8019226:	b29b      	uxth	r3, r3
 8019228:	4618      	mov	r0, r3
 801922a:	f7f9 fb87 	bl	801293c <lwip_htons>
 801922e:	4603      	mov	r3, r0
 8019230:	b2db      	uxtb	r3, r3
 8019232:	f003 0301 	and.w	r3, r3, #1
 8019236:	2b00      	cmp	r3, #0
 8019238:	d010      	beq.n	801925c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801923a:	e00a      	b.n	8019252 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019240:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801924c:	68f8      	ldr	r0, [r7, #12]
 801924e:	f7fd fcc8 	bl	8016be2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019256:	2b00      	cmp	r3, #0
 8019258:	d1f0      	bne.n	801923c <tcp_receive+0x7e8>
 801925a:	e0c8      	b.n	80193ee <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019260:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019262:	e052      	b.n	801930a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019266:	68db      	ldr	r3, [r3, #12]
 8019268:	899b      	ldrh	r3, [r3, #12]
 801926a:	b29b      	uxth	r3, r3
 801926c:	4618      	mov	r0, r3
 801926e:	f7f9 fb65 	bl	801293c <lwip_htons>
 8019272:	4603      	mov	r3, r0
 8019274:	b2db      	uxtb	r3, r3
 8019276:	f003 0301 	and.w	r3, r3, #1
 801927a:	2b00      	cmp	r3, #0
 801927c:	d03d      	beq.n	80192fa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801927e:	4b17      	ldr	r3, [pc, #92]	; (80192dc <tcp_receive+0x888>)
 8019280:	68db      	ldr	r3, [r3, #12]
 8019282:	899b      	ldrh	r3, [r3, #12]
 8019284:	b29b      	uxth	r3, r3
 8019286:	4618      	mov	r0, r3
 8019288:	f7f9 fb58 	bl	801293c <lwip_htons>
 801928c:	4603      	mov	r3, r0
 801928e:	b2db      	uxtb	r3, r3
 8019290:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019294:	2b00      	cmp	r3, #0
 8019296:	d130      	bne.n	80192fa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019298:	4b10      	ldr	r3, [pc, #64]	; (80192dc <tcp_receive+0x888>)
 801929a:	68db      	ldr	r3, [r3, #12]
 801929c:	899b      	ldrh	r3, [r3, #12]
 801929e:	b29c      	uxth	r4, r3
 80192a0:	2001      	movs	r0, #1
 80192a2:	f7f9 fb4b 	bl	801293c <lwip_htons>
 80192a6:	4603      	mov	r3, r0
 80192a8:	461a      	mov	r2, r3
 80192aa:	4b0c      	ldr	r3, [pc, #48]	; (80192dc <tcp_receive+0x888>)
 80192ac:	68db      	ldr	r3, [r3, #12]
 80192ae:	4322      	orrs	r2, r4
 80192b0:	b292      	uxth	r2, r2
 80192b2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80192b4:	4b09      	ldr	r3, [pc, #36]	; (80192dc <tcp_receive+0x888>)
 80192b6:	891c      	ldrh	r4, [r3, #8]
 80192b8:	4b08      	ldr	r3, [pc, #32]	; (80192dc <tcp_receive+0x888>)
 80192ba:	68db      	ldr	r3, [r3, #12]
 80192bc:	899b      	ldrh	r3, [r3, #12]
 80192be:	b29b      	uxth	r3, r3
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7f9 fb3b 	bl	801293c <lwip_htons>
 80192c6:	4603      	mov	r3, r0
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	f003 0303 	and.w	r3, r3, #3
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d00e      	beq.n	80192f0 <tcp_receive+0x89c>
 80192d2:	2301      	movs	r3, #1
 80192d4:	e00d      	b.n	80192f2 <tcp_receive+0x89e>
 80192d6:	bf00      	nop
 80192d8:	200055a8 	.word	0x200055a8
 80192dc:	20005588 	.word	0x20005588
 80192e0:	200055b2 	.word	0x200055b2
 80192e4:	080255ac 	.word	0x080255ac
 80192e8:	08025954 	.word	0x08025954
 80192ec:	080255f8 	.word	0x080255f8
 80192f0:	2300      	movs	r3, #0
 80192f2:	4423      	add	r3, r4
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	4b98      	ldr	r3, [pc, #608]	; (8019558 <tcp_receive+0xb04>)
 80192f8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80192fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192fc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80192fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019304:	6938      	ldr	r0, [r7, #16]
 8019306:	f7fd fc6c 	bl	8016be2 <tcp_seg_free>
            while (next &&
 801930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801930c:	2b00      	cmp	r3, #0
 801930e:	d00e      	beq.n	801932e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019310:	4b91      	ldr	r3, [pc, #580]	; (8019558 <tcp_receive+0xb04>)
 8019312:	881b      	ldrh	r3, [r3, #0]
 8019314:	461a      	mov	r2, r3
 8019316:	4b91      	ldr	r3, [pc, #580]	; (801955c <tcp_receive+0xb08>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	441a      	add	r2, r3
 801931c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801931e:	68db      	ldr	r3, [r3, #12]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019324:	8909      	ldrh	r1, [r1, #8]
 8019326:	440b      	add	r3, r1
 8019328:	1ad3      	subs	r3, r2, r3
            while (next &&
 801932a:	2b00      	cmp	r3, #0
 801932c:	da9a      	bge.n	8019264 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801932e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019330:	2b00      	cmp	r3, #0
 8019332:	d059      	beq.n	80193e8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019334:	4b88      	ldr	r3, [pc, #544]	; (8019558 <tcp_receive+0xb04>)
 8019336:	881b      	ldrh	r3, [r3, #0]
 8019338:	461a      	mov	r2, r3
 801933a:	4b88      	ldr	r3, [pc, #544]	; (801955c <tcp_receive+0xb08>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	441a      	add	r2, r3
 8019340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019342:	68db      	ldr	r3, [r3, #12]
 8019344:	685b      	ldr	r3, [r3, #4]
 8019346:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019348:	2b00      	cmp	r3, #0
 801934a:	dd4d      	ble.n	80193e8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801934e:	68db      	ldr	r3, [r3, #12]
 8019350:	685b      	ldr	r3, [r3, #4]
 8019352:	b29a      	uxth	r2, r3
 8019354:	4b81      	ldr	r3, [pc, #516]	; (801955c <tcp_receive+0xb08>)
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	b29b      	uxth	r3, r3
 801935a:	1ad3      	subs	r3, r2, r3
 801935c:	b29a      	uxth	r2, r3
 801935e:	4b80      	ldr	r3, [pc, #512]	; (8019560 <tcp_receive+0xb0c>)
 8019360:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019362:	4b7f      	ldr	r3, [pc, #508]	; (8019560 <tcp_receive+0xb0c>)
 8019364:	68db      	ldr	r3, [r3, #12]
 8019366:	899b      	ldrh	r3, [r3, #12]
 8019368:	b29b      	uxth	r3, r3
 801936a:	4618      	mov	r0, r3
 801936c:	f7f9 fae6 	bl	801293c <lwip_htons>
 8019370:	4603      	mov	r3, r0
 8019372:	b2db      	uxtb	r3, r3
 8019374:	f003 0302 	and.w	r3, r3, #2
 8019378:	2b00      	cmp	r3, #0
 801937a:	d005      	beq.n	8019388 <tcp_receive+0x934>
                inseg.len -= 1;
 801937c:	4b78      	ldr	r3, [pc, #480]	; (8019560 <tcp_receive+0xb0c>)
 801937e:	891b      	ldrh	r3, [r3, #8]
 8019380:	3b01      	subs	r3, #1
 8019382:	b29a      	uxth	r2, r3
 8019384:	4b76      	ldr	r3, [pc, #472]	; (8019560 <tcp_receive+0xb0c>)
 8019386:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019388:	4b75      	ldr	r3, [pc, #468]	; (8019560 <tcp_receive+0xb0c>)
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	4a74      	ldr	r2, [pc, #464]	; (8019560 <tcp_receive+0xb0c>)
 801938e:	8912      	ldrh	r2, [r2, #8]
 8019390:	4611      	mov	r1, r2
 8019392:	4618      	mov	r0, r3
 8019394:	f7fb fcda 	bl	8014d4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019398:	4b71      	ldr	r3, [pc, #452]	; (8019560 <tcp_receive+0xb0c>)
 801939a:	891c      	ldrh	r4, [r3, #8]
 801939c:	4b70      	ldr	r3, [pc, #448]	; (8019560 <tcp_receive+0xb0c>)
 801939e:	68db      	ldr	r3, [r3, #12]
 80193a0:	899b      	ldrh	r3, [r3, #12]
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7f9 fac9 	bl	801293c <lwip_htons>
 80193aa:	4603      	mov	r3, r0
 80193ac:	b2db      	uxtb	r3, r3
 80193ae:	f003 0303 	and.w	r3, r3, #3
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d001      	beq.n	80193ba <tcp_receive+0x966>
 80193b6:	2301      	movs	r3, #1
 80193b8:	e000      	b.n	80193bc <tcp_receive+0x968>
 80193ba:	2300      	movs	r3, #0
 80193bc:	4423      	add	r3, r4
 80193be:	b29a      	uxth	r2, r3
 80193c0:	4b65      	ldr	r3, [pc, #404]	; (8019558 <tcp_receive+0xb04>)
 80193c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80193c4:	4b64      	ldr	r3, [pc, #400]	; (8019558 <tcp_receive+0xb04>)
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	461a      	mov	r2, r3
 80193ca:	4b64      	ldr	r3, [pc, #400]	; (801955c <tcp_receive+0xb08>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	441a      	add	r2, r3
 80193d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193d2:	68db      	ldr	r3, [r3, #12]
 80193d4:	685b      	ldr	r3, [r3, #4]
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d006      	beq.n	80193e8 <tcp_receive+0x994>
 80193da:	4b62      	ldr	r3, [pc, #392]	; (8019564 <tcp_receive+0xb10>)
 80193dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80193e0:	4961      	ldr	r1, [pc, #388]	; (8019568 <tcp_receive+0xb14>)
 80193e2:	4862      	ldr	r0, [pc, #392]	; (801956c <tcp_receive+0xb18>)
 80193e4:	f008 f862 	bl	80214ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80193ec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80193ee:	4b5a      	ldr	r3, [pc, #360]	; (8019558 <tcp_receive+0xb04>)
 80193f0:	881b      	ldrh	r3, [r3, #0]
 80193f2:	461a      	mov	r2, r3
 80193f4:	4b59      	ldr	r3, [pc, #356]	; (801955c <tcp_receive+0xb08>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	441a      	add	r2, r3
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019402:	4b55      	ldr	r3, [pc, #340]	; (8019558 <tcp_receive+0xb04>)
 8019404:	881b      	ldrh	r3, [r3, #0]
 8019406:	429a      	cmp	r2, r3
 8019408:	d206      	bcs.n	8019418 <tcp_receive+0x9c4>
 801940a:	4b56      	ldr	r3, [pc, #344]	; (8019564 <tcp_receive+0xb10>)
 801940c:	f240 6207 	movw	r2, #1543	; 0x607
 8019410:	4957      	ldr	r1, [pc, #348]	; (8019570 <tcp_receive+0xb1c>)
 8019412:	4856      	ldr	r0, [pc, #344]	; (801956c <tcp_receive+0xb18>)
 8019414:	f008 f84a 	bl	80214ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801941c:	4b4e      	ldr	r3, [pc, #312]	; (8019558 <tcp_receive+0xb04>)
 801941e:	881b      	ldrh	r3, [r3, #0]
 8019420:	1ad3      	subs	r3, r2, r3
 8019422:	b29a      	uxth	r2, r3
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019428:	6878      	ldr	r0, [r7, #4]
 801942a:	f7fc fd9d 	bl	8015f68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801942e:	4b4c      	ldr	r3, [pc, #304]	; (8019560 <tcp_receive+0xb0c>)
 8019430:	685b      	ldr	r3, [r3, #4]
 8019432:	891b      	ldrh	r3, [r3, #8]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d006      	beq.n	8019446 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019438:	4b49      	ldr	r3, [pc, #292]	; (8019560 <tcp_receive+0xb0c>)
 801943a:	685b      	ldr	r3, [r3, #4]
 801943c:	4a4d      	ldr	r2, [pc, #308]	; (8019574 <tcp_receive+0xb20>)
 801943e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019440:	4b47      	ldr	r3, [pc, #284]	; (8019560 <tcp_receive+0xb0c>)
 8019442:	2200      	movs	r2, #0
 8019444:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019446:	4b46      	ldr	r3, [pc, #280]	; (8019560 <tcp_receive+0xb0c>)
 8019448:	68db      	ldr	r3, [r3, #12]
 801944a:	899b      	ldrh	r3, [r3, #12]
 801944c:	b29b      	uxth	r3, r3
 801944e:	4618      	mov	r0, r3
 8019450:	f7f9 fa74 	bl	801293c <lwip_htons>
 8019454:	4603      	mov	r3, r0
 8019456:	b2db      	uxtb	r3, r3
 8019458:	f003 0301 	and.w	r3, r3, #1
 801945c:	2b00      	cmp	r3, #0
 801945e:	f000 80b8 	beq.w	80195d2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019462:	4b45      	ldr	r3, [pc, #276]	; (8019578 <tcp_receive+0xb24>)
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	f043 0320 	orr.w	r3, r3, #32
 801946a:	b2da      	uxtb	r2, r3
 801946c:	4b42      	ldr	r3, [pc, #264]	; (8019578 <tcp_receive+0xb24>)
 801946e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019470:	e0af      	b.n	80195d2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019476:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801947c:	68db      	ldr	r3, [r3, #12]
 801947e:	685b      	ldr	r3, [r3, #4]
 8019480:	4a36      	ldr	r2, [pc, #216]	; (801955c <tcp_receive+0xb08>)
 8019482:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019484:	68bb      	ldr	r3, [r7, #8]
 8019486:	891b      	ldrh	r3, [r3, #8]
 8019488:	461c      	mov	r4, r3
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	68db      	ldr	r3, [r3, #12]
 801948e:	899b      	ldrh	r3, [r3, #12]
 8019490:	b29b      	uxth	r3, r3
 8019492:	4618      	mov	r0, r3
 8019494:	f7f9 fa52 	bl	801293c <lwip_htons>
 8019498:	4603      	mov	r3, r0
 801949a:	b2db      	uxtb	r3, r3
 801949c:	f003 0303 	and.w	r3, r3, #3
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d001      	beq.n	80194a8 <tcp_receive+0xa54>
 80194a4:	2301      	movs	r3, #1
 80194a6:	e000      	b.n	80194aa <tcp_receive+0xa56>
 80194a8:	2300      	movs	r3, #0
 80194aa:	191a      	adds	r2, r3, r4
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194b0:	441a      	add	r2, r3
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194ba:	461c      	mov	r4, r3
 80194bc:	68bb      	ldr	r3, [r7, #8]
 80194be:	891b      	ldrh	r3, [r3, #8]
 80194c0:	461d      	mov	r5, r3
 80194c2:	68bb      	ldr	r3, [r7, #8]
 80194c4:	68db      	ldr	r3, [r3, #12]
 80194c6:	899b      	ldrh	r3, [r3, #12]
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7f9 fa36 	bl	801293c <lwip_htons>
 80194d0:	4603      	mov	r3, r0
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	f003 0303 	and.w	r3, r3, #3
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d001      	beq.n	80194e0 <tcp_receive+0xa8c>
 80194dc:	2301      	movs	r3, #1
 80194de:	e000      	b.n	80194e2 <tcp_receive+0xa8e>
 80194e0:	2300      	movs	r3, #0
 80194e2:	442b      	add	r3, r5
 80194e4:	429c      	cmp	r4, r3
 80194e6:	d206      	bcs.n	80194f6 <tcp_receive+0xaa2>
 80194e8:	4b1e      	ldr	r3, [pc, #120]	; (8019564 <tcp_receive+0xb10>)
 80194ea:	f240 622b 	movw	r2, #1579	; 0x62b
 80194ee:	4923      	ldr	r1, [pc, #140]	; (801957c <tcp_receive+0xb28>)
 80194f0:	481e      	ldr	r0, [pc, #120]	; (801956c <tcp_receive+0xb18>)
 80194f2:	f007 ffdb 	bl	80214ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	891b      	ldrh	r3, [r3, #8]
 80194fa:	461c      	mov	r4, r3
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	68db      	ldr	r3, [r3, #12]
 8019500:	899b      	ldrh	r3, [r3, #12]
 8019502:	b29b      	uxth	r3, r3
 8019504:	4618      	mov	r0, r3
 8019506:	f7f9 fa19 	bl	801293c <lwip_htons>
 801950a:	4603      	mov	r3, r0
 801950c:	b2db      	uxtb	r3, r3
 801950e:	f003 0303 	and.w	r3, r3, #3
 8019512:	2b00      	cmp	r3, #0
 8019514:	d001      	beq.n	801951a <tcp_receive+0xac6>
 8019516:	2301      	movs	r3, #1
 8019518:	e000      	b.n	801951c <tcp_receive+0xac8>
 801951a:	2300      	movs	r3, #0
 801951c:	1919      	adds	r1, r3, r4
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019522:	b28b      	uxth	r3, r1
 8019524:	1ad3      	subs	r3, r2, r3
 8019526:	b29a      	uxth	r2, r3
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	f7fc fd1b 	bl	8015f68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019532:	68bb      	ldr	r3, [r7, #8]
 8019534:	685b      	ldr	r3, [r3, #4]
 8019536:	891b      	ldrh	r3, [r3, #8]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d028      	beq.n	801958e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801953c:	4b0d      	ldr	r3, [pc, #52]	; (8019574 <tcp_receive+0xb20>)
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d01d      	beq.n	8019580 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019544:	4b0b      	ldr	r3, [pc, #44]	; (8019574 <tcp_receive+0xb20>)
 8019546:	681a      	ldr	r2, [r3, #0]
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	4619      	mov	r1, r3
 801954e:	4610      	mov	r0, r2
 8019550:	f7fb fe50 	bl	80151f4 <pbuf_cat>
 8019554:	e018      	b.n	8019588 <tcp_receive+0xb34>
 8019556:	bf00      	nop
 8019558:	200055b2 	.word	0x200055b2
 801955c:	200055a8 	.word	0x200055a8
 8019560:	20005588 	.word	0x20005588
 8019564:	080255ac 	.word	0x080255ac
 8019568:	0802598c 	.word	0x0802598c
 801956c:	080255f8 	.word	0x080255f8
 8019570:	080259c8 	.word	0x080259c8
 8019574:	200055b8 	.word	0x200055b8
 8019578:	200055b5 	.word	0x200055b5
 801957c:	080259e8 	.word	0x080259e8
            } else {
              recv_data = cseg->p;
 8019580:	68bb      	ldr	r3, [r7, #8]
 8019582:	685b      	ldr	r3, [r3, #4]
 8019584:	4a70      	ldr	r2, [pc, #448]	; (8019748 <tcp_receive+0xcf4>)
 8019586:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	2200      	movs	r2, #0
 801958c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	68db      	ldr	r3, [r3, #12]
 8019592:	899b      	ldrh	r3, [r3, #12]
 8019594:	b29b      	uxth	r3, r3
 8019596:	4618      	mov	r0, r3
 8019598:	f7f9 f9d0 	bl	801293c <lwip_htons>
 801959c:	4603      	mov	r3, r0
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	f003 0301 	and.w	r3, r3, #1
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d00d      	beq.n	80195c4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80195a8:	4b68      	ldr	r3, [pc, #416]	; (801974c <tcp_receive+0xcf8>)
 80195aa:	781b      	ldrb	r3, [r3, #0]
 80195ac:	f043 0320 	orr.w	r3, r3, #32
 80195b0:	b2da      	uxtb	r2, r3
 80195b2:	4b66      	ldr	r3, [pc, #408]	; (801974c <tcp_receive+0xcf8>)
 80195b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	7d1b      	ldrb	r3, [r3, #20]
 80195ba:	2b04      	cmp	r3, #4
 80195bc:	d102      	bne.n	80195c4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	2207      	movs	r2, #7
 80195c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80195c4:	68bb      	ldr	r3, [r7, #8]
 80195c6:	681a      	ldr	r2, [r3, #0]
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80195cc:	68b8      	ldr	r0, [r7, #8]
 80195ce:	f7fd fb08 	bl	8016be2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d008      	beq.n	80195ec <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80195de:	68db      	ldr	r3, [r3, #12]
 80195e0:	685a      	ldr	r2, [r3, #4]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80195e6:	429a      	cmp	r2, r3
 80195e8:	f43f af43 	beq.w	8019472 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	8b5b      	ldrh	r3, [r3, #26]
 80195f0:	f003 0301 	and.w	r3, r3, #1
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d00e      	beq.n	8019616 <tcp_receive+0xbc2>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	8b5b      	ldrh	r3, [r3, #26]
 80195fc:	f023 0301 	bic.w	r3, r3, #1
 8019600:	b29a      	uxth	r2, r3
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	835a      	strh	r2, [r3, #26]
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	8b5b      	ldrh	r3, [r3, #26]
 801960a:	f043 0302 	orr.w	r3, r3, #2
 801960e:	b29a      	uxth	r2, r3
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019614:	e188      	b.n	8019928 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	8b5b      	ldrh	r3, [r3, #26]
 801961a:	f043 0301 	orr.w	r3, r3, #1
 801961e:	b29a      	uxth	r2, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019624:	e180      	b.n	8019928 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801962a:	2b00      	cmp	r3, #0
 801962c:	d106      	bne.n	801963c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801962e:	4848      	ldr	r0, [pc, #288]	; (8019750 <tcp_receive+0xcfc>)
 8019630:	f7fd faf0 	bl	8016c14 <tcp_seg_copy>
 8019634:	4602      	mov	r2, r0
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	675a      	str	r2, [r3, #116]	; 0x74
 801963a:	e16d      	b.n	8019918 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801963c:	2300      	movs	r3, #0
 801963e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019644:	63bb      	str	r3, [r7, #56]	; 0x38
 8019646:	e157      	b.n	80198f8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801964a:	68db      	ldr	r3, [r3, #12]
 801964c:	685a      	ldr	r2, [r3, #4]
 801964e:	4b41      	ldr	r3, [pc, #260]	; (8019754 <tcp_receive+0xd00>)
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	429a      	cmp	r2, r3
 8019654:	d11d      	bne.n	8019692 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019656:	4b3e      	ldr	r3, [pc, #248]	; (8019750 <tcp_receive+0xcfc>)
 8019658:	891a      	ldrh	r2, [r3, #8]
 801965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801965c:	891b      	ldrh	r3, [r3, #8]
 801965e:	429a      	cmp	r2, r3
 8019660:	f240 814f 	bls.w	8019902 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019664:	483a      	ldr	r0, [pc, #232]	; (8019750 <tcp_receive+0xcfc>)
 8019666:	f7fd fad5 	bl	8016c14 <tcp_seg_copy>
 801966a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	2b00      	cmp	r3, #0
 8019670:	f000 8149 	beq.w	8019906 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019676:	2b00      	cmp	r3, #0
 8019678:	d003      	beq.n	8019682 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801967c:	697a      	ldr	r2, [r7, #20]
 801967e:	601a      	str	r2, [r3, #0]
 8019680:	e002      	b.n	8019688 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	697a      	ldr	r2, [r7, #20]
 8019686:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019688:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801968a:	6978      	ldr	r0, [r7, #20]
 801968c:	f7ff f8de 	bl	801884c <tcp_oos_insert_segment>
                }
                break;
 8019690:	e139      	b.n	8019906 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019694:	2b00      	cmp	r3, #0
 8019696:	d117      	bne.n	80196c8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019698:	4b2e      	ldr	r3, [pc, #184]	; (8019754 <tcp_receive+0xd00>)
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969e:	68db      	ldr	r3, [r3, #12]
 80196a0:	685b      	ldr	r3, [r3, #4]
 80196a2:	1ad3      	subs	r3, r2, r3
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	da57      	bge.n	8019758 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80196a8:	4829      	ldr	r0, [pc, #164]	; (8019750 <tcp_receive+0xcfc>)
 80196aa:	f7fd fab3 	bl	8016c14 <tcp_seg_copy>
 80196ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80196b0:	69bb      	ldr	r3, [r7, #24]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	f000 8129 	beq.w	801990a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	69ba      	ldr	r2, [r7, #24]
 80196bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80196be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80196c0:	69b8      	ldr	r0, [r7, #24]
 80196c2:	f7ff f8c3 	bl	801884c <tcp_oos_insert_segment>
                  }
                  break;
 80196c6:	e120      	b.n	801990a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80196c8:	4b22      	ldr	r3, [pc, #136]	; (8019754 <tcp_receive+0xd00>)
 80196ca:	681a      	ldr	r2, [r3, #0]
 80196cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ce:	68db      	ldr	r3, [r3, #12]
 80196d0:	685b      	ldr	r3, [r3, #4]
 80196d2:	1ad3      	subs	r3, r2, r3
 80196d4:	3b01      	subs	r3, #1
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	db3e      	blt.n	8019758 <tcp_receive+0xd04>
 80196da:	4b1e      	ldr	r3, [pc, #120]	; (8019754 <tcp_receive+0xd00>)
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e0:	68db      	ldr	r3, [r3, #12]
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	1ad3      	subs	r3, r2, r3
 80196e6:	3301      	adds	r3, #1
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	dc35      	bgt.n	8019758 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80196ec:	4818      	ldr	r0, [pc, #96]	; (8019750 <tcp_receive+0xcfc>)
 80196ee:	f7fd fa91 	bl	8016c14 <tcp_seg_copy>
 80196f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80196f4:	69fb      	ldr	r3, [r7, #28]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	f000 8109 	beq.w	801990e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80196fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196fe:	68db      	ldr	r3, [r3, #12]
 8019700:	685b      	ldr	r3, [r3, #4]
 8019702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019704:	8912      	ldrh	r2, [r2, #8]
 8019706:	441a      	add	r2, r3
 8019708:	4b12      	ldr	r3, [pc, #72]	; (8019754 <tcp_receive+0xd00>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	1ad3      	subs	r3, r2, r3
 801970e:	2b00      	cmp	r3, #0
 8019710:	dd12      	ble.n	8019738 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019712:	4b10      	ldr	r3, [pc, #64]	; (8019754 <tcp_receive+0xd00>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	b29a      	uxth	r2, r3
 8019718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801971a:	68db      	ldr	r3, [r3, #12]
 801971c:	685b      	ldr	r3, [r3, #4]
 801971e:	b29b      	uxth	r3, r3
 8019720:	1ad3      	subs	r3, r2, r3
 8019722:	b29a      	uxth	r2, r3
 8019724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019726:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801972a:	685a      	ldr	r2, [r3, #4]
 801972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801972e:	891b      	ldrh	r3, [r3, #8]
 8019730:	4619      	mov	r1, r3
 8019732:	4610      	mov	r0, r2
 8019734:	f7fb fb0a 	bl	8014d4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801973a:	69fa      	ldr	r2, [r7, #28]
 801973c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801973e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019740:	69f8      	ldr	r0, [r7, #28]
 8019742:	f7ff f883 	bl	801884c <tcp_oos_insert_segment>
                  }
                  break;
 8019746:	e0e2      	b.n	801990e <tcp_receive+0xeba>
 8019748:	200055b8 	.word	0x200055b8
 801974c:	200055b5 	.word	0x200055b5
 8019750:	20005588 	.word	0x20005588
 8019754:	200055a8 	.word	0x200055a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801975a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	f040 80c6 	bne.w	80198f2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019766:	4b80      	ldr	r3, [pc, #512]	; (8019968 <tcp_receive+0xf14>)
 8019768:	681a      	ldr	r2, [r3, #0]
 801976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976c:	68db      	ldr	r3, [r3, #12]
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019772:	2b00      	cmp	r3, #0
 8019774:	f340 80bd 	ble.w	80198f2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977a:	68db      	ldr	r3, [r3, #12]
 801977c:	899b      	ldrh	r3, [r3, #12]
 801977e:	b29b      	uxth	r3, r3
 8019780:	4618      	mov	r0, r3
 8019782:	f7f9 f8db 	bl	801293c <lwip_htons>
 8019786:	4603      	mov	r3, r0
 8019788:	b2db      	uxtb	r3, r3
 801978a:	f003 0301 	and.w	r3, r3, #1
 801978e:	2b00      	cmp	r3, #0
 8019790:	f040 80bf 	bne.w	8019912 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019794:	4875      	ldr	r0, [pc, #468]	; (801996c <tcp_receive+0xf18>)
 8019796:	f7fd fa3d 	bl	8016c14 <tcp_seg_copy>
 801979a:	4602      	mov	r2, r0
 801979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801979e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80197a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	f000 80b6 	beq.w	8019916 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80197aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ac:	68db      	ldr	r3, [r3, #12]
 80197ae:	685b      	ldr	r3, [r3, #4]
 80197b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80197b2:	8912      	ldrh	r2, [r2, #8]
 80197b4:	441a      	add	r2, r3
 80197b6:	4b6c      	ldr	r3, [pc, #432]	; (8019968 <tcp_receive+0xf14>)
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	1ad3      	subs	r3, r2, r3
 80197bc:	2b00      	cmp	r3, #0
 80197be:	dd12      	ble.n	80197e6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80197c0:	4b69      	ldr	r3, [pc, #420]	; (8019968 <tcp_receive+0xf14>)
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	b29a      	uxth	r2, r3
 80197c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197c8:	68db      	ldr	r3, [r3, #12]
 80197ca:	685b      	ldr	r3, [r3, #4]
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80197d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d8:	685a      	ldr	r2, [r3, #4]
 80197da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197dc:	891b      	ldrh	r3, [r3, #8]
 80197de:	4619      	mov	r1, r3
 80197e0:	4610      	mov	r0, r2
 80197e2:	f7fb fab3 	bl	8014d4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80197e6:	4b62      	ldr	r3, [pc, #392]	; (8019970 <tcp_receive+0xf1c>)
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	461a      	mov	r2, r3
 80197ec:	4b5e      	ldr	r3, [pc, #376]	; (8019968 <tcp_receive+0xf14>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	441a      	add	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197f6:	6879      	ldr	r1, [r7, #4]
 80197f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80197fa:	440b      	add	r3, r1
 80197fc:	1ad3      	subs	r3, r2, r3
 80197fe:	2b00      	cmp	r3, #0
 8019800:	f340 8089 	ble.w	8019916 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	68db      	ldr	r3, [r3, #12]
 801980a:	899b      	ldrh	r3, [r3, #12]
 801980c:	b29b      	uxth	r3, r3
 801980e:	4618      	mov	r0, r3
 8019810:	f7f9 f894 	bl	801293c <lwip_htons>
 8019814:	4603      	mov	r3, r0
 8019816:	b2db      	uxtb	r3, r3
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	2b00      	cmp	r3, #0
 801981e:	d022      	beq.n	8019866 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	68db      	ldr	r3, [r3, #12]
 8019826:	899b      	ldrh	r3, [r3, #12]
 8019828:	b29b      	uxth	r3, r3
 801982a:	b21b      	sxth	r3, r3
 801982c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019830:	b21c      	sxth	r4, r3
 8019832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	899b      	ldrh	r3, [r3, #12]
 801983a:	b29b      	uxth	r3, r3
 801983c:	4618      	mov	r0, r3
 801983e:	f7f9 f87d 	bl	801293c <lwip_htons>
 8019842:	4603      	mov	r3, r0
 8019844:	b2db      	uxtb	r3, r3
 8019846:	b29b      	uxth	r3, r3
 8019848:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801984c:	b29b      	uxth	r3, r3
 801984e:	4618      	mov	r0, r3
 8019850:	f7f9 f874 	bl	801293c <lwip_htons>
 8019854:	4603      	mov	r3, r0
 8019856:	b21b      	sxth	r3, r3
 8019858:	4323      	orrs	r3, r4
 801985a:	b21a      	sxth	r2, r3
 801985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	68db      	ldr	r3, [r3, #12]
 8019862:	b292      	uxth	r2, r2
 8019864:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801986a:	b29a      	uxth	r2, r3
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019870:	4413      	add	r3, r2
 8019872:	b299      	uxth	r1, r3
 8019874:	4b3c      	ldr	r3, [pc, #240]	; (8019968 <tcp_receive+0xf14>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	b29a      	uxth	r2, r3
 801987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	1a8a      	subs	r2, r1, r2
 8019880:	b292      	uxth	r2, r2
 8019882:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	685a      	ldr	r2, [r3, #4]
 801988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	891b      	ldrh	r3, [r3, #8]
 8019890:	4619      	mov	r1, r3
 8019892:	4610      	mov	r0, r2
 8019894:	f7fb fa5a 	bl	8014d4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	891c      	ldrh	r4, [r3, #8]
 801989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	68db      	ldr	r3, [r3, #12]
 80198a4:	899b      	ldrh	r3, [r3, #12]
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7f9 f847 	bl	801293c <lwip_htons>
 80198ae:	4603      	mov	r3, r0
 80198b0:	b2db      	uxtb	r3, r3
 80198b2:	f003 0303 	and.w	r3, r3, #3
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d001      	beq.n	80198be <tcp_receive+0xe6a>
 80198ba:	2301      	movs	r3, #1
 80198bc:	e000      	b.n	80198c0 <tcp_receive+0xe6c>
 80198be:	2300      	movs	r3, #0
 80198c0:	4423      	add	r3, r4
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	4b2a      	ldr	r3, [pc, #168]	; (8019970 <tcp_receive+0xf1c>)
 80198c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80198c8:	4b29      	ldr	r3, [pc, #164]	; (8019970 <tcp_receive+0xf1c>)
 80198ca:	881b      	ldrh	r3, [r3, #0]
 80198cc:	461a      	mov	r2, r3
 80198ce:	4b26      	ldr	r3, [pc, #152]	; (8019968 <tcp_receive+0xf14>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	441a      	add	r2, r3
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198d8:	6879      	ldr	r1, [r7, #4]
 80198da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80198dc:	440b      	add	r3, r1
 80198de:	429a      	cmp	r2, r3
 80198e0:	d019      	beq.n	8019916 <tcp_receive+0xec2>
 80198e2:	4b24      	ldr	r3, [pc, #144]	; (8019974 <tcp_receive+0xf20>)
 80198e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80198e8:	4923      	ldr	r1, [pc, #140]	; (8019978 <tcp_receive+0xf24>)
 80198ea:	4824      	ldr	r0, [pc, #144]	; (801997c <tcp_receive+0xf28>)
 80198ec:	f007 fdde 	bl	80214ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80198f0:	e011      	b.n	8019916 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80198f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80198f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	f47f aea4 	bne.w	8019648 <tcp_receive+0xbf4>
 8019900:	e00a      	b.n	8019918 <tcp_receive+0xec4>
                break;
 8019902:	bf00      	nop
 8019904:	e008      	b.n	8019918 <tcp_receive+0xec4>
                break;
 8019906:	bf00      	nop
 8019908:	e006      	b.n	8019918 <tcp_receive+0xec4>
                  break;
 801990a:	bf00      	nop
 801990c:	e004      	b.n	8019918 <tcp_receive+0xec4>
                  break;
 801990e:	bf00      	nop
 8019910:	e002      	b.n	8019918 <tcp_receive+0xec4>
                  break;
 8019912:	bf00      	nop
 8019914:	e000      	b.n	8019918 <tcp_receive+0xec4>
                break;
 8019916:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019918:	6878      	ldr	r0, [r7, #4]
 801991a:	f001 fe8b 	bl	801b634 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801991e:	e003      	b.n	8019928 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019920:	6878      	ldr	r0, [r7, #4]
 8019922:	f001 fe87 	bl	801b634 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019926:	e01a      	b.n	801995e <tcp_receive+0xf0a>
 8019928:	e019      	b.n	801995e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801992a:	4b0f      	ldr	r3, [pc, #60]	; (8019968 <tcp_receive+0xf14>)
 801992c:	681a      	ldr	r2, [r3, #0]
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019932:	1ad3      	subs	r3, r2, r3
 8019934:	2b00      	cmp	r3, #0
 8019936:	db0a      	blt.n	801994e <tcp_receive+0xefa>
 8019938:	4b0b      	ldr	r3, [pc, #44]	; (8019968 <tcp_receive+0xf14>)
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019940:	6879      	ldr	r1, [r7, #4]
 8019942:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019944:	440b      	add	r3, r1
 8019946:	1ad3      	subs	r3, r2, r3
 8019948:	3301      	adds	r3, #1
 801994a:	2b00      	cmp	r3, #0
 801994c:	dd07      	ble.n	801995e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	8b5b      	ldrh	r3, [r3, #26]
 8019952:	f043 0302 	orr.w	r3, r3, #2
 8019956:	b29a      	uxth	r2, r3
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801995c:	e7ff      	b.n	801995e <tcp_receive+0xf0a>
 801995e:	bf00      	nop
 8019960:	3750      	adds	r7, #80	; 0x50
 8019962:	46bd      	mov	sp, r7
 8019964:	bdb0      	pop	{r4, r5, r7, pc}
 8019966:	bf00      	nop
 8019968:	200055a8 	.word	0x200055a8
 801996c:	20005588 	.word	0x20005588
 8019970:	200055b2 	.word	0x200055b2
 8019974:	080255ac 	.word	0x080255ac
 8019978:	08025954 	.word	0x08025954
 801997c:	080255f8 	.word	0x080255f8

08019980 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019980:	b480      	push	{r7}
 8019982:	b083      	sub	sp, #12
 8019984:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019986:	4b15      	ldr	r3, [pc, #84]	; (80199dc <tcp_get_next_optbyte+0x5c>)
 8019988:	881b      	ldrh	r3, [r3, #0]
 801998a:	1c5a      	adds	r2, r3, #1
 801998c:	b291      	uxth	r1, r2
 801998e:	4a13      	ldr	r2, [pc, #76]	; (80199dc <tcp_get_next_optbyte+0x5c>)
 8019990:	8011      	strh	r1, [r2, #0]
 8019992:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019994:	4b12      	ldr	r3, [pc, #72]	; (80199e0 <tcp_get_next_optbyte+0x60>)
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d004      	beq.n	80199a6 <tcp_get_next_optbyte+0x26>
 801999c:	4b11      	ldr	r3, [pc, #68]	; (80199e4 <tcp_get_next_optbyte+0x64>)
 801999e:	881b      	ldrh	r3, [r3, #0]
 80199a0:	88fa      	ldrh	r2, [r7, #6]
 80199a2:	429a      	cmp	r2, r3
 80199a4:	d208      	bcs.n	80199b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80199a6:	4b10      	ldr	r3, [pc, #64]	; (80199e8 <tcp_get_next_optbyte+0x68>)
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	3314      	adds	r3, #20
 80199ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80199ae:	88fb      	ldrh	r3, [r7, #6]
 80199b0:	683a      	ldr	r2, [r7, #0]
 80199b2:	4413      	add	r3, r2
 80199b4:	781b      	ldrb	r3, [r3, #0]
 80199b6:	e00b      	b.n	80199d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80199b8:	88fb      	ldrh	r3, [r7, #6]
 80199ba:	b2da      	uxtb	r2, r3
 80199bc:	4b09      	ldr	r3, [pc, #36]	; (80199e4 <tcp_get_next_optbyte+0x64>)
 80199be:	881b      	ldrh	r3, [r3, #0]
 80199c0:	b2db      	uxtb	r3, r3
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80199c6:	4b06      	ldr	r3, [pc, #24]	; (80199e0 <tcp_get_next_optbyte+0x60>)
 80199c8:	681a      	ldr	r2, [r3, #0]
 80199ca:	797b      	ldrb	r3, [r7, #5]
 80199cc:	4413      	add	r3, r2
 80199ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	370c      	adds	r7, #12
 80199d4:	46bd      	mov	sp, r7
 80199d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199da:	4770      	bx	lr
 80199dc:	200055a4 	.word	0x200055a4
 80199e0:	200055a0 	.word	0x200055a0
 80199e4:	2000559e 	.word	0x2000559e
 80199e8:	20005598 	.word	0x20005598

080199ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d106      	bne.n	8019a08 <tcp_parseopt+0x1c>
 80199fa:	4b32      	ldr	r3, [pc, #200]	; (8019ac4 <tcp_parseopt+0xd8>)
 80199fc:	f240 727d 	movw	r2, #1917	; 0x77d
 8019a00:	4931      	ldr	r1, [pc, #196]	; (8019ac8 <tcp_parseopt+0xdc>)
 8019a02:	4832      	ldr	r0, [pc, #200]	; (8019acc <tcp_parseopt+0xe0>)
 8019a04:	f007 fd52 	bl	80214ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019a08:	4b31      	ldr	r3, [pc, #196]	; (8019ad0 <tcp_parseopt+0xe4>)
 8019a0a:	881b      	ldrh	r3, [r3, #0]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d055      	beq.n	8019abc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019a10:	4b30      	ldr	r3, [pc, #192]	; (8019ad4 <tcp_parseopt+0xe8>)
 8019a12:	2200      	movs	r2, #0
 8019a14:	801a      	strh	r2, [r3, #0]
 8019a16:	e045      	b.n	8019aa4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8019a18:	f7ff ffb2 	bl	8019980 <tcp_get_next_optbyte>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019a20:	7bfb      	ldrb	r3, [r7, #15]
 8019a22:	2b02      	cmp	r3, #2
 8019a24:	d006      	beq.n	8019a34 <tcp_parseopt+0x48>
 8019a26:	2b02      	cmp	r3, #2
 8019a28:	dc2b      	bgt.n	8019a82 <tcp_parseopt+0x96>
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d041      	beq.n	8019ab2 <tcp_parseopt+0xc6>
 8019a2e:	2b01      	cmp	r3, #1
 8019a30:	d127      	bne.n	8019a82 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8019a32:	e037      	b.n	8019aa4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019a34:	f7ff ffa4 	bl	8019980 <tcp_get_next_optbyte>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	2b04      	cmp	r3, #4
 8019a3c:	d13b      	bne.n	8019ab6 <tcp_parseopt+0xca>
 8019a3e:	4b25      	ldr	r3, [pc, #148]	; (8019ad4 <tcp_parseopt+0xe8>)
 8019a40:	881b      	ldrh	r3, [r3, #0]
 8019a42:	3301      	adds	r3, #1
 8019a44:	4a22      	ldr	r2, [pc, #136]	; (8019ad0 <tcp_parseopt+0xe4>)
 8019a46:	8812      	ldrh	r2, [r2, #0]
 8019a48:	4293      	cmp	r3, r2
 8019a4a:	da34      	bge.n	8019ab6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019a4c:	f7ff ff98 	bl	8019980 <tcp_get_next_optbyte>
 8019a50:	4603      	mov	r3, r0
 8019a52:	b29b      	uxth	r3, r3
 8019a54:	021b      	lsls	r3, r3, #8
 8019a56:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019a58:	f7ff ff92 	bl	8019980 <tcp_get_next_optbyte>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	b29a      	uxth	r2, r3
 8019a60:	89bb      	ldrh	r3, [r7, #12]
 8019a62:	4313      	orrs	r3, r2
 8019a64:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019a66:	89bb      	ldrh	r3, [r7, #12]
 8019a68:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019a6c:	d804      	bhi.n	8019a78 <tcp_parseopt+0x8c>
 8019a6e:	89bb      	ldrh	r3, [r7, #12]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d001      	beq.n	8019a78 <tcp_parseopt+0x8c>
 8019a74:	89ba      	ldrh	r2, [r7, #12]
 8019a76:	e001      	b.n	8019a7c <tcp_parseopt+0x90>
 8019a78:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019a80:	e010      	b.n	8019aa4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019a82:	f7ff ff7d 	bl	8019980 <tcp_get_next_optbyte>
 8019a86:	4603      	mov	r3, r0
 8019a88:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019a8a:	7afb      	ldrb	r3, [r7, #11]
 8019a8c:	2b01      	cmp	r3, #1
 8019a8e:	d914      	bls.n	8019aba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019a90:	7afb      	ldrb	r3, [r7, #11]
 8019a92:	b29a      	uxth	r2, r3
 8019a94:	4b0f      	ldr	r3, [pc, #60]	; (8019ad4 <tcp_parseopt+0xe8>)
 8019a96:	881b      	ldrh	r3, [r3, #0]
 8019a98:	4413      	add	r3, r2
 8019a9a:	b29b      	uxth	r3, r3
 8019a9c:	3b02      	subs	r3, #2
 8019a9e:	b29a      	uxth	r2, r3
 8019aa0:	4b0c      	ldr	r3, [pc, #48]	; (8019ad4 <tcp_parseopt+0xe8>)
 8019aa2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019aa4:	4b0b      	ldr	r3, [pc, #44]	; (8019ad4 <tcp_parseopt+0xe8>)
 8019aa6:	881a      	ldrh	r2, [r3, #0]
 8019aa8:	4b09      	ldr	r3, [pc, #36]	; (8019ad0 <tcp_parseopt+0xe4>)
 8019aaa:	881b      	ldrh	r3, [r3, #0]
 8019aac:	429a      	cmp	r2, r3
 8019aae:	d3b3      	bcc.n	8019a18 <tcp_parseopt+0x2c>
 8019ab0:	e004      	b.n	8019abc <tcp_parseopt+0xd0>
          return;
 8019ab2:	bf00      	nop
 8019ab4:	e002      	b.n	8019abc <tcp_parseopt+0xd0>
            return;
 8019ab6:	bf00      	nop
 8019ab8:	e000      	b.n	8019abc <tcp_parseopt+0xd0>
            return;
 8019aba:	bf00      	nop
      }
    }
  }
}
 8019abc:	3710      	adds	r7, #16
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	bd80      	pop	{r7, pc}
 8019ac2:	bf00      	nop
 8019ac4:	080255ac 	.word	0x080255ac
 8019ac8:	08025a10 	.word	0x08025a10
 8019acc:	080255f8 	.word	0x080255f8
 8019ad0:	2000559c 	.word	0x2000559c
 8019ad4:	200055a4 	.word	0x200055a4

08019ad8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019ad8:	b480      	push	{r7}
 8019ada:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019adc:	4b05      	ldr	r3, [pc, #20]	; (8019af4 <tcp_trigger_input_pcb_close+0x1c>)
 8019ade:	781b      	ldrb	r3, [r3, #0]
 8019ae0:	f043 0310 	orr.w	r3, r3, #16
 8019ae4:	b2da      	uxtb	r2, r3
 8019ae6:	4b03      	ldr	r3, [pc, #12]	; (8019af4 <tcp_trigger_input_pcb_close+0x1c>)
 8019ae8:	701a      	strb	r2, [r3, #0]
}
 8019aea:	bf00      	nop
 8019aec:	46bd      	mov	sp, r7
 8019aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af2:	4770      	bx	lr
 8019af4:	200055b5 	.word	0x200055b5

08019af8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b084      	sub	sp, #16
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	60f8      	str	r0, [r7, #12]
 8019b00:	60b9      	str	r1, [r7, #8]
 8019b02:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d00a      	beq.n	8019b20 <tcp_route+0x28>
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	7a1b      	ldrb	r3, [r3, #8]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d006      	beq.n	8019b20 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	7a1b      	ldrb	r3, [r3, #8]
 8019b16:	4618      	mov	r0, r3
 8019b18:	f7fa ff10 	bl	801493c <netif_get_by_index>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	e003      	b.n	8019b28 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f005 fdb1 	bl	801f688 <ip4_route>
 8019b26:	4603      	mov	r3, r0
  }
}
 8019b28:	4618      	mov	r0, r3
 8019b2a:	3710      	adds	r7, #16
 8019b2c:	46bd      	mov	sp, r7
 8019b2e:	bd80      	pop	{r7, pc}

08019b30 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019b30:	b590      	push	{r4, r7, lr}
 8019b32:	b087      	sub	sp, #28
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	60f8      	str	r0, [r7, #12]
 8019b38:	60b9      	str	r1, [r7, #8]
 8019b3a:	603b      	str	r3, [r7, #0]
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d105      	bne.n	8019b52 <tcp_create_segment+0x22>
 8019b46:	4b44      	ldr	r3, [pc, #272]	; (8019c58 <tcp_create_segment+0x128>)
 8019b48:	22a3      	movs	r2, #163	; 0xa3
 8019b4a:	4944      	ldr	r1, [pc, #272]	; (8019c5c <tcp_create_segment+0x12c>)
 8019b4c:	4844      	ldr	r0, [pc, #272]	; (8019c60 <tcp_create_segment+0x130>)
 8019b4e:	f007 fcad 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019b52:	68bb      	ldr	r3, [r7, #8]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d105      	bne.n	8019b64 <tcp_create_segment+0x34>
 8019b58:	4b3f      	ldr	r3, [pc, #252]	; (8019c58 <tcp_create_segment+0x128>)
 8019b5a:	22a4      	movs	r2, #164	; 0xa4
 8019b5c:	4941      	ldr	r1, [pc, #260]	; (8019c64 <tcp_create_segment+0x134>)
 8019b5e:	4840      	ldr	r0, [pc, #256]	; (8019c60 <tcp_create_segment+0x130>)
 8019b60:	f007 fca4 	bl	80214ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	b2db      	uxtb	r3, r3
 8019b6c:	f003 0304 	and.w	r3, r3, #4
 8019b70:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019b72:	2003      	movs	r0, #3
 8019b74:	f7fa fb6e 	bl	8014254 <memp_malloc>
 8019b78:	6138      	str	r0, [r7, #16]
 8019b7a:	693b      	ldr	r3, [r7, #16]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d104      	bne.n	8019b8a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019b80:	68b8      	ldr	r0, [r7, #8]
 8019b82:	f7fb fa69 	bl	8015058 <pbuf_free>
    return NULL;
 8019b86:	2300      	movs	r3, #0
 8019b88:	e061      	b.n	8019c4e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8019b8a:	693b      	ldr	r3, [r7, #16]
 8019b8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019b90:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019b92:	693b      	ldr	r3, [r7, #16]
 8019b94:	2200      	movs	r2, #0
 8019b96:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019b98:	693b      	ldr	r3, [r7, #16]
 8019b9a:	68ba      	ldr	r2, [r7, #8]
 8019b9c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	891a      	ldrh	r2, [r3, #8]
 8019ba2:	7dfb      	ldrb	r3, [r7, #23]
 8019ba4:	b29b      	uxth	r3, r3
 8019ba6:	429a      	cmp	r2, r3
 8019ba8:	d205      	bcs.n	8019bb6 <tcp_create_segment+0x86>
 8019baa:	4b2b      	ldr	r3, [pc, #172]	; (8019c58 <tcp_create_segment+0x128>)
 8019bac:	22b0      	movs	r2, #176	; 0xb0
 8019bae:	492e      	ldr	r1, [pc, #184]	; (8019c68 <tcp_create_segment+0x138>)
 8019bb0:	482b      	ldr	r0, [pc, #172]	; (8019c60 <tcp_create_segment+0x130>)
 8019bb2:	f007 fc7b 	bl	80214ac <iprintf>
  seg->len = p->tot_len - optlen;
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	891a      	ldrh	r2, [r3, #8]
 8019bba:	7dfb      	ldrb	r3, [r7, #23]
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	1ad3      	subs	r3, r2, r3
 8019bc0:	b29a      	uxth	r2, r3
 8019bc2:	693b      	ldr	r3, [r7, #16]
 8019bc4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019bc6:	2114      	movs	r1, #20
 8019bc8:	68b8      	ldr	r0, [r7, #8]
 8019bca:	f7fb f9af 	bl	8014f2c <pbuf_add_header>
 8019bce:	4603      	mov	r3, r0
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d004      	beq.n	8019bde <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019bd4:	6938      	ldr	r0, [r7, #16]
 8019bd6:	f7fd f804 	bl	8016be2 <tcp_seg_free>
    return NULL;
 8019bda:	2300      	movs	r3, #0
 8019bdc:	e037      	b.n	8019c4e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019bde:	693b      	ldr	r3, [r7, #16]
 8019be0:	685b      	ldr	r3, [r3, #4]
 8019be2:	685a      	ldr	r2, [r3, #4]
 8019be4:	693b      	ldr	r3, [r7, #16]
 8019be6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	8ada      	ldrh	r2, [r3, #22]
 8019bec:	693b      	ldr	r3, [r7, #16]
 8019bee:	68dc      	ldr	r4, [r3, #12]
 8019bf0:	4610      	mov	r0, r2
 8019bf2:	f7f8 fea3 	bl	801293c <lwip_htons>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	8b1a      	ldrh	r2, [r3, #24]
 8019bfe:	693b      	ldr	r3, [r7, #16]
 8019c00:	68dc      	ldr	r4, [r3, #12]
 8019c02:	4610      	mov	r0, r2
 8019c04:	f7f8 fe9a 	bl	801293c <lwip_htons>
 8019c08:	4603      	mov	r3, r0
 8019c0a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019c0c:	693b      	ldr	r3, [r7, #16]
 8019c0e:	68dc      	ldr	r4, [r3, #12]
 8019c10:	6838      	ldr	r0, [r7, #0]
 8019c12:	f7f8 fea8 	bl	8012966 <lwip_htonl>
 8019c16:	4603      	mov	r3, r0
 8019c18:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019c1a:	7dfb      	ldrb	r3, [r7, #23]
 8019c1c:	089b      	lsrs	r3, r3, #2
 8019c1e:	b2db      	uxtb	r3, r3
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	3305      	adds	r3, #5
 8019c24:	b29b      	uxth	r3, r3
 8019c26:	031b      	lsls	r3, r3, #12
 8019c28:	b29a      	uxth	r2, r3
 8019c2a:	79fb      	ldrb	r3, [r7, #7]
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	4313      	orrs	r3, r2
 8019c30:	b29a      	uxth	r2, r3
 8019c32:	693b      	ldr	r3, [r7, #16]
 8019c34:	68dc      	ldr	r4, [r3, #12]
 8019c36:	4610      	mov	r0, r2
 8019c38:	f7f8 fe80 	bl	801293c <lwip_htons>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	68db      	ldr	r3, [r3, #12]
 8019c44:	2200      	movs	r2, #0
 8019c46:	749a      	strb	r2, [r3, #18]
 8019c48:	2200      	movs	r2, #0
 8019c4a:	74da      	strb	r2, [r3, #19]
  return seg;
 8019c4c:	693b      	ldr	r3, [r7, #16]
}
 8019c4e:	4618      	mov	r0, r3
 8019c50:	371c      	adds	r7, #28
 8019c52:	46bd      	mov	sp, r7
 8019c54:	bd90      	pop	{r4, r7, pc}
 8019c56:	bf00      	nop
 8019c58:	08025a2c 	.word	0x08025a2c
 8019c5c:	08025a60 	.word	0x08025a60
 8019c60:	08025a80 	.word	0x08025a80
 8019c64:	08025aa8 	.word	0x08025aa8
 8019c68:	08025acc 	.word	0x08025acc

08019c6c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b086      	sub	sp, #24
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	607b      	str	r3, [r7, #4]
 8019c74:	4603      	mov	r3, r0
 8019c76:	73fb      	strb	r3, [r7, #15]
 8019c78:	460b      	mov	r3, r1
 8019c7a:	81bb      	strh	r3, [r7, #12]
 8019c7c:	4613      	mov	r3, r2
 8019c7e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019c80:	89bb      	ldrh	r3, [r7, #12]
 8019c82:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d105      	bne.n	8019c96 <tcp_pbuf_prealloc+0x2a>
 8019c8a:	4b30      	ldr	r3, [pc, #192]	; (8019d4c <tcp_pbuf_prealloc+0xe0>)
 8019c8c:	22e8      	movs	r2, #232	; 0xe8
 8019c8e:	4930      	ldr	r1, [pc, #192]	; (8019d50 <tcp_pbuf_prealloc+0xe4>)
 8019c90:	4830      	ldr	r0, [pc, #192]	; (8019d54 <tcp_pbuf_prealloc+0xe8>)
 8019c92:	f007 fc0b 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019c96:	6a3b      	ldr	r3, [r7, #32]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d105      	bne.n	8019ca8 <tcp_pbuf_prealloc+0x3c>
 8019c9c:	4b2b      	ldr	r3, [pc, #172]	; (8019d4c <tcp_pbuf_prealloc+0xe0>)
 8019c9e:	22e9      	movs	r2, #233	; 0xe9
 8019ca0:	492d      	ldr	r1, [pc, #180]	; (8019d58 <tcp_pbuf_prealloc+0xec>)
 8019ca2:	482c      	ldr	r0, [pc, #176]	; (8019d54 <tcp_pbuf_prealloc+0xe8>)
 8019ca4:	f007 fc02 	bl	80214ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019ca8:	89ba      	ldrh	r2, [r7, #12]
 8019caa:	897b      	ldrh	r3, [r7, #10]
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d221      	bcs.n	8019cf4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019cb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019cb4:	f003 0302 	and.w	r3, r3, #2
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d111      	bne.n	8019ce0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019cbc:	6a3b      	ldr	r3, [r7, #32]
 8019cbe:	8b5b      	ldrh	r3, [r3, #26]
 8019cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d115      	bne.n	8019cf4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d007      	beq.n	8019ce0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019cd0:	6a3b      	ldr	r3, [r7, #32]
 8019cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d103      	bne.n	8019ce0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019cd8:	6a3b      	ldr	r3, [r7, #32]
 8019cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d009      	beq.n	8019cf4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019ce0:	89bb      	ldrh	r3, [r7, #12]
 8019ce2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8019ce6:	f023 0203 	bic.w	r2, r3, #3
 8019cea:	897b      	ldrh	r3, [r7, #10]
 8019cec:	4293      	cmp	r3, r2
 8019cee:	bf28      	it	cs
 8019cf0:	4613      	movcs	r3, r2
 8019cf2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019cf4:	8af9      	ldrh	r1, [r7, #22]
 8019cf6:	7bfb      	ldrb	r3, [r7, #15]
 8019cf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f7fa fec7 	bl	8014a90 <pbuf_alloc>
 8019d02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019d04:	693b      	ldr	r3, [r7, #16]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d101      	bne.n	8019d0e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	e019      	b.n	8019d42 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019d0e:	693b      	ldr	r3, [r7, #16]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d006      	beq.n	8019d24 <tcp_pbuf_prealloc+0xb8>
 8019d16:	4b0d      	ldr	r3, [pc, #52]	; (8019d4c <tcp_pbuf_prealloc+0xe0>)
 8019d18:	f240 120b 	movw	r2, #267	; 0x10b
 8019d1c:	490f      	ldr	r1, [pc, #60]	; (8019d5c <tcp_pbuf_prealloc+0xf0>)
 8019d1e:	480d      	ldr	r0, [pc, #52]	; (8019d54 <tcp_pbuf_prealloc+0xe8>)
 8019d20:	f007 fbc4 	bl	80214ac <iprintf>
  *oversize = p->len - length;
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	895a      	ldrh	r2, [r3, #10]
 8019d28:	89bb      	ldrh	r3, [r7, #12]
 8019d2a:	1ad3      	subs	r3, r2, r3
 8019d2c:	b29a      	uxth	r2, r3
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019d32:	693b      	ldr	r3, [r7, #16]
 8019d34:	89ba      	ldrh	r2, [r7, #12]
 8019d36:	811a      	strh	r2, [r3, #8]
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	891a      	ldrh	r2, [r3, #8]
 8019d3c:	693b      	ldr	r3, [r7, #16]
 8019d3e:	815a      	strh	r2, [r3, #10]
  return p;
 8019d40:	693b      	ldr	r3, [r7, #16]
}
 8019d42:	4618      	mov	r0, r3
 8019d44:	3718      	adds	r7, #24
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}
 8019d4a:	bf00      	nop
 8019d4c:	08025a2c 	.word	0x08025a2c
 8019d50:	08025ae4 	.word	0x08025ae4
 8019d54:	08025a80 	.word	0x08025a80
 8019d58:	08025b08 	.word	0x08025b08
 8019d5c:	08025b28 	.word	0x08025b28

08019d60 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
 8019d68:	460b      	mov	r3, r1
 8019d6a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d106      	bne.n	8019d80 <tcp_write_checks+0x20>
 8019d72:	4b33      	ldr	r3, [pc, #204]	; (8019e40 <tcp_write_checks+0xe0>)
 8019d74:	f240 1233 	movw	r2, #307	; 0x133
 8019d78:	4932      	ldr	r1, [pc, #200]	; (8019e44 <tcp_write_checks+0xe4>)
 8019d7a:	4833      	ldr	r0, [pc, #204]	; (8019e48 <tcp_write_checks+0xe8>)
 8019d7c:	f007 fb96 	bl	80214ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	7d1b      	ldrb	r3, [r3, #20]
 8019d84:	2b04      	cmp	r3, #4
 8019d86:	d00e      	beq.n	8019da6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019d8c:	2b07      	cmp	r3, #7
 8019d8e:	d00a      	beq.n	8019da6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019d94:	2b02      	cmp	r3, #2
 8019d96:	d006      	beq.n	8019da6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019d9c:	2b03      	cmp	r3, #3
 8019d9e:	d002      	beq.n	8019da6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019da0:	f06f 030a 	mvn.w	r3, #10
 8019da4:	e048      	b.n	8019e38 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019da6:	887b      	ldrh	r3, [r7, #2]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d101      	bne.n	8019db0 <tcp_write_checks+0x50>
    return ERR_OK;
 8019dac:	2300      	movs	r3, #0
 8019dae:	e043      	b.n	8019e38 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019db6:	887a      	ldrh	r2, [r7, #2]
 8019db8:	429a      	cmp	r2, r3
 8019dba:	d909      	bls.n	8019dd0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	8b5b      	ldrh	r3, [r3, #26]
 8019dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dc4:	b29a      	uxth	r2, r3
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019dca:	f04f 33ff 	mov.w	r3, #4294967295
 8019dce:	e033      	b.n	8019e38 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019dd6:	2b08      	cmp	r3, #8
 8019dd8:	d909      	bls.n	8019dee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	8b5b      	ldrh	r3, [r3, #26]
 8019dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019de2:	b29a      	uxth	r2, r3
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019de8:	f04f 33ff 	mov.w	r3, #4294967295
 8019dec:	e024      	b.n	8019e38 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d00f      	beq.n	8019e18 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d11a      	bne.n	8019e36 <tcp_write_checks+0xd6>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d116      	bne.n	8019e36 <tcp_write_checks+0xd6>
 8019e08:	4b0d      	ldr	r3, [pc, #52]	; (8019e40 <tcp_write_checks+0xe0>)
 8019e0a:	f240 1255 	movw	r2, #341	; 0x155
 8019e0e:	490f      	ldr	r1, [pc, #60]	; (8019e4c <tcp_write_checks+0xec>)
 8019e10:	480d      	ldr	r0, [pc, #52]	; (8019e48 <tcp_write_checks+0xe8>)
 8019e12:	f007 fb4b 	bl	80214ac <iprintf>
 8019e16:	e00e      	b.n	8019e36 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d103      	bne.n	8019e28 <tcp_write_checks+0xc8>
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d006      	beq.n	8019e36 <tcp_write_checks+0xd6>
 8019e28:	4b05      	ldr	r3, [pc, #20]	; (8019e40 <tcp_write_checks+0xe0>)
 8019e2a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8019e2e:	4908      	ldr	r1, [pc, #32]	; (8019e50 <tcp_write_checks+0xf0>)
 8019e30:	4805      	ldr	r0, [pc, #20]	; (8019e48 <tcp_write_checks+0xe8>)
 8019e32:	f007 fb3b 	bl	80214ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019e36:	2300      	movs	r3, #0
}
 8019e38:	4618      	mov	r0, r3
 8019e3a:	3708      	adds	r7, #8
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	bd80      	pop	{r7, pc}
 8019e40:	08025a2c 	.word	0x08025a2c
 8019e44:	08025b3c 	.word	0x08025b3c
 8019e48:	08025a80 	.word	0x08025a80
 8019e4c:	08025b5c 	.word	0x08025b5c
 8019e50:	08025b98 	.word	0x08025b98

08019e54 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019e54:	b590      	push	{r4, r7, lr}
 8019e56:	b09b      	sub	sp, #108	; 0x6c
 8019e58:	af04      	add	r7, sp, #16
 8019e5a:	60f8      	str	r0, [r7, #12]
 8019e5c:	60b9      	str	r1, [r7, #8]
 8019e5e:	4611      	mov	r1, r2
 8019e60:	461a      	mov	r2, r3
 8019e62:	460b      	mov	r3, r1
 8019e64:	80fb      	strh	r3, [r7, #6]
 8019e66:	4613      	mov	r3, r2
 8019e68:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019e6e:	2300      	movs	r3, #0
 8019e70:	653b      	str	r3, [r7, #80]	; 0x50
 8019e72:	2300      	movs	r3, #0
 8019e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e76:	2300      	movs	r3, #0
 8019e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019e7e:	2300      	movs	r3, #0
 8019e80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019e84:	2300      	movs	r3, #0
 8019e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019e8e:	2300      	movs	r3, #0
 8019e90:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019e92:	2300      	movs	r3, #0
 8019e94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d109      	bne.n	8019eb0 <tcp_write+0x5c>
 8019e9c:	4ba4      	ldr	r3, [pc, #656]	; (801a130 <tcp_write+0x2dc>)
 8019e9e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019ea2:	49a4      	ldr	r1, [pc, #656]	; (801a134 <tcp_write+0x2e0>)
 8019ea4:	48a4      	ldr	r0, [pc, #656]	; (801a138 <tcp_write+0x2e4>)
 8019ea6:	f007 fb01 	bl	80214ac <iprintf>
 8019eaa:	f06f 030f 	mvn.w	r3, #15
 8019eae:	e32a      	b.n	801a506 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019eb6:	085b      	lsrs	r3, r3, #1
 8019eb8:	b29a      	uxth	r2, r3
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ebe:	4293      	cmp	r3, r2
 8019ec0:	bf28      	it	cs
 8019ec2:	4613      	movcs	r3, r2
 8019ec4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d102      	bne.n	8019ed2 <tcp_write+0x7e>
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ed0:	e000      	b.n	8019ed4 <tcp_write+0x80>
 8019ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d109      	bne.n	8019ef0 <tcp_write+0x9c>
 8019edc:	4b94      	ldr	r3, [pc, #592]	; (801a130 <tcp_write+0x2dc>)
 8019ede:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019ee2:	4996      	ldr	r1, [pc, #600]	; (801a13c <tcp_write+0x2e8>)
 8019ee4:	4894      	ldr	r0, [pc, #592]	; (801a138 <tcp_write+0x2e4>)
 8019ee6:	f007 fae1 	bl	80214ac <iprintf>
 8019eea:	f06f 030f 	mvn.w	r3, #15
 8019eee:	e30a      	b.n	801a506 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019ef0:	88fb      	ldrh	r3, [r7, #6]
 8019ef2:	4619      	mov	r1, r3
 8019ef4:	68f8      	ldr	r0, [r7, #12]
 8019ef6:	f7ff ff33 	bl	8019d60 <tcp_write_checks>
 8019efa:	4603      	mov	r3, r0
 8019efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019f00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d002      	beq.n	8019f0e <tcp_write+0xba>
    return err;
 8019f08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019f0c:	e2fb      	b.n	801a506 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019f14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019f18:	2300      	movs	r3, #0
 8019f1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	f000 80f6 	beq.w	801a114 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8019f2e:	e002      	b.n	8019f36 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d1f8      	bne.n	8019f30 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f40:	7a9b      	ldrb	r3, [r3, #10]
 8019f42:	009b      	lsls	r3, r3, #2
 8019f44:	b29b      	uxth	r3, r3
 8019f46:	f003 0304 	and.w	r3, r3, #4
 8019f4a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f50:	891b      	ldrh	r3, [r3, #8]
 8019f52:	4619      	mov	r1, r3
 8019f54:	8c3b      	ldrh	r3, [r7, #32]
 8019f56:	440b      	add	r3, r1
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	da06      	bge.n	8019f6a <tcp_write+0x116>
 8019f5c:	4b74      	ldr	r3, [pc, #464]	; (801a130 <tcp_write+0x2dc>)
 8019f5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019f62:	4977      	ldr	r1, [pc, #476]	; (801a140 <tcp_write+0x2ec>)
 8019f64:	4874      	ldr	r0, [pc, #464]	; (801a138 <tcp_write+0x2e4>)
 8019f66:	f007 faa1 	bl	80214ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f6c:	891a      	ldrh	r2, [r3, #8]
 8019f6e:	8c3b      	ldrh	r3, [r7, #32]
 8019f70:	4413      	add	r3, r2
 8019f72:	b29b      	uxth	r3, r3
 8019f74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f76:	1ad3      	subs	r3, r2, r3
 8019f78:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019f80:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019f82:	8a7b      	ldrh	r3, [r7, #18]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d026      	beq.n	8019fd6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019f88:	8a7b      	ldrh	r3, [r7, #18]
 8019f8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	d206      	bcs.n	8019f9e <tcp_write+0x14a>
 8019f90:	4b67      	ldr	r3, [pc, #412]	; (801a130 <tcp_write+0x2dc>)
 8019f92:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8019f96:	496b      	ldr	r1, [pc, #428]	; (801a144 <tcp_write+0x2f0>)
 8019f98:	4867      	ldr	r0, [pc, #412]	; (801a138 <tcp_write+0x2e4>)
 8019f9a:	f007 fa87 	bl	80214ac <iprintf>
      seg = last_unsent;
 8019f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019fa2:	8a7b      	ldrh	r3, [r7, #18]
 8019fa4:	88fa      	ldrh	r2, [r7, #6]
 8019fa6:	4293      	cmp	r3, r2
 8019fa8:	bf28      	it	cs
 8019faa:	4613      	movcs	r3, r2
 8019fac:	b29b      	uxth	r3, r3
 8019fae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019fb0:	4293      	cmp	r3, r2
 8019fb2:	bf28      	it	cs
 8019fb4:	4613      	movcs	r3, r2
 8019fb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8019fb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019fbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019fbe:	4413      	add	r3, r2
 8019fc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019fc4:	8a7a      	ldrh	r2, [r7, #18]
 8019fc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019fc8:	1ad3      	subs	r3, r2, r3
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019fce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019fd2:	1ad3      	subs	r3, r2, r3
 8019fd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019fd6:	8a7b      	ldrh	r3, [r7, #18]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d00b      	beq.n	8019ff4 <tcp_write+0x1a0>
 8019fdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019fe0:	88fb      	ldrh	r3, [r7, #6]
 8019fe2:	429a      	cmp	r2, r3
 8019fe4:	d006      	beq.n	8019ff4 <tcp_write+0x1a0>
 8019fe6:	4b52      	ldr	r3, [pc, #328]	; (801a130 <tcp_write+0x2dc>)
 8019fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019fec:	4956      	ldr	r1, [pc, #344]	; (801a148 <tcp_write+0x2f4>)
 8019fee:	4852      	ldr	r0, [pc, #328]	; (801a138 <tcp_write+0x2e4>)
 8019ff0:	f007 fa5c 	bl	80214ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019ff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019ff8:	88fb      	ldrh	r3, [r7, #6]
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	f080 8167 	bcs.w	801a2ce <tcp_write+0x47a>
 801a000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a002:	2b00      	cmp	r3, #0
 801a004:	f000 8163 	beq.w	801a2ce <tcp_write+0x47a>
 801a008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a00a:	891b      	ldrh	r3, [r3, #8]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	f000 815e 	beq.w	801a2ce <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a012:	88fa      	ldrh	r2, [r7, #6]
 801a014:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a018:	1ad2      	subs	r2, r2, r3
 801a01a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a01c:	4293      	cmp	r3, r2
 801a01e:	bfa8      	it	ge
 801a020:	4613      	movge	r3, r2
 801a022:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a026:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a028:	797b      	ldrb	r3, [r7, #5]
 801a02a:	f003 0301 	and.w	r3, r3, #1
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d027      	beq.n	801a082 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a032:	f107 0012 	add.w	r0, r7, #18
 801a036:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a038:	8bf9      	ldrh	r1, [r7, #30]
 801a03a:	2301      	movs	r3, #1
 801a03c:	9302      	str	r3, [sp, #8]
 801a03e:	797b      	ldrb	r3, [r7, #5]
 801a040:	9301      	str	r3, [sp, #4]
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	9300      	str	r3, [sp, #0]
 801a046:	4603      	mov	r3, r0
 801a048:	2000      	movs	r0, #0
 801a04a:	f7ff fe0f 	bl	8019c6c <tcp_pbuf_prealloc>
 801a04e:	6578      	str	r0, [r7, #84]	; 0x54
 801a050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a052:	2b00      	cmp	r3, #0
 801a054:	f000 8225 	beq.w	801a4a2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a05a:	6858      	ldr	r0, [r3, #4]
 801a05c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a060:	68ba      	ldr	r2, [r7, #8]
 801a062:	4413      	add	r3, r2
 801a064:	8bfa      	ldrh	r2, [r7, #30]
 801a066:	4619      	mov	r1, r3
 801a068:	f007 f936 	bl	80212d8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a06c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a06e:	f7fb f881 	bl	8015174 <pbuf_clen>
 801a072:	4603      	mov	r3, r0
 801a074:	461a      	mov	r2, r3
 801a076:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a07a:	4413      	add	r3, r2
 801a07c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a080:	e041      	b.n	801a106 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a084:	685b      	ldr	r3, [r3, #4]
 801a086:	637b      	str	r3, [r7, #52]	; 0x34
 801a088:	e002      	b.n	801a090 <tcp_write+0x23c>
 801a08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	637b      	str	r3, [r7, #52]	; 0x34
 801a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d1f8      	bne.n	801a08a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a09a:	7b1b      	ldrb	r3, [r3, #12]
 801a09c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d115      	bne.n	801a0d0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a0aa:	8952      	ldrh	r2, [r2, #10]
 801a0ac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a0ae:	68ba      	ldr	r2, [r7, #8]
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	d10d      	bne.n	801a0d0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a0b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d006      	beq.n	801a0ca <tcp_write+0x276>
 801a0bc:	4b1c      	ldr	r3, [pc, #112]	; (801a130 <tcp_write+0x2dc>)
 801a0be:	f240 2231 	movw	r2, #561	; 0x231
 801a0c2:	4922      	ldr	r1, [pc, #136]	; (801a14c <tcp_write+0x2f8>)
 801a0c4:	481c      	ldr	r0, [pc, #112]	; (801a138 <tcp_write+0x2e4>)
 801a0c6:	f007 f9f1 	bl	80214ac <iprintf>
          extendlen = seglen;
 801a0ca:	8bfb      	ldrh	r3, [r7, #30]
 801a0cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a0ce:	e01a      	b.n	801a106 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a0d0:	8bfb      	ldrh	r3, [r7, #30]
 801a0d2:	2201      	movs	r2, #1
 801a0d4:	4619      	mov	r1, r3
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	f7fa fcda 	bl	8014a90 <pbuf_alloc>
 801a0dc:	6578      	str	r0, [r7, #84]	; 0x54
 801a0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	f000 81e0 	beq.w	801a4a6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a0e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a0ea:	68ba      	ldr	r2, [r7, #8]
 801a0ec:	441a      	add	r2, r3
 801a0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0f0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a0f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a0f4:	f7fb f83e 	bl	8015174 <pbuf_clen>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	461a      	mov	r2, r3
 801a0fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a100:	4413      	add	r3, r2
 801a102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a106:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a10a:	8bfb      	ldrh	r3, [r7, #30]
 801a10c:	4413      	add	r3, r2
 801a10e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a112:	e0dc      	b.n	801a2ce <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f000 80d7 	beq.w	801a2ce <tcp_write+0x47a>
 801a120:	4b03      	ldr	r3, [pc, #12]	; (801a130 <tcp_write+0x2dc>)
 801a122:	f240 224a 	movw	r2, #586	; 0x24a
 801a126:	490a      	ldr	r1, [pc, #40]	; (801a150 <tcp_write+0x2fc>)
 801a128:	4803      	ldr	r0, [pc, #12]	; (801a138 <tcp_write+0x2e4>)
 801a12a:	f007 f9bf 	bl	80214ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a12e:	e0ce      	b.n	801a2ce <tcp_write+0x47a>
 801a130:	08025a2c 	.word	0x08025a2c
 801a134:	08025bcc 	.word	0x08025bcc
 801a138:	08025a80 	.word	0x08025a80
 801a13c:	08025be4 	.word	0x08025be4
 801a140:	08025c18 	.word	0x08025c18
 801a144:	08025c30 	.word	0x08025c30
 801a148:	08025c50 	.word	0x08025c50
 801a14c:	08025c70 	.word	0x08025c70
 801a150:	08025c9c 	.word	0x08025c9c
    struct pbuf *p;
    u16_t left = len - pos;
 801a154:	88fa      	ldrh	r2, [r7, #6]
 801a156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a15a:	1ad3      	subs	r3, r2, r3
 801a15c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a15e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a162:	b29b      	uxth	r3, r3
 801a164:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a166:	1ad3      	subs	r3, r2, r3
 801a168:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a16a:	8b7a      	ldrh	r2, [r7, #26]
 801a16c:	8bbb      	ldrh	r3, [r7, #28]
 801a16e:	4293      	cmp	r3, r2
 801a170:	bf28      	it	cs
 801a172:	4613      	movcs	r3, r2
 801a174:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a176:	797b      	ldrb	r3, [r7, #5]
 801a178:	f003 0301 	and.w	r3, r3, #1
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d036      	beq.n	801a1ee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a180:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a184:	b29a      	uxth	r2, r3
 801a186:	8b3b      	ldrh	r3, [r7, #24]
 801a188:	4413      	add	r3, r2
 801a18a:	b299      	uxth	r1, r3
 801a18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a18e:	2b00      	cmp	r3, #0
 801a190:	bf0c      	ite	eq
 801a192:	2301      	moveq	r3, #1
 801a194:	2300      	movne	r3, #0
 801a196:	b2db      	uxtb	r3, r3
 801a198:	f107 0012 	add.w	r0, r7, #18
 801a19c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a19e:	9302      	str	r3, [sp, #8]
 801a1a0:	797b      	ldrb	r3, [r7, #5]
 801a1a2:	9301      	str	r3, [sp, #4]
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	9300      	str	r3, [sp, #0]
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	2036      	movs	r0, #54	; 0x36
 801a1ac:	f7ff fd5e 	bl	8019c6c <tcp_pbuf_prealloc>
 801a1b0:	6338      	str	r0, [r7, #48]	; 0x30
 801a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	f000 8178 	beq.w	801a4aa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1bc:	895b      	ldrh	r3, [r3, #10]
 801a1be:	8b3a      	ldrh	r2, [r7, #24]
 801a1c0:	429a      	cmp	r2, r3
 801a1c2:	d906      	bls.n	801a1d2 <tcp_write+0x37e>
 801a1c4:	4b8c      	ldr	r3, [pc, #560]	; (801a3f8 <tcp_write+0x5a4>)
 801a1c6:	f240 2266 	movw	r2, #614	; 0x266
 801a1ca:	498c      	ldr	r1, [pc, #560]	; (801a3fc <tcp_write+0x5a8>)
 801a1cc:	488c      	ldr	r0, [pc, #560]	; (801a400 <tcp_write+0x5ac>)
 801a1ce:	f007 f96d 	bl	80214ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d4:	685a      	ldr	r2, [r3, #4]
 801a1d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a1da:	18d0      	adds	r0, r2, r3
 801a1dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a1e0:	68ba      	ldr	r2, [r7, #8]
 801a1e2:	4413      	add	r3, r2
 801a1e4:	8b3a      	ldrh	r2, [r7, #24]
 801a1e6:	4619      	mov	r1, r3
 801a1e8:	f007 f876 	bl	80212d8 <memcpy>
 801a1ec:	e02f      	b.n	801a24e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a1ee:	8a7b      	ldrh	r3, [r7, #18]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d006      	beq.n	801a202 <tcp_write+0x3ae>
 801a1f4:	4b80      	ldr	r3, [pc, #512]	; (801a3f8 <tcp_write+0x5a4>)
 801a1f6:	f240 2271 	movw	r2, #625	; 0x271
 801a1fa:	4982      	ldr	r1, [pc, #520]	; (801a404 <tcp_write+0x5b0>)
 801a1fc:	4880      	ldr	r0, [pc, #512]	; (801a400 <tcp_write+0x5ac>)
 801a1fe:	f007 f955 	bl	80214ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a202:	8b3b      	ldrh	r3, [r7, #24]
 801a204:	2201      	movs	r2, #1
 801a206:	4619      	mov	r1, r3
 801a208:	2036      	movs	r0, #54	; 0x36
 801a20a:	f7fa fc41 	bl	8014a90 <pbuf_alloc>
 801a20e:	6178      	str	r0, [r7, #20]
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	2b00      	cmp	r3, #0
 801a214:	f000 814b 	beq.w	801a4ae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a21c:	68ba      	ldr	r2, [r7, #8]
 801a21e:	441a      	add	r2, r3
 801a220:	697b      	ldr	r3, [r7, #20]
 801a222:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a224:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a228:	b29b      	uxth	r3, r3
 801a22a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a22e:	4619      	mov	r1, r3
 801a230:	2036      	movs	r0, #54	; 0x36
 801a232:	f7fa fc2d 	bl	8014a90 <pbuf_alloc>
 801a236:	6338      	str	r0, [r7, #48]	; 0x30
 801a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d103      	bne.n	801a246 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a23e:	6978      	ldr	r0, [r7, #20]
 801a240:	f7fa ff0a 	bl	8015058 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a244:	e136      	b.n	801a4b4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a246:	6979      	ldr	r1, [r7, #20]
 801a248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a24a:	f7fa ffd3 	bl	80151f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a24e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a250:	f7fa ff90 	bl	8015174 <pbuf_clen>
 801a254:	4603      	mov	r3, r0
 801a256:	461a      	mov	r2, r3
 801a258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a25c:	4413      	add	r3, r2
 801a25e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a266:	2b09      	cmp	r3, #9
 801a268:	d903      	bls.n	801a272 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a26c:	f7fa fef4 	bl	8015058 <pbuf_free>
      goto memerr;
 801a270:	e120      	b.n	801a4b4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a27a:	441a      	add	r2, r3
 801a27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a280:	9300      	str	r3, [sp, #0]
 801a282:	4613      	mov	r3, r2
 801a284:	2200      	movs	r2, #0
 801a286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a288:	68f8      	ldr	r0, [r7, #12]
 801a28a:	f7ff fc51 	bl	8019b30 <tcp_create_segment>
 801a28e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a292:	2b00      	cmp	r3, #0
 801a294:	f000 810d 	beq.w	801a4b2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d102      	bne.n	801a2a4 <tcp_write+0x450>
      queue = seg;
 801a29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2a0:	647b      	str	r3, [r7, #68]	; 0x44
 801a2a2:	e00c      	b.n	801a2be <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d106      	bne.n	801a2b8 <tcp_write+0x464>
 801a2aa:	4b53      	ldr	r3, [pc, #332]	; (801a3f8 <tcp_write+0x5a4>)
 801a2ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a2b0:	4955      	ldr	r1, [pc, #340]	; (801a408 <tcp_write+0x5b4>)
 801a2b2:	4853      	ldr	r0, [pc, #332]	; (801a400 <tcp_write+0x5ac>)
 801a2b4:	f007 f8fa 	bl	80214ac <iprintf>
      prev_seg->next = seg;
 801a2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a2bc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2c0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a2c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2c6:	8b3b      	ldrh	r3, [r7, #24]
 801a2c8:	4413      	add	r3, r2
 801a2ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801a2ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2d2:	88fb      	ldrh	r3, [r7, #6]
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	f4ff af3d 	bcc.w	801a154 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a2da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d02c      	beq.n	801a33a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2e2:	685b      	ldr	r3, [r3, #4]
 801a2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a2e6:	e01e      	b.n	801a326 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ea:	891a      	ldrh	r2, [r3, #8]
 801a2ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a2ee:	4413      	add	r3, r2
 801a2f0:	b29a      	uxth	r2, r3
 801a2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2f4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d110      	bne.n	801a320 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a300:	685b      	ldr	r3, [r3, #4]
 801a302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a304:	8952      	ldrh	r2, [r2, #10]
 801a306:	4413      	add	r3, r2
 801a308:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a30a:	68b9      	ldr	r1, [r7, #8]
 801a30c:	4618      	mov	r0, r3
 801a30e:	f006 ffe3 	bl	80212d8 <memcpy>
        p->len += oversize_used;
 801a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a314:	895a      	ldrh	r2, [r3, #10]
 801a316:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a318:	4413      	add	r3, r2
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a31e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d1dd      	bne.n	801a2e8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801a32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a32e:	891a      	ldrh	r2, [r3, #8]
 801a330:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a332:	4413      	add	r3, r2
 801a334:	b29a      	uxth	r2, r3
 801a336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a338:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a33a:	8a7a      	ldrh	r2, [r7, #18]
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a344:	2b00      	cmp	r3, #0
 801a346:	d018      	beq.n	801a37a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d106      	bne.n	801a35c <tcp_write+0x508>
 801a34e:	4b2a      	ldr	r3, [pc, #168]	; (801a3f8 <tcp_write+0x5a4>)
 801a350:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801a354:	492d      	ldr	r1, [pc, #180]	; (801a40c <tcp_write+0x5b8>)
 801a356:	482a      	ldr	r0, [pc, #168]	; (801a400 <tcp_write+0x5ac>)
 801a358:	f007 f8a8 	bl	80214ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a35e:	685b      	ldr	r3, [r3, #4]
 801a360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a362:	4618      	mov	r0, r3
 801a364:	f7fa ff46 	bl	80151f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a36a:	891a      	ldrh	r2, [r3, #8]
 801a36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a36e:	891b      	ldrh	r3, [r3, #8]
 801a370:	4413      	add	r3, r2
 801a372:	b29a      	uxth	r2, r3
 801a374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a376:	811a      	strh	r2, [r3, #8]
 801a378:	e037      	b.n	801a3ea <tcp_write+0x596>
  } else if (extendlen > 0) {
 801a37a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d034      	beq.n	801a3ea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a382:	2b00      	cmp	r3, #0
 801a384:	d003      	beq.n	801a38e <tcp_write+0x53a>
 801a386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d106      	bne.n	801a39c <tcp_write+0x548>
 801a38e:	4b1a      	ldr	r3, [pc, #104]	; (801a3f8 <tcp_write+0x5a4>)
 801a390:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a394:	491e      	ldr	r1, [pc, #120]	; (801a410 <tcp_write+0x5bc>)
 801a396:	481a      	ldr	r0, [pc, #104]	; (801a400 <tcp_write+0x5ac>)
 801a398:	f007 f888 	bl	80214ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a39e:	685b      	ldr	r3, [r3, #4]
 801a3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 801a3a2:	e009      	b.n	801a3b8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a6:	891a      	ldrh	r2, [r3, #8]
 801a3a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3aa:	4413      	add	r3, r2
 801a3ac:	b29a      	uxth	r2, r3
 801a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3b0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d1f1      	bne.n	801a3a4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3c2:	891a      	ldrh	r2, [r3, #8]
 801a3c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3c6:	4413      	add	r3, r2
 801a3c8:	b29a      	uxth	r2, r3
 801a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3cc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d0:	895a      	ldrh	r2, [r3, #10]
 801a3d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3d4:	4413      	add	r3, r2
 801a3d6:	b29a      	uxth	r2, r3
 801a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3da:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3de:	891a      	ldrh	r2, [r3, #8]
 801a3e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3e2:	4413      	add	r3, r2
 801a3e4:	b29a      	uxth	r2, r3
 801a3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3e8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d111      	bne.n	801a414 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a3f4:	66da      	str	r2, [r3, #108]	; 0x6c
 801a3f6:	e010      	b.n	801a41a <tcp_write+0x5c6>
 801a3f8:	08025a2c 	.word	0x08025a2c
 801a3fc:	08025ccc 	.word	0x08025ccc
 801a400:	08025a80 	.word	0x08025a80
 801a404:	08025d0c 	.word	0x08025d0c
 801a408:	08025d1c 	.word	0x08025d1c
 801a40c:	08025d30 	.word	0x08025d30
 801a410:	08025d68 	.word	0x08025d68
  } else {
    last_unsent->next = queue;
 801a414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a418:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a41e:	88fb      	ldrh	r3, [r7, #6]
 801a420:	441a      	add	r2, r3
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a42c:	88fb      	ldrh	r3, [r7, #6]
 801a42e:	1ad3      	subs	r3, r2, r3
 801a430:	b29a      	uxth	r2, r3
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a43e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d00e      	beq.n	801a46a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a450:	2b00      	cmp	r3, #0
 801a452:	d10a      	bne.n	801a46a <tcp_write+0x616>
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d106      	bne.n	801a46a <tcp_write+0x616>
 801a45c:	4b2c      	ldr	r3, [pc, #176]	; (801a510 <tcp_write+0x6bc>)
 801a45e:	f240 3212 	movw	r2, #786	; 0x312
 801a462:	492c      	ldr	r1, [pc, #176]	; (801a514 <tcp_write+0x6c0>)
 801a464:	482c      	ldr	r0, [pc, #176]	; (801a518 <tcp_write+0x6c4>)
 801a466:	f007 f821 	bl	80214ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a46a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d016      	beq.n	801a49e <tcp_write+0x64a>
 801a470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a472:	68db      	ldr	r3, [r3, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d012      	beq.n	801a49e <tcp_write+0x64a>
 801a478:	797b      	ldrb	r3, [r7, #5]
 801a47a:	f003 0302 	and.w	r3, r3, #2
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d10d      	bne.n	801a49e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a484:	68db      	ldr	r3, [r3, #12]
 801a486:	899b      	ldrh	r3, [r3, #12]
 801a488:	b29c      	uxth	r4, r3
 801a48a:	2008      	movs	r0, #8
 801a48c:	f7f8 fa56 	bl	801293c <lwip_htons>
 801a490:	4603      	mov	r3, r0
 801a492:	461a      	mov	r2, r3
 801a494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a496:	68db      	ldr	r3, [r3, #12]
 801a498:	4322      	orrs	r2, r4
 801a49a:	b292      	uxth	r2, r2
 801a49c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	e031      	b.n	801a506 <tcp_write+0x6b2>
          goto memerr;
 801a4a2:	bf00      	nop
 801a4a4:	e006      	b.n	801a4b4 <tcp_write+0x660>
            goto memerr;
 801a4a6:	bf00      	nop
 801a4a8:	e004      	b.n	801a4b4 <tcp_write+0x660>
        goto memerr;
 801a4aa:	bf00      	nop
 801a4ac:	e002      	b.n	801a4b4 <tcp_write+0x660>
        goto memerr;
 801a4ae:	bf00      	nop
 801a4b0:	e000      	b.n	801a4b4 <tcp_write+0x660>
      goto memerr;
 801a4b2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	8b5b      	ldrh	r3, [r3, #26]
 801a4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a4c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d002      	beq.n	801a4ce <tcp_write+0x67a>
    pbuf_free(concat_p);
 801a4c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a4ca:	f7fa fdc5 	bl	8015058 <pbuf_free>
  }
  if (queue != NULL) {
 801a4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d002      	beq.n	801a4da <tcp_write+0x686>
    tcp_segs_free(queue);
 801a4d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a4d6:	f7fc fb6f 	bl	8016bb8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d00e      	beq.n	801a502 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d10a      	bne.n	801a502 <tcp_write+0x6ae>
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d106      	bne.n	801a502 <tcp_write+0x6ae>
 801a4f4:	4b06      	ldr	r3, [pc, #24]	; (801a510 <tcp_write+0x6bc>)
 801a4f6:	f240 3227 	movw	r2, #807	; 0x327
 801a4fa:	4906      	ldr	r1, [pc, #24]	; (801a514 <tcp_write+0x6c0>)
 801a4fc:	4806      	ldr	r0, [pc, #24]	; (801a518 <tcp_write+0x6c4>)
 801a4fe:	f006 ffd5 	bl	80214ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a502:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a506:	4618      	mov	r0, r3
 801a508:	375c      	adds	r7, #92	; 0x5c
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd90      	pop	{r4, r7, pc}
 801a50e:	bf00      	nop
 801a510:	08025a2c 	.word	0x08025a2c
 801a514:	08025da0 	.word	0x08025da0
 801a518:	08025a80 	.word	0x08025a80

0801a51c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a51c:	b590      	push	{r4, r7, lr}
 801a51e:	b08b      	sub	sp, #44	; 0x2c
 801a520:	af02      	add	r7, sp, #8
 801a522:	6078      	str	r0, [r7, #4]
 801a524:	460b      	mov	r3, r1
 801a526:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a528:	2300      	movs	r3, #0
 801a52a:	61fb      	str	r3, [r7, #28]
 801a52c:	2300      	movs	r3, #0
 801a52e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a530:	2300      	movs	r3, #0
 801a532:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d106      	bne.n	801a548 <tcp_split_unsent_seg+0x2c>
 801a53a:	4b95      	ldr	r3, [pc, #596]	; (801a790 <tcp_split_unsent_seg+0x274>)
 801a53c:	f240 324b 	movw	r2, #843	; 0x34b
 801a540:	4994      	ldr	r1, [pc, #592]	; (801a794 <tcp_split_unsent_seg+0x278>)
 801a542:	4895      	ldr	r0, [pc, #596]	; (801a798 <tcp_split_unsent_seg+0x27c>)
 801a544:	f006 ffb2 	bl	80214ac <iprintf>

  useg = pcb->unsent;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a54c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d102      	bne.n	801a55a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a554:	f04f 33ff 	mov.w	r3, #4294967295
 801a558:	e116      	b.n	801a788 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a55a:	887b      	ldrh	r3, [r7, #2]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d109      	bne.n	801a574 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a560:	4b8b      	ldr	r3, [pc, #556]	; (801a790 <tcp_split_unsent_seg+0x274>)
 801a562:	f240 3253 	movw	r2, #851	; 0x353
 801a566:	498d      	ldr	r1, [pc, #564]	; (801a79c <tcp_split_unsent_seg+0x280>)
 801a568:	488b      	ldr	r0, [pc, #556]	; (801a798 <tcp_split_unsent_seg+0x27c>)
 801a56a:	f006 ff9f 	bl	80214ac <iprintf>
    return ERR_VAL;
 801a56e:	f06f 0305 	mvn.w	r3, #5
 801a572:	e109      	b.n	801a788 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	891b      	ldrh	r3, [r3, #8]
 801a578:	887a      	ldrh	r2, [r7, #2]
 801a57a:	429a      	cmp	r2, r3
 801a57c:	d301      	bcc.n	801a582 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a57e:	2300      	movs	r3, #0
 801a580:	e102      	b.n	801a788 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a586:	887a      	ldrh	r2, [r7, #2]
 801a588:	429a      	cmp	r2, r3
 801a58a:	d906      	bls.n	801a59a <tcp_split_unsent_seg+0x7e>
 801a58c:	4b80      	ldr	r3, [pc, #512]	; (801a790 <tcp_split_unsent_seg+0x274>)
 801a58e:	f240 325b 	movw	r2, #859	; 0x35b
 801a592:	4983      	ldr	r1, [pc, #524]	; (801a7a0 <tcp_split_unsent_seg+0x284>)
 801a594:	4880      	ldr	r0, [pc, #512]	; (801a798 <tcp_split_unsent_seg+0x27c>)
 801a596:	f006 ff89 	bl	80214ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a59a:	697b      	ldr	r3, [r7, #20]
 801a59c:	891b      	ldrh	r3, [r3, #8]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d106      	bne.n	801a5b0 <tcp_split_unsent_seg+0x94>
 801a5a2:	4b7b      	ldr	r3, [pc, #492]	; (801a790 <tcp_split_unsent_seg+0x274>)
 801a5a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a5a8:	497e      	ldr	r1, [pc, #504]	; (801a7a4 <tcp_split_unsent_seg+0x288>)
 801a5aa:	487b      	ldr	r0, [pc, #492]	; (801a798 <tcp_split_unsent_seg+0x27c>)
 801a5ac:	f006 ff7e 	bl	80214ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a5b0:	697b      	ldr	r3, [r7, #20]
 801a5b2:	7a9b      	ldrb	r3, [r3, #10]
 801a5b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a5b6:	7bfb      	ldrb	r3, [r7, #15]
 801a5b8:	009b      	lsls	r3, r3, #2
 801a5ba:	b2db      	uxtb	r3, r3
 801a5bc:	f003 0304 	and.w	r3, r3, #4
 801a5c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a5c2:	697b      	ldr	r3, [r7, #20]
 801a5c4:	891a      	ldrh	r2, [r3, #8]
 801a5c6:	887b      	ldrh	r3, [r7, #2]
 801a5c8:	1ad3      	subs	r3, r2, r3
 801a5ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a5cc:	7bbb      	ldrb	r3, [r7, #14]
 801a5ce:	b29a      	uxth	r2, r3
 801a5d0:	89bb      	ldrh	r3, [r7, #12]
 801a5d2:	4413      	add	r3, r2
 801a5d4:	b29b      	uxth	r3, r3
 801a5d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a5da:	4619      	mov	r1, r3
 801a5dc:	2036      	movs	r0, #54	; 0x36
 801a5de:	f7fa fa57 	bl	8014a90 <pbuf_alloc>
 801a5e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a5e4:	693b      	ldr	r3, [r7, #16]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	f000 80b7 	beq.w	801a75a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a5ec:	697b      	ldr	r3, [r7, #20]
 801a5ee:	685b      	ldr	r3, [r3, #4]
 801a5f0:	891a      	ldrh	r2, [r3, #8]
 801a5f2:	697b      	ldr	r3, [r7, #20]
 801a5f4:	891b      	ldrh	r3, [r3, #8]
 801a5f6:	1ad3      	subs	r3, r2, r3
 801a5f8:	b29a      	uxth	r2, r3
 801a5fa:	887b      	ldrh	r3, [r7, #2]
 801a5fc:	4413      	add	r3, r2
 801a5fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a600:	697b      	ldr	r3, [r7, #20]
 801a602:	6858      	ldr	r0, [r3, #4]
 801a604:	693b      	ldr	r3, [r7, #16]
 801a606:	685a      	ldr	r2, [r3, #4]
 801a608:	7bbb      	ldrb	r3, [r7, #14]
 801a60a:	18d1      	adds	r1, r2, r3
 801a60c:	897b      	ldrh	r3, [r7, #10]
 801a60e:	89ba      	ldrh	r2, [r7, #12]
 801a610:	f7fa ff28 	bl	8015464 <pbuf_copy_partial>
 801a614:	4603      	mov	r3, r0
 801a616:	461a      	mov	r2, r3
 801a618:	89bb      	ldrh	r3, [r7, #12]
 801a61a:	4293      	cmp	r3, r2
 801a61c:	f040 809f 	bne.w	801a75e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	68db      	ldr	r3, [r3, #12]
 801a624:	899b      	ldrh	r3, [r3, #12]
 801a626:	b29b      	uxth	r3, r3
 801a628:	4618      	mov	r0, r3
 801a62a:	f7f8 f987 	bl	801293c <lwip_htons>
 801a62e:	4603      	mov	r3, r0
 801a630:	b2db      	uxtb	r3, r3
 801a632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a636:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a638:	2300      	movs	r3, #0
 801a63a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a63c:	7efb      	ldrb	r3, [r7, #27]
 801a63e:	f003 0308 	and.w	r3, r3, #8
 801a642:	2b00      	cmp	r3, #0
 801a644:	d007      	beq.n	801a656 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a646:	7efb      	ldrb	r3, [r7, #27]
 801a648:	f023 0308 	bic.w	r3, r3, #8
 801a64c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a64e:	7ebb      	ldrb	r3, [r7, #26]
 801a650:	f043 0308 	orr.w	r3, r3, #8
 801a654:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a656:	7efb      	ldrb	r3, [r7, #27]
 801a658:	f003 0301 	and.w	r3, r3, #1
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d007      	beq.n	801a670 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a660:	7efb      	ldrb	r3, [r7, #27]
 801a662:	f023 0301 	bic.w	r3, r3, #1
 801a666:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a668:	7ebb      	ldrb	r3, [r7, #26]
 801a66a:	f043 0301 	orr.w	r3, r3, #1
 801a66e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	68db      	ldr	r3, [r3, #12]
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	4618      	mov	r0, r3
 801a678:	f7f8 f975 	bl	8012966 <lwip_htonl>
 801a67c:	4602      	mov	r2, r0
 801a67e:	887b      	ldrh	r3, [r7, #2]
 801a680:	18d1      	adds	r1, r2, r3
 801a682:	7eba      	ldrb	r2, [r7, #26]
 801a684:	7bfb      	ldrb	r3, [r7, #15]
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	460b      	mov	r3, r1
 801a68a:	6939      	ldr	r1, [r7, #16]
 801a68c:	6878      	ldr	r0, [r7, #4]
 801a68e:	f7ff fa4f 	bl	8019b30 <tcp_create_segment>
 801a692:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a694:	69fb      	ldr	r3, [r7, #28]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d063      	beq.n	801a762 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a69a:	697b      	ldr	r3, [r7, #20]
 801a69c:	685b      	ldr	r3, [r3, #4]
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7fa fd68 	bl	8015174 <pbuf_clen>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	461a      	mov	r2, r3
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a6ae:	1a9b      	subs	r3, r3, r2
 801a6b0:	b29a      	uxth	r2, r3
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a6b8:	697b      	ldr	r3, [r7, #20]
 801a6ba:	6858      	ldr	r0, [r3, #4]
 801a6bc:	697b      	ldr	r3, [r7, #20]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	891a      	ldrh	r2, [r3, #8]
 801a6c2:	89bb      	ldrh	r3, [r7, #12]
 801a6c4:	1ad3      	subs	r3, r2, r3
 801a6c6:	b29b      	uxth	r3, r3
 801a6c8:	4619      	mov	r1, r3
 801a6ca:	f7fa fb3f 	bl	8014d4c <pbuf_realloc>
  useg->len -= remainder;
 801a6ce:	697b      	ldr	r3, [r7, #20]
 801a6d0:	891a      	ldrh	r2, [r3, #8]
 801a6d2:	89bb      	ldrh	r3, [r7, #12]
 801a6d4:	1ad3      	subs	r3, r2, r3
 801a6d6:	b29a      	uxth	r2, r3
 801a6d8:	697b      	ldr	r3, [r7, #20]
 801a6da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	899b      	ldrh	r3, [r3, #12]
 801a6e2:	b29c      	uxth	r4, r3
 801a6e4:	7efb      	ldrb	r3, [r7, #27]
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f7f8 f927 	bl	801293c <lwip_htons>
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	461a      	mov	r2, r3
 801a6f2:	697b      	ldr	r3, [r7, #20]
 801a6f4:	68db      	ldr	r3, [r3, #12]
 801a6f6:	4322      	orrs	r2, r4
 801a6f8:	b292      	uxth	r2, r2
 801a6fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a6fc:	697b      	ldr	r3, [r7, #20]
 801a6fe:	685b      	ldr	r3, [r3, #4]
 801a700:	4618      	mov	r0, r3
 801a702:	f7fa fd37 	bl	8015174 <pbuf_clen>
 801a706:	4603      	mov	r3, r0
 801a708:	461a      	mov	r2, r3
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a710:	4413      	add	r3, r2
 801a712:	b29a      	uxth	r2, r3
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	685b      	ldr	r3, [r3, #4]
 801a71e:	4618      	mov	r0, r3
 801a720:	f7fa fd28 	bl	8015174 <pbuf_clen>
 801a724:	4603      	mov	r3, r0
 801a726:	461a      	mov	r2, r3
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a72e:	4413      	add	r3, r2
 801a730:	b29a      	uxth	r2, r3
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	681a      	ldr	r2, [r3, #0]
 801a73c:	69fb      	ldr	r3, [r7, #28]
 801a73e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	69fa      	ldr	r2, [r7, #28]
 801a744:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a746:	69fb      	ldr	r3, [r7, #28]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d103      	bne.n	801a756 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	2200      	movs	r2, #0
 801a752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a756:	2300      	movs	r3, #0
 801a758:	e016      	b.n	801a788 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a75a:	bf00      	nop
 801a75c:	e002      	b.n	801a764 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a75e:	bf00      	nop
 801a760:	e000      	b.n	801a764 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a762:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a764:	69fb      	ldr	r3, [r7, #28]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d006      	beq.n	801a778 <tcp_split_unsent_seg+0x25c>
 801a76a:	4b09      	ldr	r3, [pc, #36]	; (801a790 <tcp_split_unsent_seg+0x274>)
 801a76c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a770:	490d      	ldr	r1, [pc, #52]	; (801a7a8 <tcp_split_unsent_seg+0x28c>)
 801a772:	4809      	ldr	r0, [pc, #36]	; (801a798 <tcp_split_unsent_seg+0x27c>)
 801a774:	f006 fe9a 	bl	80214ac <iprintf>
  if (p != NULL) {
 801a778:	693b      	ldr	r3, [r7, #16]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d002      	beq.n	801a784 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a77e:	6938      	ldr	r0, [r7, #16]
 801a780:	f7fa fc6a 	bl	8015058 <pbuf_free>
  }

  return ERR_MEM;
 801a784:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a788:	4618      	mov	r0, r3
 801a78a:	3724      	adds	r7, #36	; 0x24
 801a78c:	46bd      	mov	sp, r7
 801a78e:	bd90      	pop	{r4, r7, pc}
 801a790:	08025a2c 	.word	0x08025a2c
 801a794:	08025dc0 	.word	0x08025dc0
 801a798:	08025a80 	.word	0x08025a80
 801a79c:	08025de4 	.word	0x08025de4
 801a7a0:	08025e08 	.word	0x08025e08
 801a7a4:	08025e18 	.word	0x08025e18
 801a7a8:	08025e28 	.word	0x08025e28

0801a7ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a7ac:	b590      	push	{r4, r7, lr}
 801a7ae:	b085      	sub	sp, #20
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d106      	bne.n	801a7c8 <tcp_send_fin+0x1c>
 801a7ba:	4b21      	ldr	r3, [pc, #132]	; (801a840 <tcp_send_fin+0x94>)
 801a7bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a7c0:	4920      	ldr	r1, [pc, #128]	; (801a844 <tcp_send_fin+0x98>)
 801a7c2:	4821      	ldr	r0, [pc, #132]	; (801a848 <tcp_send_fin+0x9c>)
 801a7c4:	f006 fe72 	bl	80214ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d02e      	beq.n	801a82e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7d4:	60fb      	str	r3, [r7, #12]
 801a7d6:	e002      	b.n	801a7de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d1f8      	bne.n	801a7d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	68db      	ldr	r3, [r3, #12]
 801a7ea:	899b      	ldrh	r3, [r3, #12]
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f7f8 f8a4 	bl	801293c <lwip_htons>
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	f003 0307 	and.w	r3, r3, #7
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d116      	bne.n	801a82e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	68db      	ldr	r3, [r3, #12]
 801a804:	899b      	ldrh	r3, [r3, #12]
 801a806:	b29c      	uxth	r4, r3
 801a808:	2001      	movs	r0, #1
 801a80a:	f7f8 f897 	bl	801293c <lwip_htons>
 801a80e:	4603      	mov	r3, r0
 801a810:	461a      	mov	r2, r3
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	68db      	ldr	r3, [r3, #12]
 801a816:	4322      	orrs	r2, r4
 801a818:	b292      	uxth	r2, r2
 801a81a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	8b5b      	ldrh	r3, [r3, #26]
 801a820:	f043 0320 	orr.w	r3, r3, #32
 801a824:	b29a      	uxth	r2, r3
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a82a:	2300      	movs	r3, #0
 801a82c:	e004      	b.n	801a838 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a82e:	2101      	movs	r1, #1
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f000 f80b 	bl	801a84c <tcp_enqueue_flags>
 801a836:	4603      	mov	r3, r0
}
 801a838:	4618      	mov	r0, r3
 801a83a:	3714      	adds	r7, #20
 801a83c:	46bd      	mov	sp, r7
 801a83e:	bd90      	pop	{r4, r7, pc}
 801a840:	08025a2c 	.word	0x08025a2c
 801a844:	08025e34 	.word	0x08025e34
 801a848:	08025a80 	.word	0x08025a80

0801a84c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b08a      	sub	sp, #40	; 0x28
 801a850:	af02      	add	r7, sp, #8
 801a852:	6078      	str	r0, [r7, #4]
 801a854:	460b      	mov	r3, r1
 801a856:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a858:	2300      	movs	r3, #0
 801a85a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a85c:	2300      	movs	r3, #0
 801a85e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a860:	78fb      	ldrb	r3, [r7, #3]
 801a862:	f003 0303 	and.w	r3, r3, #3
 801a866:	2b00      	cmp	r3, #0
 801a868:	d106      	bne.n	801a878 <tcp_enqueue_flags+0x2c>
 801a86a:	4b67      	ldr	r3, [pc, #412]	; (801aa08 <tcp_enqueue_flags+0x1bc>)
 801a86c:	f240 4211 	movw	r2, #1041	; 0x411
 801a870:	4966      	ldr	r1, [pc, #408]	; (801aa0c <tcp_enqueue_flags+0x1c0>)
 801a872:	4867      	ldr	r0, [pc, #412]	; (801aa10 <tcp_enqueue_flags+0x1c4>)
 801a874:	f006 fe1a 	bl	80214ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d106      	bne.n	801a88c <tcp_enqueue_flags+0x40>
 801a87e:	4b62      	ldr	r3, [pc, #392]	; (801aa08 <tcp_enqueue_flags+0x1bc>)
 801a880:	f240 4213 	movw	r2, #1043	; 0x413
 801a884:	4963      	ldr	r1, [pc, #396]	; (801aa14 <tcp_enqueue_flags+0x1c8>)
 801a886:	4862      	ldr	r0, [pc, #392]	; (801aa10 <tcp_enqueue_flags+0x1c4>)
 801a888:	f006 fe10 	bl	80214ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a88c:	78fb      	ldrb	r3, [r7, #3]
 801a88e:	f003 0302 	and.w	r3, r3, #2
 801a892:	2b00      	cmp	r3, #0
 801a894:	d001      	beq.n	801a89a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a896:	2301      	movs	r3, #1
 801a898:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a89a:	7ffb      	ldrb	r3, [r7, #31]
 801a89c:	009b      	lsls	r3, r3, #2
 801a89e:	b2db      	uxtb	r3, r3
 801a8a0:	f003 0304 	and.w	r3, r3, #4
 801a8a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a8a6:	7dfb      	ldrb	r3, [r7, #23]
 801a8a8:	b29b      	uxth	r3, r3
 801a8aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	2036      	movs	r0, #54	; 0x36
 801a8b2:	f7fa f8ed 	bl	8014a90 <pbuf_alloc>
 801a8b6:	6138      	str	r0, [r7, #16]
 801a8b8:	693b      	ldr	r3, [r7, #16]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d109      	bne.n	801a8d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	8b5b      	ldrh	r3, [r3, #26]
 801a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8c6:	b29a      	uxth	r2, r3
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a8cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a8d0:	e095      	b.n	801a9fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a8d2:	693b      	ldr	r3, [r7, #16]
 801a8d4:	895a      	ldrh	r2, [r3, #10]
 801a8d6:	7dfb      	ldrb	r3, [r7, #23]
 801a8d8:	b29b      	uxth	r3, r3
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d206      	bcs.n	801a8ec <tcp_enqueue_flags+0xa0>
 801a8de:	4b4a      	ldr	r3, [pc, #296]	; (801aa08 <tcp_enqueue_flags+0x1bc>)
 801a8e0:	f240 4239 	movw	r2, #1081	; 0x439
 801a8e4:	494c      	ldr	r1, [pc, #304]	; (801aa18 <tcp_enqueue_flags+0x1cc>)
 801a8e6:	484a      	ldr	r0, [pc, #296]	; (801aa10 <tcp_enqueue_flags+0x1c4>)
 801a8e8:	f006 fde0 	bl	80214ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a8f0:	78fa      	ldrb	r2, [r7, #3]
 801a8f2:	7ffb      	ldrb	r3, [r7, #31]
 801a8f4:	9300      	str	r3, [sp, #0]
 801a8f6:	460b      	mov	r3, r1
 801a8f8:	6939      	ldr	r1, [r7, #16]
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f7ff f918 	bl	8019b30 <tcp_create_segment>
 801a900:	60f8      	str	r0, [r7, #12]
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d109      	bne.n	801a91c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	8b5b      	ldrh	r3, [r3, #26]
 801a90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a910:	b29a      	uxth	r2, r3
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a916:	f04f 33ff 	mov.w	r3, #4294967295
 801a91a:	e070      	b.n	801a9fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	68db      	ldr	r3, [r3, #12]
 801a920:	f003 0303 	and.w	r3, r3, #3
 801a924:	2b00      	cmp	r3, #0
 801a926:	d006      	beq.n	801a936 <tcp_enqueue_flags+0xea>
 801a928:	4b37      	ldr	r3, [pc, #220]	; (801aa08 <tcp_enqueue_flags+0x1bc>)
 801a92a:	f240 4242 	movw	r2, #1090	; 0x442
 801a92e:	493b      	ldr	r1, [pc, #236]	; (801aa1c <tcp_enqueue_flags+0x1d0>)
 801a930:	4837      	ldr	r0, [pc, #220]	; (801aa10 <tcp_enqueue_flags+0x1c4>)
 801a932:	f006 fdbb 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	891b      	ldrh	r3, [r3, #8]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d006      	beq.n	801a94c <tcp_enqueue_flags+0x100>
 801a93e:	4b32      	ldr	r3, [pc, #200]	; (801aa08 <tcp_enqueue_flags+0x1bc>)
 801a940:	f240 4243 	movw	r2, #1091	; 0x443
 801a944:	4936      	ldr	r1, [pc, #216]	; (801aa20 <tcp_enqueue_flags+0x1d4>)
 801a946:	4832      	ldr	r0, [pc, #200]	; (801aa10 <tcp_enqueue_flags+0x1c4>)
 801a948:	f006 fdb0 	bl	80214ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a950:	2b00      	cmp	r3, #0
 801a952:	d103      	bne.n	801a95c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	68fa      	ldr	r2, [r7, #12]
 801a958:	66da      	str	r2, [r3, #108]	; 0x6c
 801a95a:	e00d      	b.n	801a978 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a960:	61bb      	str	r3, [r7, #24]
 801a962:	e002      	b.n	801a96a <tcp_enqueue_flags+0x11e>
 801a964:	69bb      	ldr	r3, [r7, #24]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	61bb      	str	r3, [r7, #24]
 801a96a:	69bb      	ldr	r3, [r7, #24]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d1f8      	bne.n	801a964 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a972:	69bb      	ldr	r3, [r7, #24]
 801a974:	68fa      	ldr	r2, [r7, #12]
 801a976:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	2200      	movs	r2, #0
 801a97c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a980:	78fb      	ldrb	r3, [r7, #3]
 801a982:	f003 0302 	and.w	r3, r3, #2
 801a986:	2b00      	cmp	r3, #0
 801a988:	d104      	bne.n	801a994 <tcp_enqueue_flags+0x148>
 801a98a:	78fb      	ldrb	r3, [r7, #3]
 801a98c:	f003 0301 	and.w	r3, r3, #1
 801a990:	2b00      	cmp	r3, #0
 801a992:	d004      	beq.n	801a99e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a998:	1c5a      	adds	r2, r3, #1
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a99e:	78fb      	ldrb	r3, [r7, #3]
 801a9a0:	f003 0301 	and.w	r3, r3, #1
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d006      	beq.n	801a9b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	8b5b      	ldrh	r3, [r3, #26]
 801a9ac:	f043 0320 	orr.w	r3, r3, #32
 801a9b0:	b29a      	uxth	r2, r3
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	685b      	ldr	r3, [r3, #4]
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7fa fbda 	bl	8015174 <pbuf_clen>
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	461a      	mov	r2, r3
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a9ca:	4413      	add	r3, r2
 801a9cc:	b29a      	uxth	r2, r3
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d00e      	beq.n	801a9fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d10a      	bne.n	801a9fc <tcp_enqueue_flags+0x1b0>
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d106      	bne.n	801a9fc <tcp_enqueue_flags+0x1b0>
 801a9ee:	4b06      	ldr	r3, [pc, #24]	; (801aa08 <tcp_enqueue_flags+0x1bc>)
 801a9f0:	f240 4265 	movw	r2, #1125	; 0x465
 801a9f4:	490b      	ldr	r1, [pc, #44]	; (801aa24 <tcp_enqueue_flags+0x1d8>)
 801a9f6:	4806      	ldr	r0, [pc, #24]	; (801aa10 <tcp_enqueue_flags+0x1c4>)
 801a9f8:	f006 fd58 	bl	80214ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a9fc:	2300      	movs	r3, #0
}
 801a9fe:	4618      	mov	r0, r3
 801aa00:	3720      	adds	r7, #32
 801aa02:	46bd      	mov	sp, r7
 801aa04:	bd80      	pop	{r7, pc}
 801aa06:	bf00      	nop
 801aa08:	08025a2c 	.word	0x08025a2c
 801aa0c:	08025e50 	.word	0x08025e50
 801aa10:	08025a80 	.word	0x08025a80
 801aa14:	08025ea8 	.word	0x08025ea8
 801aa18:	08025ec8 	.word	0x08025ec8
 801aa1c:	08025f04 	.word	0x08025f04
 801aa20:	08025f1c 	.word	0x08025f1c
 801aa24:	08025f48 	.word	0x08025f48

0801aa28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801aa28:	b5b0      	push	{r4, r5, r7, lr}
 801aa2a:	b08a      	sub	sp, #40	; 0x28
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d106      	bne.n	801aa44 <tcp_output+0x1c>
 801aa36:	4b9e      	ldr	r3, [pc, #632]	; (801acb0 <tcp_output+0x288>)
 801aa38:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801aa3c:	499d      	ldr	r1, [pc, #628]	; (801acb4 <tcp_output+0x28c>)
 801aa3e:	489e      	ldr	r0, [pc, #632]	; (801acb8 <tcp_output+0x290>)
 801aa40:	f006 fd34 	bl	80214ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	7d1b      	ldrb	r3, [r3, #20]
 801aa48:	2b01      	cmp	r3, #1
 801aa4a:	d106      	bne.n	801aa5a <tcp_output+0x32>
 801aa4c:	4b98      	ldr	r3, [pc, #608]	; (801acb0 <tcp_output+0x288>)
 801aa4e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801aa52:	499a      	ldr	r1, [pc, #616]	; (801acbc <tcp_output+0x294>)
 801aa54:	4898      	ldr	r0, [pc, #608]	; (801acb8 <tcp_output+0x290>)
 801aa56:	f006 fd29 	bl	80214ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801aa5a:	4b99      	ldr	r3, [pc, #612]	; (801acc0 <tcp_output+0x298>)
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	687a      	ldr	r2, [r7, #4]
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d101      	bne.n	801aa68 <tcp_output+0x40>
    return ERR_OK;
 801aa64:	2300      	movs	r3, #0
 801aa66:	e1ce      	b.n	801ae06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aa74:	4293      	cmp	r3, r2
 801aa76:	bf28      	it	cs
 801aa78:	4613      	movcs	r3, r2
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa82:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d10b      	bne.n	801aaa2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	8b5b      	ldrh	r3, [r3, #26]
 801aa8e:	f003 0302 	and.w	r3, r3, #2
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	f000 81aa 	beq.w	801adec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801aa98:	6878      	ldr	r0, [r7, #4]
 801aa9a:	f000 fdcb 	bl	801b634 <tcp_send_empty_ack>
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	e1b1      	b.n	801ae06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801aaa2:	6879      	ldr	r1, [r7, #4]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	3304      	adds	r3, #4
 801aaa8:	461a      	mov	r2, r3
 801aaaa:	6878      	ldr	r0, [r7, #4]
 801aaac:	f7ff f824 	bl	8019af8 <tcp_route>
 801aab0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801aab2:	697b      	ldr	r3, [r7, #20]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d102      	bne.n	801aabe <tcp_output+0x96>
    return ERR_RTE;
 801aab8:	f06f 0303 	mvn.w	r3, #3
 801aabc:	e1a3      	b.n	801ae06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d003      	beq.n	801aacc <tcp_output+0xa4>
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d111      	bne.n	801aaf0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801aacc:	697b      	ldr	r3, [r7, #20]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d002      	beq.n	801aad8 <tcp_output+0xb0>
 801aad2:	697b      	ldr	r3, [r7, #20]
 801aad4:	3304      	adds	r3, #4
 801aad6:	e000      	b.n	801aada <tcp_output+0xb2>
 801aad8:	2300      	movs	r3, #0
 801aada:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801aadc:	693b      	ldr	r3, [r7, #16]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d102      	bne.n	801aae8 <tcp_output+0xc0>
      return ERR_RTE;
 801aae2:	f06f 0303 	mvn.w	r3, #3
 801aae6:	e18e      	b.n	801ae06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801aae8:	693b      	ldr	r3, [r7, #16]
 801aaea:	681a      	ldr	r2, [r3, #0]
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf2:	68db      	ldr	r3, [r3, #12]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	f7f7 ff35 	bl	8012966 <lwip_htonl>
 801aafc:	4602      	mov	r2, r0
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab02:	1ad3      	subs	r3, r2, r3
 801ab04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab06:	8912      	ldrh	r2, [r2, #8]
 801ab08:	4413      	add	r3, r2
 801ab0a:	69ba      	ldr	r2, [r7, #24]
 801ab0c:	429a      	cmp	r2, r3
 801ab0e:	d227      	bcs.n	801ab60 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ab16:	461a      	mov	r2, r3
 801ab18:	69bb      	ldr	r3, [r7, #24]
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d114      	bne.n	801ab48 <tcp_output+0x120>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d110      	bne.n	801ab48 <tcp_output+0x120>
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d10b      	bne.n	801ab48 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	2200      	movs	r2, #0
 801ab34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	2201      	movs	r2, #1
 801ab3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2200      	movs	r2, #0
 801ab44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	8b5b      	ldrh	r3, [r3, #26]
 801ab4c:	f003 0302 	and.w	r3, r3, #2
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	f000 814d 	beq.w	801adf0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801ab56:	6878      	ldr	r0, [r7, #4]
 801ab58:	f000 fd6c 	bl	801b634 <tcp_send_empty_ack>
 801ab5c:	4603      	mov	r3, r0
 801ab5e:	e152      	b.n	801ae06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	2200      	movs	r2, #0
 801ab64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab6c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ab6e:	6a3b      	ldr	r3, [r7, #32]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	f000 811c 	beq.w	801adae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801ab76:	e002      	b.n	801ab7e <tcp_output+0x156>
 801ab78:	6a3b      	ldr	r3, [r7, #32]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	623b      	str	r3, [r7, #32]
 801ab7e:	6a3b      	ldr	r3, [r7, #32]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d1f8      	bne.n	801ab78 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ab86:	e112      	b.n	801adae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab8a:	68db      	ldr	r3, [r3, #12]
 801ab8c:	899b      	ldrh	r3, [r3, #12]
 801ab8e:	b29b      	uxth	r3, r3
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7f7 fed3 	bl	801293c <lwip_htons>
 801ab96:	4603      	mov	r3, r0
 801ab98:	b2db      	uxtb	r3, r3
 801ab9a:	f003 0304 	and.w	r3, r3, #4
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d006      	beq.n	801abb0 <tcp_output+0x188>
 801aba2:	4b43      	ldr	r3, [pc, #268]	; (801acb0 <tcp_output+0x288>)
 801aba4:	f240 5236 	movw	r2, #1334	; 0x536
 801aba8:	4946      	ldr	r1, [pc, #280]	; (801acc4 <tcp_output+0x29c>)
 801abaa:	4843      	ldr	r0, [pc, #268]	; (801acb8 <tcp_output+0x290>)
 801abac:	f006 fc7e 	bl	80214ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d01f      	beq.n	801abf8 <tcp_output+0x1d0>
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	8b5b      	ldrh	r3, [r3, #26]
 801abbc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d119      	bne.n	801abf8 <tcp_output+0x1d0>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d00b      	beq.n	801abe4 <tcp_output+0x1bc>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d110      	bne.n	801abf8 <tcp_output+0x1d0>
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abda:	891a      	ldrh	r2, [r3, #8]
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abe0:	429a      	cmp	r2, r3
 801abe2:	d209      	bcs.n	801abf8 <tcp_output+0x1d0>
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801abea:	2b00      	cmp	r3, #0
 801abec:	d004      	beq.n	801abf8 <tcp_output+0x1d0>
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801abf4:	2b08      	cmp	r3, #8
 801abf6:	d901      	bls.n	801abfc <tcp_output+0x1d4>
 801abf8:	2301      	movs	r3, #1
 801abfa:	e000      	b.n	801abfe <tcp_output+0x1d6>
 801abfc:	2300      	movs	r3, #0
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d106      	bne.n	801ac10 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	8b5b      	ldrh	r3, [r3, #26]
 801ac06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	f000 80e4 	beq.w	801add8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	7d1b      	ldrb	r3, [r3, #20]
 801ac14:	2b02      	cmp	r3, #2
 801ac16:	d00d      	beq.n	801ac34 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac1a:	68db      	ldr	r3, [r3, #12]
 801ac1c:	899b      	ldrh	r3, [r3, #12]
 801ac1e:	b29c      	uxth	r4, r3
 801ac20:	2010      	movs	r0, #16
 801ac22:	f7f7 fe8b 	bl	801293c <lwip_htons>
 801ac26:	4603      	mov	r3, r0
 801ac28:	461a      	mov	r2, r3
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2c:	68db      	ldr	r3, [r3, #12]
 801ac2e:	4322      	orrs	r2, r4
 801ac30:	b292      	uxth	r2, r2
 801ac32:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ac34:	697a      	ldr	r2, [r7, #20]
 801ac36:	6879      	ldr	r1, [r7, #4]
 801ac38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac3a:	f000 f909 	bl	801ae50 <tcp_output_segment>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ac42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d009      	beq.n	801ac5e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	8b5b      	ldrh	r3, [r3, #26]
 801ac4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac52:	b29a      	uxth	r2, r3
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	835a      	strh	r2, [r3, #26]
      return err;
 801ac58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ac5c:	e0d3      	b.n	801ae06 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac60:	681a      	ldr	r2, [r3, #0]
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	7d1b      	ldrb	r3, [r3, #20]
 801ac6a:	2b02      	cmp	r3, #2
 801ac6c:	d006      	beq.n	801ac7c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	8b5b      	ldrh	r3, [r3, #26]
 801ac72:	f023 0303 	bic.w	r3, r3, #3
 801ac76:	b29a      	uxth	r2, r3
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7e:	68db      	ldr	r3, [r3, #12]
 801ac80:	685b      	ldr	r3, [r3, #4]
 801ac82:	4618      	mov	r0, r3
 801ac84:	f7f7 fe6f 	bl	8012966 <lwip_htonl>
 801ac88:	4604      	mov	r4, r0
 801ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac8c:	891b      	ldrh	r3, [r3, #8]
 801ac8e:	461d      	mov	r5, r3
 801ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac92:	68db      	ldr	r3, [r3, #12]
 801ac94:	899b      	ldrh	r3, [r3, #12]
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f7f7 fe4f 	bl	801293c <lwip_htons>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	b2db      	uxtb	r3, r3
 801aca2:	f003 0303 	and.w	r3, r3, #3
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d00e      	beq.n	801acc8 <tcp_output+0x2a0>
 801acaa:	2301      	movs	r3, #1
 801acac:	e00d      	b.n	801acca <tcp_output+0x2a2>
 801acae:	bf00      	nop
 801acb0:	08025a2c 	.word	0x08025a2c
 801acb4:	08025f70 	.word	0x08025f70
 801acb8:	08025a80 	.word	0x08025a80
 801acbc:	08025f88 	.word	0x08025f88
 801acc0:	20016c60 	.word	0x20016c60
 801acc4:	08025fb0 	.word	0x08025fb0
 801acc8:	2300      	movs	r3, #0
 801acca:	442b      	add	r3, r5
 801accc:	4423      	add	r3, r4
 801acce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	1ad3      	subs	r3, r2, r3
 801acd8:	2b00      	cmp	r3, #0
 801acda:	da02      	bge.n	801ace2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	68ba      	ldr	r2, [r7, #8]
 801ace0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace4:	891b      	ldrh	r3, [r3, #8]
 801ace6:	461c      	mov	r4, r3
 801ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acea:	68db      	ldr	r3, [r3, #12]
 801acec:	899b      	ldrh	r3, [r3, #12]
 801acee:	b29b      	uxth	r3, r3
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7f7 fe23 	bl	801293c <lwip_htons>
 801acf6:	4603      	mov	r3, r0
 801acf8:	b2db      	uxtb	r3, r3
 801acfa:	f003 0303 	and.w	r3, r3, #3
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d001      	beq.n	801ad06 <tcp_output+0x2de>
 801ad02:	2301      	movs	r3, #1
 801ad04:	e000      	b.n	801ad08 <tcp_output+0x2e0>
 801ad06:	2300      	movs	r3, #0
 801ad08:	4423      	add	r3, r4
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d049      	beq.n	801ada2 <tcp_output+0x37a>
      seg->next = NULL;
 801ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad10:	2200      	movs	r2, #0
 801ad12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d105      	bne.n	801ad28 <tcp_output+0x300>
        pcb->unacked = seg;
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad24:	623b      	str	r3, [r7, #32]
 801ad26:	e03f      	b.n	801ada8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2a:	68db      	ldr	r3, [r3, #12]
 801ad2c:	685b      	ldr	r3, [r3, #4]
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f7f7 fe19 	bl	8012966 <lwip_htonl>
 801ad34:	4604      	mov	r4, r0
 801ad36:	6a3b      	ldr	r3, [r7, #32]
 801ad38:	68db      	ldr	r3, [r3, #12]
 801ad3a:	685b      	ldr	r3, [r3, #4]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	f7f7 fe12 	bl	8012966 <lwip_htonl>
 801ad42:	4603      	mov	r3, r0
 801ad44:	1ae3      	subs	r3, r4, r3
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	da24      	bge.n	801ad94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	3370      	adds	r3, #112	; 0x70
 801ad4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ad50:	e002      	b.n	801ad58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ad52:	69fb      	ldr	r3, [r7, #28]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ad58:	69fb      	ldr	r3, [r7, #28]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d011      	beq.n	801ad84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ad60:	69fb      	ldr	r3, [r7, #28]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	68db      	ldr	r3, [r3, #12]
 801ad66:	685b      	ldr	r3, [r3, #4]
 801ad68:	4618      	mov	r0, r3
 801ad6a:	f7f7 fdfc 	bl	8012966 <lwip_htonl>
 801ad6e:	4604      	mov	r4, r0
 801ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad72:	68db      	ldr	r3, [r3, #12]
 801ad74:	685b      	ldr	r3, [r3, #4]
 801ad76:	4618      	mov	r0, r3
 801ad78:	f7f7 fdf5 	bl	8012966 <lwip_htonl>
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	dbe6      	blt.n	801ad52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ad84:	69fb      	ldr	r3, [r7, #28]
 801ad86:	681a      	ldr	r2, [r3, #0]
 801ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ad8c:	69fb      	ldr	r3, [r7, #28]
 801ad8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad90:	601a      	str	r2, [r3, #0]
 801ad92:	e009      	b.n	801ada8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ad94:	6a3b      	ldr	r3, [r7, #32]
 801ad96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ad9a:	6a3b      	ldr	r3, [r7, #32]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	623b      	str	r3, [r7, #32]
 801ada0:	e002      	b.n	801ada8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ada2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ada4:	f7fb ff1d 	bl	8016be2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d012      	beq.n	801adda <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb6:	68db      	ldr	r3, [r3, #12]
 801adb8:	685b      	ldr	r3, [r3, #4]
 801adba:	4618      	mov	r0, r3
 801adbc:	f7f7 fdd3 	bl	8012966 <lwip_htonl>
 801adc0:	4602      	mov	r2, r0
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adc6:	1ad3      	subs	r3, r2, r3
 801adc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adca:	8912      	ldrh	r2, [r2, #8]
 801adcc:	4413      	add	r3, r2
  while (seg != NULL &&
 801adce:	69ba      	ldr	r2, [r7, #24]
 801add0:	429a      	cmp	r2, r3
 801add2:	f4bf aed9 	bcs.w	801ab88 <tcp_output+0x160>
 801add6:	e000      	b.n	801adda <tcp_output+0x3b2>
      break;
 801add8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d108      	bne.n	801adf4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	2200      	movs	r2, #0
 801ade6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801adea:	e004      	b.n	801adf6 <tcp_output+0x3ce>
    goto output_done;
 801adec:	bf00      	nop
 801adee:	e002      	b.n	801adf6 <tcp_output+0x3ce>
    goto output_done;
 801adf0:	bf00      	nop
 801adf2:	e000      	b.n	801adf6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801adf4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	8b5b      	ldrh	r3, [r3, #26]
 801adfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801adfe:	b29a      	uxth	r2, r3
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ae04:	2300      	movs	r3, #0
}
 801ae06:	4618      	mov	r0, r3
 801ae08:	3728      	adds	r7, #40	; 0x28
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	bdb0      	pop	{r4, r5, r7, pc}
 801ae0e:	bf00      	nop

0801ae10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b082      	sub	sp, #8
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d106      	bne.n	801ae2c <tcp_output_segment_busy+0x1c>
 801ae1e:	4b09      	ldr	r3, [pc, #36]	; (801ae44 <tcp_output_segment_busy+0x34>)
 801ae20:	f240 529a 	movw	r2, #1434	; 0x59a
 801ae24:	4908      	ldr	r1, [pc, #32]	; (801ae48 <tcp_output_segment_busy+0x38>)
 801ae26:	4809      	ldr	r0, [pc, #36]	; (801ae4c <tcp_output_segment_busy+0x3c>)
 801ae28:	f006 fb40 	bl	80214ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	685b      	ldr	r3, [r3, #4]
 801ae30:	7b9b      	ldrb	r3, [r3, #14]
 801ae32:	2b01      	cmp	r3, #1
 801ae34:	d001      	beq.n	801ae3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ae36:	2301      	movs	r3, #1
 801ae38:	e000      	b.n	801ae3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ae3a:	2300      	movs	r3, #0
}
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	3708      	adds	r7, #8
 801ae40:	46bd      	mov	sp, r7
 801ae42:	bd80      	pop	{r7, pc}
 801ae44:	08025a2c 	.word	0x08025a2c
 801ae48:	08025fc8 	.word	0x08025fc8
 801ae4c:	08025a80 	.word	0x08025a80

0801ae50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ae50:	b5b0      	push	{r4, r5, r7, lr}
 801ae52:	b08c      	sub	sp, #48	; 0x30
 801ae54:	af04      	add	r7, sp, #16
 801ae56:	60f8      	str	r0, [r7, #12]
 801ae58:	60b9      	str	r1, [r7, #8]
 801ae5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d106      	bne.n	801ae70 <tcp_output_segment+0x20>
 801ae62:	4b63      	ldr	r3, [pc, #396]	; (801aff0 <tcp_output_segment+0x1a0>)
 801ae64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ae68:	4962      	ldr	r1, [pc, #392]	; (801aff4 <tcp_output_segment+0x1a4>)
 801ae6a:	4863      	ldr	r0, [pc, #396]	; (801aff8 <tcp_output_segment+0x1a8>)
 801ae6c:	f006 fb1e 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d106      	bne.n	801ae84 <tcp_output_segment+0x34>
 801ae76:	4b5e      	ldr	r3, [pc, #376]	; (801aff0 <tcp_output_segment+0x1a0>)
 801ae78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ae7c:	495f      	ldr	r1, [pc, #380]	; (801affc <tcp_output_segment+0x1ac>)
 801ae7e:	485e      	ldr	r0, [pc, #376]	; (801aff8 <tcp_output_segment+0x1a8>)
 801ae80:	f006 fb14 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d106      	bne.n	801ae98 <tcp_output_segment+0x48>
 801ae8a:	4b59      	ldr	r3, [pc, #356]	; (801aff0 <tcp_output_segment+0x1a0>)
 801ae8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ae90:	495b      	ldr	r1, [pc, #364]	; (801b000 <tcp_output_segment+0x1b0>)
 801ae92:	4859      	ldr	r0, [pc, #356]	; (801aff8 <tcp_output_segment+0x1a8>)
 801ae94:	f006 fb0a 	bl	80214ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ae98:	68f8      	ldr	r0, [r7, #12]
 801ae9a:	f7ff ffb9 	bl	801ae10 <tcp_output_segment_busy>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d001      	beq.n	801aea8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801aea4:	2300      	movs	r3, #0
 801aea6:	e09f      	b.n	801afe8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	68dc      	ldr	r4, [r3, #12]
 801aeb0:	4610      	mov	r0, r2
 801aeb2:	f7f7 fd58 	bl	8012966 <lwip_htonl>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801aeba:	68bb      	ldr	r3, [r7, #8]
 801aebc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	68dc      	ldr	r4, [r3, #12]
 801aec2:	4610      	mov	r0, r2
 801aec4:	f7f7 fd3a 	bl	801293c <lwip_htons>
 801aec8:	4603      	mov	r3, r0
 801aeca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801aecc:	68bb      	ldr	r3, [r7, #8]
 801aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aed0:	68ba      	ldr	r2, [r7, #8]
 801aed2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801aed4:	441a      	add	r2, r3
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	68db      	ldr	r3, [r3, #12]
 801aede:	3314      	adds	r3, #20
 801aee0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	7a9b      	ldrb	r3, [r3, #10]
 801aee6:	f003 0301 	and.w	r3, r3, #1
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d015      	beq.n	801af1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801aeee:	68bb      	ldr	r3, [r7, #8]
 801aef0:	3304      	adds	r3, #4
 801aef2:	461a      	mov	r2, r3
 801aef4:	6879      	ldr	r1, [r7, #4]
 801aef6:	f44f 7006 	mov.w	r0, #536	; 0x218
 801aefa:	f7fc fa37 	bl	801736c <tcp_eff_send_mss_netif>
 801aefe:	4603      	mov	r3, r0
 801af00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801af02:	8b7b      	ldrh	r3, [r7, #26]
 801af04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801af08:	4618      	mov	r0, r3
 801af0a:	f7f7 fd2c 	bl	8012966 <lwip_htonl>
 801af0e:	4602      	mov	r2, r0
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	601a      	str	r2, [r3, #0]
    opts += 1;
 801af14:	69fb      	ldr	r3, [r7, #28]
 801af16:	3304      	adds	r3, #4
 801af18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801af1a:	68bb      	ldr	r3, [r7, #8]
 801af1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801af20:	2b00      	cmp	r3, #0
 801af22:	da02      	bge.n	801af2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	2200      	movs	r2, #0
 801af28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801af2a:	68bb      	ldr	r3, [r7, #8]
 801af2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d10c      	bne.n	801af4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801af32:	4b34      	ldr	r3, [pc, #208]	; (801b004 <tcp_output_segment+0x1b4>)
 801af34:	681a      	ldr	r2, [r3, #0]
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	68db      	ldr	r3, [r3, #12]
 801af3e:	685b      	ldr	r3, [r3, #4]
 801af40:	4618      	mov	r0, r3
 801af42:	f7f7 fd10 	bl	8012966 <lwip_htonl>
 801af46:	4602      	mov	r2, r0
 801af48:	68bb      	ldr	r3, [r7, #8]
 801af4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	68da      	ldr	r2, [r3, #12]
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	685b      	ldr	r3, [r3, #4]
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	1ad3      	subs	r3, r2, r3
 801af58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	685b      	ldr	r3, [r3, #4]
 801af5e:	8959      	ldrh	r1, [r3, #10]
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	685b      	ldr	r3, [r3, #4]
 801af64:	8b3a      	ldrh	r2, [r7, #24]
 801af66:	1a8a      	subs	r2, r1, r2
 801af68:	b292      	uxth	r2, r2
 801af6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	685b      	ldr	r3, [r3, #4]
 801af70:	8919      	ldrh	r1, [r3, #8]
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	685b      	ldr	r3, [r3, #4]
 801af76:	8b3a      	ldrh	r2, [r7, #24]
 801af78:	1a8a      	subs	r2, r1, r2
 801af7a:	b292      	uxth	r2, r2
 801af7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	685b      	ldr	r3, [r3, #4]
 801af82:	68fa      	ldr	r2, [r7, #12]
 801af84:	68d2      	ldr	r2, [r2, #12]
 801af86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	68db      	ldr	r3, [r3, #12]
 801af8c:	2200      	movs	r2, #0
 801af8e:	741a      	strb	r2, [r3, #16]
 801af90:	2200      	movs	r2, #0
 801af92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	68db      	ldr	r3, [r3, #12]
 801af98:	f103 0214 	add.w	r2, r3, #20
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	7a9b      	ldrb	r3, [r3, #10]
 801afa0:	009b      	lsls	r3, r3, #2
 801afa2:	f003 0304 	and.w	r3, r3, #4
 801afa6:	4413      	add	r3, r2
 801afa8:	69fa      	ldr	r2, [r7, #28]
 801afaa:	429a      	cmp	r2, r3
 801afac:	d006      	beq.n	801afbc <tcp_output_segment+0x16c>
 801afae:	4b10      	ldr	r3, [pc, #64]	; (801aff0 <tcp_output_segment+0x1a0>)
 801afb0:	f240 621c 	movw	r2, #1564	; 0x61c
 801afb4:	4914      	ldr	r1, [pc, #80]	; (801b008 <tcp_output_segment+0x1b8>)
 801afb6:	4810      	ldr	r0, [pc, #64]	; (801aff8 <tcp_output_segment+0x1a8>)
 801afb8:	f006 fa78 	bl	80214ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	6858      	ldr	r0, [r3, #4]
 801afc0:	68b9      	ldr	r1, [r7, #8]
 801afc2:	68bb      	ldr	r3, [r7, #8]
 801afc4:	1d1c      	adds	r4, r3, #4
 801afc6:	68bb      	ldr	r3, [r7, #8]
 801afc8:	7add      	ldrb	r5, [r3, #11]
 801afca:	68bb      	ldr	r3, [r7, #8]
 801afcc:	7a9b      	ldrb	r3, [r3, #10]
 801afce:	687a      	ldr	r2, [r7, #4]
 801afd0:	9202      	str	r2, [sp, #8]
 801afd2:	2206      	movs	r2, #6
 801afd4:	9201      	str	r2, [sp, #4]
 801afd6:	9300      	str	r3, [sp, #0]
 801afd8:	462b      	mov	r3, r5
 801afda:	4622      	mov	r2, r4
 801afdc:	f004 fd30 	bl	801fa40 <ip4_output_if>
 801afe0:	4603      	mov	r3, r0
 801afe2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801afe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801afe8:	4618      	mov	r0, r3
 801afea:	3720      	adds	r7, #32
 801afec:	46bd      	mov	sp, r7
 801afee:	bdb0      	pop	{r4, r5, r7, pc}
 801aff0:	08025a2c 	.word	0x08025a2c
 801aff4:	08025ff0 	.word	0x08025ff0
 801aff8:	08025a80 	.word	0x08025a80
 801affc:	08026010 	.word	0x08026010
 801b000:	08026030 	.word	0x08026030
 801b004:	20016c50 	.word	0x20016c50
 801b008:	08026054 	.word	0x08026054

0801b00c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b00c:	b5b0      	push	{r4, r5, r7, lr}
 801b00e:	b084      	sub	sp, #16
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d106      	bne.n	801b028 <tcp_rexmit_rto_prepare+0x1c>
 801b01a:	4b31      	ldr	r3, [pc, #196]	; (801b0e0 <tcp_rexmit_rto_prepare+0xd4>)
 801b01c:	f240 6263 	movw	r2, #1635	; 0x663
 801b020:	4930      	ldr	r1, [pc, #192]	; (801b0e4 <tcp_rexmit_rto_prepare+0xd8>)
 801b022:	4831      	ldr	r0, [pc, #196]	; (801b0e8 <tcp_rexmit_rto_prepare+0xdc>)
 801b024:	f006 fa42 	bl	80214ac <iprintf>

  if (pcb->unacked == NULL) {
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d102      	bne.n	801b036 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b030:	f06f 0305 	mvn.w	r3, #5
 801b034:	e050      	b.n	801b0d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b03a:	60fb      	str	r3, [r7, #12]
 801b03c:	e00b      	b.n	801b056 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b03e:	68f8      	ldr	r0, [r7, #12]
 801b040:	f7ff fee6 	bl	801ae10 <tcp_output_segment_busy>
 801b044:	4603      	mov	r3, r0
 801b046:	2b00      	cmp	r3, #0
 801b048:	d002      	beq.n	801b050 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b04a:	f06f 0305 	mvn.w	r3, #5
 801b04e:	e043      	b.n	801b0d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	60fb      	str	r3, [r7, #12]
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d1ef      	bne.n	801b03e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b05e:	68f8      	ldr	r0, [r7, #12]
 801b060:	f7ff fed6 	bl	801ae10 <tcp_output_segment_busy>
 801b064:	4603      	mov	r3, r0
 801b066:	2b00      	cmp	r3, #0
 801b068:	d002      	beq.n	801b070 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b06a:	f06f 0305 	mvn.w	r3, #5
 801b06e:	e033      	b.n	801b0d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	2200      	movs	r2, #0
 801b084:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	8b5b      	ldrh	r3, [r3, #26]
 801b08a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b08e:	b29a      	uxth	r2, r3
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	68db      	ldr	r3, [r3, #12]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	4618      	mov	r0, r3
 801b09c:	f7f7 fc63 	bl	8012966 <lwip_htonl>
 801b0a0:	4604      	mov	r4, r0
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	891b      	ldrh	r3, [r3, #8]
 801b0a6:	461d      	mov	r5, r3
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	68db      	ldr	r3, [r3, #12]
 801b0ac:	899b      	ldrh	r3, [r3, #12]
 801b0ae:	b29b      	uxth	r3, r3
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7f7 fc43 	bl	801293c <lwip_htons>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	b2db      	uxtb	r3, r3
 801b0ba:	f003 0303 	and.w	r3, r3, #3
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d001      	beq.n	801b0c6 <tcp_rexmit_rto_prepare+0xba>
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	e000      	b.n	801b0c8 <tcp_rexmit_rto_prepare+0xbc>
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	442b      	add	r3, r5
 801b0ca:	18e2      	adds	r2, r4, r3
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b0d6:	2300      	movs	r3, #0
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	3710      	adds	r7, #16
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bdb0      	pop	{r4, r5, r7, pc}
 801b0e0:	08025a2c 	.word	0x08025a2c
 801b0e4:	08026068 	.word	0x08026068
 801b0e8:	08025a80 	.word	0x08025a80

0801b0ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b082      	sub	sp, #8
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d106      	bne.n	801b108 <tcp_rexmit_rto_commit+0x1c>
 801b0fa:	4b0d      	ldr	r3, [pc, #52]	; (801b130 <tcp_rexmit_rto_commit+0x44>)
 801b0fc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b100:	490c      	ldr	r1, [pc, #48]	; (801b134 <tcp_rexmit_rto_commit+0x48>)
 801b102:	480d      	ldr	r0, [pc, #52]	; (801b138 <tcp_rexmit_rto_commit+0x4c>)
 801b104:	f006 f9d2 	bl	80214ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b10e:	2bff      	cmp	r3, #255	; 0xff
 801b110:	d007      	beq.n	801b122 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b118:	3301      	adds	r3, #1
 801b11a:	b2da      	uxtb	r2, r3
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b122:	6878      	ldr	r0, [r7, #4]
 801b124:	f7ff fc80 	bl	801aa28 <tcp_output>
}
 801b128:	bf00      	nop
 801b12a:	3708      	adds	r7, #8
 801b12c:	46bd      	mov	sp, r7
 801b12e:	bd80      	pop	{r7, pc}
 801b130:	08025a2c 	.word	0x08025a2c
 801b134:	0802608c 	.word	0x0802608c
 801b138:	08025a80 	.word	0x08025a80

0801b13c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b082      	sub	sp, #8
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d106      	bne.n	801b158 <tcp_rexmit_rto+0x1c>
 801b14a:	4b0a      	ldr	r3, [pc, #40]	; (801b174 <tcp_rexmit_rto+0x38>)
 801b14c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b150:	4909      	ldr	r1, [pc, #36]	; (801b178 <tcp_rexmit_rto+0x3c>)
 801b152:	480a      	ldr	r0, [pc, #40]	; (801b17c <tcp_rexmit_rto+0x40>)
 801b154:	f006 f9aa 	bl	80214ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b158:	6878      	ldr	r0, [r7, #4]
 801b15a:	f7ff ff57 	bl	801b00c <tcp_rexmit_rto_prepare>
 801b15e:	4603      	mov	r3, r0
 801b160:	2b00      	cmp	r3, #0
 801b162:	d102      	bne.n	801b16a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	f7ff ffc1 	bl	801b0ec <tcp_rexmit_rto_commit>
  }
}
 801b16a:	bf00      	nop
 801b16c:	3708      	adds	r7, #8
 801b16e:	46bd      	mov	sp, r7
 801b170:	bd80      	pop	{r7, pc}
 801b172:	bf00      	nop
 801b174:	08025a2c 	.word	0x08025a2c
 801b178:	080260b0 	.word	0x080260b0
 801b17c:	08025a80 	.word	0x08025a80

0801b180 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b180:	b590      	push	{r4, r7, lr}
 801b182:	b085      	sub	sp, #20
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d106      	bne.n	801b19c <tcp_rexmit+0x1c>
 801b18e:	4b2f      	ldr	r3, [pc, #188]	; (801b24c <tcp_rexmit+0xcc>)
 801b190:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b194:	492e      	ldr	r1, [pc, #184]	; (801b250 <tcp_rexmit+0xd0>)
 801b196:	482f      	ldr	r0, [pc, #188]	; (801b254 <tcp_rexmit+0xd4>)
 801b198:	f006 f988 	bl	80214ac <iprintf>

  if (pcb->unacked == NULL) {
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d102      	bne.n	801b1aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b1a4:	f06f 0305 	mvn.w	r3, #5
 801b1a8:	e04c      	b.n	801b244 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b1b0:	68b8      	ldr	r0, [r7, #8]
 801b1b2:	f7ff fe2d 	bl	801ae10 <tcp_output_segment_busy>
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d002      	beq.n	801b1c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b1bc:	f06f 0305 	mvn.w	r3, #5
 801b1c0:	e040      	b.n	801b244 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b1c2:	68bb      	ldr	r3, [r7, #8]
 801b1c4:	681a      	ldr	r2, [r3, #0]
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	336c      	adds	r3, #108	; 0x6c
 801b1ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b1d0:	e002      	b.n	801b1d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b1d8:	68fb      	ldr	r3, [r7, #12]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d011      	beq.n	801b204 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	68db      	ldr	r3, [r3, #12]
 801b1e6:	685b      	ldr	r3, [r3, #4]
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f7f7 fbbc 	bl	8012966 <lwip_htonl>
 801b1ee:	4604      	mov	r4, r0
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	68db      	ldr	r3, [r3, #12]
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	f7f7 fbb5 	bl	8012966 <lwip_htonl>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b200:	2b00      	cmp	r3, #0
 801b202:	dbe6      	blt.n	801b1d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	681a      	ldr	r2, [r3, #0]
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	68ba      	ldr	r2, [r7, #8]
 801b210:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d103      	bne.n	801b222 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	2200      	movs	r2, #0
 801b21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b228:	2bff      	cmp	r3, #255	; 0xff
 801b22a:	d007      	beq.n	801b23c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b232:	3301      	adds	r3, #1
 801b234:	b2da      	uxtb	r2, r3
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	2200      	movs	r2, #0
 801b240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b242:	2300      	movs	r3, #0
}
 801b244:	4618      	mov	r0, r3
 801b246:	3714      	adds	r7, #20
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd90      	pop	{r4, r7, pc}
 801b24c:	08025a2c 	.word	0x08025a2c
 801b250:	080260cc 	.word	0x080260cc
 801b254:	08025a80 	.word	0x08025a80

0801b258 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b082      	sub	sp, #8
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2b00      	cmp	r3, #0
 801b264:	d106      	bne.n	801b274 <tcp_rexmit_fast+0x1c>
 801b266:	4b2a      	ldr	r3, [pc, #168]	; (801b310 <tcp_rexmit_fast+0xb8>)
 801b268:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b26c:	4929      	ldr	r1, [pc, #164]	; (801b314 <tcp_rexmit_fast+0xbc>)
 801b26e:	482a      	ldr	r0, [pc, #168]	; (801b318 <tcp_rexmit_fast+0xc0>)
 801b270:	f006 f91c 	bl	80214ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d044      	beq.n	801b306 <tcp_rexmit_fast+0xae>
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	8b5b      	ldrh	r3, [r3, #26]
 801b280:	f003 0304 	and.w	r3, r3, #4
 801b284:	2b00      	cmp	r3, #0
 801b286:	d13e      	bne.n	801b306 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b288:	6878      	ldr	r0, [r7, #4]
 801b28a:	f7ff ff79 	bl	801b180 <tcp_rexmit>
 801b28e:	4603      	mov	r3, r0
 801b290:	2b00      	cmp	r3, #0
 801b292:	d138      	bne.n	801b306 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b2a0:	4293      	cmp	r3, r2
 801b2a2:	bf28      	it	cs
 801b2a4:	4613      	movcs	r3, r2
 801b2a6:	b29b      	uxth	r3, r3
 801b2a8:	0fda      	lsrs	r2, r3, #31
 801b2aa:	4413      	add	r3, r2
 801b2ac:	105b      	asrs	r3, r3, #1
 801b2ae:	b29a      	uxth	r2, r3
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b2bc:	461a      	mov	r2, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2c2:	005b      	lsls	r3, r3, #1
 801b2c4:	429a      	cmp	r2, r3
 801b2c6:	d206      	bcs.n	801b2d6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2cc:	005b      	lsls	r3, r3, #1
 801b2ce:	b29a      	uxth	r2, r3
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	0049      	lsls	r1, r1, #1
 801b2e4:	440b      	add	r3, r1
 801b2e6:	b29b      	uxth	r3, r3
 801b2e8:	4413      	add	r3, r2
 801b2ea:	b29a      	uxth	r2, r3
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	8b5b      	ldrh	r3, [r3, #26]
 801b2f6:	f043 0304 	orr.w	r3, r3, #4
 801b2fa:	b29a      	uxth	r2, r3
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2200      	movs	r2, #0
 801b304:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b306:	bf00      	nop
 801b308:	3708      	adds	r7, #8
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}
 801b30e:	bf00      	nop
 801b310:	08025a2c 	.word	0x08025a2c
 801b314:	080260e4 	.word	0x080260e4
 801b318:	08025a80 	.word	0x08025a80

0801b31c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b086      	sub	sp, #24
 801b320:	af00      	add	r7, sp, #0
 801b322:	60f8      	str	r0, [r7, #12]
 801b324:	607b      	str	r3, [r7, #4]
 801b326:	460b      	mov	r3, r1
 801b328:	817b      	strh	r3, [r7, #10]
 801b32a:	4613      	mov	r3, r2
 801b32c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b32e:	897a      	ldrh	r2, [r7, #10]
 801b330:	893b      	ldrh	r3, [r7, #8]
 801b332:	4413      	add	r3, r2
 801b334:	b29b      	uxth	r3, r3
 801b336:	3314      	adds	r3, #20
 801b338:	b29b      	uxth	r3, r3
 801b33a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b33e:	4619      	mov	r1, r3
 801b340:	2022      	movs	r0, #34	; 0x22
 801b342:	f7f9 fba5 	bl	8014a90 <pbuf_alloc>
 801b346:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d04d      	beq.n	801b3ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b34e:	897b      	ldrh	r3, [r7, #10]
 801b350:	3313      	adds	r3, #19
 801b352:	697a      	ldr	r2, [r7, #20]
 801b354:	8952      	ldrh	r2, [r2, #10]
 801b356:	4293      	cmp	r3, r2
 801b358:	db06      	blt.n	801b368 <tcp_output_alloc_header_common+0x4c>
 801b35a:	4b26      	ldr	r3, [pc, #152]	; (801b3f4 <tcp_output_alloc_header_common+0xd8>)
 801b35c:	f240 7223 	movw	r2, #1827	; 0x723
 801b360:	4925      	ldr	r1, [pc, #148]	; (801b3f8 <tcp_output_alloc_header_common+0xdc>)
 801b362:	4826      	ldr	r0, [pc, #152]	; (801b3fc <tcp_output_alloc_header_common+0xe0>)
 801b364:	f006 f8a2 	bl	80214ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b368:	697b      	ldr	r3, [r7, #20]
 801b36a:	685b      	ldr	r3, [r3, #4]
 801b36c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b36e:	8c3b      	ldrh	r3, [r7, #32]
 801b370:	4618      	mov	r0, r3
 801b372:	f7f7 fae3 	bl	801293c <lwip_htons>
 801b376:	4603      	mov	r3, r0
 801b378:	461a      	mov	r2, r3
 801b37a:	693b      	ldr	r3, [r7, #16]
 801b37c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b380:	4618      	mov	r0, r3
 801b382:	f7f7 fadb 	bl	801293c <lwip_htons>
 801b386:	4603      	mov	r3, r0
 801b388:	461a      	mov	r2, r3
 801b38a:	693b      	ldr	r3, [r7, #16]
 801b38c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b38e:	693b      	ldr	r3, [r7, #16]
 801b390:	687a      	ldr	r2, [r7, #4]
 801b392:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b394:	68f8      	ldr	r0, [r7, #12]
 801b396:	f7f7 fae6 	bl	8012966 <lwip_htonl>
 801b39a:	4602      	mov	r2, r0
 801b39c:	693b      	ldr	r3, [r7, #16]
 801b39e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b3a0:	897b      	ldrh	r3, [r7, #10]
 801b3a2:	089b      	lsrs	r3, r3, #2
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	3305      	adds	r3, #5
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	031b      	lsls	r3, r3, #12
 801b3ac:	b29a      	uxth	r2, r3
 801b3ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b3b2:	b29b      	uxth	r3, r3
 801b3b4:	4313      	orrs	r3, r2
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7f7 fabf 	bl	801293c <lwip_htons>
 801b3be:	4603      	mov	r3, r0
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b3c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	f7f7 fab7 	bl	801293c <lwip_htons>
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	693b      	ldr	r3, [r7, #16]
 801b3d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b3d6:	693b      	ldr	r3, [r7, #16]
 801b3d8:	2200      	movs	r2, #0
 801b3da:	741a      	strb	r2, [r3, #16]
 801b3dc:	2200      	movs	r2, #0
 801b3de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b3e0:	693b      	ldr	r3, [r7, #16]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	749a      	strb	r2, [r3, #18]
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b3ea:	697b      	ldr	r3, [r7, #20]
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3718      	adds	r7, #24
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}
 801b3f4:	08025a2c 	.word	0x08025a2c
 801b3f8:	08026104 	.word	0x08026104
 801b3fc:	08025a80 	.word	0x08025a80

0801b400 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b400:	b5b0      	push	{r4, r5, r7, lr}
 801b402:	b08a      	sub	sp, #40	; 0x28
 801b404:	af04      	add	r7, sp, #16
 801b406:	60f8      	str	r0, [r7, #12]
 801b408:	607b      	str	r3, [r7, #4]
 801b40a:	460b      	mov	r3, r1
 801b40c:	817b      	strh	r3, [r7, #10]
 801b40e:	4613      	mov	r3, r2
 801b410:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d106      	bne.n	801b426 <tcp_output_alloc_header+0x26>
 801b418:	4b15      	ldr	r3, [pc, #84]	; (801b470 <tcp_output_alloc_header+0x70>)
 801b41a:	f240 7242 	movw	r2, #1858	; 0x742
 801b41e:	4915      	ldr	r1, [pc, #84]	; (801b474 <tcp_output_alloc_header+0x74>)
 801b420:	4815      	ldr	r0, [pc, #84]	; (801b478 <tcp_output_alloc_header+0x78>)
 801b422:	f006 f843 	bl	80214ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b42a:	68fb      	ldr	r3, [r7, #12]
 801b42c:	8adb      	ldrh	r3, [r3, #22]
 801b42e:	68fa      	ldr	r2, [r7, #12]
 801b430:	8b12      	ldrh	r2, [r2, #24]
 801b432:	68f9      	ldr	r1, [r7, #12]
 801b434:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b436:	893d      	ldrh	r5, [r7, #8]
 801b438:	897c      	ldrh	r4, [r7, #10]
 801b43a:	9103      	str	r1, [sp, #12]
 801b43c:	2110      	movs	r1, #16
 801b43e:	9102      	str	r1, [sp, #8]
 801b440:	9201      	str	r2, [sp, #4]
 801b442:	9300      	str	r3, [sp, #0]
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	462a      	mov	r2, r5
 801b448:	4621      	mov	r1, r4
 801b44a:	f7ff ff67 	bl	801b31c <tcp_output_alloc_header_common>
 801b44e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d006      	beq.n	801b464 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b45a:	68fa      	ldr	r2, [r7, #12]
 801b45c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b45e:	441a      	add	r2, r3
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b464:	697b      	ldr	r3, [r7, #20]
}
 801b466:	4618      	mov	r0, r3
 801b468:	3718      	adds	r7, #24
 801b46a:	46bd      	mov	sp, r7
 801b46c:	bdb0      	pop	{r4, r5, r7, pc}
 801b46e:	bf00      	nop
 801b470:	08025a2c 	.word	0x08025a2c
 801b474:	08026134 	.word	0x08026134
 801b478:	08025a80 	.word	0x08025a80

0801b47c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b088      	sub	sp, #32
 801b480:	af00      	add	r7, sp, #0
 801b482:	60f8      	str	r0, [r7, #12]
 801b484:	60b9      	str	r1, [r7, #8]
 801b486:	4611      	mov	r1, r2
 801b488:	461a      	mov	r2, r3
 801b48a:	460b      	mov	r3, r1
 801b48c:	71fb      	strb	r3, [r7, #7]
 801b48e:	4613      	mov	r3, r2
 801b490:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b492:	2300      	movs	r3, #0
 801b494:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b496:	68bb      	ldr	r3, [r7, #8]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d106      	bne.n	801b4aa <tcp_output_fill_options+0x2e>
 801b49c:	4b13      	ldr	r3, [pc, #76]	; (801b4ec <tcp_output_fill_options+0x70>)
 801b49e:	f240 7256 	movw	r2, #1878	; 0x756
 801b4a2:	4913      	ldr	r1, [pc, #76]	; (801b4f0 <tcp_output_fill_options+0x74>)
 801b4a4:	4813      	ldr	r0, [pc, #76]	; (801b4f4 <tcp_output_fill_options+0x78>)
 801b4a6:	f006 f801 	bl	80214ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b4aa:	68bb      	ldr	r3, [r7, #8]
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b4b0:	69bb      	ldr	r3, [r7, #24]
 801b4b2:	3314      	adds	r3, #20
 801b4b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b4b6:	69bb      	ldr	r3, [r7, #24]
 801b4b8:	f103 0214 	add.w	r2, r3, #20
 801b4bc:	8bfb      	ldrh	r3, [r7, #30]
 801b4be:	009b      	lsls	r3, r3, #2
 801b4c0:	4619      	mov	r1, r3
 801b4c2:	79fb      	ldrb	r3, [r7, #7]
 801b4c4:	009b      	lsls	r3, r3, #2
 801b4c6:	f003 0304 	and.w	r3, r3, #4
 801b4ca:	440b      	add	r3, r1
 801b4cc:	4413      	add	r3, r2
 801b4ce:	697a      	ldr	r2, [r7, #20]
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	d006      	beq.n	801b4e2 <tcp_output_fill_options+0x66>
 801b4d4:	4b05      	ldr	r3, [pc, #20]	; (801b4ec <tcp_output_fill_options+0x70>)
 801b4d6:	f240 7275 	movw	r2, #1909	; 0x775
 801b4da:	4907      	ldr	r1, [pc, #28]	; (801b4f8 <tcp_output_fill_options+0x7c>)
 801b4dc:	4805      	ldr	r0, [pc, #20]	; (801b4f4 <tcp_output_fill_options+0x78>)
 801b4de:	f005 ffe5 	bl	80214ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b4e2:	bf00      	nop
 801b4e4:	3720      	adds	r7, #32
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bd80      	pop	{r7, pc}
 801b4ea:	bf00      	nop
 801b4ec:	08025a2c 	.word	0x08025a2c
 801b4f0:	0802615c 	.word	0x0802615c
 801b4f4:	08025a80 	.word	0x08025a80
 801b4f8:	08026054 	.word	0x08026054

0801b4fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b4fc:	b580      	push	{r7, lr}
 801b4fe:	b08a      	sub	sp, #40	; 0x28
 801b500:	af04      	add	r7, sp, #16
 801b502:	60f8      	str	r0, [r7, #12]
 801b504:	60b9      	str	r1, [r7, #8]
 801b506:	607a      	str	r2, [r7, #4]
 801b508:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b50a:	68bb      	ldr	r3, [r7, #8]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d106      	bne.n	801b51e <tcp_output_control_segment+0x22>
 801b510:	4b1c      	ldr	r3, [pc, #112]	; (801b584 <tcp_output_control_segment+0x88>)
 801b512:	f240 7287 	movw	r2, #1927	; 0x787
 801b516:	491c      	ldr	r1, [pc, #112]	; (801b588 <tcp_output_control_segment+0x8c>)
 801b518:	481c      	ldr	r0, [pc, #112]	; (801b58c <tcp_output_control_segment+0x90>)
 801b51a:	f005 ffc7 	bl	80214ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b51e:	683a      	ldr	r2, [r7, #0]
 801b520:	6879      	ldr	r1, [r7, #4]
 801b522:	68f8      	ldr	r0, [r7, #12]
 801b524:	f7fe fae8 	bl	8019af8 <tcp_route>
 801b528:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b52a:	693b      	ldr	r3, [r7, #16]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d102      	bne.n	801b536 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b530:	23fc      	movs	r3, #252	; 0xfc
 801b532:	75fb      	strb	r3, [r7, #23]
 801b534:	e01c      	b.n	801b570 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d006      	beq.n	801b54a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	7adb      	ldrb	r3, [r3, #11]
 801b540:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	7a9b      	ldrb	r3, [r3, #10]
 801b546:	757b      	strb	r3, [r7, #21]
 801b548:	e003      	b.n	801b552 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b54a:	23ff      	movs	r3, #255	; 0xff
 801b54c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b54e:	2300      	movs	r3, #0
 801b550:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b552:	7dba      	ldrb	r2, [r7, #22]
 801b554:	693b      	ldr	r3, [r7, #16]
 801b556:	9302      	str	r3, [sp, #8]
 801b558:	2306      	movs	r3, #6
 801b55a:	9301      	str	r3, [sp, #4]
 801b55c:	7d7b      	ldrb	r3, [r7, #21]
 801b55e:	9300      	str	r3, [sp, #0]
 801b560:	4613      	mov	r3, r2
 801b562:	683a      	ldr	r2, [r7, #0]
 801b564:	6879      	ldr	r1, [r7, #4]
 801b566:	68b8      	ldr	r0, [r7, #8]
 801b568:	f004 fa6a 	bl	801fa40 <ip4_output_if>
 801b56c:	4603      	mov	r3, r0
 801b56e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b570:	68b8      	ldr	r0, [r7, #8]
 801b572:	f7f9 fd71 	bl	8015058 <pbuf_free>
  return err;
 801b576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b57a:	4618      	mov	r0, r3
 801b57c:	3718      	adds	r7, #24
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}
 801b582:	bf00      	nop
 801b584:	08025a2c 	.word	0x08025a2c
 801b588:	08026184 	.word	0x08026184
 801b58c:	08025a80 	.word	0x08025a80

0801b590 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b590:	b590      	push	{r4, r7, lr}
 801b592:	b08b      	sub	sp, #44	; 0x2c
 801b594:	af04      	add	r7, sp, #16
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	607a      	str	r2, [r7, #4]
 801b59c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d106      	bne.n	801b5b2 <tcp_rst+0x22>
 801b5a4:	4b1f      	ldr	r3, [pc, #124]	; (801b624 <tcp_rst+0x94>)
 801b5a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b5aa:	491f      	ldr	r1, [pc, #124]	; (801b628 <tcp_rst+0x98>)
 801b5ac:	481f      	ldr	r0, [pc, #124]	; (801b62c <tcp_rst+0x9c>)
 801b5ae:	f005 ff7d 	bl	80214ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d106      	bne.n	801b5c6 <tcp_rst+0x36>
 801b5b8:	4b1a      	ldr	r3, [pc, #104]	; (801b624 <tcp_rst+0x94>)
 801b5ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b5be:	491c      	ldr	r1, [pc, #112]	; (801b630 <tcp_rst+0xa0>)
 801b5c0:	481a      	ldr	r0, [pc, #104]	; (801b62c <tcp_rst+0x9c>)
 801b5c2:	f005 ff73 	bl	80214ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b5ca:	f246 0308 	movw	r3, #24584	; 0x6008
 801b5ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b5d0:	7dfb      	ldrb	r3, [r7, #23]
 801b5d2:	b29c      	uxth	r4, r3
 801b5d4:	68b8      	ldr	r0, [r7, #8]
 801b5d6:	f7f7 f9c6 	bl	8012966 <lwip_htonl>
 801b5da:	4602      	mov	r2, r0
 801b5dc:	8abb      	ldrh	r3, [r7, #20]
 801b5de:	9303      	str	r3, [sp, #12]
 801b5e0:	2314      	movs	r3, #20
 801b5e2:	9302      	str	r3, [sp, #8]
 801b5e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b5e6:	9301      	str	r3, [sp, #4]
 801b5e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b5ea:	9300      	str	r3, [sp, #0]
 801b5ec:	4613      	mov	r3, r2
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	4621      	mov	r1, r4
 801b5f2:	6878      	ldr	r0, [r7, #4]
 801b5f4:	f7ff fe92 	bl	801b31c <tcp_output_alloc_header_common>
 801b5f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b5fa:	693b      	ldr	r3, [r7, #16]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d00c      	beq.n	801b61a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b600:	7dfb      	ldrb	r3, [r7, #23]
 801b602:	2200      	movs	r2, #0
 801b604:	6939      	ldr	r1, [r7, #16]
 801b606:	68f8      	ldr	r0, [r7, #12]
 801b608:	f7ff ff38 	bl	801b47c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b60e:	683a      	ldr	r2, [r7, #0]
 801b610:	6939      	ldr	r1, [r7, #16]
 801b612:	68f8      	ldr	r0, [r7, #12]
 801b614:	f7ff ff72 	bl	801b4fc <tcp_output_control_segment>
 801b618:	e000      	b.n	801b61c <tcp_rst+0x8c>
    return;
 801b61a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b61c:	371c      	adds	r7, #28
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd90      	pop	{r4, r7, pc}
 801b622:	bf00      	nop
 801b624:	08025a2c 	.word	0x08025a2c
 801b628:	080261b0 	.word	0x080261b0
 801b62c:	08025a80 	.word	0x08025a80
 801b630:	080261cc 	.word	0x080261cc

0801b634 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b634:	b590      	push	{r4, r7, lr}
 801b636:	b087      	sub	sp, #28
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b63c:	2300      	movs	r3, #0
 801b63e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b640:	2300      	movs	r3, #0
 801b642:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d106      	bne.n	801b658 <tcp_send_empty_ack+0x24>
 801b64a:	4b28      	ldr	r3, [pc, #160]	; (801b6ec <tcp_send_empty_ack+0xb8>)
 801b64c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b650:	4927      	ldr	r1, [pc, #156]	; (801b6f0 <tcp_send_empty_ack+0xbc>)
 801b652:	4828      	ldr	r0, [pc, #160]	; (801b6f4 <tcp_send_empty_ack+0xc0>)
 801b654:	f005 ff2a 	bl	80214ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b658:	7dfb      	ldrb	r3, [r7, #23]
 801b65a:	009b      	lsls	r3, r3, #2
 801b65c:	b2db      	uxtb	r3, r3
 801b65e:	f003 0304 	and.w	r3, r3, #4
 801b662:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b664:	7d7b      	ldrb	r3, [r7, #21]
 801b666:	b29c      	uxth	r4, r3
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b66c:	4618      	mov	r0, r3
 801b66e:	f7f7 f97a 	bl	8012966 <lwip_htonl>
 801b672:	4603      	mov	r3, r0
 801b674:	2200      	movs	r2, #0
 801b676:	4621      	mov	r1, r4
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	f7ff fec1 	bl	801b400 <tcp_output_alloc_header>
 801b67e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b680:	693b      	ldr	r3, [r7, #16]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d109      	bne.n	801b69a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	8b5b      	ldrh	r3, [r3, #26]
 801b68a:	f043 0303 	orr.w	r3, r3, #3
 801b68e:	b29a      	uxth	r2, r3
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b694:	f06f 0301 	mvn.w	r3, #1
 801b698:	e023      	b.n	801b6e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b69a:	7dbb      	ldrb	r3, [r7, #22]
 801b69c:	7dfa      	ldrb	r2, [r7, #23]
 801b69e:	6939      	ldr	r1, [r7, #16]
 801b6a0:	6878      	ldr	r0, [r7, #4]
 801b6a2:	f7ff feeb 	bl	801b47c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b6a6:	687a      	ldr	r2, [r7, #4]
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	3304      	adds	r3, #4
 801b6ac:	6939      	ldr	r1, [r7, #16]
 801b6ae:	6878      	ldr	r0, [r7, #4]
 801b6b0:	f7ff ff24 	bl	801b4fc <tcp_output_control_segment>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d007      	beq.n	801b6d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	8b5b      	ldrh	r3, [r3, #26]
 801b6c4:	f043 0303 	orr.w	r3, r3, #3
 801b6c8:	b29a      	uxth	r2, r3
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	835a      	strh	r2, [r3, #26]
 801b6ce:	e006      	b.n	801b6de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	8b5b      	ldrh	r3, [r3, #26]
 801b6d4:	f023 0303 	bic.w	r3, r3, #3
 801b6d8:	b29a      	uxth	r2, r3
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	371c      	adds	r7, #28
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	bd90      	pop	{r4, r7, pc}
 801b6ea:	bf00      	nop
 801b6ec:	08025a2c 	.word	0x08025a2c
 801b6f0:	080261e8 	.word	0x080261e8
 801b6f4:	08025a80 	.word	0x08025a80

0801b6f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b6f8:	b590      	push	{r4, r7, lr}
 801b6fa:	b087      	sub	sp, #28
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b700:	2300      	movs	r3, #0
 801b702:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d106      	bne.n	801b718 <tcp_keepalive+0x20>
 801b70a:	4b18      	ldr	r3, [pc, #96]	; (801b76c <tcp_keepalive+0x74>)
 801b70c:	f640 0224 	movw	r2, #2084	; 0x824
 801b710:	4917      	ldr	r1, [pc, #92]	; (801b770 <tcp_keepalive+0x78>)
 801b712:	4818      	ldr	r0, [pc, #96]	; (801b774 <tcp_keepalive+0x7c>)
 801b714:	f005 feca 	bl	80214ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b718:	7dfb      	ldrb	r3, [r7, #23]
 801b71a:	b29c      	uxth	r4, r3
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b720:	3b01      	subs	r3, #1
 801b722:	4618      	mov	r0, r3
 801b724:	f7f7 f91f 	bl	8012966 <lwip_htonl>
 801b728:	4603      	mov	r3, r0
 801b72a:	2200      	movs	r2, #0
 801b72c:	4621      	mov	r1, r4
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	f7ff fe66 	bl	801b400 <tcp_output_alloc_header>
 801b734:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b736:	693b      	ldr	r3, [r7, #16]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d102      	bne.n	801b742 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b73c:	f04f 33ff 	mov.w	r3, #4294967295
 801b740:	e010      	b.n	801b764 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b742:	7dfb      	ldrb	r3, [r7, #23]
 801b744:	2200      	movs	r2, #0
 801b746:	6939      	ldr	r1, [r7, #16]
 801b748:	6878      	ldr	r0, [r7, #4]
 801b74a:	f7ff fe97 	bl	801b47c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b74e:	687a      	ldr	r2, [r7, #4]
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	3304      	adds	r3, #4
 801b754:	6939      	ldr	r1, [r7, #16]
 801b756:	6878      	ldr	r0, [r7, #4]
 801b758:	f7ff fed0 	bl	801b4fc <tcp_output_control_segment>
 801b75c:	4603      	mov	r3, r0
 801b75e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b764:	4618      	mov	r0, r3
 801b766:	371c      	adds	r7, #28
 801b768:	46bd      	mov	sp, r7
 801b76a:	bd90      	pop	{r4, r7, pc}
 801b76c:	08025a2c 	.word	0x08025a2c
 801b770:	08026208 	.word	0x08026208
 801b774:	08025a80 	.word	0x08025a80

0801b778 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b778:	b590      	push	{r4, r7, lr}
 801b77a:	b08b      	sub	sp, #44	; 0x2c
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b780:	2300      	movs	r3, #0
 801b782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d106      	bne.n	801b79a <tcp_zero_window_probe+0x22>
 801b78c:	4b4c      	ldr	r3, [pc, #304]	; (801b8c0 <tcp_zero_window_probe+0x148>)
 801b78e:	f640 024f 	movw	r2, #2127	; 0x84f
 801b792:	494c      	ldr	r1, [pc, #304]	; (801b8c4 <tcp_zero_window_probe+0x14c>)
 801b794:	484c      	ldr	r0, [pc, #304]	; (801b8c8 <tcp_zero_window_probe+0x150>)
 801b796:	f005 fe89 	bl	80214ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b79e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b7a0:	6a3b      	ldr	r3, [r7, #32]
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d101      	bne.n	801b7aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	e086      	b.n	801b8b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b7b0:	2bff      	cmp	r3, #255	; 0xff
 801b7b2:	d007      	beq.n	801b7c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b7ba:	3301      	adds	r3, #1
 801b7bc:	b2da      	uxtb	r2, r3
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b7c4:	6a3b      	ldr	r3, [r7, #32]
 801b7c6:	68db      	ldr	r3, [r3, #12]
 801b7c8:	899b      	ldrh	r3, [r3, #12]
 801b7ca:	b29b      	uxth	r3, r3
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7f7 f8b5 	bl	801293c <lwip_htons>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	b2db      	uxtb	r3, r3
 801b7d6:	f003 0301 	and.w	r3, r3, #1
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d005      	beq.n	801b7ea <tcp_zero_window_probe+0x72>
 801b7de:	6a3b      	ldr	r3, [r7, #32]
 801b7e0:	891b      	ldrh	r3, [r3, #8]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d101      	bne.n	801b7ea <tcp_zero_window_probe+0x72>
 801b7e6:	2301      	movs	r3, #1
 801b7e8:	e000      	b.n	801b7ec <tcp_zero_window_probe+0x74>
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b7ee:	7ffb      	ldrb	r3, [r7, #31]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	bf0c      	ite	eq
 801b7f4:	2301      	moveq	r3, #1
 801b7f6:	2300      	movne	r3, #0
 801b7f8:	b2db      	uxtb	r3, r3
 801b7fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b800:	b299      	uxth	r1, r3
 801b802:	6a3b      	ldr	r3, [r7, #32]
 801b804:	68db      	ldr	r3, [r3, #12]
 801b806:	685b      	ldr	r3, [r3, #4]
 801b808:	8bba      	ldrh	r2, [r7, #28]
 801b80a:	6878      	ldr	r0, [r7, #4]
 801b80c:	f7ff fdf8 	bl	801b400 <tcp_output_alloc_header>
 801b810:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b812:	69bb      	ldr	r3, [r7, #24]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d102      	bne.n	801b81e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b818:	f04f 33ff 	mov.w	r3, #4294967295
 801b81c:	e04c      	b.n	801b8b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b81e:	69bb      	ldr	r3, [r7, #24]
 801b820:	685b      	ldr	r3, [r3, #4]
 801b822:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b824:	7ffb      	ldrb	r3, [r7, #31]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d011      	beq.n	801b84e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b82a:	697b      	ldr	r3, [r7, #20]
 801b82c:	899b      	ldrh	r3, [r3, #12]
 801b82e:	b29b      	uxth	r3, r3
 801b830:	b21b      	sxth	r3, r3
 801b832:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b836:	b21c      	sxth	r4, r3
 801b838:	2011      	movs	r0, #17
 801b83a:	f7f7 f87f 	bl	801293c <lwip_htons>
 801b83e:	4603      	mov	r3, r0
 801b840:	b21b      	sxth	r3, r3
 801b842:	4323      	orrs	r3, r4
 801b844:	b21b      	sxth	r3, r3
 801b846:	b29a      	uxth	r2, r3
 801b848:	697b      	ldr	r3, [r7, #20]
 801b84a:	819a      	strh	r2, [r3, #12]
 801b84c:	e010      	b.n	801b870 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b84e:	69bb      	ldr	r3, [r7, #24]
 801b850:	685b      	ldr	r3, [r3, #4]
 801b852:	3314      	adds	r3, #20
 801b854:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b856:	6a3b      	ldr	r3, [r7, #32]
 801b858:	6858      	ldr	r0, [r3, #4]
 801b85a:	6a3b      	ldr	r3, [r7, #32]
 801b85c:	685b      	ldr	r3, [r3, #4]
 801b85e:	891a      	ldrh	r2, [r3, #8]
 801b860:	6a3b      	ldr	r3, [r7, #32]
 801b862:	891b      	ldrh	r3, [r3, #8]
 801b864:	1ad3      	subs	r3, r2, r3
 801b866:	b29b      	uxth	r3, r3
 801b868:	2201      	movs	r2, #1
 801b86a:	6939      	ldr	r1, [r7, #16]
 801b86c:	f7f9 fdfa 	bl	8015464 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b870:	6a3b      	ldr	r3, [r7, #32]
 801b872:	68db      	ldr	r3, [r3, #12]
 801b874:	685b      	ldr	r3, [r3, #4]
 801b876:	4618      	mov	r0, r3
 801b878:	f7f7 f875 	bl	8012966 <lwip_htonl>
 801b87c:	4603      	mov	r3, r0
 801b87e:	3301      	adds	r3, #1
 801b880:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	1ad3      	subs	r3, r2, r3
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	da02      	bge.n	801b894 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	68fa      	ldr	r2, [r7, #12]
 801b892:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b898:	2200      	movs	r2, #0
 801b89a:	69b9      	ldr	r1, [r7, #24]
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	f7ff fded 	bl	801b47c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b8a2:	687a      	ldr	r2, [r7, #4]
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	3304      	adds	r3, #4
 801b8a8:	69b9      	ldr	r1, [r7, #24]
 801b8aa:	6878      	ldr	r0, [r7, #4]
 801b8ac:	f7ff fe26 	bl	801b4fc <tcp_output_control_segment>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b8b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	372c      	adds	r7, #44	; 0x2c
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	bd90      	pop	{r4, r7, pc}
 801b8c0:	08025a2c 	.word	0x08025a2c
 801b8c4:	08026224 	.word	0x08026224
 801b8c8:	08025a80 	.word	0x08025a80

0801b8cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b082      	sub	sp, #8
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b8d4:	f7fa f830 	bl	8015938 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b8d8:	4b0a      	ldr	r3, [pc, #40]	; (801b904 <tcpip_tcp_timer+0x38>)
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d103      	bne.n	801b8e8 <tcpip_tcp_timer+0x1c>
 801b8e0:	4b09      	ldr	r3, [pc, #36]	; (801b908 <tcpip_tcp_timer+0x3c>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d005      	beq.n	801b8f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b8e8:	2200      	movs	r2, #0
 801b8ea:	4908      	ldr	r1, [pc, #32]	; (801b90c <tcpip_tcp_timer+0x40>)
 801b8ec:	20fa      	movs	r0, #250	; 0xfa
 801b8ee:	f000 f8f3 	bl	801bad8 <sys_timeout>
 801b8f2:	e003      	b.n	801b8fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b8f4:	4b06      	ldr	r3, [pc, #24]	; (801b910 <tcpip_tcp_timer+0x44>)
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	601a      	str	r2, [r3, #0]
  }
}
 801b8fa:	bf00      	nop
 801b8fc:	bf00      	nop
 801b8fe:	3708      	adds	r7, #8
 801b900:	46bd      	mov	sp, r7
 801b902:	bd80      	pop	{r7, pc}
 801b904:	20016c4c 	.word	0x20016c4c
 801b908:	20016c5c 	.word	0x20016c5c
 801b90c:	0801b8cd 	.word	0x0801b8cd
 801b910:	200055c4 	.word	0x200055c4

0801b914 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b918:	4b0a      	ldr	r3, [pc, #40]	; (801b944 <tcp_timer_needed+0x30>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d10f      	bne.n	801b940 <tcp_timer_needed+0x2c>
 801b920:	4b09      	ldr	r3, [pc, #36]	; (801b948 <tcp_timer_needed+0x34>)
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d103      	bne.n	801b930 <tcp_timer_needed+0x1c>
 801b928:	4b08      	ldr	r3, [pc, #32]	; (801b94c <tcp_timer_needed+0x38>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d007      	beq.n	801b940 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b930:	4b04      	ldr	r3, [pc, #16]	; (801b944 <tcp_timer_needed+0x30>)
 801b932:	2201      	movs	r2, #1
 801b934:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b936:	2200      	movs	r2, #0
 801b938:	4905      	ldr	r1, [pc, #20]	; (801b950 <tcp_timer_needed+0x3c>)
 801b93a:	20fa      	movs	r0, #250	; 0xfa
 801b93c:	f000 f8cc 	bl	801bad8 <sys_timeout>
  }
}
 801b940:	bf00      	nop
 801b942:	bd80      	pop	{r7, pc}
 801b944:	200055c4 	.word	0x200055c4
 801b948:	20016c4c 	.word	0x20016c4c
 801b94c:	20016c5c 	.word	0x20016c5c
 801b950:	0801b8cd 	.word	0x0801b8cd

0801b954 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b086      	sub	sp, #24
 801b958:	af00      	add	r7, sp, #0
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	60b9      	str	r1, [r7, #8]
 801b95e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b960:	200a      	movs	r0, #10
 801b962:	f7f8 fc77 	bl	8014254 <memp_malloc>
 801b966:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b968:	693b      	ldr	r3, [r7, #16]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d109      	bne.n	801b982 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d151      	bne.n	801ba18 <sys_timeout_abs+0xc4>
 801b974:	4b2a      	ldr	r3, [pc, #168]	; (801ba20 <sys_timeout_abs+0xcc>)
 801b976:	22be      	movs	r2, #190	; 0xbe
 801b978:	492a      	ldr	r1, [pc, #168]	; (801ba24 <sys_timeout_abs+0xd0>)
 801b97a:	482b      	ldr	r0, [pc, #172]	; (801ba28 <sys_timeout_abs+0xd4>)
 801b97c:	f005 fd96 	bl	80214ac <iprintf>
    return;
 801b980:	e04a      	b.n	801ba18 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b982:	693b      	ldr	r3, [r7, #16]
 801b984:	2200      	movs	r2, #0
 801b986:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b988:	693b      	ldr	r3, [r7, #16]
 801b98a:	68ba      	ldr	r2, [r7, #8]
 801b98c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b98e:	693b      	ldr	r3, [r7, #16]
 801b990:	687a      	ldr	r2, [r7, #4]
 801b992:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b994:	693b      	ldr	r3, [r7, #16]
 801b996:	68fa      	ldr	r2, [r7, #12]
 801b998:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b99a:	4b24      	ldr	r3, [pc, #144]	; (801ba2c <sys_timeout_abs+0xd8>)
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d103      	bne.n	801b9aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b9a2:	4a22      	ldr	r2, [pc, #136]	; (801ba2c <sys_timeout_abs+0xd8>)
 801b9a4:	693b      	ldr	r3, [r7, #16]
 801b9a6:	6013      	str	r3, [r2, #0]
    return;
 801b9a8:	e037      	b.n	801ba1a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b9aa:	693b      	ldr	r3, [r7, #16]
 801b9ac:	685a      	ldr	r2, [r3, #4]
 801b9ae:	4b1f      	ldr	r3, [pc, #124]	; (801ba2c <sys_timeout_abs+0xd8>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	685b      	ldr	r3, [r3, #4]
 801b9b4:	1ad3      	subs	r3, r2, r3
 801b9b6:	0fdb      	lsrs	r3, r3, #31
 801b9b8:	f003 0301 	and.w	r3, r3, #1
 801b9bc:	b2db      	uxtb	r3, r3
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d007      	beq.n	801b9d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b9c2:	4b1a      	ldr	r3, [pc, #104]	; (801ba2c <sys_timeout_abs+0xd8>)
 801b9c4:	681a      	ldr	r2, [r3, #0]
 801b9c6:	693b      	ldr	r3, [r7, #16]
 801b9c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b9ca:	4a18      	ldr	r2, [pc, #96]	; (801ba2c <sys_timeout_abs+0xd8>)
 801b9cc:	693b      	ldr	r3, [r7, #16]
 801b9ce:	6013      	str	r3, [r2, #0]
 801b9d0:	e023      	b.n	801ba1a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b9d2:	4b16      	ldr	r3, [pc, #88]	; (801ba2c <sys_timeout_abs+0xd8>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	617b      	str	r3, [r7, #20]
 801b9d8:	e01a      	b.n	801ba10 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d00b      	beq.n	801b9fa <sys_timeout_abs+0xa6>
 801b9e2:	693b      	ldr	r3, [r7, #16]
 801b9e4:	685a      	ldr	r2, [r3, #4]
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	685b      	ldr	r3, [r3, #4]
 801b9ec:	1ad3      	subs	r3, r2, r3
 801b9ee:	0fdb      	lsrs	r3, r3, #31
 801b9f0:	f003 0301 	and.w	r3, r3, #1
 801b9f4:	b2db      	uxtb	r3, r3
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d007      	beq.n	801ba0a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b9fa:	697b      	ldr	r3, [r7, #20]
 801b9fc:	681a      	ldr	r2, [r3, #0]
 801b9fe:	693b      	ldr	r3, [r7, #16]
 801ba00:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ba02:	697b      	ldr	r3, [r7, #20]
 801ba04:	693a      	ldr	r2, [r7, #16]
 801ba06:	601a      	str	r2, [r3, #0]
        break;
 801ba08:	e007      	b.n	801ba1a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ba0a:	697b      	ldr	r3, [r7, #20]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	617b      	str	r3, [r7, #20]
 801ba10:	697b      	ldr	r3, [r7, #20]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d1e1      	bne.n	801b9da <sys_timeout_abs+0x86>
 801ba16:	e000      	b.n	801ba1a <sys_timeout_abs+0xc6>
    return;
 801ba18:	bf00      	nop
      }
    }
  }
}
 801ba1a:	3718      	adds	r7, #24
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	bd80      	pop	{r7, pc}
 801ba20:	08026248 	.word	0x08026248
 801ba24:	0802627c 	.word	0x0802627c
 801ba28:	080262bc 	.word	0x080262bc
 801ba2c:	200055bc 	.word	0x200055bc

0801ba30 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b086      	sub	sp, #24
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ba3c:	697b      	ldr	r3, [r7, #20]
 801ba3e:	685b      	ldr	r3, [r3, #4]
 801ba40:	4798      	blx	r3

  now = sys_now();
 801ba42:	f7ef fe35 	bl	800b6b0 <sys_now>
 801ba46:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ba48:	697b      	ldr	r3, [r7, #20]
 801ba4a:	681a      	ldr	r2, [r3, #0]
 801ba4c:	4b0f      	ldr	r3, [pc, #60]	; (801ba8c <lwip_cyclic_timer+0x5c>)
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	4413      	add	r3, r2
 801ba52:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ba54:	68fa      	ldr	r2, [r7, #12]
 801ba56:	693b      	ldr	r3, [r7, #16]
 801ba58:	1ad3      	subs	r3, r2, r3
 801ba5a:	0fdb      	lsrs	r3, r3, #31
 801ba5c:	f003 0301 	and.w	r3, r3, #1
 801ba60:	b2db      	uxtb	r3, r3
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d009      	beq.n	801ba7a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	681a      	ldr	r2, [r3, #0]
 801ba6a:	693b      	ldr	r3, [r7, #16]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	4907      	ldr	r1, [pc, #28]	; (801ba90 <lwip_cyclic_timer+0x60>)
 801ba72:	4618      	mov	r0, r3
 801ba74:	f7ff ff6e 	bl	801b954 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ba78:	e004      	b.n	801ba84 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ba7a:	687a      	ldr	r2, [r7, #4]
 801ba7c:	4904      	ldr	r1, [pc, #16]	; (801ba90 <lwip_cyclic_timer+0x60>)
 801ba7e:	68f8      	ldr	r0, [r7, #12]
 801ba80:	f7ff ff68 	bl	801b954 <sys_timeout_abs>
}
 801ba84:	bf00      	nop
 801ba86:	3718      	adds	r7, #24
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	200055c0 	.word	0x200055c0
 801ba90:	0801ba31 	.word	0x0801ba31

0801ba94 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ba9a:	2301      	movs	r3, #1
 801ba9c:	607b      	str	r3, [r7, #4]
 801ba9e:	e00e      	b.n	801babe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801baa0:	4a0b      	ldr	r2, [pc, #44]	; (801bad0 <sys_timeouts_init+0x3c>)
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	00db      	lsls	r3, r3, #3
 801baac:	4a08      	ldr	r2, [pc, #32]	; (801bad0 <sys_timeouts_init+0x3c>)
 801baae:	4413      	add	r3, r2
 801bab0:	461a      	mov	r2, r3
 801bab2:	4908      	ldr	r1, [pc, #32]	; (801bad4 <sys_timeouts_init+0x40>)
 801bab4:	f000 f810 	bl	801bad8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	3301      	adds	r3, #1
 801babc:	607b      	str	r3, [r7, #4]
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	2b05      	cmp	r3, #5
 801bac2:	d9ed      	bls.n	801baa0 <sys_timeouts_init+0xc>
  }
}
 801bac4:	bf00      	nop
 801bac6:	bf00      	nop
 801bac8:	3708      	adds	r7, #8
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd80      	pop	{r7, pc}
 801bace:	bf00      	nop
 801bad0:	080274b4 	.word	0x080274b4
 801bad4:	0801ba31 	.word	0x0801ba31

0801bad8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b086      	sub	sp, #24
 801badc:	af00      	add	r7, sp, #0
 801bade:	60f8      	str	r0, [r7, #12]
 801bae0:	60b9      	str	r1, [r7, #8]
 801bae2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801baea:	d306      	bcc.n	801bafa <sys_timeout+0x22>
 801baec:	4b0a      	ldr	r3, [pc, #40]	; (801bb18 <sys_timeout+0x40>)
 801baee:	f240 1229 	movw	r2, #297	; 0x129
 801baf2:	490a      	ldr	r1, [pc, #40]	; (801bb1c <sys_timeout+0x44>)
 801baf4:	480a      	ldr	r0, [pc, #40]	; (801bb20 <sys_timeout+0x48>)
 801baf6:	f005 fcd9 	bl	80214ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bafa:	f7ef fdd9 	bl	800b6b0 <sys_now>
 801bafe:	4602      	mov	r2, r0
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	4413      	add	r3, r2
 801bb04:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801bb06:	687a      	ldr	r2, [r7, #4]
 801bb08:	68b9      	ldr	r1, [r7, #8]
 801bb0a:	6978      	ldr	r0, [r7, #20]
 801bb0c:	f7ff ff22 	bl	801b954 <sys_timeout_abs>
#endif
}
 801bb10:	bf00      	nop
 801bb12:	3718      	adds	r7, #24
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bd80      	pop	{r7, pc}
 801bb18:	08026248 	.word	0x08026248
 801bb1c:	080262e4 	.word	0x080262e4
 801bb20:	080262bc 	.word	0x080262bc

0801bb24 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b084      	sub	sp, #16
 801bb28:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801bb2a:	f7ef fdc1 	bl	800b6b0 <sys_now>
 801bb2e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801bb30:	4b17      	ldr	r3, [pc, #92]	; (801bb90 <sys_check_timeouts+0x6c>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801bb36:	68bb      	ldr	r3, [r7, #8]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d022      	beq.n	801bb82 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801bb3c:	68bb      	ldr	r3, [r7, #8]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	68fa      	ldr	r2, [r7, #12]
 801bb42:	1ad3      	subs	r3, r2, r3
 801bb44:	0fdb      	lsrs	r3, r3, #31
 801bb46:	f003 0301 	and.w	r3, r3, #1
 801bb4a:	b2db      	uxtb	r3, r3
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d11a      	bne.n	801bb86 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801bb50:	68bb      	ldr	r3, [r7, #8]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	4a0e      	ldr	r2, [pc, #56]	; (801bb90 <sys_check_timeouts+0x6c>)
 801bb56:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801bb58:	68bb      	ldr	r3, [r7, #8]
 801bb5a:	689b      	ldr	r3, [r3, #8]
 801bb5c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	68db      	ldr	r3, [r3, #12]
 801bb62:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bb64:	68bb      	ldr	r3, [r7, #8]
 801bb66:	685b      	ldr	r3, [r3, #4]
 801bb68:	4a0a      	ldr	r2, [pc, #40]	; (801bb94 <sys_check_timeouts+0x70>)
 801bb6a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bb6c:	68b9      	ldr	r1, [r7, #8]
 801bb6e:	200a      	movs	r0, #10
 801bb70:	f7f8 fbc2 	bl	80142f8 <memp_free>
    if (handler != NULL) {
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d0da      	beq.n	801bb30 <sys_check_timeouts+0xc>
      handler(arg);
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	6838      	ldr	r0, [r7, #0]
 801bb7e:	4798      	blx	r3
  do {
 801bb80:	e7d6      	b.n	801bb30 <sys_check_timeouts+0xc>
      return;
 801bb82:	bf00      	nop
 801bb84:	e000      	b.n	801bb88 <sys_check_timeouts+0x64>
      return;
 801bb86:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801bb88:	3710      	adds	r7, #16
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd80      	pop	{r7, pc}
 801bb8e:	bf00      	nop
 801bb90:	200055bc 	.word	0x200055bc
 801bb94:	200055c0 	.word	0x200055c0

0801bb98 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b082      	sub	sp, #8
 801bb9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801bb9e:	4b16      	ldr	r3, [pc, #88]	; (801bbf8 <sys_timeouts_sleeptime+0x60>)
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d102      	bne.n	801bbac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801bba6:	f04f 33ff 	mov.w	r3, #4294967295
 801bbaa:	e020      	b.n	801bbee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801bbac:	f7ef fd80 	bl	800b6b0 <sys_now>
 801bbb0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801bbb2:	4b11      	ldr	r3, [pc, #68]	; (801bbf8 <sys_timeouts_sleeptime+0x60>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	685a      	ldr	r2, [r3, #4]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	1ad3      	subs	r3, r2, r3
 801bbbc:	0fdb      	lsrs	r3, r3, #31
 801bbbe:	f003 0301 	and.w	r3, r3, #1
 801bbc2:	b2db      	uxtb	r3, r3
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d001      	beq.n	801bbcc <sys_timeouts_sleeptime+0x34>
    return 0;
 801bbc8:	2300      	movs	r3, #0
 801bbca:	e010      	b.n	801bbee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801bbcc:	4b0a      	ldr	r3, [pc, #40]	; (801bbf8 <sys_timeouts_sleeptime+0x60>)
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	685a      	ldr	r2, [r3, #4]
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	1ad3      	subs	r3, r2, r3
 801bbd6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801bbd8:	683b      	ldr	r3, [r7, #0]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	da06      	bge.n	801bbec <sys_timeouts_sleeptime+0x54>
 801bbde:	4b07      	ldr	r3, [pc, #28]	; (801bbfc <sys_timeouts_sleeptime+0x64>)
 801bbe0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801bbe4:	4906      	ldr	r1, [pc, #24]	; (801bc00 <sys_timeouts_sleeptime+0x68>)
 801bbe6:	4807      	ldr	r0, [pc, #28]	; (801bc04 <sys_timeouts_sleeptime+0x6c>)
 801bbe8:	f005 fc60 	bl	80214ac <iprintf>
    return ret;
 801bbec:	683b      	ldr	r3, [r7, #0]
  }
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	3708      	adds	r7, #8
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	bd80      	pop	{r7, pc}
 801bbf6:	bf00      	nop
 801bbf8:	200055bc 	.word	0x200055bc
 801bbfc:	08026248 	.word	0x08026248
 801bc00:	0802631c 	.word	0x0802631c
 801bc04:	080262bc 	.word	0x080262bc

0801bc08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bc0c:	f005 fd20 	bl	8021650 <rand>
 801bc10:	4603      	mov	r3, r0
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bc18:	b29b      	uxth	r3, r3
 801bc1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801bc1e:	b29a      	uxth	r2, r3
 801bc20:	4b01      	ldr	r3, [pc, #4]	; (801bc28 <udp_init+0x20>)
 801bc22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bc24:	bf00      	nop
 801bc26:	bd80      	pop	{r7, pc}
 801bc28:	20000368 	.word	0x20000368

0801bc2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bc2c:	b480      	push	{r7}
 801bc2e:	b083      	sub	sp, #12
 801bc30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bc32:	2300      	movs	r3, #0
 801bc34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bc36:	4b17      	ldr	r3, [pc, #92]	; (801bc94 <udp_new_port+0x68>)
 801bc38:	881b      	ldrh	r3, [r3, #0]
 801bc3a:	1c5a      	adds	r2, r3, #1
 801bc3c:	b291      	uxth	r1, r2
 801bc3e:	4a15      	ldr	r2, [pc, #84]	; (801bc94 <udp_new_port+0x68>)
 801bc40:	8011      	strh	r1, [r2, #0]
 801bc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc46:	4293      	cmp	r3, r2
 801bc48:	d103      	bne.n	801bc52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bc4a:	4b12      	ldr	r3, [pc, #72]	; (801bc94 <udp_new_port+0x68>)
 801bc4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bc50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc52:	4b11      	ldr	r3, [pc, #68]	; (801bc98 <udp_new_port+0x6c>)
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	603b      	str	r3, [r7, #0]
 801bc58:	e011      	b.n	801bc7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	8a5a      	ldrh	r2, [r3, #18]
 801bc5e:	4b0d      	ldr	r3, [pc, #52]	; (801bc94 <udp_new_port+0x68>)
 801bc60:	881b      	ldrh	r3, [r3, #0]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d108      	bne.n	801bc78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bc66:	88fb      	ldrh	r3, [r7, #6]
 801bc68:	3301      	adds	r3, #1
 801bc6a:	80fb      	strh	r3, [r7, #6]
 801bc6c:	88fb      	ldrh	r3, [r7, #6]
 801bc6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bc72:	d3e0      	bcc.n	801bc36 <udp_new_port+0xa>
        return 0;
 801bc74:	2300      	movs	r3, #0
 801bc76:	e007      	b.n	801bc88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc78:	683b      	ldr	r3, [r7, #0]
 801bc7a:	68db      	ldr	r3, [r3, #12]
 801bc7c:	603b      	str	r3, [r7, #0]
 801bc7e:	683b      	ldr	r3, [r7, #0]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d1ea      	bne.n	801bc5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bc84:	4b03      	ldr	r3, [pc, #12]	; (801bc94 <udp_new_port+0x68>)
 801bc86:	881b      	ldrh	r3, [r3, #0]
}
 801bc88:	4618      	mov	r0, r3
 801bc8a:	370c      	adds	r7, #12
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc92:	4770      	bx	lr
 801bc94:	20000368 	.word	0x20000368
 801bc98:	20016c64 	.word	0x20016c64

0801bc9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bc9c:	b580      	push	{r7, lr}
 801bc9e:	b084      	sub	sp, #16
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	60f8      	str	r0, [r7, #12]
 801bca4:	60b9      	str	r1, [r7, #8]
 801bca6:	4613      	mov	r3, r2
 801bca8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d105      	bne.n	801bcbc <udp_input_local_match+0x20>
 801bcb0:	4b27      	ldr	r3, [pc, #156]	; (801bd50 <udp_input_local_match+0xb4>)
 801bcb2:	2287      	movs	r2, #135	; 0x87
 801bcb4:	4927      	ldr	r1, [pc, #156]	; (801bd54 <udp_input_local_match+0xb8>)
 801bcb6:	4828      	ldr	r0, [pc, #160]	; (801bd58 <udp_input_local_match+0xbc>)
 801bcb8:	f005 fbf8 	bl	80214ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bcbc:	68bb      	ldr	r3, [r7, #8]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d105      	bne.n	801bcce <udp_input_local_match+0x32>
 801bcc2:	4b23      	ldr	r3, [pc, #140]	; (801bd50 <udp_input_local_match+0xb4>)
 801bcc4:	2288      	movs	r2, #136	; 0x88
 801bcc6:	4925      	ldr	r1, [pc, #148]	; (801bd5c <udp_input_local_match+0xc0>)
 801bcc8:	4823      	ldr	r0, [pc, #140]	; (801bd58 <udp_input_local_match+0xbc>)
 801bcca:	f005 fbef 	bl	80214ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	7a1b      	ldrb	r3, [r3, #8]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d00b      	beq.n	801bcee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	7a1a      	ldrb	r2, [r3, #8]
 801bcda:	4b21      	ldr	r3, [pc, #132]	; (801bd60 <udp_input_local_match+0xc4>)
 801bcdc:	685b      	ldr	r3, [r3, #4]
 801bcde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bce2:	3301      	adds	r3, #1
 801bce4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bce6:	429a      	cmp	r2, r3
 801bce8:	d001      	beq.n	801bcee <udp_input_local_match+0x52>
    return 0;
 801bcea:	2300      	movs	r3, #0
 801bcec:	e02b      	b.n	801bd46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bcee:	79fb      	ldrb	r3, [r7, #7]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d018      	beq.n	801bd26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d013      	beq.n	801bd22 <udp_input_local_match+0x86>
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d00f      	beq.n	801bd22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bd02:	4b17      	ldr	r3, [pc, #92]	; (801bd60 <udp_input_local_match+0xc4>)
 801bd04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd0a:	d00a      	beq.n	801bd22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	681a      	ldr	r2, [r3, #0]
 801bd10:	4b13      	ldr	r3, [pc, #76]	; (801bd60 <udp_input_local_match+0xc4>)
 801bd12:	695b      	ldr	r3, [r3, #20]
 801bd14:	405a      	eors	r2, r3
 801bd16:	68bb      	ldr	r3, [r7, #8]
 801bd18:	3308      	adds	r3, #8
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d110      	bne.n	801bd44 <udp_input_local_match+0xa8>
          return 1;
 801bd22:	2301      	movs	r3, #1
 801bd24:	e00f      	b.n	801bd46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d009      	beq.n	801bd40 <udp_input_local_match+0xa4>
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d005      	beq.n	801bd40 <udp_input_local_match+0xa4>
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	681a      	ldr	r2, [r3, #0]
 801bd38:	4b09      	ldr	r3, [pc, #36]	; (801bd60 <udp_input_local_match+0xc4>)
 801bd3a:	695b      	ldr	r3, [r3, #20]
 801bd3c:	429a      	cmp	r2, r3
 801bd3e:	d101      	bne.n	801bd44 <udp_input_local_match+0xa8>
        return 1;
 801bd40:	2301      	movs	r3, #1
 801bd42:	e000      	b.n	801bd46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bd44:	2300      	movs	r3, #0
}
 801bd46:	4618      	mov	r0, r3
 801bd48:	3710      	adds	r7, #16
 801bd4a:	46bd      	mov	sp, r7
 801bd4c:	bd80      	pop	{r7, pc}
 801bd4e:	bf00      	nop
 801bd50:	08026330 	.word	0x08026330
 801bd54:	08026360 	.word	0x08026360
 801bd58:	08026384 	.word	0x08026384
 801bd5c:	080263ac 	.word	0x080263ac
 801bd60:	2001346c 	.word	0x2001346c

0801bd64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bd64:	b590      	push	{r4, r7, lr}
 801bd66:	b08d      	sub	sp, #52	; 0x34
 801bd68:	af02      	add	r7, sp, #8
 801bd6a:	6078      	str	r0, [r7, #4]
 801bd6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d105      	bne.n	801bd84 <udp_input+0x20>
 801bd78:	4b7c      	ldr	r3, [pc, #496]	; (801bf6c <udp_input+0x208>)
 801bd7a:	22cf      	movs	r2, #207	; 0xcf
 801bd7c:	497c      	ldr	r1, [pc, #496]	; (801bf70 <udp_input+0x20c>)
 801bd7e:	487d      	ldr	r0, [pc, #500]	; (801bf74 <udp_input+0x210>)
 801bd80:	f005 fb94 	bl	80214ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801bd84:	683b      	ldr	r3, [r7, #0]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d105      	bne.n	801bd96 <udp_input+0x32>
 801bd8a:	4b78      	ldr	r3, [pc, #480]	; (801bf6c <udp_input+0x208>)
 801bd8c:	22d0      	movs	r2, #208	; 0xd0
 801bd8e:	497a      	ldr	r1, [pc, #488]	; (801bf78 <udp_input+0x214>)
 801bd90:	4878      	ldr	r0, [pc, #480]	; (801bf74 <udp_input+0x210>)
 801bd92:	f005 fb8b 	bl	80214ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	895b      	ldrh	r3, [r3, #10]
 801bd9a:	2b07      	cmp	r3, #7
 801bd9c:	d803      	bhi.n	801bda6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801bd9e:	6878      	ldr	r0, [r7, #4]
 801bda0:	f7f9 f95a 	bl	8015058 <pbuf_free>
    goto end;
 801bda4:	e0de      	b.n	801bf64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	685b      	ldr	r3, [r3, #4]
 801bdaa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801bdac:	4b73      	ldr	r3, [pc, #460]	; (801bf7c <udp_input+0x218>)
 801bdae:	695b      	ldr	r3, [r3, #20]
 801bdb0:	4a72      	ldr	r2, [pc, #456]	; (801bf7c <udp_input+0x218>)
 801bdb2:	6812      	ldr	r2, [r2, #0]
 801bdb4:	4611      	mov	r1, r2
 801bdb6:	4618      	mov	r0, r3
 801bdb8:	f003 ff1a 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801bdbc:	4603      	mov	r3, r0
 801bdbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	881b      	ldrh	r3, [r3, #0]
 801bdc4:	b29b      	uxth	r3, r3
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7f6 fdb8 	bl	801293c <lwip_htons>
 801bdcc:	4603      	mov	r3, r0
 801bdce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801bdd0:	697b      	ldr	r3, [r7, #20]
 801bdd2:	885b      	ldrh	r3, [r3, #2]
 801bdd4:	b29b      	uxth	r3, r3
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f7f6 fdb0 	bl	801293c <lwip_htons>
 801bddc:	4603      	mov	r3, r0
 801bdde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801bde0:	2300      	movs	r3, #0
 801bde2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801bde4:	2300      	movs	r3, #0
 801bde6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801bde8:	2300      	movs	r3, #0
 801bdea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bdec:	4b64      	ldr	r3, [pc, #400]	; (801bf80 <udp_input+0x21c>)
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	627b      	str	r3, [r7, #36]	; 0x24
 801bdf2:	e054      	b.n	801be9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdf6:	8a5b      	ldrh	r3, [r3, #18]
 801bdf8:	89fa      	ldrh	r2, [r7, #14]
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	d14a      	bne.n	801be94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801bdfe:	7cfb      	ldrb	r3, [r7, #19]
 801be00:	461a      	mov	r2, r3
 801be02:	6839      	ldr	r1, [r7, #0]
 801be04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801be06:	f7ff ff49 	bl	801bc9c <udp_input_local_match>
 801be0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d041      	beq.n	801be94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be12:	7c1b      	ldrb	r3, [r3, #16]
 801be14:	f003 0304 	and.w	r3, r3, #4
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d11d      	bne.n	801be58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801be1c:	69fb      	ldr	r3, [r7, #28]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d102      	bne.n	801be28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be24:	61fb      	str	r3, [r7, #28]
 801be26:	e017      	b.n	801be58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801be28:	7cfb      	ldrb	r3, [r7, #19]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d014      	beq.n	801be58 <udp_input+0xf4>
 801be2e:	4b53      	ldr	r3, [pc, #332]	; (801bf7c <udp_input+0x218>)
 801be30:	695b      	ldr	r3, [r3, #20]
 801be32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be36:	d10f      	bne.n	801be58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801be38:	69fb      	ldr	r3, [r7, #28]
 801be3a:	681a      	ldr	r2, [r3, #0]
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	3304      	adds	r3, #4
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	429a      	cmp	r2, r3
 801be44:	d008      	beq.n	801be58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	3304      	adds	r3, #4
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	429a      	cmp	r2, r3
 801be52:	d101      	bne.n	801be58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be5a:	8a9b      	ldrh	r3, [r3, #20]
 801be5c:	8a3a      	ldrh	r2, [r7, #16]
 801be5e:	429a      	cmp	r2, r3
 801be60:	d118      	bne.n	801be94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801be66:	2b00      	cmp	r3, #0
 801be68:	d005      	beq.n	801be76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be6c:	685a      	ldr	r2, [r3, #4]
 801be6e:	4b43      	ldr	r3, [pc, #268]	; (801bf7c <udp_input+0x218>)
 801be70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801be72:	429a      	cmp	r2, r3
 801be74:	d10e      	bne.n	801be94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801be76:	6a3b      	ldr	r3, [r7, #32]
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d014      	beq.n	801bea6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be7e:	68da      	ldr	r2, [r3, #12]
 801be80:	6a3b      	ldr	r3, [r7, #32]
 801be82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801be84:	4b3e      	ldr	r3, [pc, #248]	; (801bf80 <udp_input+0x21c>)
 801be86:	681a      	ldr	r2, [r3, #0]
 801be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801be8c:	4a3c      	ldr	r2, [pc, #240]	; (801bf80 <udp_input+0x21c>)
 801be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801be92:	e008      	b.n	801bea6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be9a:	68db      	ldr	r3, [r3, #12]
 801be9c:	627b      	str	r3, [r7, #36]	; 0x24
 801be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d1a7      	bne.n	801bdf4 <udp_input+0x90>
 801bea4:	e000      	b.n	801bea8 <udp_input+0x144>
        break;
 801bea6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d101      	bne.n	801beb2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801beae:	69fb      	ldr	r3, [r7, #28]
 801beb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d002      	beq.n	801bebe <udp_input+0x15a>
    for_us = 1;
 801beb8:	2301      	movs	r3, #1
 801beba:	76fb      	strb	r3, [r7, #27]
 801bebc:	e00a      	b.n	801bed4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	3304      	adds	r3, #4
 801bec2:	681a      	ldr	r2, [r3, #0]
 801bec4:	4b2d      	ldr	r3, [pc, #180]	; (801bf7c <udp_input+0x218>)
 801bec6:	695b      	ldr	r3, [r3, #20]
 801bec8:	429a      	cmp	r2, r3
 801beca:	bf0c      	ite	eq
 801becc:	2301      	moveq	r3, #1
 801bece:	2300      	movne	r3, #0
 801bed0:	b2db      	uxtb	r3, r3
 801bed2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bed4:	7efb      	ldrb	r3, [r7, #27]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d041      	beq.n	801bf5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801beda:	2108      	movs	r1, #8
 801bedc:	6878      	ldr	r0, [r7, #4]
 801bede:	f7f9 f835 	bl	8014f4c <pbuf_remove_header>
 801bee2:	4603      	mov	r3, r0
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d00a      	beq.n	801befe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bee8:	4b20      	ldr	r3, [pc, #128]	; (801bf6c <udp_input+0x208>)
 801beea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801beee:	4925      	ldr	r1, [pc, #148]	; (801bf84 <udp_input+0x220>)
 801bef0:	4820      	ldr	r0, [pc, #128]	; (801bf74 <udp_input+0x210>)
 801bef2:	f005 fadb 	bl	80214ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bef6:	6878      	ldr	r0, [r7, #4]
 801bef8:	f7f9 f8ae 	bl	8015058 <pbuf_free>
      goto end;
 801befc:	e032      	b.n	801bf64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d012      	beq.n	801bf2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf06:	699b      	ldr	r3, [r3, #24]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d00a      	beq.n	801bf22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf0e:	699c      	ldr	r4, [r3, #24]
 801bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf12:	69d8      	ldr	r0, [r3, #28]
 801bf14:	8a3b      	ldrh	r3, [r7, #16]
 801bf16:	9300      	str	r3, [sp, #0]
 801bf18:	4b1b      	ldr	r3, [pc, #108]	; (801bf88 <udp_input+0x224>)
 801bf1a:	687a      	ldr	r2, [r7, #4]
 801bf1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bf1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bf20:	e021      	b.n	801bf66 <udp_input+0x202>
        pbuf_free(p);
 801bf22:	6878      	ldr	r0, [r7, #4]
 801bf24:	f7f9 f898 	bl	8015058 <pbuf_free>
        goto end;
 801bf28:	e01c      	b.n	801bf64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bf2a:	7cfb      	ldrb	r3, [r7, #19]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d112      	bne.n	801bf56 <udp_input+0x1f2>
 801bf30:	4b12      	ldr	r3, [pc, #72]	; (801bf7c <udp_input+0x218>)
 801bf32:	695b      	ldr	r3, [r3, #20]
 801bf34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bf38:	2be0      	cmp	r3, #224	; 0xe0
 801bf3a:	d00c      	beq.n	801bf56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bf3c:	4b0f      	ldr	r3, [pc, #60]	; (801bf7c <udp_input+0x218>)
 801bf3e:	899b      	ldrh	r3, [r3, #12]
 801bf40:	3308      	adds	r3, #8
 801bf42:	b29b      	uxth	r3, r3
 801bf44:	b21b      	sxth	r3, r3
 801bf46:	4619      	mov	r1, r3
 801bf48:	6878      	ldr	r0, [r7, #4]
 801bf4a:	f7f9 f872 	bl	8015032 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bf4e:	2103      	movs	r1, #3
 801bf50:	6878      	ldr	r0, [r7, #4]
 801bf52:	f003 fb0f 	bl	801f574 <icmp_dest_unreach>
      pbuf_free(p);
 801bf56:	6878      	ldr	r0, [r7, #4]
 801bf58:	f7f9 f87e 	bl	8015058 <pbuf_free>
  return;
 801bf5c:	e003      	b.n	801bf66 <udp_input+0x202>
    pbuf_free(p);
 801bf5e:	6878      	ldr	r0, [r7, #4]
 801bf60:	f7f9 f87a 	bl	8015058 <pbuf_free>
  return;
 801bf64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801bf66:	372c      	adds	r7, #44	; 0x2c
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bd90      	pop	{r4, r7, pc}
 801bf6c:	08026330 	.word	0x08026330
 801bf70:	080263d4 	.word	0x080263d4
 801bf74:	08026384 	.word	0x08026384
 801bf78:	080263ec 	.word	0x080263ec
 801bf7c:	2001346c 	.word	0x2001346c
 801bf80:	20016c64 	.word	0x20016c64
 801bf84:	08026408 	.word	0x08026408
 801bf88:	2001347c 	.word	0x2001347c

0801bf8c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b082      	sub	sp, #8
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d109      	bne.n	801bfb0 <udp_send+0x24>
 801bf9c:	4b11      	ldr	r3, [pc, #68]	; (801bfe4 <udp_send+0x58>)
 801bf9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 801bfa2:	4911      	ldr	r1, [pc, #68]	; (801bfe8 <udp_send+0x5c>)
 801bfa4:	4811      	ldr	r0, [pc, #68]	; (801bfec <udp_send+0x60>)
 801bfa6:	f005 fa81 	bl	80214ac <iprintf>
 801bfaa:	f06f 030f 	mvn.w	r3, #15
 801bfae:	e015      	b.n	801bfdc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d109      	bne.n	801bfca <udp_send+0x3e>
 801bfb6:	4b0b      	ldr	r3, [pc, #44]	; (801bfe4 <udp_send+0x58>)
 801bfb8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801bfbc:	490c      	ldr	r1, [pc, #48]	; (801bff0 <udp_send+0x64>)
 801bfbe:	480b      	ldr	r0, [pc, #44]	; (801bfec <udp_send+0x60>)
 801bfc0:	f005 fa74 	bl	80214ac <iprintf>
 801bfc4:	f06f 030f 	mvn.w	r3, #15
 801bfc8:	e008      	b.n	801bfdc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	1d1a      	adds	r2, r3, #4
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	8a9b      	ldrh	r3, [r3, #20]
 801bfd2:	6839      	ldr	r1, [r7, #0]
 801bfd4:	6878      	ldr	r0, [r7, #4]
 801bfd6:	f000 f80d 	bl	801bff4 <udp_sendto>
 801bfda:	4603      	mov	r3, r0
}
 801bfdc:	4618      	mov	r0, r3
 801bfde:	3708      	adds	r7, #8
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	bd80      	pop	{r7, pc}
 801bfe4:	08026330 	.word	0x08026330
 801bfe8:	08026424 	.word	0x08026424
 801bfec:	08026384 	.word	0x08026384
 801bff0:	0802643c 	.word	0x0802643c

0801bff4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b088      	sub	sp, #32
 801bff8:	af02      	add	r7, sp, #8
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	607a      	str	r2, [r7, #4]
 801c000:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d109      	bne.n	801c01c <udp_sendto+0x28>
 801c008:	4b23      	ldr	r3, [pc, #140]	; (801c098 <udp_sendto+0xa4>)
 801c00a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c00e:	4923      	ldr	r1, [pc, #140]	; (801c09c <udp_sendto+0xa8>)
 801c010:	4823      	ldr	r0, [pc, #140]	; (801c0a0 <udp_sendto+0xac>)
 801c012:	f005 fa4b 	bl	80214ac <iprintf>
 801c016:	f06f 030f 	mvn.w	r3, #15
 801c01a:	e038      	b.n	801c08e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c01c:	68bb      	ldr	r3, [r7, #8]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d109      	bne.n	801c036 <udp_sendto+0x42>
 801c022:	4b1d      	ldr	r3, [pc, #116]	; (801c098 <udp_sendto+0xa4>)
 801c024:	f240 2219 	movw	r2, #537	; 0x219
 801c028:	491e      	ldr	r1, [pc, #120]	; (801c0a4 <udp_sendto+0xb0>)
 801c02a:	481d      	ldr	r0, [pc, #116]	; (801c0a0 <udp_sendto+0xac>)
 801c02c:	f005 fa3e 	bl	80214ac <iprintf>
 801c030:	f06f 030f 	mvn.w	r3, #15
 801c034:	e02b      	b.n	801c08e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d109      	bne.n	801c050 <udp_sendto+0x5c>
 801c03c:	4b16      	ldr	r3, [pc, #88]	; (801c098 <udp_sendto+0xa4>)
 801c03e:	f240 221a 	movw	r2, #538	; 0x21a
 801c042:	4919      	ldr	r1, [pc, #100]	; (801c0a8 <udp_sendto+0xb4>)
 801c044:	4816      	ldr	r0, [pc, #88]	; (801c0a0 <udp_sendto+0xac>)
 801c046:	f005 fa31 	bl	80214ac <iprintf>
 801c04a:	f06f 030f 	mvn.w	r3, #15
 801c04e:	e01e      	b.n	801c08e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	7a1b      	ldrb	r3, [r3, #8]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d006      	beq.n	801c066 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	7a1b      	ldrb	r3, [r3, #8]
 801c05c:	4618      	mov	r0, r3
 801c05e:	f7f8 fc6d 	bl	801493c <netif_get_by_index>
 801c062:	6178      	str	r0, [r7, #20]
 801c064:	e003      	b.n	801c06e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c066:	6878      	ldr	r0, [r7, #4]
 801c068:	f003 fb0e 	bl	801f688 <ip4_route>
 801c06c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d102      	bne.n	801c07a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801c074:	f06f 0303 	mvn.w	r3, #3
 801c078:	e009      	b.n	801c08e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c07a:	887a      	ldrh	r2, [r7, #2]
 801c07c:	697b      	ldr	r3, [r7, #20]
 801c07e:	9300      	str	r3, [sp, #0]
 801c080:	4613      	mov	r3, r2
 801c082:	687a      	ldr	r2, [r7, #4]
 801c084:	68b9      	ldr	r1, [r7, #8]
 801c086:	68f8      	ldr	r0, [r7, #12]
 801c088:	f000 f810 	bl	801c0ac <udp_sendto_if>
 801c08c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c08e:	4618      	mov	r0, r3
 801c090:	3718      	adds	r7, #24
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}
 801c096:	bf00      	nop
 801c098:	08026330 	.word	0x08026330
 801c09c:	08026454 	.word	0x08026454
 801c0a0:	08026384 	.word	0x08026384
 801c0a4:	0802646c 	.word	0x0802646c
 801c0a8:	08026488 	.word	0x08026488

0801c0ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b088      	sub	sp, #32
 801c0b0:	af02      	add	r7, sp, #8
 801c0b2:	60f8      	str	r0, [r7, #12]
 801c0b4:	60b9      	str	r1, [r7, #8]
 801c0b6:	607a      	str	r2, [r7, #4]
 801c0b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c0ba:	68fb      	ldr	r3, [r7, #12]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d109      	bne.n	801c0d4 <udp_sendto_if+0x28>
 801c0c0:	4b2e      	ldr	r3, [pc, #184]	; (801c17c <udp_sendto_if+0xd0>)
 801c0c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c0c6:	492e      	ldr	r1, [pc, #184]	; (801c180 <udp_sendto_if+0xd4>)
 801c0c8:	482e      	ldr	r0, [pc, #184]	; (801c184 <udp_sendto_if+0xd8>)
 801c0ca:	f005 f9ef 	bl	80214ac <iprintf>
 801c0ce:	f06f 030f 	mvn.w	r3, #15
 801c0d2:	e04f      	b.n	801c174 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d109      	bne.n	801c0ee <udp_sendto_if+0x42>
 801c0da:	4b28      	ldr	r3, [pc, #160]	; (801c17c <udp_sendto_if+0xd0>)
 801c0dc:	f240 2281 	movw	r2, #641	; 0x281
 801c0e0:	4929      	ldr	r1, [pc, #164]	; (801c188 <udp_sendto_if+0xdc>)
 801c0e2:	4828      	ldr	r0, [pc, #160]	; (801c184 <udp_sendto_if+0xd8>)
 801c0e4:	f005 f9e2 	bl	80214ac <iprintf>
 801c0e8:	f06f 030f 	mvn.w	r3, #15
 801c0ec:	e042      	b.n	801c174 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d109      	bne.n	801c108 <udp_sendto_if+0x5c>
 801c0f4:	4b21      	ldr	r3, [pc, #132]	; (801c17c <udp_sendto_if+0xd0>)
 801c0f6:	f240 2282 	movw	r2, #642	; 0x282
 801c0fa:	4924      	ldr	r1, [pc, #144]	; (801c18c <udp_sendto_if+0xe0>)
 801c0fc:	4821      	ldr	r0, [pc, #132]	; (801c184 <udp_sendto_if+0xd8>)
 801c0fe:	f005 f9d5 	bl	80214ac <iprintf>
 801c102:	f06f 030f 	mvn.w	r3, #15
 801c106:	e035      	b.n	801c174 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c108:	6a3b      	ldr	r3, [r7, #32]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d109      	bne.n	801c122 <udp_sendto_if+0x76>
 801c10e:	4b1b      	ldr	r3, [pc, #108]	; (801c17c <udp_sendto_if+0xd0>)
 801c110:	f240 2283 	movw	r2, #643	; 0x283
 801c114:	491e      	ldr	r1, [pc, #120]	; (801c190 <udp_sendto_if+0xe4>)
 801c116:	481b      	ldr	r0, [pc, #108]	; (801c184 <udp_sendto_if+0xd8>)
 801c118:	f005 f9c8 	bl	80214ac <iprintf>
 801c11c:	f06f 030f 	mvn.w	r3, #15
 801c120:	e028      	b.n	801c174 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d009      	beq.n	801c13c <udp_sendto_if+0x90>
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d005      	beq.n	801c13c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c138:	2be0      	cmp	r3, #224	; 0xe0
 801c13a:	d103      	bne.n	801c144 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c13c:	6a3b      	ldr	r3, [r7, #32]
 801c13e:	3304      	adds	r3, #4
 801c140:	617b      	str	r3, [r7, #20]
 801c142:	e00b      	b.n	801c15c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	681a      	ldr	r2, [r3, #0]
 801c148:	6a3b      	ldr	r3, [r7, #32]
 801c14a:	3304      	adds	r3, #4
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	429a      	cmp	r2, r3
 801c150:	d002      	beq.n	801c158 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c152:	f06f 0303 	mvn.w	r3, #3
 801c156:	e00d      	b.n	801c174 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c15c:	887a      	ldrh	r2, [r7, #2]
 801c15e:	697b      	ldr	r3, [r7, #20]
 801c160:	9301      	str	r3, [sp, #4]
 801c162:	6a3b      	ldr	r3, [r7, #32]
 801c164:	9300      	str	r3, [sp, #0]
 801c166:	4613      	mov	r3, r2
 801c168:	687a      	ldr	r2, [r7, #4]
 801c16a:	68b9      	ldr	r1, [r7, #8]
 801c16c:	68f8      	ldr	r0, [r7, #12]
 801c16e:	f000 f811 	bl	801c194 <udp_sendto_if_src>
 801c172:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c174:	4618      	mov	r0, r3
 801c176:	3718      	adds	r7, #24
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	08026330 	.word	0x08026330
 801c180:	080264a4 	.word	0x080264a4
 801c184:	08026384 	.word	0x08026384
 801c188:	080264c0 	.word	0x080264c0
 801c18c:	080264dc 	.word	0x080264dc
 801c190:	080264fc 	.word	0x080264fc

0801c194 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b08c      	sub	sp, #48	; 0x30
 801c198:	af04      	add	r7, sp, #16
 801c19a:	60f8      	str	r0, [r7, #12]
 801c19c:	60b9      	str	r1, [r7, #8]
 801c19e:	607a      	str	r2, [r7, #4]
 801c1a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d109      	bne.n	801c1bc <udp_sendto_if_src+0x28>
 801c1a8:	4b65      	ldr	r3, [pc, #404]	; (801c340 <udp_sendto_if_src+0x1ac>)
 801c1aa:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c1ae:	4965      	ldr	r1, [pc, #404]	; (801c344 <udp_sendto_if_src+0x1b0>)
 801c1b0:	4865      	ldr	r0, [pc, #404]	; (801c348 <udp_sendto_if_src+0x1b4>)
 801c1b2:	f005 f97b 	bl	80214ac <iprintf>
 801c1b6:	f06f 030f 	mvn.w	r3, #15
 801c1ba:	e0bc      	b.n	801c336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c1bc:	68bb      	ldr	r3, [r7, #8]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d109      	bne.n	801c1d6 <udp_sendto_if_src+0x42>
 801c1c2:	4b5f      	ldr	r3, [pc, #380]	; (801c340 <udp_sendto_if_src+0x1ac>)
 801c1c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c1c8:	4960      	ldr	r1, [pc, #384]	; (801c34c <udp_sendto_if_src+0x1b8>)
 801c1ca:	485f      	ldr	r0, [pc, #380]	; (801c348 <udp_sendto_if_src+0x1b4>)
 801c1cc:	f005 f96e 	bl	80214ac <iprintf>
 801c1d0:	f06f 030f 	mvn.w	r3, #15
 801c1d4:	e0af      	b.n	801c336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d109      	bne.n	801c1f0 <udp_sendto_if_src+0x5c>
 801c1dc:	4b58      	ldr	r3, [pc, #352]	; (801c340 <udp_sendto_if_src+0x1ac>)
 801c1de:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c1e2:	495b      	ldr	r1, [pc, #364]	; (801c350 <udp_sendto_if_src+0x1bc>)
 801c1e4:	4858      	ldr	r0, [pc, #352]	; (801c348 <udp_sendto_if_src+0x1b4>)
 801c1e6:	f005 f961 	bl	80214ac <iprintf>
 801c1ea:	f06f 030f 	mvn.w	r3, #15
 801c1ee:	e0a2      	b.n	801c336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d109      	bne.n	801c20a <udp_sendto_if_src+0x76>
 801c1f6:	4b52      	ldr	r3, [pc, #328]	; (801c340 <udp_sendto_if_src+0x1ac>)
 801c1f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c1fc:	4955      	ldr	r1, [pc, #340]	; (801c354 <udp_sendto_if_src+0x1c0>)
 801c1fe:	4852      	ldr	r0, [pc, #328]	; (801c348 <udp_sendto_if_src+0x1b4>)
 801c200:	f005 f954 	bl	80214ac <iprintf>
 801c204:	f06f 030f 	mvn.w	r3, #15
 801c208:	e095      	b.n	801c336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d109      	bne.n	801c224 <udp_sendto_if_src+0x90>
 801c210:	4b4b      	ldr	r3, [pc, #300]	; (801c340 <udp_sendto_if_src+0x1ac>)
 801c212:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c216:	4950      	ldr	r1, [pc, #320]	; (801c358 <udp_sendto_if_src+0x1c4>)
 801c218:	484b      	ldr	r0, [pc, #300]	; (801c348 <udp_sendto_if_src+0x1b4>)
 801c21a:	f005 f947 	bl	80214ac <iprintf>
 801c21e:	f06f 030f 	mvn.w	r3, #15
 801c222:	e088      	b.n	801c336 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	8a5b      	ldrh	r3, [r3, #18]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d10f      	bne.n	801c24c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c22c:	68f9      	ldr	r1, [r7, #12]
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	8a5b      	ldrh	r3, [r3, #18]
 801c232:	461a      	mov	r2, r3
 801c234:	68f8      	ldr	r0, [r7, #12]
 801c236:	f000 f893 	bl	801c360 <udp_bind>
 801c23a:	4603      	mov	r3, r0
 801c23c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c23e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d002      	beq.n	801c24c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c246:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c24a:	e074      	b.n	801c336 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c24c:	68bb      	ldr	r3, [r7, #8]
 801c24e:	891b      	ldrh	r3, [r3, #8]
 801c250:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c254:	4293      	cmp	r3, r2
 801c256:	d902      	bls.n	801c25e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c258:	f04f 33ff 	mov.w	r3, #4294967295
 801c25c:	e06b      	b.n	801c336 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c25e:	2108      	movs	r1, #8
 801c260:	68b8      	ldr	r0, [r7, #8]
 801c262:	f7f8 fe63 	bl	8014f2c <pbuf_add_header>
 801c266:	4603      	mov	r3, r0
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d015      	beq.n	801c298 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c26c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c270:	2108      	movs	r1, #8
 801c272:	2022      	movs	r0, #34	; 0x22
 801c274:	f7f8 fc0c 	bl	8014a90 <pbuf_alloc>
 801c278:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c27a:	69fb      	ldr	r3, [r7, #28]
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d102      	bne.n	801c286 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c280:	f04f 33ff 	mov.w	r3, #4294967295
 801c284:	e057      	b.n	801c336 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c286:	68bb      	ldr	r3, [r7, #8]
 801c288:	891b      	ldrh	r3, [r3, #8]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d006      	beq.n	801c29c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c28e:	68b9      	ldr	r1, [r7, #8]
 801c290:	69f8      	ldr	r0, [r7, #28]
 801c292:	f7f9 f805 	bl	80152a0 <pbuf_chain>
 801c296:	e001      	b.n	801c29c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c29c:	69fb      	ldr	r3, [r7, #28]
 801c29e:	895b      	ldrh	r3, [r3, #10]
 801c2a0:	2b07      	cmp	r3, #7
 801c2a2:	d806      	bhi.n	801c2b2 <udp_sendto_if_src+0x11e>
 801c2a4:	4b26      	ldr	r3, [pc, #152]	; (801c340 <udp_sendto_if_src+0x1ac>)
 801c2a6:	f240 320d 	movw	r2, #781	; 0x30d
 801c2aa:	492c      	ldr	r1, [pc, #176]	; (801c35c <udp_sendto_if_src+0x1c8>)
 801c2ac:	4826      	ldr	r0, [pc, #152]	; (801c348 <udp_sendto_if_src+0x1b4>)
 801c2ae:	f005 f8fd 	bl	80214ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c2b2:	69fb      	ldr	r3, [r7, #28]
 801c2b4:	685b      	ldr	r3, [r3, #4]
 801c2b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	8a5b      	ldrh	r3, [r3, #18]
 801c2bc:	4618      	mov	r0, r3
 801c2be:	f7f6 fb3d 	bl	801293c <lwip_htons>
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	461a      	mov	r2, r3
 801c2c6:	697b      	ldr	r3, [r7, #20]
 801c2c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c2ca:	887b      	ldrh	r3, [r7, #2]
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	f7f6 fb35 	bl	801293c <lwip_htons>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	461a      	mov	r2, r3
 801c2d6:	697b      	ldr	r3, [r7, #20]
 801c2d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c2da:	697b      	ldr	r3, [r7, #20]
 801c2dc:	2200      	movs	r2, #0
 801c2de:	719a      	strb	r2, [r3, #6]
 801c2e0:	2200      	movs	r2, #0
 801c2e2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c2e4:	69fb      	ldr	r3, [r7, #28]
 801c2e6:	891b      	ldrh	r3, [r3, #8]
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7f6 fb27 	bl	801293c <lwip_htons>
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	461a      	mov	r2, r3
 801c2f2:	697b      	ldr	r3, [r7, #20]
 801c2f4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c2f6:	2311      	movs	r3, #17
 801c2f8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	7adb      	ldrb	r3, [r3, #11]
 801c2fe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	7a9b      	ldrb	r3, [r3, #10]
 801c304:	7cb9      	ldrb	r1, [r7, #18]
 801c306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c308:	9202      	str	r2, [sp, #8]
 801c30a:	7cfa      	ldrb	r2, [r7, #19]
 801c30c:	9201      	str	r2, [sp, #4]
 801c30e:	9300      	str	r3, [sp, #0]
 801c310:	460b      	mov	r3, r1
 801c312:	687a      	ldr	r2, [r7, #4]
 801c314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c316:	69f8      	ldr	r0, [r7, #28]
 801c318:	f003 fbbc 	bl	801fa94 <ip4_output_if_src>
 801c31c:	4603      	mov	r3, r0
 801c31e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c320:	69fa      	ldr	r2, [r7, #28]
 801c322:	68bb      	ldr	r3, [r7, #8]
 801c324:	429a      	cmp	r2, r3
 801c326:	d004      	beq.n	801c332 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c328:	69f8      	ldr	r0, [r7, #28]
 801c32a:	f7f8 fe95 	bl	8015058 <pbuf_free>
    q = NULL;
 801c32e:	2300      	movs	r3, #0
 801c330:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c332:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c336:	4618      	mov	r0, r3
 801c338:	3720      	adds	r7, #32
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}
 801c33e:	bf00      	nop
 801c340:	08026330 	.word	0x08026330
 801c344:	0802651c 	.word	0x0802651c
 801c348:	08026384 	.word	0x08026384
 801c34c:	0802653c 	.word	0x0802653c
 801c350:	0802655c 	.word	0x0802655c
 801c354:	08026580 	.word	0x08026580
 801c358:	080265a4 	.word	0x080265a4
 801c35c:	080265c8 	.word	0x080265c8

0801c360 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b086      	sub	sp, #24
 801c364:	af00      	add	r7, sp, #0
 801c366:	60f8      	str	r0, [r7, #12]
 801c368:	60b9      	str	r1, [r7, #8]
 801c36a:	4613      	mov	r3, r2
 801c36c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c36e:	68bb      	ldr	r3, [r7, #8]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d101      	bne.n	801c378 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c374:	4b39      	ldr	r3, [pc, #228]	; (801c45c <udp_bind+0xfc>)
 801c376:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d109      	bne.n	801c392 <udp_bind+0x32>
 801c37e:	4b38      	ldr	r3, [pc, #224]	; (801c460 <udp_bind+0x100>)
 801c380:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c384:	4937      	ldr	r1, [pc, #220]	; (801c464 <udp_bind+0x104>)
 801c386:	4838      	ldr	r0, [pc, #224]	; (801c468 <udp_bind+0x108>)
 801c388:	f005 f890 	bl	80214ac <iprintf>
 801c38c:	f06f 030f 	mvn.w	r3, #15
 801c390:	e060      	b.n	801c454 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c392:	2300      	movs	r3, #0
 801c394:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c396:	4b35      	ldr	r3, [pc, #212]	; (801c46c <udp_bind+0x10c>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	617b      	str	r3, [r7, #20]
 801c39c:	e009      	b.n	801c3b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c39e:	68fa      	ldr	r2, [r7, #12]
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	429a      	cmp	r2, r3
 801c3a4:	d102      	bne.n	801c3ac <udp_bind+0x4c>
      rebind = 1;
 801c3a6:	2301      	movs	r3, #1
 801c3a8:	74fb      	strb	r3, [r7, #19]
      break;
 801c3aa:	e005      	b.n	801c3b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c3ac:	697b      	ldr	r3, [r7, #20]
 801c3ae:	68db      	ldr	r3, [r3, #12]
 801c3b0:	617b      	str	r3, [r7, #20]
 801c3b2:	697b      	ldr	r3, [r7, #20]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d1f2      	bne.n	801c39e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c3b8:	88fb      	ldrh	r3, [r7, #6]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d109      	bne.n	801c3d2 <udp_bind+0x72>
    port = udp_new_port();
 801c3be:	f7ff fc35 	bl	801bc2c <udp_new_port>
 801c3c2:	4603      	mov	r3, r0
 801c3c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c3c6:	88fb      	ldrh	r3, [r7, #6]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d12c      	bne.n	801c426 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c3cc:	f06f 0307 	mvn.w	r3, #7
 801c3d0:	e040      	b.n	801c454 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c3d2:	4b26      	ldr	r3, [pc, #152]	; (801c46c <udp_bind+0x10c>)
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	617b      	str	r3, [r7, #20]
 801c3d8:	e022      	b.n	801c420 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c3da:	68fa      	ldr	r2, [r7, #12]
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d01b      	beq.n	801c41a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	8a5b      	ldrh	r3, [r3, #18]
 801c3e6:	88fa      	ldrh	r2, [r7, #6]
 801c3e8:	429a      	cmp	r2, r3
 801c3ea:	d116      	bne.n	801c41a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c3ec:	697b      	ldr	r3, [r7, #20]
 801c3ee:	681a      	ldr	r2, [r3, #0]
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c3f4:	429a      	cmp	r2, r3
 801c3f6:	d00d      	beq.n	801c414 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c3f8:	68bb      	ldr	r3, [r7, #8]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d00a      	beq.n	801c414 <udp_bind+0xb4>
 801c3fe:	68bb      	ldr	r3, [r7, #8]
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d006      	beq.n	801c414 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c406:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d003      	beq.n	801c414 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c40c:	697b      	ldr	r3, [r7, #20]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d102      	bne.n	801c41a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c414:	f06f 0307 	mvn.w	r3, #7
 801c418:	e01c      	b.n	801c454 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c41a:	697b      	ldr	r3, [r7, #20]
 801c41c:	68db      	ldr	r3, [r3, #12]
 801c41e:	617b      	str	r3, [r7, #20]
 801c420:	697b      	ldr	r3, [r7, #20]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d1d9      	bne.n	801c3da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c426:	68bb      	ldr	r3, [r7, #8]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d002      	beq.n	801c432 <udp_bind+0xd2>
 801c42c:	68bb      	ldr	r3, [r7, #8]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	e000      	b.n	801c434 <udp_bind+0xd4>
 801c432:	2300      	movs	r3, #0
 801c434:	68fa      	ldr	r2, [r7, #12]
 801c436:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	88fa      	ldrh	r2, [r7, #6]
 801c43c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c43e:	7cfb      	ldrb	r3, [r7, #19]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d106      	bne.n	801c452 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c444:	4b09      	ldr	r3, [pc, #36]	; (801c46c <udp_bind+0x10c>)
 801c446:	681a      	ldr	r2, [r3, #0]
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c44c:	4a07      	ldr	r2, [pc, #28]	; (801c46c <udp_bind+0x10c>)
 801c44e:	68fb      	ldr	r3, [r7, #12]
 801c450:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c452:	2300      	movs	r3, #0
}
 801c454:	4618      	mov	r0, r3
 801c456:	3718      	adds	r7, #24
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd80      	pop	{r7, pc}
 801c45c:	080274e4 	.word	0x080274e4
 801c460:	08026330 	.word	0x08026330
 801c464:	080265f8 	.word	0x080265f8
 801c468:	08026384 	.word	0x08026384
 801c46c:	20016c64 	.word	0x20016c64

0801c470 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b086      	sub	sp, #24
 801c474:	af00      	add	r7, sp, #0
 801c476:	60f8      	str	r0, [r7, #12]
 801c478:	60b9      	str	r1, [r7, #8]
 801c47a:	4613      	mov	r3, r2
 801c47c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d109      	bne.n	801c498 <udp_connect+0x28>
 801c484:	4b2c      	ldr	r3, [pc, #176]	; (801c538 <udp_connect+0xc8>)
 801c486:	f240 4235 	movw	r2, #1077	; 0x435
 801c48a:	492c      	ldr	r1, [pc, #176]	; (801c53c <udp_connect+0xcc>)
 801c48c:	482c      	ldr	r0, [pc, #176]	; (801c540 <udp_connect+0xd0>)
 801c48e:	f005 f80d 	bl	80214ac <iprintf>
 801c492:	f06f 030f 	mvn.w	r3, #15
 801c496:	e04b      	b.n	801c530 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d109      	bne.n	801c4b2 <udp_connect+0x42>
 801c49e:	4b26      	ldr	r3, [pc, #152]	; (801c538 <udp_connect+0xc8>)
 801c4a0:	f240 4236 	movw	r2, #1078	; 0x436
 801c4a4:	4927      	ldr	r1, [pc, #156]	; (801c544 <udp_connect+0xd4>)
 801c4a6:	4826      	ldr	r0, [pc, #152]	; (801c540 <udp_connect+0xd0>)
 801c4a8:	f005 f800 	bl	80214ac <iprintf>
 801c4ac:	f06f 030f 	mvn.w	r3, #15
 801c4b0:	e03e      	b.n	801c530 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	8a5b      	ldrh	r3, [r3, #18]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d10f      	bne.n	801c4da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c4ba:	68f9      	ldr	r1, [r7, #12]
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	8a5b      	ldrh	r3, [r3, #18]
 801c4c0:	461a      	mov	r2, r3
 801c4c2:	68f8      	ldr	r0, [r7, #12]
 801c4c4:	f7ff ff4c 	bl	801c360 <udp_bind>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c4cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d002      	beq.n	801c4da <udp_connect+0x6a>
      return err;
 801c4d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c4d8:	e02a      	b.n	801c530 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c4da:	68bb      	ldr	r3, [r7, #8]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d002      	beq.n	801c4e6 <udp_connect+0x76>
 801c4e0:	68bb      	ldr	r3, [r7, #8]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	e000      	b.n	801c4e8 <udp_connect+0x78>
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	68fa      	ldr	r2, [r7, #12]
 801c4ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	88fa      	ldrh	r2, [r7, #6]
 801c4f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	7c1b      	ldrb	r3, [r3, #16]
 801c4f6:	f043 0304 	orr.w	r3, r3, #4
 801c4fa:	b2da      	uxtb	r2, r3
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c500:	4b11      	ldr	r3, [pc, #68]	; (801c548 <udp_connect+0xd8>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	617b      	str	r3, [r7, #20]
 801c506:	e008      	b.n	801c51a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c508:	68fa      	ldr	r2, [r7, #12]
 801c50a:	697b      	ldr	r3, [r7, #20]
 801c50c:	429a      	cmp	r2, r3
 801c50e:	d101      	bne.n	801c514 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c510:	2300      	movs	r3, #0
 801c512:	e00d      	b.n	801c530 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	68db      	ldr	r3, [r3, #12]
 801c518:	617b      	str	r3, [r7, #20]
 801c51a:	697b      	ldr	r3, [r7, #20]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d1f3      	bne.n	801c508 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c520:	4b09      	ldr	r3, [pc, #36]	; (801c548 <udp_connect+0xd8>)
 801c522:	681a      	ldr	r2, [r3, #0]
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c528:	4a07      	ldr	r2, [pc, #28]	; (801c548 <udp_connect+0xd8>)
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c52e:	2300      	movs	r3, #0
}
 801c530:	4618      	mov	r0, r3
 801c532:	3718      	adds	r7, #24
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	08026330 	.word	0x08026330
 801c53c:	08026610 	.word	0x08026610
 801c540:	08026384 	.word	0x08026384
 801c544:	0802662c 	.word	0x0802662c
 801c548:	20016c64 	.word	0x20016c64

0801c54c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b082      	sub	sp, #8
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d107      	bne.n	801c56a <udp_disconnect+0x1e>
 801c55a:	4b0d      	ldr	r3, [pc, #52]	; (801c590 <udp_disconnect+0x44>)
 801c55c:	f240 426a 	movw	r2, #1130	; 0x46a
 801c560:	490c      	ldr	r1, [pc, #48]	; (801c594 <udp_disconnect+0x48>)
 801c562:	480d      	ldr	r0, [pc, #52]	; (801c598 <udp_disconnect+0x4c>)
 801c564:	f004 ffa2 	bl	80214ac <iprintf>
 801c568:	e00f      	b.n	801c58a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	2200      	movs	r2, #0
 801c56e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2200      	movs	r2, #0
 801c574:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	2200      	movs	r2, #0
 801c57a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	7c1b      	ldrb	r3, [r3, #16]
 801c580:	f023 0304 	bic.w	r3, r3, #4
 801c584:	b2da      	uxtb	r2, r3
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	741a      	strb	r2, [r3, #16]
}
 801c58a:	3708      	adds	r7, #8
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd80      	pop	{r7, pc}
 801c590:	08026330 	.word	0x08026330
 801c594:	08026648 	.word	0x08026648
 801c598:	08026384 	.word	0x08026384

0801c59c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c59c:	b580      	push	{r7, lr}
 801c59e:	b084      	sub	sp, #16
 801c5a0:	af00      	add	r7, sp, #0
 801c5a2:	60f8      	str	r0, [r7, #12]
 801c5a4:	60b9      	str	r1, [r7, #8]
 801c5a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d107      	bne.n	801c5be <udp_recv+0x22>
 801c5ae:	4b08      	ldr	r3, [pc, #32]	; (801c5d0 <udp_recv+0x34>)
 801c5b0:	f240 428a 	movw	r2, #1162	; 0x48a
 801c5b4:	4907      	ldr	r1, [pc, #28]	; (801c5d4 <udp_recv+0x38>)
 801c5b6:	4808      	ldr	r0, [pc, #32]	; (801c5d8 <udp_recv+0x3c>)
 801c5b8:	f004 ff78 	bl	80214ac <iprintf>
 801c5bc:	e005      	b.n	801c5ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	68ba      	ldr	r2, [r7, #8]
 801c5c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	687a      	ldr	r2, [r7, #4]
 801c5c8:	61da      	str	r2, [r3, #28]
}
 801c5ca:	3710      	adds	r7, #16
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}
 801c5d0:	08026330 	.word	0x08026330
 801c5d4:	08026664 	.word	0x08026664
 801c5d8:	08026384 	.word	0x08026384

0801c5dc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b084      	sub	sp, #16
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d107      	bne.n	801c5fa <udp_remove+0x1e>
 801c5ea:	4b19      	ldr	r3, [pc, #100]	; (801c650 <udp_remove+0x74>)
 801c5ec:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c5f0:	4918      	ldr	r1, [pc, #96]	; (801c654 <udp_remove+0x78>)
 801c5f2:	4819      	ldr	r0, [pc, #100]	; (801c658 <udp_remove+0x7c>)
 801c5f4:	f004 ff5a 	bl	80214ac <iprintf>
 801c5f8:	e026      	b.n	801c648 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c5fa:	4b18      	ldr	r3, [pc, #96]	; (801c65c <udp_remove+0x80>)
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	687a      	ldr	r2, [r7, #4]
 801c600:	429a      	cmp	r2, r3
 801c602:	d105      	bne.n	801c610 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c604:	4b15      	ldr	r3, [pc, #84]	; (801c65c <udp_remove+0x80>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	68db      	ldr	r3, [r3, #12]
 801c60a:	4a14      	ldr	r2, [pc, #80]	; (801c65c <udp_remove+0x80>)
 801c60c:	6013      	str	r3, [r2, #0]
 801c60e:	e017      	b.n	801c640 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c610:	4b12      	ldr	r3, [pc, #72]	; (801c65c <udp_remove+0x80>)
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	60fb      	str	r3, [r7, #12]
 801c616:	e010      	b.n	801c63a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	68db      	ldr	r3, [r3, #12]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d009      	beq.n	801c634 <udp_remove+0x58>
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	68db      	ldr	r3, [r3, #12]
 801c624:	687a      	ldr	r2, [r7, #4]
 801c626:	429a      	cmp	r2, r3
 801c628:	d104      	bne.n	801c634 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	68da      	ldr	r2, [r3, #12]
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	60da      	str	r2, [r3, #12]
        break;
 801c632:	e005      	b.n	801c640 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	68db      	ldr	r3, [r3, #12]
 801c638:	60fb      	str	r3, [r7, #12]
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d1eb      	bne.n	801c618 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c640:	6879      	ldr	r1, [r7, #4]
 801c642:	2000      	movs	r0, #0
 801c644:	f7f7 fe58 	bl	80142f8 <memp_free>
}
 801c648:	3710      	adds	r7, #16
 801c64a:	46bd      	mov	sp, r7
 801c64c:	bd80      	pop	{r7, pc}
 801c64e:	bf00      	nop
 801c650:	08026330 	.word	0x08026330
 801c654:	0802667c 	.word	0x0802667c
 801c658:	08026384 	.word	0x08026384
 801c65c:	20016c64 	.word	0x20016c64

0801c660 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b082      	sub	sp, #8
 801c664:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c666:	2000      	movs	r0, #0
 801c668:	f7f7 fdf4 	bl	8014254 <memp_malloc>
 801c66c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d007      	beq.n	801c684 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c674:	2220      	movs	r2, #32
 801c676:	2100      	movs	r1, #0
 801c678:	6878      	ldr	r0, [r7, #4]
 801c67a:	f004 fe55 	bl	8021328 <memset>
    pcb->ttl = UDP_TTL;
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	22ff      	movs	r2, #255	; 0xff
 801c682:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c684:	687b      	ldr	r3, [r7, #4]
}
 801c686:	4618      	mov	r0, r3
 801c688:	3708      	adds	r7, #8
 801c68a:	46bd      	mov	sp, r7
 801c68c:	bd80      	pop	{r7, pc}

0801c68e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c68e:	b580      	push	{r7, lr}
 801c690:	b084      	sub	sp, #16
 801c692:	af00      	add	r7, sp, #0
 801c694:	4603      	mov	r3, r0
 801c696:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c698:	f7ff ffe2 	bl	801c660 <udp_new>
 801c69c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c69e:	68fb      	ldr	r3, [r7, #12]
}
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	3710      	adds	r7, #16
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bd80      	pop	{r7, pc}

0801c6a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c6a8:	b480      	push	{r7}
 801c6aa:	b085      	sub	sp, #20
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
 801c6b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d01e      	beq.n	801c6f6 <udp_netif_ip_addr_changed+0x4e>
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d01a      	beq.n	801c6f6 <udp_netif_ip_addr_changed+0x4e>
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d017      	beq.n	801c6f6 <udp_netif_ip_addr_changed+0x4e>
 801c6c6:	683b      	ldr	r3, [r7, #0]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d013      	beq.n	801c6f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c6ce:	4b0d      	ldr	r3, [pc, #52]	; (801c704 <udp_netif_ip_addr_changed+0x5c>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	60fb      	str	r3, [r7, #12]
 801c6d4:	e00c      	b.n	801c6f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	681a      	ldr	r2, [r3, #0]
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	429a      	cmp	r2, r3
 801c6e0:	d103      	bne.n	801c6ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c6e2:	683b      	ldr	r3, [r7, #0]
 801c6e4:	681a      	ldr	r2, [r3, #0]
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	68db      	ldr	r3, [r3, #12]
 801c6ee:	60fb      	str	r3, [r7, #12]
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d1ef      	bne.n	801c6d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c6f6:	bf00      	nop
 801c6f8:	3714      	adds	r7, #20
 801c6fa:	46bd      	mov	sp, r7
 801c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c700:	4770      	bx	lr
 801c702:	bf00      	nop
 801c704:	20016c64 	.word	0x20016c64

0801c708 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c70c:	4b20      	ldr	r3, [pc, #128]	; (801c790 <dhcp_inc_pcb_refcount+0x88>)
 801c70e:	781b      	ldrb	r3, [r3, #0]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d133      	bne.n	801c77c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c714:	4b1f      	ldr	r3, [pc, #124]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d005      	beq.n	801c728 <dhcp_inc_pcb_refcount+0x20>
 801c71c:	4b1e      	ldr	r3, [pc, #120]	; (801c798 <dhcp_inc_pcb_refcount+0x90>)
 801c71e:	22e5      	movs	r2, #229	; 0xe5
 801c720:	491e      	ldr	r1, [pc, #120]	; (801c79c <dhcp_inc_pcb_refcount+0x94>)
 801c722:	481f      	ldr	r0, [pc, #124]	; (801c7a0 <dhcp_inc_pcb_refcount+0x98>)
 801c724:	f004 fec2 	bl	80214ac <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c728:	f7ff ff9a 	bl	801c660 <udp_new>
 801c72c:	4603      	mov	r3, r0
 801c72e:	4a19      	ldr	r2, [pc, #100]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c730:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801c732:	4b18      	ldr	r3, [pc, #96]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d102      	bne.n	801c740 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c73a:	f04f 33ff 	mov.w	r3, #4294967295
 801c73e:	e024      	b.n	801c78a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c740:	4b14      	ldr	r3, [pc, #80]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	7a5a      	ldrb	r2, [r3, #9]
 801c746:	4b13      	ldr	r3, [pc, #76]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	f042 0220 	orr.w	r2, r2, #32
 801c74e:	b2d2      	uxtb	r2, r2
 801c750:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c752:	4b10      	ldr	r3, [pc, #64]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	2244      	movs	r2, #68	; 0x44
 801c758:	4912      	ldr	r1, [pc, #72]	; (801c7a4 <dhcp_inc_pcb_refcount+0x9c>)
 801c75a:	4618      	mov	r0, r3
 801c75c:	f7ff fe00 	bl	801c360 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c760:	4b0c      	ldr	r3, [pc, #48]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	2243      	movs	r2, #67	; 0x43
 801c766:	490f      	ldr	r1, [pc, #60]	; (801c7a4 <dhcp_inc_pcb_refcount+0x9c>)
 801c768:	4618      	mov	r0, r3
 801c76a:	f7ff fe81 	bl	801c470 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c76e:	4b09      	ldr	r3, [pc, #36]	; (801c794 <dhcp_inc_pcb_refcount+0x8c>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	2200      	movs	r2, #0
 801c774:	490c      	ldr	r1, [pc, #48]	; (801c7a8 <dhcp_inc_pcb_refcount+0xa0>)
 801c776:	4618      	mov	r0, r3
 801c778:	f7ff ff10 	bl	801c59c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c77c:	4b04      	ldr	r3, [pc, #16]	; (801c790 <dhcp_inc_pcb_refcount+0x88>)
 801c77e:	781b      	ldrb	r3, [r3, #0]
 801c780:	3301      	adds	r3, #1
 801c782:	b2da      	uxtb	r2, r3
 801c784:	4b02      	ldr	r3, [pc, #8]	; (801c790 <dhcp_inc_pcb_refcount+0x88>)
 801c786:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c788:	2300      	movs	r3, #0
}
 801c78a:	4618      	mov	r0, r3
 801c78c:	bd80      	pop	{r7, pc}
 801c78e:	bf00      	nop
 801c790:	200055cc 	.word	0x200055cc
 801c794:	200055c8 	.word	0x200055c8
 801c798:	08026694 	.word	0x08026694
 801c79c:	080266cc 	.word	0x080266cc
 801c7a0:	080266f4 	.word	0x080266f4
 801c7a4:	080274e4 	.word	0x080274e4
 801c7a8:	0801e0dd 	.word	0x0801e0dd

0801c7ac <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c7b0:	4b0e      	ldr	r3, [pc, #56]	; (801c7ec <dhcp_dec_pcb_refcount+0x40>)
 801c7b2:	781b      	ldrb	r3, [r3, #0]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d105      	bne.n	801c7c4 <dhcp_dec_pcb_refcount+0x18>
 801c7b8:	4b0d      	ldr	r3, [pc, #52]	; (801c7f0 <dhcp_dec_pcb_refcount+0x44>)
 801c7ba:	22ff      	movs	r2, #255	; 0xff
 801c7bc:	490d      	ldr	r1, [pc, #52]	; (801c7f4 <dhcp_dec_pcb_refcount+0x48>)
 801c7be:	480e      	ldr	r0, [pc, #56]	; (801c7f8 <dhcp_dec_pcb_refcount+0x4c>)
 801c7c0:	f004 fe74 	bl	80214ac <iprintf>
  dhcp_pcb_refcount--;
 801c7c4:	4b09      	ldr	r3, [pc, #36]	; (801c7ec <dhcp_dec_pcb_refcount+0x40>)
 801c7c6:	781b      	ldrb	r3, [r3, #0]
 801c7c8:	3b01      	subs	r3, #1
 801c7ca:	b2da      	uxtb	r2, r3
 801c7cc:	4b07      	ldr	r3, [pc, #28]	; (801c7ec <dhcp_dec_pcb_refcount+0x40>)
 801c7ce:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c7d0:	4b06      	ldr	r3, [pc, #24]	; (801c7ec <dhcp_dec_pcb_refcount+0x40>)
 801c7d2:	781b      	ldrb	r3, [r3, #0]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d107      	bne.n	801c7e8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c7d8:	4b08      	ldr	r3, [pc, #32]	; (801c7fc <dhcp_dec_pcb_refcount+0x50>)
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	4618      	mov	r0, r3
 801c7de:	f7ff fefd 	bl	801c5dc <udp_remove>
    dhcp_pcb = NULL;
 801c7e2:	4b06      	ldr	r3, [pc, #24]	; (801c7fc <dhcp_dec_pcb_refcount+0x50>)
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	601a      	str	r2, [r3, #0]
  }
}
 801c7e8:	bf00      	nop
 801c7ea:	bd80      	pop	{r7, pc}
 801c7ec:	200055cc 	.word	0x200055cc
 801c7f0:	08026694 	.word	0x08026694
 801c7f4:	0802671c 	.word	0x0802671c
 801c7f8:	080266f4 	.word	0x080266f4
 801c7fc:	200055c8 	.word	0x200055c8

0801c800 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b084      	sub	sp, #16
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c80c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c80e:	210c      	movs	r1, #12
 801c810:	68f8      	ldr	r0, [r7, #12]
 801c812:	f001 f875 	bl	801d900 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c816:	4b06      	ldr	r3, [pc, #24]	; (801c830 <dhcp_handle_nak+0x30>)
 801c818:	4a05      	ldr	r2, [pc, #20]	; (801c830 <dhcp_handle_nak+0x30>)
 801c81a:	4905      	ldr	r1, [pc, #20]	; (801c830 <dhcp_handle_nak+0x30>)
 801c81c:	6878      	ldr	r0, [r7, #4]
 801c81e:	f7f7 ff0d 	bl	801463c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c822:	6878      	ldr	r0, [r7, #4]
 801c824:	f000 fc68 	bl	801d0f8 <dhcp_discover>
}
 801c828:	bf00      	nop
 801c82a:	3710      	adds	r7, #16
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	080274e4 	.word	0x080274e4

0801c834 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c834:	b580      	push	{r7, lr}
 801c836:	b084      	sub	sp, #16
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c840:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c842:	2108      	movs	r1, #8
 801c844:	68f8      	ldr	r0, [r7, #12]
 801c846:	f001 f85b 	bl	801d900 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	331c      	adds	r3, #28
 801c84e:	2200      	movs	r2, #0
 801c850:	4619      	mov	r1, r3
 801c852:	6878      	ldr	r0, [r7, #4]
 801c854:	f002 fb8c 	bl	801ef70 <etharp_query>
 801c858:	4603      	mov	r3, r0
 801c85a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	799b      	ldrb	r3, [r3, #6]
 801c860:	2bff      	cmp	r3, #255	; 0xff
 801c862:	d005      	beq.n	801c870 <dhcp_check+0x3c>
    dhcp->tries++;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	799b      	ldrb	r3, [r3, #6]
 801c868:	3301      	adds	r3, #1
 801c86a:	b2da      	uxtb	r2, r3
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801c870:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c874:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c876:	893b      	ldrh	r3, [r7, #8]
 801c878:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c87c:	4a06      	ldr	r2, [pc, #24]	; (801c898 <dhcp_check+0x64>)
 801c87e:	fb82 1203 	smull	r1, r2, r2, r3
 801c882:	1152      	asrs	r2, r2, #5
 801c884:	17db      	asrs	r3, r3, #31
 801c886:	1ad3      	subs	r3, r2, r3
 801c888:	b29a      	uxth	r2, r3
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c88e:	bf00      	nop
 801c890:	3710      	adds	r7, #16
 801c892:	46bd      	mov	sp, r7
 801c894:	bd80      	pop	{r7, pc}
 801c896:	bf00      	nop
 801c898:	10624dd3 	.word	0x10624dd3

0801c89c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b084      	sub	sp, #16
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
 801c8a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c8ac:	4b0c      	ldr	r3, [pc, #48]	; (801c8e0 <dhcp_handle_offer+0x44>)
 801c8ae:	789b      	ldrb	r3, [r3, #2]
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d011      	beq.n	801c8d8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c8ba:	4b0a      	ldr	r3, [pc, #40]	; (801c8e4 <dhcp_handle_offer+0x48>)
 801c8bc:	689b      	ldr	r3, [r3, #8]
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f7f6 f851 	bl	8012966 <lwip_htonl>
 801c8c4:	4602      	mov	r2, r0
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	691a      	ldr	r2, [r3, #16]
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c8d2:	6878      	ldr	r0, [r7, #4]
 801c8d4:	f000 f808 	bl	801c8e8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801c8d8:	bf00      	nop
 801c8da:	3710      	adds	r7, #16
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	bd80      	pop	{r7, pc}
 801c8e0:	20016c68 	.word	0x20016c68
 801c8e4:	20016c74 	.word	0x20016c74

0801c8e8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c8e8:	b5b0      	push	{r4, r5, r7, lr}
 801c8ea:	b08a      	sub	sp, #40	; 0x28
 801c8ec:	af02      	add	r7, sp, #8
 801c8ee:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d109      	bne.n	801c90a <dhcp_select+0x22>
 801c8f6:	4b71      	ldr	r3, [pc, #452]	; (801cabc <dhcp_select+0x1d4>)
 801c8f8:	f240 1277 	movw	r2, #375	; 0x177
 801c8fc:	4970      	ldr	r1, [pc, #448]	; (801cac0 <dhcp_select+0x1d8>)
 801c8fe:	4871      	ldr	r0, [pc, #452]	; (801cac4 <dhcp_select+0x1dc>)
 801c900:	f004 fdd4 	bl	80214ac <iprintf>
 801c904:	f06f 030f 	mvn.w	r3, #15
 801c908:	e0d3      	b.n	801cab2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c90e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c910:	69bb      	ldr	r3, [r7, #24]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d109      	bne.n	801c92a <dhcp_select+0x42>
 801c916:	4b69      	ldr	r3, [pc, #420]	; (801cabc <dhcp_select+0x1d4>)
 801c918:	f240 1279 	movw	r2, #377	; 0x179
 801c91c:	496a      	ldr	r1, [pc, #424]	; (801cac8 <dhcp_select+0x1e0>)
 801c91e:	4869      	ldr	r0, [pc, #420]	; (801cac4 <dhcp_select+0x1dc>)
 801c920:	f004 fdc4 	bl	80214ac <iprintf>
 801c924:	f06f 0305 	mvn.w	r3, #5
 801c928:	e0c3      	b.n	801cab2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c92a:	2101      	movs	r1, #1
 801c92c:	69b8      	ldr	r0, [r7, #24]
 801c92e:	f000 ffe7 	bl	801d900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c932:	f107 030c 	add.w	r3, r7, #12
 801c936:	2203      	movs	r2, #3
 801c938:	69b9      	ldr	r1, [r7, #24]
 801c93a:	6878      	ldr	r0, [r7, #4]
 801c93c:	f001 fc9c 	bl	801e278 <dhcp_create_msg>
 801c940:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c942:	697b      	ldr	r3, [r7, #20]
 801c944:	2b00      	cmp	r3, #0
 801c946:	f000 8085 	beq.w	801ca54 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c94a:	697b      	ldr	r3, [r7, #20]
 801c94c:	685b      	ldr	r3, [r3, #4]
 801c94e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c950:	89b8      	ldrh	r0, [r7, #12]
 801c952:	693b      	ldr	r3, [r7, #16]
 801c954:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c958:	2302      	movs	r3, #2
 801c95a:	2239      	movs	r2, #57	; 0x39
 801c95c:	f000 ffea 	bl	801d934 <dhcp_option>
 801c960:	4603      	mov	r3, r0
 801c962:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c964:	89b8      	ldrh	r0, [r7, #12]
 801c966:	693b      	ldr	r3, [r7, #16]
 801c968:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c970:	461a      	mov	r2, r3
 801c972:	f001 f839 	bl	801d9e8 <dhcp_option_short>
 801c976:	4603      	mov	r3, r0
 801c978:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c97a:	89b8      	ldrh	r0, [r7, #12]
 801c97c:	693b      	ldr	r3, [r7, #16]
 801c97e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c982:	2304      	movs	r3, #4
 801c984:	2232      	movs	r2, #50	; 0x32
 801c986:	f000 ffd5 	bl	801d934 <dhcp_option>
 801c98a:	4603      	mov	r3, r0
 801c98c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c98e:	89bc      	ldrh	r4, [r7, #12]
 801c990:	693b      	ldr	r3, [r7, #16]
 801c992:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c996:	69bb      	ldr	r3, [r7, #24]
 801c998:	69db      	ldr	r3, [r3, #28]
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7f5 ffe3 	bl	8012966 <lwip_htonl>
 801c9a0:	4603      	mov	r3, r0
 801c9a2:	461a      	mov	r2, r3
 801c9a4:	4629      	mov	r1, r5
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f001 f850 	bl	801da4c <dhcp_option_long>
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c9b0:	89b8      	ldrh	r0, [r7, #12]
 801c9b2:	693b      	ldr	r3, [r7, #16]
 801c9b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c9b8:	2304      	movs	r3, #4
 801c9ba:	2236      	movs	r2, #54	; 0x36
 801c9bc:	f000 ffba 	bl	801d934 <dhcp_option>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c9c4:	89bc      	ldrh	r4, [r7, #12]
 801c9c6:	693b      	ldr	r3, [r7, #16]
 801c9c8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c9cc:	69bb      	ldr	r3, [r7, #24]
 801c9ce:	699b      	ldr	r3, [r3, #24]
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	f7f5 ffc8 	bl	8012966 <lwip_htonl>
 801c9d6:	4603      	mov	r3, r0
 801c9d8:	461a      	mov	r2, r3
 801c9da:	4629      	mov	r1, r5
 801c9dc:	4620      	mov	r0, r4
 801c9de:	f001 f835 	bl	801da4c <dhcp_option_long>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c9e6:	89b8      	ldrh	r0, [r7, #12]
 801c9e8:	693b      	ldr	r3, [r7, #16]
 801c9ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c9ee:	2304      	movs	r3, #4
 801c9f0:	2237      	movs	r2, #55	; 0x37
 801c9f2:	f000 ff9f 	bl	801d934 <dhcp_option>
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	77bb      	strb	r3, [r7, #30]
 801c9fe:	e00e      	b.n	801ca1e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ca00:	89b8      	ldrh	r0, [r7, #12]
 801ca02:	693b      	ldr	r3, [r7, #16]
 801ca04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ca08:	7fbb      	ldrb	r3, [r7, #30]
 801ca0a:	4a30      	ldr	r2, [pc, #192]	; (801cacc <dhcp_select+0x1e4>)
 801ca0c:	5cd3      	ldrb	r3, [r2, r3]
 801ca0e:	461a      	mov	r2, r3
 801ca10:	f000 ffc4 	bl	801d99c <dhcp_option_byte>
 801ca14:	4603      	mov	r3, r0
 801ca16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ca18:	7fbb      	ldrb	r3, [r7, #30]
 801ca1a:	3301      	adds	r3, #1
 801ca1c:	77bb      	strb	r3, [r7, #30]
 801ca1e:	7fbb      	ldrb	r3, [r7, #30]
 801ca20:	2b03      	cmp	r3, #3
 801ca22:	d9ed      	bls.n	801ca00 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ca24:	89b8      	ldrh	r0, [r7, #12]
 801ca26:	693b      	ldr	r3, [r7, #16]
 801ca28:	33f0      	adds	r3, #240	; 0xf0
 801ca2a:	697a      	ldr	r2, [r7, #20]
 801ca2c:	4619      	mov	r1, r3
 801ca2e:	f001 fcf9 	bl	801e424 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ca32:	4b27      	ldr	r3, [pc, #156]	; (801cad0 <dhcp_select+0x1e8>)
 801ca34:	6818      	ldr	r0, [r3, #0]
 801ca36:	4b27      	ldr	r3, [pc, #156]	; (801cad4 <dhcp_select+0x1ec>)
 801ca38:	9301      	str	r3, [sp, #4]
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	9300      	str	r3, [sp, #0]
 801ca3e:	2343      	movs	r3, #67	; 0x43
 801ca40:	4a25      	ldr	r2, [pc, #148]	; (801cad8 <dhcp_select+0x1f0>)
 801ca42:	6979      	ldr	r1, [r7, #20]
 801ca44:	f7ff fba6 	bl	801c194 <udp_sendto_if_src>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ca4c:	6978      	ldr	r0, [r7, #20]
 801ca4e:	f7f8 fb03 	bl	8015058 <pbuf_free>
 801ca52:	e001      	b.n	801ca58 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ca54:	23ff      	movs	r3, #255	; 0xff
 801ca56:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ca58:	69bb      	ldr	r3, [r7, #24]
 801ca5a:	799b      	ldrb	r3, [r3, #6]
 801ca5c:	2bff      	cmp	r3, #255	; 0xff
 801ca5e:	d005      	beq.n	801ca6c <dhcp_select+0x184>
    dhcp->tries++;
 801ca60:	69bb      	ldr	r3, [r7, #24]
 801ca62:	799b      	ldrb	r3, [r3, #6]
 801ca64:	3301      	adds	r3, #1
 801ca66:	b2da      	uxtb	r2, r3
 801ca68:	69bb      	ldr	r3, [r7, #24]
 801ca6a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ca6c:	69bb      	ldr	r3, [r7, #24]
 801ca6e:	799b      	ldrb	r3, [r3, #6]
 801ca70:	2b05      	cmp	r3, #5
 801ca72:	d80d      	bhi.n	801ca90 <dhcp_select+0x1a8>
 801ca74:	69bb      	ldr	r3, [r7, #24]
 801ca76:	799b      	ldrb	r3, [r3, #6]
 801ca78:	461a      	mov	r2, r3
 801ca7a:	2301      	movs	r3, #1
 801ca7c:	4093      	lsls	r3, r2
 801ca7e:	b29b      	uxth	r3, r3
 801ca80:	461a      	mov	r2, r3
 801ca82:	0152      	lsls	r2, r2, #5
 801ca84:	1ad2      	subs	r2, r2, r3
 801ca86:	0092      	lsls	r2, r2, #2
 801ca88:	4413      	add	r3, r2
 801ca8a:	00db      	lsls	r3, r3, #3
 801ca8c:	b29b      	uxth	r3, r3
 801ca8e:	e001      	b.n	801ca94 <dhcp_select+0x1ac>
 801ca90:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ca94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ca96:	89fb      	ldrh	r3, [r7, #14]
 801ca98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ca9c:	4a0f      	ldr	r2, [pc, #60]	; (801cadc <dhcp_select+0x1f4>)
 801ca9e:	fb82 1203 	smull	r1, r2, r2, r3
 801caa2:	1152      	asrs	r2, r2, #5
 801caa4:	17db      	asrs	r3, r3, #31
 801caa6:	1ad3      	subs	r3, r2, r3
 801caa8:	b29a      	uxth	r2, r3
 801caaa:	69bb      	ldr	r3, [r7, #24]
 801caac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801caae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cab2:	4618      	mov	r0, r3
 801cab4:	3720      	adds	r7, #32
 801cab6:	46bd      	mov	sp, r7
 801cab8:	bdb0      	pop	{r4, r5, r7, pc}
 801caba:	bf00      	nop
 801cabc:	08026694 	.word	0x08026694
 801cac0:	08026740 	.word	0x08026740
 801cac4:	080266f4 	.word	0x080266f4
 801cac8:	0802675c 	.word	0x0802675c
 801cacc:	2000036c 	.word	0x2000036c
 801cad0:	200055c8 	.word	0x200055c8
 801cad4:	080274e4 	.word	0x080274e4
 801cad8:	080274e8 	.word	0x080274e8
 801cadc:	10624dd3 	.word	0x10624dd3

0801cae0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801cae0:	b580      	push	{r7, lr}
 801cae2:	b082      	sub	sp, #8
 801cae4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801cae6:	4b27      	ldr	r3, [pc, #156]	; (801cb84 <dhcp_coarse_tmr+0xa4>)
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	607b      	str	r3, [r7, #4]
 801caec:	e042      	b.n	801cb74 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caf2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801caf4:	683b      	ldr	r3, [r7, #0]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d039      	beq.n	801cb6e <dhcp_coarse_tmr+0x8e>
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	795b      	ldrb	r3, [r3, #5]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d035      	beq.n	801cb6e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801cb02:	683b      	ldr	r3, [r7, #0]
 801cb04:	8a9b      	ldrh	r3, [r3, #20]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d012      	beq.n	801cb30 <dhcp_coarse_tmr+0x50>
 801cb0a:	683b      	ldr	r3, [r7, #0]
 801cb0c:	8a5b      	ldrh	r3, [r3, #18]
 801cb0e:	3301      	adds	r3, #1
 801cb10:	b29a      	uxth	r2, r3
 801cb12:	683b      	ldr	r3, [r7, #0]
 801cb14:	825a      	strh	r2, [r3, #18]
 801cb16:	683b      	ldr	r3, [r7, #0]
 801cb18:	8a5a      	ldrh	r2, [r3, #18]
 801cb1a:	683b      	ldr	r3, [r7, #0]
 801cb1c:	8a9b      	ldrh	r3, [r3, #20]
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	d106      	bne.n	801cb30 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801cb22:	6878      	ldr	r0, [r7, #4]
 801cb24:	f000 fe52 	bl	801d7cc <dhcp_release_and_stop>
        dhcp_start(netif);
 801cb28:	6878      	ldr	r0, [r7, #4]
 801cb2a:	f000 f989 	bl	801ce40 <dhcp_start>
 801cb2e:	e01e      	b.n	801cb6e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801cb30:	683b      	ldr	r3, [r7, #0]
 801cb32:	8a1b      	ldrh	r3, [r3, #16]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d00b      	beq.n	801cb50 <dhcp_coarse_tmr+0x70>
 801cb38:	683b      	ldr	r3, [r7, #0]
 801cb3a:	8a1b      	ldrh	r3, [r3, #16]
 801cb3c:	1e5a      	subs	r2, r3, #1
 801cb3e:	b291      	uxth	r1, r2
 801cb40:	683a      	ldr	r2, [r7, #0]
 801cb42:	8211      	strh	r1, [r2, #16]
 801cb44:	2b01      	cmp	r3, #1
 801cb46:	d103      	bne.n	801cb50 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801cb48:	6878      	ldr	r0, [r7, #4]
 801cb4a:	f000 f8c6 	bl	801ccda <dhcp_t2_timeout>
 801cb4e:	e00e      	b.n	801cb6e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801cb50:	683b      	ldr	r3, [r7, #0]
 801cb52:	89db      	ldrh	r3, [r3, #14]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d00a      	beq.n	801cb6e <dhcp_coarse_tmr+0x8e>
 801cb58:	683b      	ldr	r3, [r7, #0]
 801cb5a:	89db      	ldrh	r3, [r3, #14]
 801cb5c:	1e5a      	subs	r2, r3, #1
 801cb5e:	b291      	uxth	r1, r2
 801cb60:	683a      	ldr	r2, [r7, #0]
 801cb62:	81d1      	strh	r1, [r2, #14]
 801cb64:	2b01      	cmp	r3, #1
 801cb66:	d102      	bne.n	801cb6e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801cb68:	6878      	ldr	r0, [r7, #4]
 801cb6a:	f000 f888 	bl	801cc7e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	607b      	str	r3, [r7, #4]
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d1b9      	bne.n	801caee <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801cb7a:	bf00      	nop
 801cb7c:	bf00      	nop
 801cb7e:	3708      	adds	r7, #8
 801cb80:	46bd      	mov	sp, r7
 801cb82:	bd80      	pop	{r7, pc}
 801cb84:	20016c3c 	.word	0x20016c3c

0801cb88 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b082      	sub	sp, #8
 801cb8c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801cb8e:	4b16      	ldr	r3, [pc, #88]	; (801cbe8 <dhcp_fine_tmr+0x60>)
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	607b      	str	r3, [r7, #4]
 801cb94:	e020      	b.n	801cbd8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb9a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801cb9c:	683b      	ldr	r3, [r7, #0]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d017      	beq.n	801cbd2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	891b      	ldrh	r3, [r3, #8]
 801cba6:	2b01      	cmp	r3, #1
 801cba8:	d906      	bls.n	801cbb8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801cbaa:	683b      	ldr	r3, [r7, #0]
 801cbac:	891b      	ldrh	r3, [r3, #8]
 801cbae:	3b01      	subs	r3, #1
 801cbb0:	b29a      	uxth	r2, r3
 801cbb2:	683b      	ldr	r3, [r7, #0]
 801cbb4:	811a      	strh	r2, [r3, #8]
 801cbb6:	e00c      	b.n	801cbd2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801cbb8:	683b      	ldr	r3, [r7, #0]
 801cbba:	891b      	ldrh	r3, [r3, #8]
 801cbbc:	2b01      	cmp	r3, #1
 801cbbe:	d108      	bne.n	801cbd2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	891b      	ldrh	r3, [r3, #8]
 801cbc4:	3b01      	subs	r3, #1
 801cbc6:	b29a      	uxth	r2, r3
 801cbc8:	683b      	ldr	r3, [r7, #0]
 801cbca:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801cbcc:	6878      	ldr	r0, [r7, #4]
 801cbce:	f000 f80d 	bl	801cbec <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	607b      	str	r3, [r7, #4]
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d1db      	bne.n	801cb96 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801cbde:	bf00      	nop
 801cbe0:	bf00      	nop
 801cbe2:	3708      	adds	r7, #8
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}
 801cbe8:	20016c3c 	.word	0x20016c3c

0801cbec <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b084      	sub	sp, #16
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbf8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	795b      	ldrb	r3, [r3, #5]
 801cbfe:	2b0c      	cmp	r3, #12
 801cc00:	d003      	beq.n	801cc0a <dhcp_timeout+0x1e>
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	795b      	ldrb	r3, [r3, #5]
 801cc06:	2b06      	cmp	r3, #6
 801cc08:	d103      	bne.n	801cc12 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801cc0a:	6878      	ldr	r0, [r7, #4]
 801cc0c:	f000 fa74 	bl	801d0f8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801cc10:	e031      	b.n	801cc76 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	795b      	ldrb	r3, [r3, #5]
 801cc16:	2b01      	cmp	r3, #1
 801cc18:	d10e      	bne.n	801cc38 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	799b      	ldrb	r3, [r3, #6]
 801cc1e:	2b05      	cmp	r3, #5
 801cc20:	d803      	bhi.n	801cc2a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f7ff fe60 	bl	801c8e8 <dhcp_select>
}
 801cc28:	e025      	b.n	801cc76 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801cc2a:	6878      	ldr	r0, [r7, #4]
 801cc2c:	f000 fdce 	bl	801d7cc <dhcp_release_and_stop>
      dhcp_start(netif);
 801cc30:	6878      	ldr	r0, [r7, #4]
 801cc32:	f000 f905 	bl	801ce40 <dhcp_start>
}
 801cc36:	e01e      	b.n	801cc76 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	795b      	ldrb	r3, [r3, #5]
 801cc3c:	2b08      	cmp	r3, #8
 801cc3e:	d10b      	bne.n	801cc58 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	799b      	ldrb	r3, [r3, #6]
 801cc44:	2b01      	cmp	r3, #1
 801cc46:	d803      	bhi.n	801cc50 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801cc48:	6878      	ldr	r0, [r7, #4]
 801cc4a:	f7ff fdf3 	bl	801c834 <dhcp_check>
}
 801cc4e:	e012      	b.n	801cc76 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801cc50:	6878      	ldr	r0, [r7, #4]
 801cc52:	f000 faf3 	bl	801d23c <dhcp_bind>
}
 801cc56:	e00e      	b.n	801cc76 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	795b      	ldrb	r3, [r3, #5]
 801cc5c:	2b03      	cmp	r3, #3
 801cc5e:	d10a      	bne.n	801cc76 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	799b      	ldrb	r3, [r3, #6]
 801cc64:	2b01      	cmp	r3, #1
 801cc66:	d803      	bhi.n	801cc70 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f000 fcf9 	bl	801d660 <dhcp_reboot>
}
 801cc6e:	e002      	b.n	801cc76 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801cc70:	6878      	ldr	r0, [r7, #4]
 801cc72:	f000 fa41 	bl	801d0f8 <dhcp_discover>
}
 801cc76:	bf00      	nop
 801cc78:	3710      	adds	r7, #16
 801cc7a:	46bd      	mov	sp, r7
 801cc7c:	bd80      	pop	{r7, pc}

0801cc7e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801cc7e:	b580      	push	{r7, lr}
 801cc80:	b084      	sub	sp, #16
 801cc82:	af00      	add	r7, sp, #0
 801cc84:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc8a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	795b      	ldrb	r3, [r3, #5]
 801cc90:	2b01      	cmp	r3, #1
 801cc92:	d007      	beq.n	801cca4 <dhcp_t1_timeout+0x26>
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	795b      	ldrb	r3, [r3, #5]
 801cc98:	2b0a      	cmp	r3, #10
 801cc9a:	d003      	beq.n	801cca4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cca0:	2b05      	cmp	r3, #5
 801cca2:	d116      	bne.n	801ccd2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f000 fba3 	bl	801d3f0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	899b      	ldrh	r3, [r3, #12]
 801ccae:	461a      	mov	r2, r3
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	8a5b      	ldrh	r3, [r3, #18]
 801ccb4:	1ad3      	subs	r3, r2, r3
 801ccb6:	2b01      	cmp	r3, #1
 801ccb8:	dd0b      	ble.n	801ccd2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	899b      	ldrh	r3, [r3, #12]
 801ccbe:	461a      	mov	r2, r3
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	8a5b      	ldrh	r3, [r3, #18]
 801ccc4:	1ad3      	subs	r3, r2, r3
 801ccc6:	0fda      	lsrs	r2, r3, #31
 801ccc8:	4413      	add	r3, r2
 801ccca:	105b      	asrs	r3, r3, #1
 801cccc:	b29a      	uxth	r2, r3
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801ccd2:	bf00      	nop
 801ccd4:	3710      	adds	r7, #16
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}

0801ccda <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801ccda:	b580      	push	{r7, lr}
 801ccdc:	b084      	sub	sp, #16
 801ccde:	af00      	add	r7, sp, #0
 801cce0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cce6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	795b      	ldrb	r3, [r3, #5]
 801ccec:	2b01      	cmp	r3, #1
 801ccee:	d00b      	beq.n	801cd08 <dhcp_t2_timeout+0x2e>
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	795b      	ldrb	r3, [r3, #5]
 801ccf4:	2b0a      	cmp	r3, #10
 801ccf6:	d007      	beq.n	801cd08 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ccfc:	2b05      	cmp	r3, #5
 801ccfe:	d003      	beq.n	801cd08 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	795b      	ldrb	r3, [r3, #5]
 801cd04:	2b04      	cmp	r3, #4
 801cd06:	d116      	bne.n	801cd36 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801cd08:	6878      	ldr	r0, [r7, #4]
 801cd0a:	f000 fc0d 	bl	801d528 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	8a9b      	ldrh	r3, [r3, #20]
 801cd12:	461a      	mov	r2, r3
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	8a5b      	ldrh	r3, [r3, #18]
 801cd18:	1ad3      	subs	r3, r2, r3
 801cd1a:	2b01      	cmp	r3, #1
 801cd1c:	dd0b      	ble.n	801cd36 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	8a9b      	ldrh	r3, [r3, #20]
 801cd22:	461a      	mov	r2, r3
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	8a5b      	ldrh	r3, [r3, #18]
 801cd28:	1ad3      	subs	r3, r2, r3
 801cd2a:	0fda      	lsrs	r2, r3, #31
 801cd2c:	4413      	add	r3, r2
 801cd2e:	105b      	asrs	r3, r3, #1
 801cd30:	b29a      	uxth	r2, r3
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801cd36:	bf00      	nop
 801cd38:	3710      	adds	r7, #16
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	bd80      	pop	{r7, pc}
	...

0801cd40 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801cd40:	b580      	push	{r7, lr}
 801cd42:	b086      	sub	sp, #24
 801cd44:	af00      	add	r7, sp, #0
 801cd46:	6078      	str	r0, [r7, #4]
 801cd48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd4e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801cd50:	693b      	ldr	r3, [r7, #16]
 801cd52:	2200      	movs	r2, #0
 801cd54:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801cd56:	693b      	ldr	r3, [r7, #16]
 801cd58:	2200      	movs	r2, #0
 801cd5a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801cd5c:	4b36      	ldr	r3, [pc, #216]	; (801ce38 <dhcp_handle_ack+0xf8>)
 801cd5e:	78db      	ldrb	r3, [r3, #3]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d003      	beq.n	801cd6c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801cd64:	4b35      	ldr	r3, [pc, #212]	; (801ce3c <dhcp_handle_ack+0xfc>)
 801cd66:	68da      	ldr	r2, [r3, #12]
 801cd68:	693b      	ldr	r3, [r7, #16]
 801cd6a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801cd6c:	4b32      	ldr	r3, [pc, #200]	; (801ce38 <dhcp_handle_ack+0xf8>)
 801cd6e:	791b      	ldrb	r3, [r3, #4]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d004      	beq.n	801cd7e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801cd74:	4b31      	ldr	r3, [pc, #196]	; (801ce3c <dhcp_handle_ack+0xfc>)
 801cd76:	691a      	ldr	r2, [r3, #16]
 801cd78:	693b      	ldr	r3, [r7, #16]
 801cd7a:	62da      	str	r2, [r3, #44]	; 0x2c
 801cd7c:	e004      	b.n	801cd88 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801cd7e:	693b      	ldr	r3, [r7, #16]
 801cd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd82:	085a      	lsrs	r2, r3, #1
 801cd84:	693b      	ldr	r3, [r7, #16]
 801cd86:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801cd88:	4b2b      	ldr	r3, [pc, #172]	; (801ce38 <dhcp_handle_ack+0xf8>)
 801cd8a:	795b      	ldrb	r3, [r3, #5]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d004      	beq.n	801cd9a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801cd90:	4b2a      	ldr	r3, [pc, #168]	; (801ce3c <dhcp_handle_ack+0xfc>)
 801cd92:	695a      	ldr	r2, [r3, #20]
 801cd94:	693b      	ldr	r3, [r7, #16]
 801cd96:	631a      	str	r2, [r3, #48]	; 0x30
 801cd98:	e007      	b.n	801cdaa <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801cd9a:	693b      	ldr	r3, [r7, #16]
 801cd9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cd9e:	4613      	mov	r3, r2
 801cda0:	00db      	lsls	r3, r3, #3
 801cda2:	1a9b      	subs	r3, r3, r2
 801cda4:	08da      	lsrs	r2, r3, #3
 801cda6:	693b      	ldr	r3, [r7, #16]
 801cda8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cdaa:	683b      	ldr	r3, [r7, #0]
 801cdac:	691a      	ldr	r2, [r3, #16]
 801cdae:	693b      	ldr	r3, [r7, #16]
 801cdb0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801cdb2:	4b21      	ldr	r3, [pc, #132]	; (801ce38 <dhcp_handle_ack+0xf8>)
 801cdb4:	799b      	ldrb	r3, [r3, #6]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d00b      	beq.n	801cdd2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801cdba:	4b20      	ldr	r3, [pc, #128]	; (801ce3c <dhcp_handle_ack+0xfc>)
 801cdbc:	699b      	ldr	r3, [r3, #24]
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f7f5 fdd1 	bl	8012966 <lwip_htonl>
 801cdc4:	4602      	mov	r2, r0
 801cdc6:	693b      	ldr	r3, [r7, #16]
 801cdc8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801cdca:	693b      	ldr	r3, [r7, #16]
 801cdcc:	2201      	movs	r2, #1
 801cdce:	71da      	strb	r2, [r3, #7]
 801cdd0:	e002      	b.n	801cdd8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801cdd2:	693b      	ldr	r3, [r7, #16]
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801cdd8:	4b17      	ldr	r3, [pc, #92]	; (801ce38 <dhcp_handle_ack+0xf8>)
 801cdda:	79db      	ldrb	r3, [r3, #7]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d007      	beq.n	801cdf0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801cde0:	4b16      	ldr	r3, [pc, #88]	; (801ce3c <dhcp_handle_ack+0xfc>)
 801cde2:	69db      	ldr	r3, [r3, #28]
 801cde4:	4618      	mov	r0, r3
 801cde6:	f7f5 fdbe 	bl	8012966 <lwip_htonl>
 801cdea:	4602      	mov	r2, r0
 801cdec:	693b      	ldr	r3, [r7, #16]
 801cdee:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	75fb      	strb	r3, [r7, #23]
 801cdf4:	e013      	b.n	801ce1e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801cdf6:	7dfb      	ldrb	r3, [r7, #23]
 801cdf8:	3308      	adds	r3, #8
 801cdfa:	4a10      	ldr	r2, [pc, #64]	; (801ce3c <dhcp_handle_ack+0xfc>)
 801cdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce00:	4618      	mov	r0, r3
 801ce02:	f7f5 fdb0 	bl	8012966 <lwip_htonl>
 801ce06:	4603      	mov	r3, r0
 801ce08:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801ce0a:	f107 020c 	add.w	r2, r7, #12
 801ce0e:	7dfb      	ldrb	r3, [r7, #23]
 801ce10:	4611      	mov	r1, r2
 801ce12:	4618      	mov	r0, r3
 801ce14:	f7f5 fe02 	bl	8012a1c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801ce18:	7dfb      	ldrb	r3, [r7, #23]
 801ce1a:	3301      	adds	r3, #1
 801ce1c:	75fb      	strb	r3, [r7, #23]
 801ce1e:	7dfb      	ldrb	r3, [r7, #23]
 801ce20:	2b01      	cmp	r3, #1
 801ce22:	d805      	bhi.n	801ce30 <dhcp_handle_ack+0xf0>
 801ce24:	7dfb      	ldrb	r3, [r7, #23]
 801ce26:	3308      	adds	r3, #8
 801ce28:	4a03      	ldr	r2, [pc, #12]	; (801ce38 <dhcp_handle_ack+0xf8>)
 801ce2a:	5cd3      	ldrb	r3, [r2, r3]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d1e2      	bne.n	801cdf6 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801ce30:	bf00      	nop
 801ce32:	3718      	adds	r7, #24
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd80      	pop	{r7, pc}
 801ce38:	20016c68 	.word	0x20016c68
 801ce3c:	20016c74 	.word	0x20016c74

0801ce40 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801ce40:	b580      	push	{r7, lr}
 801ce42:	b084      	sub	sp, #16
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d109      	bne.n	801ce62 <dhcp_start+0x22>
 801ce4e:	4b37      	ldr	r3, [pc, #220]	; (801cf2c <dhcp_start+0xec>)
 801ce50:	f240 22e7 	movw	r2, #743	; 0x2e7
 801ce54:	4936      	ldr	r1, [pc, #216]	; (801cf30 <dhcp_start+0xf0>)
 801ce56:	4837      	ldr	r0, [pc, #220]	; (801cf34 <dhcp_start+0xf4>)
 801ce58:	f004 fb28 	bl	80214ac <iprintf>
 801ce5c:	f06f 030f 	mvn.w	r3, #15
 801ce60:	e060      	b.n	801cf24 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce68:	f003 0301 	and.w	r3, r3, #1
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d109      	bne.n	801ce84 <dhcp_start+0x44>
 801ce70:	4b2e      	ldr	r3, [pc, #184]	; (801cf2c <dhcp_start+0xec>)
 801ce72:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801ce76:	4930      	ldr	r1, [pc, #192]	; (801cf38 <dhcp_start+0xf8>)
 801ce78:	482e      	ldr	r0, [pc, #184]	; (801cf34 <dhcp_start+0xf4>)
 801ce7a:	f004 fb17 	bl	80214ac <iprintf>
 801ce7e:	f06f 030f 	mvn.w	r3, #15
 801ce82:	e04f      	b.n	801cf24 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce88:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce8e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801ce92:	d202      	bcs.n	801ce9a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801ce94:	f04f 33ff 	mov.w	r3, #4294967295
 801ce98:	e044      	b.n	801cf24 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d10d      	bne.n	801cebc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cea0:	2034      	movs	r0, #52	; 0x34
 801cea2:	f7f7 f855 	bl	8013f50 <mem_malloc>
 801cea6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d102      	bne.n	801ceb4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801ceae:	f04f 33ff 	mov.w	r3, #4294967295
 801ceb2:	e037      	b.n	801cf24 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	68fa      	ldr	r2, [r7, #12]
 801ceb8:	625a      	str	r2, [r3, #36]	; 0x24
 801ceba:	e005      	b.n	801cec8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	791b      	ldrb	r3, [r3, #4]
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d001      	beq.n	801cec8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cec4:	f7ff fc72 	bl	801c7ac <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801cec8:	2234      	movs	r2, #52	; 0x34
 801ceca:	2100      	movs	r1, #0
 801cecc:	68f8      	ldr	r0, [r7, #12]
 801cece:	f004 fa2b 	bl	8021328 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801ced2:	f7ff fc19 	bl	801c708 <dhcp_inc_pcb_refcount>
 801ced6:	4603      	mov	r3, r0
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d002      	beq.n	801cee2 <dhcp_start+0xa2>
    return ERR_MEM;
 801cedc:	f04f 33ff 	mov.w	r3, #4294967295
 801cee0:	e020      	b.n	801cf24 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	2201      	movs	r2, #1
 801cee6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ceee:	f003 0304 	and.w	r3, r3, #4
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d105      	bne.n	801cf02 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801cef6:	2102      	movs	r1, #2
 801cef8:	68f8      	ldr	r0, [r7, #12]
 801cefa:	f000 fd01 	bl	801d900 <dhcp_set_state>
    return ERR_OK;
 801cefe:	2300      	movs	r3, #0
 801cf00:	e010      	b.n	801cf24 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801cf02:	6878      	ldr	r0, [r7, #4]
 801cf04:	f000 f8f8 	bl	801d0f8 <dhcp_discover>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801cf0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d005      	beq.n	801cf20 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801cf14:	6878      	ldr	r0, [r7, #4]
 801cf16:	f000 fc59 	bl	801d7cc <dhcp_release_and_stop>
    return ERR_MEM;
 801cf1a:	f04f 33ff 	mov.w	r3, #4294967295
 801cf1e:	e001      	b.n	801cf24 <dhcp_start+0xe4>
  }
  return result;
 801cf20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cf24:	4618      	mov	r0, r3
 801cf26:	3710      	adds	r7, #16
 801cf28:	46bd      	mov	sp, r7
 801cf2a:	bd80      	pop	{r7, pc}
 801cf2c:	08026694 	.word	0x08026694
 801cf30:	08026778 	.word	0x08026778
 801cf34:	080266f4 	.word	0x080266f4
 801cf38:	080267bc 	.word	0x080267bc

0801cf3c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b084      	sub	sp, #16
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf48:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d025      	beq.n	801cf9c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	795b      	ldrb	r3, [r3, #5]
 801cf54:	2b0a      	cmp	r3, #10
 801cf56:	d008      	beq.n	801cf6a <dhcp_network_changed+0x2e>
 801cf58:	2b0a      	cmp	r3, #10
 801cf5a:	dc0d      	bgt.n	801cf78 <dhcp_network_changed+0x3c>
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d01f      	beq.n	801cfa0 <dhcp_network_changed+0x64>
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	db09      	blt.n	801cf78 <dhcp_network_changed+0x3c>
 801cf64:	3b03      	subs	r3, #3
 801cf66:	2b02      	cmp	r3, #2
 801cf68:	d806      	bhi.n	801cf78 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	2200      	movs	r2, #0
 801cf6e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801cf70:	6878      	ldr	r0, [r7, #4]
 801cf72:	f000 fb75 	bl	801d660 <dhcp_reboot>
      break;
 801cf76:	e014      	b.n	801cfa2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	795b      	ldrb	r3, [r3, #5]
 801cf7c:	2b0c      	cmp	r3, #12
 801cf7e:	d906      	bls.n	801cf8e <dhcp_network_changed+0x52>
 801cf80:	4b09      	ldr	r3, [pc, #36]	; (801cfa8 <dhcp_network_changed+0x6c>)
 801cf82:	f240 326d 	movw	r2, #877	; 0x36d
 801cf86:	4909      	ldr	r1, [pc, #36]	; (801cfac <dhcp_network_changed+0x70>)
 801cf88:	4809      	ldr	r0, [pc, #36]	; (801cfb0 <dhcp_network_changed+0x74>)
 801cf8a:	f004 fa8f 	bl	80214ac <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	2200      	movs	r2, #0
 801cf92:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801cf94:	6878      	ldr	r0, [r7, #4]
 801cf96:	f000 f8af 	bl	801d0f8 <dhcp_discover>
      break;
 801cf9a:	e002      	b.n	801cfa2 <dhcp_network_changed+0x66>
    return;
 801cf9c:	bf00      	nop
 801cf9e:	e000      	b.n	801cfa2 <dhcp_network_changed+0x66>
      break;
 801cfa0:	bf00      	nop
  }
}
 801cfa2:	3710      	adds	r7, #16
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}
 801cfa8:	08026694 	.word	0x08026694
 801cfac:	080267e0 	.word	0x080267e0
 801cfb0:	080266f4 	.word	0x080266f4

0801cfb4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b084      	sub	sp, #16
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
 801cfbc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d107      	bne.n	801cfd4 <dhcp_arp_reply+0x20>
 801cfc4:	4b0e      	ldr	r3, [pc, #56]	; (801d000 <dhcp_arp_reply+0x4c>)
 801cfc6:	f240 328b 	movw	r2, #907	; 0x38b
 801cfca:	490e      	ldr	r1, [pc, #56]	; (801d004 <dhcp_arp_reply+0x50>)
 801cfcc:	480e      	ldr	r0, [pc, #56]	; (801d008 <dhcp_arp_reply+0x54>)
 801cfce:	f004 fa6d 	bl	80214ac <iprintf>
 801cfd2:	e012      	b.n	801cffa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfd8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d00c      	beq.n	801cffa <dhcp_arp_reply+0x46>
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	795b      	ldrb	r3, [r3, #5]
 801cfe4:	2b08      	cmp	r3, #8
 801cfe6:	d108      	bne.n	801cffa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801cfe8:	683b      	ldr	r3, [r7, #0]
 801cfea:	681a      	ldr	r2, [r3, #0]
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	69db      	ldr	r3, [r3, #28]
 801cff0:	429a      	cmp	r2, r3
 801cff2:	d102      	bne.n	801cffa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801cff4:	6878      	ldr	r0, [r7, #4]
 801cff6:	f000 f809 	bl	801d00c <dhcp_decline>
    }
  }
}
 801cffa:	3710      	adds	r7, #16
 801cffc:	46bd      	mov	sp, r7
 801cffe:	bd80      	pop	{r7, pc}
 801d000:	08026694 	.word	0x08026694
 801d004:	08026778 	.word	0x08026778
 801d008:	080266f4 	.word	0x080266f4

0801d00c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801d00c:	b5b0      	push	{r4, r5, r7, lr}
 801d00e:	b08a      	sub	sp, #40	; 0x28
 801d010:	af02      	add	r7, sp, #8
 801d012:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d018:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801d01a:	210c      	movs	r1, #12
 801d01c:	69b8      	ldr	r0, [r7, #24]
 801d01e:	f000 fc6f 	bl	801d900 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801d022:	f107 030c 	add.w	r3, r7, #12
 801d026:	2204      	movs	r2, #4
 801d028:	69b9      	ldr	r1, [r7, #24]
 801d02a:	6878      	ldr	r0, [r7, #4]
 801d02c:	f001 f924 	bl	801e278 <dhcp_create_msg>
 801d030:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d032:	697b      	ldr	r3, [r7, #20]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d035      	beq.n	801d0a4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d038:	697b      	ldr	r3, [r7, #20]
 801d03a:	685b      	ldr	r3, [r3, #4]
 801d03c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d03e:	89b8      	ldrh	r0, [r7, #12]
 801d040:	693b      	ldr	r3, [r7, #16]
 801d042:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d046:	2304      	movs	r3, #4
 801d048:	2232      	movs	r2, #50	; 0x32
 801d04a:	f000 fc73 	bl	801d934 <dhcp_option>
 801d04e:	4603      	mov	r3, r0
 801d050:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d052:	89bc      	ldrh	r4, [r7, #12]
 801d054:	693b      	ldr	r3, [r7, #16]
 801d056:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d05a:	69bb      	ldr	r3, [r7, #24]
 801d05c:	69db      	ldr	r3, [r3, #28]
 801d05e:	4618      	mov	r0, r3
 801d060:	f7f5 fc81 	bl	8012966 <lwip_htonl>
 801d064:	4603      	mov	r3, r0
 801d066:	461a      	mov	r2, r3
 801d068:	4629      	mov	r1, r5
 801d06a:	4620      	mov	r0, r4
 801d06c:	f000 fcee 	bl	801da4c <dhcp_option_long>
 801d070:	4603      	mov	r3, r0
 801d072:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d074:	89b8      	ldrh	r0, [r7, #12]
 801d076:	693b      	ldr	r3, [r7, #16]
 801d078:	33f0      	adds	r3, #240	; 0xf0
 801d07a:	697a      	ldr	r2, [r7, #20]
 801d07c:	4619      	mov	r1, r3
 801d07e:	f001 f9d1 	bl	801e424 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d082:	4b19      	ldr	r3, [pc, #100]	; (801d0e8 <dhcp_decline+0xdc>)
 801d084:	6818      	ldr	r0, [r3, #0]
 801d086:	4b19      	ldr	r3, [pc, #100]	; (801d0ec <dhcp_decline+0xe0>)
 801d088:	9301      	str	r3, [sp, #4]
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	9300      	str	r3, [sp, #0]
 801d08e:	2343      	movs	r3, #67	; 0x43
 801d090:	4a17      	ldr	r2, [pc, #92]	; (801d0f0 <dhcp_decline+0xe4>)
 801d092:	6979      	ldr	r1, [r7, #20]
 801d094:	f7ff f87e 	bl	801c194 <udp_sendto_if_src>
 801d098:	4603      	mov	r3, r0
 801d09a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d09c:	6978      	ldr	r0, [r7, #20]
 801d09e:	f7f7 ffdb 	bl	8015058 <pbuf_free>
 801d0a2:	e001      	b.n	801d0a8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d0a4:	23ff      	movs	r3, #255	; 0xff
 801d0a6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d0a8:	69bb      	ldr	r3, [r7, #24]
 801d0aa:	799b      	ldrb	r3, [r3, #6]
 801d0ac:	2bff      	cmp	r3, #255	; 0xff
 801d0ae:	d005      	beq.n	801d0bc <dhcp_decline+0xb0>
    dhcp->tries++;
 801d0b0:	69bb      	ldr	r3, [r7, #24]
 801d0b2:	799b      	ldrb	r3, [r3, #6]
 801d0b4:	3301      	adds	r3, #1
 801d0b6:	b2da      	uxtb	r2, r3
 801d0b8:	69bb      	ldr	r3, [r7, #24]
 801d0ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801d0bc:	f242 7310 	movw	r3, #10000	; 0x2710
 801d0c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d0c2:	89fb      	ldrh	r3, [r7, #14]
 801d0c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d0c8:	4a0a      	ldr	r2, [pc, #40]	; (801d0f4 <dhcp_decline+0xe8>)
 801d0ca:	fb82 1203 	smull	r1, r2, r2, r3
 801d0ce:	1152      	asrs	r2, r2, #5
 801d0d0:	17db      	asrs	r3, r3, #31
 801d0d2:	1ad3      	subs	r3, r2, r3
 801d0d4:	b29a      	uxth	r2, r3
 801d0d6:	69bb      	ldr	r3, [r7, #24]
 801d0d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d0da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d0de:	4618      	mov	r0, r3
 801d0e0:	3720      	adds	r7, #32
 801d0e2:	46bd      	mov	sp, r7
 801d0e4:	bdb0      	pop	{r4, r5, r7, pc}
 801d0e6:	bf00      	nop
 801d0e8:	200055c8 	.word	0x200055c8
 801d0ec:	080274e4 	.word	0x080274e4
 801d0f0:	080274e8 	.word	0x080274e8
 801d0f4:	10624dd3 	.word	0x10624dd3

0801d0f8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801d0f8:	b580      	push	{r7, lr}
 801d0fa:	b08a      	sub	sp, #40	; 0x28
 801d0fc:	af02      	add	r7, sp, #8
 801d0fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d104:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801d106:	2300      	movs	r3, #0
 801d108:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801d10a:	69bb      	ldr	r3, [r7, #24]
 801d10c:	2200      	movs	r2, #0
 801d10e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801d110:	2106      	movs	r1, #6
 801d112:	69b8      	ldr	r0, [r7, #24]
 801d114:	f000 fbf4 	bl	801d900 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801d118:	f107 0308 	add.w	r3, r7, #8
 801d11c:	2201      	movs	r2, #1
 801d11e:	69b9      	ldr	r1, [r7, #24]
 801d120:	6878      	ldr	r0, [r7, #4]
 801d122:	f001 f8a9 	bl	801e278 <dhcp_create_msg>
 801d126:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801d128:	693b      	ldr	r3, [r7, #16]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d04b      	beq.n	801d1c6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d12e:	693b      	ldr	r3, [r7, #16]
 801d130:	685b      	ldr	r3, [r3, #4]
 801d132:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d134:	8938      	ldrh	r0, [r7, #8]
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d13c:	2302      	movs	r3, #2
 801d13e:	2239      	movs	r2, #57	; 0x39
 801d140:	f000 fbf8 	bl	801d934 <dhcp_option>
 801d144:	4603      	mov	r3, r0
 801d146:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d148:	8938      	ldrh	r0, [r7, #8]
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d154:	461a      	mov	r2, r3
 801d156:	f000 fc47 	bl	801d9e8 <dhcp_option_short>
 801d15a:	4603      	mov	r3, r0
 801d15c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d15e:	8938      	ldrh	r0, [r7, #8]
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d166:	2304      	movs	r3, #4
 801d168:	2237      	movs	r2, #55	; 0x37
 801d16a:	f000 fbe3 	bl	801d934 <dhcp_option>
 801d16e:	4603      	mov	r3, r0
 801d170:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d172:	2300      	movs	r3, #0
 801d174:	77fb      	strb	r3, [r7, #31]
 801d176:	e00e      	b.n	801d196 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d178:	8938      	ldrh	r0, [r7, #8]
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d180:	7ffb      	ldrb	r3, [r7, #31]
 801d182:	4a29      	ldr	r2, [pc, #164]	; (801d228 <dhcp_discover+0x130>)
 801d184:	5cd3      	ldrb	r3, [r2, r3]
 801d186:	461a      	mov	r2, r3
 801d188:	f000 fc08 	bl	801d99c <dhcp_option_byte>
 801d18c:	4603      	mov	r3, r0
 801d18e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d190:	7ffb      	ldrb	r3, [r7, #31]
 801d192:	3301      	adds	r3, #1
 801d194:	77fb      	strb	r3, [r7, #31]
 801d196:	7ffb      	ldrb	r3, [r7, #31]
 801d198:	2b03      	cmp	r3, #3
 801d19a:	d9ed      	bls.n	801d178 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d19c:	8938      	ldrh	r0, [r7, #8]
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	33f0      	adds	r3, #240	; 0xf0
 801d1a2:	693a      	ldr	r2, [r7, #16]
 801d1a4:	4619      	mov	r1, r3
 801d1a6:	f001 f93d 	bl	801e424 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d1aa:	4b20      	ldr	r3, [pc, #128]	; (801d22c <dhcp_discover+0x134>)
 801d1ac:	6818      	ldr	r0, [r3, #0]
 801d1ae:	4b20      	ldr	r3, [pc, #128]	; (801d230 <dhcp_discover+0x138>)
 801d1b0:	9301      	str	r3, [sp, #4]
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	9300      	str	r3, [sp, #0]
 801d1b6:	2343      	movs	r3, #67	; 0x43
 801d1b8:	4a1e      	ldr	r2, [pc, #120]	; (801d234 <dhcp_discover+0x13c>)
 801d1ba:	6939      	ldr	r1, [r7, #16]
 801d1bc:	f7fe ffea 	bl	801c194 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801d1c0:	6938      	ldr	r0, [r7, #16]
 801d1c2:	f7f7 ff49 	bl	8015058 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d1c6:	69bb      	ldr	r3, [r7, #24]
 801d1c8:	799b      	ldrb	r3, [r3, #6]
 801d1ca:	2bff      	cmp	r3, #255	; 0xff
 801d1cc:	d005      	beq.n	801d1da <dhcp_discover+0xe2>
    dhcp->tries++;
 801d1ce:	69bb      	ldr	r3, [r7, #24]
 801d1d0:	799b      	ldrb	r3, [r3, #6]
 801d1d2:	3301      	adds	r3, #1
 801d1d4:	b2da      	uxtb	r2, r3
 801d1d6:	69bb      	ldr	r3, [r7, #24]
 801d1d8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d1da:	69bb      	ldr	r3, [r7, #24]
 801d1dc:	799b      	ldrb	r3, [r3, #6]
 801d1de:	2b05      	cmp	r3, #5
 801d1e0:	d80d      	bhi.n	801d1fe <dhcp_discover+0x106>
 801d1e2:	69bb      	ldr	r3, [r7, #24]
 801d1e4:	799b      	ldrb	r3, [r3, #6]
 801d1e6:	461a      	mov	r2, r3
 801d1e8:	2301      	movs	r3, #1
 801d1ea:	4093      	lsls	r3, r2
 801d1ec:	b29b      	uxth	r3, r3
 801d1ee:	461a      	mov	r2, r3
 801d1f0:	0152      	lsls	r2, r2, #5
 801d1f2:	1ad2      	subs	r2, r2, r3
 801d1f4:	0092      	lsls	r2, r2, #2
 801d1f6:	4413      	add	r3, r2
 801d1f8:	00db      	lsls	r3, r3, #3
 801d1fa:	b29b      	uxth	r3, r3
 801d1fc:	e001      	b.n	801d202 <dhcp_discover+0x10a>
 801d1fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 801d202:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d204:	897b      	ldrh	r3, [r7, #10]
 801d206:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d20a:	4a0b      	ldr	r2, [pc, #44]	; (801d238 <dhcp_discover+0x140>)
 801d20c:	fb82 1203 	smull	r1, r2, r2, r3
 801d210:	1152      	asrs	r2, r2, #5
 801d212:	17db      	asrs	r3, r3, #31
 801d214:	1ad3      	subs	r3, r2, r3
 801d216:	b29a      	uxth	r2, r3
 801d218:	69bb      	ldr	r3, [r7, #24]
 801d21a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d21c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d220:	4618      	mov	r0, r3
 801d222:	3720      	adds	r7, #32
 801d224:	46bd      	mov	sp, r7
 801d226:	bd80      	pop	{r7, pc}
 801d228:	2000036c 	.word	0x2000036c
 801d22c:	200055c8 	.word	0x200055c8
 801d230:	080274e4 	.word	0x080274e4
 801d234:	080274e8 	.word	0x080274e8
 801d238:	10624dd3 	.word	0x10624dd3

0801d23c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b088      	sub	sp, #32
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d107      	bne.n	801d25a <dhcp_bind+0x1e>
 801d24a:	4b64      	ldr	r3, [pc, #400]	; (801d3dc <dhcp_bind+0x1a0>)
 801d24c:	f240 4215 	movw	r2, #1045	; 0x415
 801d250:	4963      	ldr	r1, [pc, #396]	; (801d3e0 <dhcp_bind+0x1a4>)
 801d252:	4864      	ldr	r0, [pc, #400]	; (801d3e4 <dhcp_bind+0x1a8>)
 801d254:	f004 f92a 	bl	80214ac <iprintf>
 801d258:	e0bc      	b.n	801d3d4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d25e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801d260:	69bb      	ldr	r3, [r7, #24]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d107      	bne.n	801d276 <dhcp_bind+0x3a>
 801d266:	4b5d      	ldr	r3, [pc, #372]	; (801d3dc <dhcp_bind+0x1a0>)
 801d268:	f240 4217 	movw	r2, #1047	; 0x417
 801d26c:	495e      	ldr	r1, [pc, #376]	; (801d3e8 <dhcp_bind+0x1ac>)
 801d26e:	485d      	ldr	r0, [pc, #372]	; (801d3e4 <dhcp_bind+0x1a8>)
 801d270:	f004 f91c 	bl	80214ac <iprintf>
 801d274:	e0ae      	b.n	801d3d4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801d276:	69bb      	ldr	r3, [r7, #24]
 801d278:	2200      	movs	r2, #0
 801d27a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d27c:	69bb      	ldr	r3, [r7, #24]
 801d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d280:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d284:	d019      	beq.n	801d2ba <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d286:	69bb      	ldr	r3, [r7, #24]
 801d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d28a:	331e      	adds	r3, #30
 801d28c:	4a57      	ldr	r2, [pc, #348]	; (801d3ec <dhcp_bind+0x1b0>)
 801d28e:	fba2 2303 	umull	r2, r3, r2, r3
 801d292:	095b      	lsrs	r3, r3, #5
 801d294:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d296:	69fb      	ldr	r3, [r7, #28]
 801d298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d29c:	d302      	bcc.n	801d2a4 <dhcp_bind+0x68>
      timeout = 0xffff;
 801d29e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d2a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801d2a4:	69fb      	ldr	r3, [r7, #28]
 801d2a6:	b29a      	uxth	r2, r3
 801d2a8:	69bb      	ldr	r3, [r7, #24]
 801d2aa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801d2ac:	69bb      	ldr	r3, [r7, #24]
 801d2ae:	8a9b      	ldrh	r3, [r3, #20]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d102      	bne.n	801d2ba <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801d2b4:	69bb      	ldr	r3, [r7, #24]
 801d2b6:	2201      	movs	r2, #1
 801d2b8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d2ba:	69bb      	ldr	r3, [r7, #24]
 801d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2c2:	d01d      	beq.n	801d300 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d2c4:	69bb      	ldr	r3, [r7, #24]
 801d2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2c8:	331e      	adds	r3, #30
 801d2ca:	4a48      	ldr	r2, [pc, #288]	; (801d3ec <dhcp_bind+0x1b0>)
 801d2cc:	fba2 2303 	umull	r2, r3, r2, r3
 801d2d0:	095b      	lsrs	r3, r3, #5
 801d2d2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d2d4:	69fb      	ldr	r3, [r7, #28]
 801d2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d2da:	d302      	bcc.n	801d2e2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801d2dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d2e0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801d2e2:	69fb      	ldr	r3, [r7, #28]
 801d2e4:	b29a      	uxth	r2, r3
 801d2e6:	69bb      	ldr	r3, [r7, #24]
 801d2e8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801d2ea:	69bb      	ldr	r3, [r7, #24]
 801d2ec:	895b      	ldrh	r3, [r3, #10]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d102      	bne.n	801d2f8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801d2f2:	69bb      	ldr	r3, [r7, #24]
 801d2f4:	2201      	movs	r2, #1
 801d2f6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801d2f8:	69bb      	ldr	r3, [r7, #24]
 801d2fa:	895a      	ldrh	r2, [r3, #10]
 801d2fc:	69bb      	ldr	r3, [r7, #24]
 801d2fe:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d300:	69bb      	ldr	r3, [r7, #24]
 801d302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d304:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d308:	d01d      	beq.n	801d346 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d30a:	69bb      	ldr	r3, [r7, #24]
 801d30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d30e:	331e      	adds	r3, #30
 801d310:	4a36      	ldr	r2, [pc, #216]	; (801d3ec <dhcp_bind+0x1b0>)
 801d312:	fba2 2303 	umull	r2, r3, r2, r3
 801d316:	095b      	lsrs	r3, r3, #5
 801d318:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d31a:	69fb      	ldr	r3, [r7, #28]
 801d31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d320:	d302      	bcc.n	801d328 <dhcp_bind+0xec>
      timeout = 0xffff;
 801d322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d326:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801d328:	69fb      	ldr	r3, [r7, #28]
 801d32a:	b29a      	uxth	r2, r3
 801d32c:	69bb      	ldr	r3, [r7, #24]
 801d32e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801d330:	69bb      	ldr	r3, [r7, #24]
 801d332:	899b      	ldrh	r3, [r3, #12]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d102      	bne.n	801d33e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801d338:	69bb      	ldr	r3, [r7, #24]
 801d33a:	2201      	movs	r2, #1
 801d33c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d33e:	69bb      	ldr	r3, [r7, #24]
 801d340:	899a      	ldrh	r2, [r3, #12]
 801d342:	69bb      	ldr	r3, [r7, #24]
 801d344:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d346:	69bb      	ldr	r3, [r7, #24]
 801d348:	895a      	ldrh	r2, [r3, #10]
 801d34a:	69bb      	ldr	r3, [r7, #24]
 801d34c:	899b      	ldrh	r3, [r3, #12]
 801d34e:	429a      	cmp	r2, r3
 801d350:	d306      	bcc.n	801d360 <dhcp_bind+0x124>
 801d352:	69bb      	ldr	r3, [r7, #24]
 801d354:	899b      	ldrh	r3, [r3, #12]
 801d356:	2b00      	cmp	r3, #0
 801d358:	d002      	beq.n	801d360 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801d35a:	69bb      	ldr	r3, [r7, #24]
 801d35c:	2200      	movs	r2, #0
 801d35e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801d360:	69bb      	ldr	r3, [r7, #24]
 801d362:	79db      	ldrb	r3, [r3, #7]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d003      	beq.n	801d370 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d368:	69bb      	ldr	r3, [r7, #24]
 801d36a:	6a1b      	ldr	r3, [r3, #32]
 801d36c:	613b      	str	r3, [r7, #16]
 801d36e:	e014      	b.n	801d39a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d370:	69bb      	ldr	r3, [r7, #24]
 801d372:	331c      	adds	r3, #28
 801d374:	781b      	ldrb	r3, [r3, #0]
 801d376:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801d378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	db02      	blt.n	801d386 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d380:	23ff      	movs	r3, #255	; 0xff
 801d382:	613b      	str	r3, [r7, #16]
 801d384:	e009      	b.n	801d39a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d386:	7dfb      	ldrb	r3, [r7, #23]
 801d388:	2bbf      	cmp	r3, #191	; 0xbf
 801d38a:	d903      	bls.n	801d394 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d38c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d390:	613b      	str	r3, [r7, #16]
 801d392:	e002      	b.n	801d39a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d398:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d39a:	69bb      	ldr	r3, [r7, #24]
 801d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d39e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d108      	bne.n	801d3b8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d3a6:	69bb      	ldr	r3, [r7, #24]
 801d3a8:	69da      	ldr	r2, [r3, #28]
 801d3aa:	693b      	ldr	r3, [r7, #16]
 801d3ac:	4013      	ands	r3, r2
 801d3ae:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d3b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d3b8:	210a      	movs	r1, #10
 801d3ba:	69b8      	ldr	r0, [r7, #24]
 801d3bc:	f000 faa0 	bl	801d900 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d3c0:	69bb      	ldr	r3, [r7, #24]
 801d3c2:	f103 011c 	add.w	r1, r3, #28
 801d3c6:	f107 030c 	add.w	r3, r7, #12
 801d3ca:	f107 0210 	add.w	r2, r7, #16
 801d3ce:	6878      	ldr	r0, [r7, #4]
 801d3d0:	f7f7 f934 	bl	801463c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d3d4:	3720      	adds	r7, #32
 801d3d6:	46bd      	mov	sp, r7
 801d3d8:	bd80      	pop	{r7, pc}
 801d3da:	bf00      	nop
 801d3dc:	08026694 	.word	0x08026694
 801d3e0:	080267f4 	.word	0x080267f4
 801d3e4:	080266f4 	.word	0x080266f4
 801d3e8:	08026810 	.word	0x08026810
 801d3ec:	88888889 	.word	0x88888889

0801d3f0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	b08a      	sub	sp, #40	; 0x28
 801d3f4:	af02      	add	r7, sp, #8
 801d3f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3fc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d3fe:	2105      	movs	r1, #5
 801d400:	69b8      	ldr	r0, [r7, #24]
 801d402:	f000 fa7d 	bl	801d900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d406:	f107 030c 	add.w	r3, r7, #12
 801d40a:	2203      	movs	r2, #3
 801d40c:	69b9      	ldr	r1, [r7, #24]
 801d40e:	6878      	ldr	r0, [r7, #4]
 801d410:	f000 ff32 	bl	801e278 <dhcp_create_msg>
 801d414:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d416:	697b      	ldr	r3, [r7, #20]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d04e      	beq.n	801d4ba <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d41c:	697b      	ldr	r3, [r7, #20]
 801d41e:	685b      	ldr	r3, [r3, #4]
 801d420:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d422:	89b8      	ldrh	r0, [r7, #12]
 801d424:	693b      	ldr	r3, [r7, #16]
 801d426:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d42a:	2302      	movs	r3, #2
 801d42c:	2239      	movs	r2, #57	; 0x39
 801d42e:	f000 fa81 	bl	801d934 <dhcp_option>
 801d432:	4603      	mov	r3, r0
 801d434:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d436:	89b8      	ldrh	r0, [r7, #12]
 801d438:	693b      	ldr	r3, [r7, #16]
 801d43a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d442:	461a      	mov	r2, r3
 801d444:	f000 fad0 	bl	801d9e8 <dhcp_option_short>
 801d448:	4603      	mov	r3, r0
 801d44a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d44c:	89b8      	ldrh	r0, [r7, #12]
 801d44e:	693b      	ldr	r3, [r7, #16]
 801d450:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d454:	2304      	movs	r3, #4
 801d456:	2237      	movs	r2, #55	; 0x37
 801d458:	f000 fa6c 	bl	801d934 <dhcp_option>
 801d45c:	4603      	mov	r3, r0
 801d45e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d460:	2300      	movs	r3, #0
 801d462:	77bb      	strb	r3, [r7, #30]
 801d464:	e00e      	b.n	801d484 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d466:	89b8      	ldrh	r0, [r7, #12]
 801d468:	693b      	ldr	r3, [r7, #16]
 801d46a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d46e:	7fbb      	ldrb	r3, [r7, #30]
 801d470:	4a2a      	ldr	r2, [pc, #168]	; (801d51c <dhcp_renew+0x12c>)
 801d472:	5cd3      	ldrb	r3, [r2, r3]
 801d474:	461a      	mov	r2, r3
 801d476:	f000 fa91 	bl	801d99c <dhcp_option_byte>
 801d47a:	4603      	mov	r3, r0
 801d47c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d47e:	7fbb      	ldrb	r3, [r7, #30]
 801d480:	3301      	adds	r3, #1
 801d482:	77bb      	strb	r3, [r7, #30]
 801d484:	7fbb      	ldrb	r3, [r7, #30]
 801d486:	2b03      	cmp	r3, #3
 801d488:	d9ed      	bls.n	801d466 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d48a:	89b8      	ldrh	r0, [r7, #12]
 801d48c:	693b      	ldr	r3, [r7, #16]
 801d48e:	33f0      	adds	r3, #240	; 0xf0
 801d490:	697a      	ldr	r2, [r7, #20]
 801d492:	4619      	mov	r1, r3
 801d494:	f000 ffc6 	bl	801e424 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d498:	4b21      	ldr	r3, [pc, #132]	; (801d520 <dhcp_renew+0x130>)
 801d49a:	6818      	ldr	r0, [r3, #0]
 801d49c:	69bb      	ldr	r3, [r7, #24]
 801d49e:	f103 0218 	add.w	r2, r3, #24
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	9300      	str	r3, [sp, #0]
 801d4a6:	2343      	movs	r3, #67	; 0x43
 801d4a8:	6979      	ldr	r1, [r7, #20]
 801d4aa:	f7fe fdff 	bl	801c0ac <udp_sendto_if>
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d4b2:	6978      	ldr	r0, [r7, #20]
 801d4b4:	f7f7 fdd0 	bl	8015058 <pbuf_free>
 801d4b8:	e001      	b.n	801d4be <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d4ba:	23ff      	movs	r3, #255	; 0xff
 801d4bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d4be:	69bb      	ldr	r3, [r7, #24]
 801d4c0:	799b      	ldrb	r3, [r3, #6]
 801d4c2:	2bff      	cmp	r3, #255	; 0xff
 801d4c4:	d005      	beq.n	801d4d2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801d4c6:	69bb      	ldr	r3, [r7, #24]
 801d4c8:	799b      	ldrb	r3, [r3, #6]
 801d4ca:	3301      	adds	r3, #1
 801d4cc:	b2da      	uxtb	r2, r3
 801d4ce:	69bb      	ldr	r3, [r7, #24]
 801d4d0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d4d2:	69bb      	ldr	r3, [r7, #24]
 801d4d4:	799b      	ldrb	r3, [r3, #6]
 801d4d6:	2b09      	cmp	r3, #9
 801d4d8:	d80a      	bhi.n	801d4f0 <dhcp_renew+0x100>
 801d4da:	69bb      	ldr	r3, [r7, #24]
 801d4dc:	799b      	ldrb	r3, [r3, #6]
 801d4de:	b29b      	uxth	r3, r3
 801d4e0:	461a      	mov	r2, r3
 801d4e2:	0152      	lsls	r2, r2, #5
 801d4e4:	1ad2      	subs	r2, r2, r3
 801d4e6:	0092      	lsls	r2, r2, #2
 801d4e8:	4413      	add	r3, r2
 801d4ea:	011b      	lsls	r3, r3, #4
 801d4ec:	b29b      	uxth	r3, r3
 801d4ee:	e001      	b.n	801d4f4 <dhcp_renew+0x104>
 801d4f0:	f644 6320 	movw	r3, #20000	; 0x4e20
 801d4f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d4f6:	89fb      	ldrh	r3, [r7, #14]
 801d4f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d4fc:	4a09      	ldr	r2, [pc, #36]	; (801d524 <dhcp_renew+0x134>)
 801d4fe:	fb82 1203 	smull	r1, r2, r2, r3
 801d502:	1152      	asrs	r2, r2, #5
 801d504:	17db      	asrs	r3, r3, #31
 801d506:	1ad3      	subs	r3, r2, r3
 801d508:	b29a      	uxth	r2, r3
 801d50a:	69bb      	ldr	r3, [r7, #24]
 801d50c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d50e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d512:	4618      	mov	r0, r3
 801d514:	3720      	adds	r7, #32
 801d516:	46bd      	mov	sp, r7
 801d518:	bd80      	pop	{r7, pc}
 801d51a:	bf00      	nop
 801d51c:	2000036c 	.word	0x2000036c
 801d520:	200055c8 	.word	0x200055c8
 801d524:	10624dd3 	.word	0x10624dd3

0801d528 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d528:	b580      	push	{r7, lr}
 801d52a:	b08a      	sub	sp, #40	; 0x28
 801d52c:	af02      	add	r7, sp, #8
 801d52e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d534:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d536:	2104      	movs	r1, #4
 801d538:	69b8      	ldr	r0, [r7, #24]
 801d53a:	f000 f9e1 	bl	801d900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d53e:	f107 030c 	add.w	r3, r7, #12
 801d542:	2203      	movs	r2, #3
 801d544:	69b9      	ldr	r1, [r7, #24]
 801d546:	6878      	ldr	r0, [r7, #4]
 801d548:	f000 fe96 	bl	801e278 <dhcp_create_msg>
 801d54c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d54e:	697b      	ldr	r3, [r7, #20]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d04c      	beq.n	801d5ee <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d554:	697b      	ldr	r3, [r7, #20]
 801d556:	685b      	ldr	r3, [r3, #4]
 801d558:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d55a:	89b8      	ldrh	r0, [r7, #12]
 801d55c:	693b      	ldr	r3, [r7, #16]
 801d55e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d562:	2302      	movs	r3, #2
 801d564:	2239      	movs	r2, #57	; 0x39
 801d566:	f000 f9e5 	bl	801d934 <dhcp_option>
 801d56a:	4603      	mov	r3, r0
 801d56c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d56e:	89b8      	ldrh	r0, [r7, #12]
 801d570:	693b      	ldr	r3, [r7, #16]
 801d572:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d57a:	461a      	mov	r2, r3
 801d57c:	f000 fa34 	bl	801d9e8 <dhcp_option_short>
 801d580:	4603      	mov	r3, r0
 801d582:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d584:	89b8      	ldrh	r0, [r7, #12]
 801d586:	693b      	ldr	r3, [r7, #16]
 801d588:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d58c:	2304      	movs	r3, #4
 801d58e:	2237      	movs	r2, #55	; 0x37
 801d590:	f000 f9d0 	bl	801d934 <dhcp_option>
 801d594:	4603      	mov	r3, r0
 801d596:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d598:	2300      	movs	r3, #0
 801d59a:	77bb      	strb	r3, [r7, #30]
 801d59c:	e00e      	b.n	801d5bc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d59e:	89b8      	ldrh	r0, [r7, #12]
 801d5a0:	693b      	ldr	r3, [r7, #16]
 801d5a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d5a6:	7fbb      	ldrb	r3, [r7, #30]
 801d5a8:	4a29      	ldr	r2, [pc, #164]	; (801d650 <dhcp_rebind+0x128>)
 801d5aa:	5cd3      	ldrb	r3, [r2, r3]
 801d5ac:	461a      	mov	r2, r3
 801d5ae:	f000 f9f5 	bl	801d99c <dhcp_option_byte>
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d5b6:	7fbb      	ldrb	r3, [r7, #30]
 801d5b8:	3301      	adds	r3, #1
 801d5ba:	77bb      	strb	r3, [r7, #30]
 801d5bc:	7fbb      	ldrb	r3, [r7, #30]
 801d5be:	2b03      	cmp	r3, #3
 801d5c0:	d9ed      	bls.n	801d59e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d5c2:	89b8      	ldrh	r0, [r7, #12]
 801d5c4:	693b      	ldr	r3, [r7, #16]
 801d5c6:	33f0      	adds	r3, #240	; 0xf0
 801d5c8:	697a      	ldr	r2, [r7, #20]
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	f000 ff2a 	bl	801e424 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d5d0:	4b20      	ldr	r3, [pc, #128]	; (801d654 <dhcp_rebind+0x12c>)
 801d5d2:	6818      	ldr	r0, [r3, #0]
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	9300      	str	r3, [sp, #0]
 801d5d8:	2343      	movs	r3, #67	; 0x43
 801d5da:	4a1f      	ldr	r2, [pc, #124]	; (801d658 <dhcp_rebind+0x130>)
 801d5dc:	6979      	ldr	r1, [r7, #20]
 801d5de:	f7fe fd65 	bl	801c0ac <udp_sendto_if>
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d5e6:	6978      	ldr	r0, [r7, #20]
 801d5e8:	f7f7 fd36 	bl	8015058 <pbuf_free>
 801d5ec:	e001      	b.n	801d5f2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d5ee:	23ff      	movs	r3, #255	; 0xff
 801d5f0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d5f2:	69bb      	ldr	r3, [r7, #24]
 801d5f4:	799b      	ldrb	r3, [r3, #6]
 801d5f6:	2bff      	cmp	r3, #255	; 0xff
 801d5f8:	d005      	beq.n	801d606 <dhcp_rebind+0xde>
    dhcp->tries++;
 801d5fa:	69bb      	ldr	r3, [r7, #24]
 801d5fc:	799b      	ldrb	r3, [r3, #6]
 801d5fe:	3301      	adds	r3, #1
 801d600:	b2da      	uxtb	r2, r3
 801d602:	69bb      	ldr	r3, [r7, #24]
 801d604:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d606:	69bb      	ldr	r3, [r7, #24]
 801d608:	799b      	ldrb	r3, [r3, #6]
 801d60a:	2b09      	cmp	r3, #9
 801d60c:	d80a      	bhi.n	801d624 <dhcp_rebind+0xfc>
 801d60e:	69bb      	ldr	r3, [r7, #24]
 801d610:	799b      	ldrb	r3, [r3, #6]
 801d612:	b29b      	uxth	r3, r3
 801d614:	461a      	mov	r2, r3
 801d616:	0152      	lsls	r2, r2, #5
 801d618:	1ad2      	subs	r2, r2, r3
 801d61a:	0092      	lsls	r2, r2, #2
 801d61c:	4413      	add	r3, r2
 801d61e:	00db      	lsls	r3, r3, #3
 801d620:	b29b      	uxth	r3, r3
 801d622:	e001      	b.n	801d628 <dhcp_rebind+0x100>
 801d624:	f242 7310 	movw	r3, #10000	; 0x2710
 801d628:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d62a:	89fb      	ldrh	r3, [r7, #14]
 801d62c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d630:	4a0a      	ldr	r2, [pc, #40]	; (801d65c <dhcp_rebind+0x134>)
 801d632:	fb82 1203 	smull	r1, r2, r2, r3
 801d636:	1152      	asrs	r2, r2, #5
 801d638:	17db      	asrs	r3, r3, #31
 801d63a:	1ad3      	subs	r3, r2, r3
 801d63c:	b29a      	uxth	r2, r3
 801d63e:	69bb      	ldr	r3, [r7, #24]
 801d640:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d642:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d646:	4618      	mov	r0, r3
 801d648:	3720      	adds	r7, #32
 801d64a:	46bd      	mov	sp, r7
 801d64c:	bd80      	pop	{r7, pc}
 801d64e:	bf00      	nop
 801d650:	2000036c 	.word	0x2000036c
 801d654:	200055c8 	.word	0x200055c8
 801d658:	080274e8 	.word	0x080274e8
 801d65c:	10624dd3 	.word	0x10624dd3

0801d660 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d660:	b5b0      	push	{r4, r5, r7, lr}
 801d662:	b08a      	sub	sp, #40	; 0x28
 801d664:	af02      	add	r7, sp, #8
 801d666:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d66c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d66e:	2103      	movs	r1, #3
 801d670:	69b8      	ldr	r0, [r7, #24]
 801d672:	f000 f945 	bl	801d900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d676:	f107 030c 	add.w	r3, r7, #12
 801d67a:	2203      	movs	r2, #3
 801d67c:	69b9      	ldr	r1, [r7, #24]
 801d67e:	6878      	ldr	r0, [r7, #4]
 801d680:	f000 fdfa 	bl	801e278 <dhcp_create_msg>
 801d684:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d686:	697b      	ldr	r3, [r7, #20]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d066      	beq.n	801d75a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d68c:	697b      	ldr	r3, [r7, #20]
 801d68e:	685b      	ldr	r3, [r3, #4]
 801d690:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d692:	89b8      	ldrh	r0, [r7, #12]
 801d694:	693b      	ldr	r3, [r7, #16]
 801d696:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d69a:	2302      	movs	r3, #2
 801d69c:	2239      	movs	r2, #57	; 0x39
 801d69e:	f000 f949 	bl	801d934 <dhcp_option>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d6a6:	89b8      	ldrh	r0, [r7, #12]
 801d6a8:	693b      	ldr	r3, [r7, #16]
 801d6aa:	33f0      	adds	r3, #240	; 0xf0
 801d6ac:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	f000 f999 	bl	801d9e8 <dhcp_option_short>
 801d6b6:	4603      	mov	r3, r0
 801d6b8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d6ba:	89b8      	ldrh	r0, [r7, #12]
 801d6bc:	693b      	ldr	r3, [r7, #16]
 801d6be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d6c2:	2304      	movs	r3, #4
 801d6c4:	2232      	movs	r2, #50	; 0x32
 801d6c6:	f000 f935 	bl	801d934 <dhcp_option>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d6ce:	89bc      	ldrh	r4, [r7, #12]
 801d6d0:	693b      	ldr	r3, [r7, #16]
 801d6d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d6d6:	69bb      	ldr	r3, [r7, #24]
 801d6d8:	69db      	ldr	r3, [r3, #28]
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f7f5 f943 	bl	8012966 <lwip_htonl>
 801d6e0:	4603      	mov	r3, r0
 801d6e2:	461a      	mov	r2, r3
 801d6e4:	4629      	mov	r1, r5
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	f000 f9b0 	bl	801da4c <dhcp_option_long>
 801d6ec:	4603      	mov	r3, r0
 801d6ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d6f0:	89b8      	ldrh	r0, [r7, #12]
 801d6f2:	693b      	ldr	r3, [r7, #16]
 801d6f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d6f8:	2304      	movs	r3, #4
 801d6fa:	2237      	movs	r2, #55	; 0x37
 801d6fc:	f000 f91a 	bl	801d934 <dhcp_option>
 801d700:	4603      	mov	r3, r0
 801d702:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d704:	2300      	movs	r3, #0
 801d706:	77bb      	strb	r3, [r7, #30]
 801d708:	e00e      	b.n	801d728 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d70a:	89b8      	ldrh	r0, [r7, #12]
 801d70c:	693b      	ldr	r3, [r7, #16]
 801d70e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d712:	7fbb      	ldrb	r3, [r7, #30]
 801d714:	4a29      	ldr	r2, [pc, #164]	; (801d7bc <dhcp_reboot+0x15c>)
 801d716:	5cd3      	ldrb	r3, [r2, r3]
 801d718:	461a      	mov	r2, r3
 801d71a:	f000 f93f 	bl	801d99c <dhcp_option_byte>
 801d71e:	4603      	mov	r3, r0
 801d720:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d722:	7fbb      	ldrb	r3, [r7, #30]
 801d724:	3301      	adds	r3, #1
 801d726:	77bb      	strb	r3, [r7, #30]
 801d728:	7fbb      	ldrb	r3, [r7, #30]
 801d72a:	2b03      	cmp	r3, #3
 801d72c:	d9ed      	bls.n	801d70a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d72e:	89b8      	ldrh	r0, [r7, #12]
 801d730:	693b      	ldr	r3, [r7, #16]
 801d732:	33f0      	adds	r3, #240	; 0xf0
 801d734:	697a      	ldr	r2, [r7, #20]
 801d736:	4619      	mov	r1, r3
 801d738:	f000 fe74 	bl	801e424 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d73c:	4b20      	ldr	r3, [pc, #128]	; (801d7c0 <dhcp_reboot+0x160>)
 801d73e:	6818      	ldr	r0, [r3, #0]
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	9300      	str	r3, [sp, #0]
 801d744:	2343      	movs	r3, #67	; 0x43
 801d746:	4a1f      	ldr	r2, [pc, #124]	; (801d7c4 <dhcp_reboot+0x164>)
 801d748:	6979      	ldr	r1, [r7, #20]
 801d74a:	f7fe fcaf 	bl	801c0ac <udp_sendto_if>
 801d74e:	4603      	mov	r3, r0
 801d750:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d752:	6978      	ldr	r0, [r7, #20]
 801d754:	f7f7 fc80 	bl	8015058 <pbuf_free>
 801d758:	e001      	b.n	801d75e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d75a:	23ff      	movs	r3, #255	; 0xff
 801d75c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d75e:	69bb      	ldr	r3, [r7, #24]
 801d760:	799b      	ldrb	r3, [r3, #6]
 801d762:	2bff      	cmp	r3, #255	; 0xff
 801d764:	d005      	beq.n	801d772 <dhcp_reboot+0x112>
    dhcp->tries++;
 801d766:	69bb      	ldr	r3, [r7, #24]
 801d768:	799b      	ldrb	r3, [r3, #6]
 801d76a:	3301      	adds	r3, #1
 801d76c:	b2da      	uxtb	r2, r3
 801d76e:	69bb      	ldr	r3, [r7, #24]
 801d770:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d772:	69bb      	ldr	r3, [r7, #24]
 801d774:	799b      	ldrb	r3, [r3, #6]
 801d776:	2b09      	cmp	r3, #9
 801d778:	d80a      	bhi.n	801d790 <dhcp_reboot+0x130>
 801d77a:	69bb      	ldr	r3, [r7, #24]
 801d77c:	799b      	ldrb	r3, [r3, #6]
 801d77e:	b29b      	uxth	r3, r3
 801d780:	461a      	mov	r2, r3
 801d782:	0152      	lsls	r2, r2, #5
 801d784:	1ad2      	subs	r2, r2, r3
 801d786:	0092      	lsls	r2, r2, #2
 801d788:	4413      	add	r3, r2
 801d78a:	00db      	lsls	r3, r3, #3
 801d78c:	b29b      	uxth	r3, r3
 801d78e:	e001      	b.n	801d794 <dhcp_reboot+0x134>
 801d790:	f242 7310 	movw	r3, #10000	; 0x2710
 801d794:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d796:	89fb      	ldrh	r3, [r7, #14]
 801d798:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d79c:	4a0a      	ldr	r2, [pc, #40]	; (801d7c8 <dhcp_reboot+0x168>)
 801d79e:	fb82 1203 	smull	r1, r2, r2, r3
 801d7a2:	1152      	asrs	r2, r2, #5
 801d7a4:	17db      	asrs	r3, r3, #31
 801d7a6:	1ad3      	subs	r3, r2, r3
 801d7a8:	b29a      	uxth	r2, r3
 801d7aa:	69bb      	ldr	r3, [r7, #24]
 801d7ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d7ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	3720      	adds	r7, #32
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	bdb0      	pop	{r4, r5, r7, pc}
 801d7ba:	bf00      	nop
 801d7bc:	2000036c 	.word	0x2000036c
 801d7c0:	200055c8 	.word	0x200055c8
 801d7c4:	080274e8 	.word	0x080274e8
 801d7c8:	10624dd3 	.word	0x10624dd3

0801d7cc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801d7cc:	b5b0      	push	{r4, r5, r7, lr}
 801d7ce:	b08a      	sub	sp, #40	; 0x28
 801d7d0:	af02      	add	r7, sp, #8
 801d7d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801d7da:	69fb      	ldr	r3, [r7, #28]
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	f000 8084 	beq.w	801d8ea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801d7e2:	69fb      	ldr	r3, [r7, #28]
 801d7e4:	795b      	ldrb	r3, [r3, #5]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	f000 8081 	beq.w	801d8ee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d7ec:	69fb      	ldr	r3, [r7, #28]
 801d7ee:	699b      	ldr	r3, [r3, #24]
 801d7f0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d7f2:	69fb      	ldr	r3, [r7, #28]
 801d7f4:	2200      	movs	r2, #0
 801d7f6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d7f8:	69fb      	ldr	r3, [r7, #28]
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d7fe:	69fb      	ldr	r3, [r7, #28]
 801d800:	2200      	movs	r2, #0
 801d802:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d804:	69fb      	ldr	r3, [r7, #28]
 801d806:	2200      	movs	r2, #0
 801d808:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d80a:	69fb      	ldr	r3, [r7, #28]
 801d80c:	2200      	movs	r2, #0
 801d80e:	631a      	str	r2, [r3, #48]	; 0x30
 801d810:	69fb      	ldr	r3, [r7, #28]
 801d812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d814:	69fb      	ldr	r3, [r7, #28]
 801d816:	62da      	str	r2, [r3, #44]	; 0x2c
 801d818:	69fb      	ldr	r3, [r7, #28]
 801d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d81c:	69fb      	ldr	r3, [r7, #28]
 801d81e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d820:	69fb      	ldr	r3, [r7, #28]
 801d822:	2200      	movs	r2, #0
 801d824:	829a      	strh	r2, [r3, #20]
 801d826:	69fb      	ldr	r3, [r7, #28]
 801d828:	8a9a      	ldrh	r2, [r3, #20]
 801d82a:	69fb      	ldr	r3, [r7, #28]
 801d82c:	825a      	strh	r2, [r3, #18]
 801d82e:	69fb      	ldr	r3, [r7, #28]
 801d830:	8a5a      	ldrh	r2, [r3, #18]
 801d832:	69fb      	ldr	r3, [r7, #28]
 801d834:	821a      	strh	r2, [r3, #16]
 801d836:	69fb      	ldr	r3, [r7, #28]
 801d838:	8a1a      	ldrh	r2, [r3, #16]
 801d83a:	69fb      	ldr	r3, [r7, #28]
 801d83c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	f000 fe1e 	bl	801e480 <dhcp_supplied_address>
 801d844:	4603      	mov	r3, r0
 801d846:	2b00      	cmp	r3, #0
 801d848:	d03b      	beq.n	801d8c2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d84a:	f107 030e 	add.w	r3, r7, #14
 801d84e:	2207      	movs	r2, #7
 801d850:	69f9      	ldr	r1, [r7, #28]
 801d852:	6878      	ldr	r0, [r7, #4]
 801d854:	f000 fd10 	bl	801e278 <dhcp_create_msg>
 801d858:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801d85a:	69bb      	ldr	r3, [r7, #24]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d030      	beq.n	801d8c2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d860:	69bb      	ldr	r3, [r7, #24]
 801d862:	685b      	ldr	r3, [r3, #4]
 801d864:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d866:	89f8      	ldrh	r0, [r7, #14]
 801d868:	697b      	ldr	r3, [r7, #20]
 801d86a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d86e:	2304      	movs	r3, #4
 801d870:	2236      	movs	r2, #54	; 0x36
 801d872:	f000 f85f 	bl	801d934 <dhcp_option>
 801d876:	4603      	mov	r3, r0
 801d878:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d87a:	89fc      	ldrh	r4, [r7, #14]
 801d87c:	697b      	ldr	r3, [r7, #20]
 801d87e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d882:	693b      	ldr	r3, [r7, #16]
 801d884:	4618      	mov	r0, r3
 801d886:	f7f5 f86e 	bl	8012966 <lwip_htonl>
 801d88a:	4603      	mov	r3, r0
 801d88c:	461a      	mov	r2, r3
 801d88e:	4629      	mov	r1, r5
 801d890:	4620      	mov	r0, r4
 801d892:	f000 f8db 	bl	801da4c <dhcp_option_long>
 801d896:	4603      	mov	r3, r0
 801d898:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d89a:	89f8      	ldrh	r0, [r7, #14]
 801d89c:	697b      	ldr	r3, [r7, #20]
 801d89e:	33f0      	adds	r3, #240	; 0xf0
 801d8a0:	69ba      	ldr	r2, [r7, #24]
 801d8a2:	4619      	mov	r1, r3
 801d8a4:	f000 fdbe 	bl	801e424 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d8a8:	4b13      	ldr	r3, [pc, #76]	; (801d8f8 <dhcp_release_and_stop+0x12c>)
 801d8aa:	6818      	ldr	r0, [r3, #0]
 801d8ac:	f107 0210 	add.w	r2, r7, #16
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	9300      	str	r3, [sp, #0]
 801d8b4:	2343      	movs	r3, #67	; 0x43
 801d8b6:	69b9      	ldr	r1, [r7, #24]
 801d8b8:	f7fe fbf8 	bl	801c0ac <udp_sendto_if>
      pbuf_free(p_out);
 801d8bc:	69b8      	ldr	r0, [r7, #24]
 801d8be:	f7f7 fbcb 	bl	8015058 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d8c2:	4b0e      	ldr	r3, [pc, #56]	; (801d8fc <dhcp_release_and_stop+0x130>)
 801d8c4:	4a0d      	ldr	r2, [pc, #52]	; (801d8fc <dhcp_release_and_stop+0x130>)
 801d8c6:	490d      	ldr	r1, [pc, #52]	; (801d8fc <dhcp_release_and_stop+0x130>)
 801d8c8:	6878      	ldr	r0, [r7, #4]
 801d8ca:	f7f6 feb7 	bl	801463c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d8ce:	2100      	movs	r1, #0
 801d8d0:	69f8      	ldr	r0, [r7, #28]
 801d8d2:	f000 f815 	bl	801d900 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801d8d6:	69fb      	ldr	r3, [r7, #28]
 801d8d8:	791b      	ldrb	r3, [r3, #4]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	d008      	beq.n	801d8f0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d8de:	f7fe ff65 	bl	801c7ac <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d8e2:	69fb      	ldr	r3, [r7, #28]
 801d8e4:	2200      	movs	r2, #0
 801d8e6:	711a      	strb	r2, [r3, #4]
 801d8e8:	e002      	b.n	801d8f0 <dhcp_release_and_stop+0x124>
    return;
 801d8ea:	bf00      	nop
 801d8ec:	e000      	b.n	801d8f0 <dhcp_release_and_stop+0x124>
    return;
 801d8ee:	bf00      	nop
  }
}
 801d8f0:	3720      	adds	r7, #32
 801d8f2:	46bd      	mov	sp, r7
 801d8f4:	bdb0      	pop	{r4, r5, r7, pc}
 801d8f6:	bf00      	nop
 801d8f8:	200055c8 	.word	0x200055c8
 801d8fc:	080274e4 	.word	0x080274e4

0801d900 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d900:	b480      	push	{r7}
 801d902:	b083      	sub	sp, #12
 801d904:	af00      	add	r7, sp, #0
 801d906:	6078      	str	r0, [r7, #4]
 801d908:	460b      	mov	r3, r1
 801d90a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	795b      	ldrb	r3, [r3, #5]
 801d910:	78fa      	ldrb	r2, [r7, #3]
 801d912:	429a      	cmp	r2, r3
 801d914:	d008      	beq.n	801d928 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	78fa      	ldrb	r2, [r7, #3]
 801d91a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	2200      	movs	r2, #0
 801d920:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801d922:	687b      	ldr	r3, [r7, #4]
 801d924:	2200      	movs	r2, #0
 801d926:	811a      	strh	r2, [r3, #8]
  }
}
 801d928:	bf00      	nop
 801d92a:	370c      	adds	r7, #12
 801d92c:	46bd      	mov	sp, r7
 801d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d932:	4770      	bx	lr

0801d934 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801d934:	b580      	push	{r7, lr}
 801d936:	b082      	sub	sp, #8
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6039      	str	r1, [r7, #0]
 801d93c:	4611      	mov	r1, r2
 801d93e:	461a      	mov	r2, r3
 801d940:	4603      	mov	r3, r0
 801d942:	80fb      	strh	r3, [r7, #6]
 801d944:	460b      	mov	r3, r1
 801d946:	717b      	strb	r3, [r7, #5]
 801d948:	4613      	mov	r3, r2
 801d94a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d94c:	88fa      	ldrh	r2, [r7, #6]
 801d94e:	793b      	ldrb	r3, [r7, #4]
 801d950:	4413      	add	r3, r2
 801d952:	3302      	adds	r3, #2
 801d954:	2b44      	cmp	r3, #68	; 0x44
 801d956:	d906      	bls.n	801d966 <dhcp_option+0x32>
 801d958:	4b0d      	ldr	r3, [pc, #52]	; (801d990 <dhcp_option+0x5c>)
 801d95a:	f240 529a 	movw	r2, #1434	; 0x59a
 801d95e:	490d      	ldr	r1, [pc, #52]	; (801d994 <dhcp_option+0x60>)
 801d960:	480d      	ldr	r0, [pc, #52]	; (801d998 <dhcp_option+0x64>)
 801d962:	f003 fda3 	bl	80214ac <iprintf>
  options[options_out_len++] = option_type;
 801d966:	88fb      	ldrh	r3, [r7, #6]
 801d968:	1c5a      	adds	r2, r3, #1
 801d96a:	80fa      	strh	r2, [r7, #6]
 801d96c:	461a      	mov	r2, r3
 801d96e:	683b      	ldr	r3, [r7, #0]
 801d970:	4413      	add	r3, r2
 801d972:	797a      	ldrb	r2, [r7, #5]
 801d974:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801d976:	88fb      	ldrh	r3, [r7, #6]
 801d978:	1c5a      	adds	r2, r3, #1
 801d97a:	80fa      	strh	r2, [r7, #6]
 801d97c:	461a      	mov	r2, r3
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	4413      	add	r3, r2
 801d982:	793a      	ldrb	r2, [r7, #4]
 801d984:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d986:	88fb      	ldrh	r3, [r7, #6]
}
 801d988:	4618      	mov	r0, r3
 801d98a:	3708      	adds	r7, #8
 801d98c:	46bd      	mov	sp, r7
 801d98e:	bd80      	pop	{r7, pc}
 801d990:	08026694 	.word	0x08026694
 801d994:	08026828 	.word	0x08026828
 801d998:	080266f4 	.word	0x080266f4

0801d99c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b082      	sub	sp, #8
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	6039      	str	r1, [r7, #0]
 801d9a6:	80fb      	strh	r3, [r7, #6]
 801d9a8:	4613      	mov	r3, r2
 801d9aa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d9ac:	88fb      	ldrh	r3, [r7, #6]
 801d9ae:	2b43      	cmp	r3, #67	; 0x43
 801d9b0:	d906      	bls.n	801d9c0 <dhcp_option_byte+0x24>
 801d9b2:	4b0a      	ldr	r3, [pc, #40]	; (801d9dc <dhcp_option_byte+0x40>)
 801d9b4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d9b8:	4909      	ldr	r1, [pc, #36]	; (801d9e0 <dhcp_option_byte+0x44>)
 801d9ba:	480a      	ldr	r0, [pc, #40]	; (801d9e4 <dhcp_option_byte+0x48>)
 801d9bc:	f003 fd76 	bl	80214ac <iprintf>
  options[options_out_len++] = value;
 801d9c0:	88fb      	ldrh	r3, [r7, #6]
 801d9c2:	1c5a      	adds	r2, r3, #1
 801d9c4:	80fa      	strh	r2, [r7, #6]
 801d9c6:	461a      	mov	r2, r3
 801d9c8:	683b      	ldr	r3, [r7, #0]
 801d9ca:	4413      	add	r3, r2
 801d9cc:	797a      	ldrb	r2, [r7, #5]
 801d9ce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d9d0:	88fb      	ldrh	r3, [r7, #6]
}
 801d9d2:	4618      	mov	r0, r3
 801d9d4:	3708      	adds	r7, #8
 801d9d6:	46bd      	mov	sp, r7
 801d9d8:	bd80      	pop	{r7, pc}
 801d9da:	bf00      	nop
 801d9dc:	08026694 	.word	0x08026694
 801d9e0:	0802686c 	.word	0x0802686c
 801d9e4:	080266f4 	.word	0x080266f4

0801d9e8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d9e8:	b580      	push	{r7, lr}
 801d9ea:	b082      	sub	sp, #8
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	4603      	mov	r3, r0
 801d9f0:	6039      	str	r1, [r7, #0]
 801d9f2:	80fb      	strh	r3, [r7, #6]
 801d9f4:	4613      	mov	r3, r2
 801d9f6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d9f8:	88fb      	ldrh	r3, [r7, #6]
 801d9fa:	3302      	adds	r3, #2
 801d9fc:	2b44      	cmp	r3, #68	; 0x44
 801d9fe:	d906      	bls.n	801da0e <dhcp_option_short+0x26>
 801da00:	4b0f      	ldr	r3, [pc, #60]	; (801da40 <dhcp_option_short+0x58>)
 801da02:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801da06:	490f      	ldr	r1, [pc, #60]	; (801da44 <dhcp_option_short+0x5c>)
 801da08:	480f      	ldr	r0, [pc, #60]	; (801da48 <dhcp_option_short+0x60>)
 801da0a:	f003 fd4f 	bl	80214ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801da0e:	88bb      	ldrh	r3, [r7, #4]
 801da10:	0a1b      	lsrs	r3, r3, #8
 801da12:	b29a      	uxth	r2, r3
 801da14:	88fb      	ldrh	r3, [r7, #6]
 801da16:	1c59      	adds	r1, r3, #1
 801da18:	80f9      	strh	r1, [r7, #6]
 801da1a:	4619      	mov	r1, r3
 801da1c:	683b      	ldr	r3, [r7, #0]
 801da1e:	440b      	add	r3, r1
 801da20:	b2d2      	uxtb	r2, r2
 801da22:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801da24:	88fb      	ldrh	r3, [r7, #6]
 801da26:	1c5a      	adds	r2, r3, #1
 801da28:	80fa      	strh	r2, [r7, #6]
 801da2a:	461a      	mov	r2, r3
 801da2c:	683b      	ldr	r3, [r7, #0]
 801da2e:	4413      	add	r3, r2
 801da30:	88ba      	ldrh	r2, [r7, #4]
 801da32:	b2d2      	uxtb	r2, r2
 801da34:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801da36:	88fb      	ldrh	r3, [r7, #6]
}
 801da38:	4618      	mov	r0, r3
 801da3a:	3708      	adds	r7, #8
 801da3c:	46bd      	mov	sp, r7
 801da3e:	bd80      	pop	{r7, pc}
 801da40:	08026694 	.word	0x08026694
 801da44:	080268a4 	.word	0x080268a4
 801da48:	080266f4 	.word	0x080266f4

0801da4c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801da4c:	b580      	push	{r7, lr}
 801da4e:	b084      	sub	sp, #16
 801da50:	af00      	add	r7, sp, #0
 801da52:	4603      	mov	r3, r0
 801da54:	60b9      	str	r1, [r7, #8]
 801da56:	607a      	str	r2, [r7, #4]
 801da58:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801da5a:	89fb      	ldrh	r3, [r7, #14]
 801da5c:	3304      	adds	r3, #4
 801da5e:	2b44      	cmp	r3, #68	; 0x44
 801da60:	d906      	bls.n	801da70 <dhcp_option_long+0x24>
 801da62:	4b19      	ldr	r3, [pc, #100]	; (801dac8 <dhcp_option_long+0x7c>)
 801da64:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801da68:	4918      	ldr	r1, [pc, #96]	; (801dacc <dhcp_option_long+0x80>)
 801da6a:	4819      	ldr	r0, [pc, #100]	; (801dad0 <dhcp_option_long+0x84>)
 801da6c:	f003 fd1e 	bl	80214ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	0e1a      	lsrs	r2, r3, #24
 801da74:	89fb      	ldrh	r3, [r7, #14]
 801da76:	1c59      	adds	r1, r3, #1
 801da78:	81f9      	strh	r1, [r7, #14]
 801da7a:	4619      	mov	r1, r3
 801da7c:	68bb      	ldr	r3, [r7, #8]
 801da7e:	440b      	add	r3, r1
 801da80:	b2d2      	uxtb	r2, r2
 801da82:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	0c1a      	lsrs	r2, r3, #16
 801da88:	89fb      	ldrh	r3, [r7, #14]
 801da8a:	1c59      	adds	r1, r3, #1
 801da8c:	81f9      	strh	r1, [r7, #14]
 801da8e:	4619      	mov	r1, r3
 801da90:	68bb      	ldr	r3, [r7, #8]
 801da92:	440b      	add	r3, r1
 801da94:	b2d2      	uxtb	r2, r2
 801da96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	0a1a      	lsrs	r2, r3, #8
 801da9c:	89fb      	ldrh	r3, [r7, #14]
 801da9e:	1c59      	adds	r1, r3, #1
 801daa0:	81f9      	strh	r1, [r7, #14]
 801daa2:	4619      	mov	r1, r3
 801daa4:	68bb      	ldr	r3, [r7, #8]
 801daa6:	440b      	add	r3, r1
 801daa8:	b2d2      	uxtb	r2, r2
 801daaa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801daac:	89fb      	ldrh	r3, [r7, #14]
 801daae:	1c5a      	adds	r2, r3, #1
 801dab0:	81fa      	strh	r2, [r7, #14]
 801dab2:	461a      	mov	r2, r3
 801dab4:	68bb      	ldr	r3, [r7, #8]
 801dab6:	4413      	add	r3, r2
 801dab8:	687a      	ldr	r2, [r7, #4]
 801daba:	b2d2      	uxtb	r2, r2
 801dabc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801dabe:	89fb      	ldrh	r3, [r7, #14]
}
 801dac0:	4618      	mov	r0, r3
 801dac2:	3710      	adds	r7, #16
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bd80      	pop	{r7, pc}
 801dac8:	08026694 	.word	0x08026694
 801dacc:	080268e0 	.word	0x080268e0
 801dad0:	080266f4 	.word	0x080266f4

0801dad4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801dad4:	b580      	push	{r7, lr}
 801dad6:	b090      	sub	sp, #64	; 0x40
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]
 801dadc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801dade:	2300      	movs	r3, #0
 801dae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801dae2:	2300      	movs	r3, #0
 801dae4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801dae6:	220a      	movs	r2, #10
 801dae8:	2100      	movs	r1, #0
 801daea:	48ba      	ldr	r0, [pc, #744]	; (801ddd4 <dhcp_parse_reply+0x300>)
 801daec:	f003 fc1c 	bl	8021328 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	895b      	ldrh	r3, [r3, #10]
 801daf4:	2b2b      	cmp	r3, #43	; 0x2b
 801daf6:	d802      	bhi.n	801dafe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801daf8:	f06f 0301 	mvn.w	r3, #1
 801dafc:	e2e9      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	685b      	ldr	r3, [r3, #4]
 801db02:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801db04:	23f0      	movs	r3, #240	; 0xf0
 801db06:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	891b      	ldrh	r3, [r3, #8]
 801db0c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801db12:	e00c      	b.n	801db2e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db16:	895b      	ldrh	r3, [r3, #10]
 801db18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801db1a:	1ad3      	subs	r3, r2, r3
 801db1c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801db1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db20:	895b      	ldrh	r3, [r3, #10]
 801db22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801db24:	1ad3      	subs	r3, r2, r3
 801db26:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db30:	2b00      	cmp	r3, #0
 801db32:	d004      	beq.n	801db3e <dhcp_parse_reply+0x6a>
 801db34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db36:	895b      	ldrh	r3, [r3, #10]
 801db38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801db3a:	429a      	cmp	r2, r3
 801db3c:	d2ea      	bcs.n	801db14 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db40:	2b00      	cmp	r3, #0
 801db42:	d102      	bne.n	801db4a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801db44:	f06f 0301 	mvn.w	r3, #1
 801db48:	e2c3      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 801db4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801db4c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801db4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801db50:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db54:	685b      	ldr	r3, [r3, #4]
 801db56:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801db58:	e267      	b.n	801e02a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801db5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801db5e:	4413      	add	r3, r2
 801db60:	781b      	ldrb	r3, [r3, #0]
 801db62:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801db64:	2300      	movs	r3, #0
 801db66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801db6a:	f04f 33ff 	mov.w	r3, #4294967295
 801db6e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801db70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db72:	3302      	adds	r3, #2
 801db74:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801db76:	8bfa      	ldrh	r2, [r7, #30]
 801db78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db7a:	429a      	cmp	r2, r3
 801db7c:	d202      	bcs.n	801db84 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801db7e:	f06f 0301 	mvn.w	r3, #1
 801db82:	e2a6      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801db84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db86:	3301      	adds	r3, #1
 801db88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db8a:	8952      	ldrh	r2, [r2, #10]
 801db8c:	4293      	cmp	r3, r2
 801db8e:	da07      	bge.n	801dba0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801db90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db92:	3301      	adds	r3, #1
 801db94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801db96:	4413      	add	r3, r2
 801db98:	781b      	ldrb	r3, [r3, #0]
 801db9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801db9e:	e00b      	b.n	801dbb8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d004      	beq.n	801dbb2 <dhcp_parse_reply+0xde>
 801dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	685b      	ldr	r3, [r3, #4]
 801dbae:	781b      	ldrb	r3, [r3, #0]
 801dbb0:	e000      	b.n	801dbb4 <dhcp_parse_reply+0xe0>
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801dbb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dbbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801dbc0:	7dfb      	ldrb	r3, [r7, #23]
 801dbc2:	2b3b      	cmp	r3, #59	; 0x3b
 801dbc4:	f200 815a 	bhi.w	801de7c <dhcp_parse_reply+0x3a8>
 801dbc8:	a201      	add	r2, pc, #4	; (adr r2, 801dbd0 <dhcp_parse_reply+0xfc>)
 801dbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbce:	bf00      	nop
 801dbd0:	0801dcc1 	.word	0x0801dcc1
 801dbd4:	0801dcd1 	.word	0x0801dcd1
 801dbd8:	0801de7d 	.word	0x0801de7d
 801dbdc:	0801dcf3 	.word	0x0801dcf3
 801dbe0:	0801de7d 	.word	0x0801de7d
 801dbe4:	0801de7d 	.word	0x0801de7d
 801dbe8:	0801dd1f 	.word	0x0801dd1f
 801dbec:	0801de7d 	.word	0x0801de7d
 801dbf0:	0801de7d 	.word	0x0801de7d
 801dbf4:	0801de7d 	.word	0x0801de7d
 801dbf8:	0801de7d 	.word	0x0801de7d
 801dbfc:	0801de7d 	.word	0x0801de7d
 801dc00:	0801de7d 	.word	0x0801de7d
 801dc04:	0801de7d 	.word	0x0801de7d
 801dc08:	0801de7d 	.word	0x0801de7d
 801dc0c:	0801de7d 	.word	0x0801de7d
 801dc10:	0801de7d 	.word	0x0801de7d
 801dc14:	0801de7d 	.word	0x0801de7d
 801dc18:	0801de7d 	.word	0x0801de7d
 801dc1c:	0801de7d 	.word	0x0801de7d
 801dc20:	0801de7d 	.word	0x0801de7d
 801dc24:	0801de7d 	.word	0x0801de7d
 801dc28:	0801de7d 	.word	0x0801de7d
 801dc2c:	0801de7d 	.word	0x0801de7d
 801dc30:	0801de7d 	.word	0x0801de7d
 801dc34:	0801de7d 	.word	0x0801de7d
 801dc38:	0801de7d 	.word	0x0801de7d
 801dc3c:	0801de7d 	.word	0x0801de7d
 801dc40:	0801de7d 	.word	0x0801de7d
 801dc44:	0801de7d 	.word	0x0801de7d
 801dc48:	0801de7d 	.word	0x0801de7d
 801dc4c:	0801de7d 	.word	0x0801de7d
 801dc50:	0801de7d 	.word	0x0801de7d
 801dc54:	0801de7d 	.word	0x0801de7d
 801dc58:	0801de7d 	.word	0x0801de7d
 801dc5c:	0801de7d 	.word	0x0801de7d
 801dc60:	0801de7d 	.word	0x0801de7d
 801dc64:	0801de7d 	.word	0x0801de7d
 801dc68:	0801de7d 	.word	0x0801de7d
 801dc6c:	0801de7d 	.word	0x0801de7d
 801dc70:	0801de7d 	.word	0x0801de7d
 801dc74:	0801de7d 	.word	0x0801de7d
 801dc78:	0801de7d 	.word	0x0801de7d
 801dc7c:	0801de7d 	.word	0x0801de7d
 801dc80:	0801de7d 	.word	0x0801de7d
 801dc84:	0801de7d 	.word	0x0801de7d
 801dc88:	0801de7d 	.word	0x0801de7d
 801dc8c:	0801de7d 	.word	0x0801de7d
 801dc90:	0801de7d 	.word	0x0801de7d
 801dc94:	0801de7d 	.word	0x0801de7d
 801dc98:	0801de7d 	.word	0x0801de7d
 801dc9c:	0801dd75 	.word	0x0801dd75
 801dca0:	0801dd97 	.word	0x0801dd97
 801dca4:	0801ddf5 	.word	0x0801ddf5
 801dca8:	0801de17 	.word	0x0801de17
 801dcac:	0801de7d 	.word	0x0801de7d
 801dcb0:	0801de7d 	.word	0x0801de7d
 801dcb4:	0801de7d 	.word	0x0801de7d
 801dcb8:	0801de39 	.word	0x0801de39
 801dcbc:	0801de5b 	.word	0x0801de5b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801dcc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dcca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801dcce:	e0d9      	b.n	801de84 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dcd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dcd4:	2b04      	cmp	r3, #4
 801dcd6:	d009      	beq.n	801dcec <dhcp_parse_reply+0x218>
 801dcd8:	4b3f      	ldr	r3, [pc, #252]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801dcda:	f240 622e 	movw	r2, #1582	; 0x62e
 801dcde:	493f      	ldr	r1, [pc, #252]	; (801dddc <dhcp_parse_reply+0x308>)
 801dce0:	483f      	ldr	r0, [pc, #252]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801dce2:	f003 fbe3 	bl	80214ac <iprintf>
 801dce6:	f06f 0305 	mvn.w	r3, #5
 801dcea:	e1f2      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801dcec:	2306      	movs	r3, #6
 801dcee:	623b      	str	r3, [r7, #32]
        break;
 801dcf0:	e0c8      	b.n	801de84 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801dcf2:	2304      	movs	r3, #4
 801dcf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801dcf8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801dcfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dd00:	429a      	cmp	r2, r3
 801dd02:	d209      	bcs.n	801dd18 <dhcp_parse_reply+0x244>
 801dd04:	4b34      	ldr	r3, [pc, #208]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801dd06:	f240 6233 	movw	r2, #1587	; 0x633
 801dd0a:	4936      	ldr	r1, [pc, #216]	; (801dde4 <dhcp_parse_reply+0x310>)
 801dd0c:	4834      	ldr	r0, [pc, #208]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801dd0e:	f003 fbcd 	bl	80214ac <iprintf>
 801dd12:	f06f 0305 	mvn.w	r3, #5
 801dd16:	e1dc      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801dd18:	2307      	movs	r3, #7
 801dd1a:	623b      	str	r3, [r7, #32]
        break;
 801dd1c:	e0b2      	b.n	801de84 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801dd1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd22:	f003 0303 	and.w	r3, r3, #3
 801dd26:	b2db      	uxtb	r3, r3
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d009      	beq.n	801dd40 <dhcp_parse_reply+0x26c>
 801dd2c:	4b2a      	ldr	r3, [pc, #168]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801dd2e:	f240 6239 	movw	r2, #1593	; 0x639
 801dd32:	492d      	ldr	r1, [pc, #180]	; (801dde8 <dhcp_parse_reply+0x314>)
 801dd34:	482a      	ldr	r0, [pc, #168]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801dd36:	f003 fbb9 	bl	80214ac <iprintf>
 801dd3a:	f06f 0305 	mvn.w	r3, #5
 801dd3e:	e1c8      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801dd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd44:	2b08      	cmp	r3, #8
 801dd46:	bf28      	it	cs
 801dd48:	2308      	movcs	r3, #8
 801dd4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801dd4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801dd52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dd56:	429a      	cmp	r2, r3
 801dd58:	d209      	bcs.n	801dd6e <dhcp_parse_reply+0x29a>
 801dd5a:	4b1f      	ldr	r3, [pc, #124]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801dd5c:	f240 623c 	movw	r2, #1596	; 0x63c
 801dd60:	4920      	ldr	r1, [pc, #128]	; (801dde4 <dhcp_parse_reply+0x310>)
 801dd62:	481f      	ldr	r0, [pc, #124]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801dd64:	f003 fba2 	bl	80214ac <iprintf>
 801dd68:	f06f 0305 	mvn.w	r3, #5
 801dd6c:	e1b1      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801dd6e:	2308      	movs	r3, #8
 801dd70:	623b      	str	r3, [r7, #32]
        break;
 801dd72:	e087      	b.n	801de84 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd78:	2b04      	cmp	r3, #4
 801dd7a:	d009      	beq.n	801dd90 <dhcp_parse_reply+0x2bc>
 801dd7c:	4b16      	ldr	r3, [pc, #88]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801dd7e:	f240 6241 	movw	r2, #1601	; 0x641
 801dd82:	4916      	ldr	r1, [pc, #88]	; (801dddc <dhcp_parse_reply+0x308>)
 801dd84:	4816      	ldr	r0, [pc, #88]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801dd86:	f003 fb91 	bl	80214ac <iprintf>
 801dd8a:	f06f 0305 	mvn.w	r3, #5
 801dd8e:	e1a0      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801dd90:	2303      	movs	r3, #3
 801dd92:	623b      	str	r3, [r7, #32]
        break;
 801dd94:	e076      	b.n	801de84 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801dd96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd9a:	2b01      	cmp	r3, #1
 801dd9c:	d009      	beq.n	801ddb2 <dhcp_parse_reply+0x2de>
 801dd9e:	4b0e      	ldr	r3, [pc, #56]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801dda0:	f240 624f 	movw	r2, #1615	; 0x64f
 801dda4:	4911      	ldr	r1, [pc, #68]	; (801ddec <dhcp_parse_reply+0x318>)
 801dda6:	480e      	ldr	r0, [pc, #56]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801dda8:	f003 fb80 	bl	80214ac <iprintf>
 801ddac:	f06f 0305 	mvn.w	r3, #5
 801ddb0:	e18f      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ddb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ddb4:	2bf0      	cmp	r3, #240	; 0xf0
 801ddb6:	d009      	beq.n	801ddcc <dhcp_parse_reply+0x2f8>
 801ddb8:	4b07      	ldr	r3, [pc, #28]	; (801ddd8 <dhcp_parse_reply+0x304>)
 801ddba:	f240 6251 	movw	r2, #1617	; 0x651
 801ddbe:	490c      	ldr	r1, [pc, #48]	; (801ddf0 <dhcp_parse_reply+0x31c>)
 801ddc0:	4807      	ldr	r0, [pc, #28]	; (801dde0 <dhcp_parse_reply+0x30c>)
 801ddc2:	f003 fb73 	bl	80214ac <iprintf>
 801ddc6:	f06f 0305 	mvn.w	r3, #5
 801ddca:	e182      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801ddcc:	2300      	movs	r3, #0
 801ddce:	623b      	str	r3, [r7, #32]
        break;
 801ddd0:	e058      	b.n	801de84 <dhcp_parse_reply+0x3b0>
 801ddd2:	bf00      	nop
 801ddd4:	20016c68 	.word	0x20016c68
 801ddd8:	08026694 	.word	0x08026694
 801dddc:	0802691c 	.word	0x0802691c
 801dde0:	080266f4 	.word	0x080266f4
 801dde4:	08026928 	.word	0x08026928
 801dde8:	0802693c 	.word	0x0802693c
 801ddec:	0802694c 	.word	0x0802694c
 801ddf0:	08026958 	.word	0x08026958
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ddf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ddf8:	2b01      	cmp	r3, #1
 801ddfa:	d009      	beq.n	801de10 <dhcp_parse_reply+0x33c>
 801ddfc:	4ba5      	ldr	r3, [pc, #660]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801ddfe:	f240 6255 	movw	r2, #1621	; 0x655
 801de02:	49a5      	ldr	r1, [pc, #660]	; (801e098 <dhcp_parse_reply+0x5c4>)
 801de04:	48a5      	ldr	r0, [pc, #660]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801de06:	f003 fb51 	bl	80214ac <iprintf>
 801de0a:	f06f 0305 	mvn.w	r3, #5
 801de0e:	e160      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801de10:	2301      	movs	r3, #1
 801de12:	623b      	str	r3, [r7, #32]
        break;
 801de14:	e036      	b.n	801de84 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801de16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801de1a:	2b04      	cmp	r3, #4
 801de1c:	d009      	beq.n	801de32 <dhcp_parse_reply+0x35e>
 801de1e:	4b9d      	ldr	r3, [pc, #628]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801de20:	f240 6259 	movw	r2, #1625	; 0x659
 801de24:	499e      	ldr	r1, [pc, #632]	; (801e0a0 <dhcp_parse_reply+0x5cc>)
 801de26:	489d      	ldr	r0, [pc, #628]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801de28:	f003 fb40 	bl	80214ac <iprintf>
 801de2c:	f06f 0305 	mvn.w	r3, #5
 801de30:	e14f      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801de32:	2302      	movs	r3, #2
 801de34:	623b      	str	r3, [r7, #32]
        break;
 801de36:	e025      	b.n	801de84 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801de38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801de3c:	2b04      	cmp	r3, #4
 801de3e:	d009      	beq.n	801de54 <dhcp_parse_reply+0x380>
 801de40:	4b94      	ldr	r3, [pc, #592]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801de42:	f240 625d 	movw	r2, #1629	; 0x65d
 801de46:	4996      	ldr	r1, [pc, #600]	; (801e0a0 <dhcp_parse_reply+0x5cc>)
 801de48:	4894      	ldr	r0, [pc, #592]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801de4a:	f003 fb2f 	bl	80214ac <iprintf>
 801de4e:	f06f 0305 	mvn.w	r3, #5
 801de52:	e13e      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 801de54:	2304      	movs	r3, #4
 801de56:	623b      	str	r3, [r7, #32]
        break;
 801de58:	e014      	b.n	801de84 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801de5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801de5e:	2b04      	cmp	r3, #4
 801de60:	d009      	beq.n	801de76 <dhcp_parse_reply+0x3a2>
 801de62:	4b8c      	ldr	r3, [pc, #560]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801de64:	f240 6261 	movw	r2, #1633	; 0x661
 801de68:	498d      	ldr	r1, [pc, #564]	; (801e0a0 <dhcp_parse_reply+0x5cc>)
 801de6a:	488c      	ldr	r0, [pc, #560]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801de6c:	f003 fb1e 	bl	80214ac <iprintf>
 801de70:	f06f 0305 	mvn.w	r3, #5
 801de74:	e12d      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 801de76:	2305      	movs	r3, #5
 801de78:	623b      	str	r3, [r7, #32]
        break;
 801de7a:	e003      	b.n	801de84 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801de7c:	2300      	movs	r3, #0
 801de7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801de82:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801de84:	7dfb      	ldrb	r3, [r7, #23]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d103      	bne.n	801de92 <dhcp_parse_reply+0x3be>
      offset++;
 801de8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801de8c:	3301      	adds	r3, #1
 801de8e:	877b      	strh	r3, [r7, #58]	; 0x3a
 801de90:	e0a1      	b.n	801dfd6 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801de92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801de94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801de98:	4413      	add	r3, r2
 801de9a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801de9e:	4293      	cmp	r3, r2
 801dea0:	dd02      	ble.n	801dea8 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801dea2:	f06f 0301 	mvn.w	r3, #1
 801dea6:	e114      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 801dea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801deac:	b29a      	uxth	r2, r3
 801deae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801deb0:	4413      	add	r3, r2
 801deb2:	b29b      	uxth	r3, r3
 801deb4:	3302      	adds	r3, #2
 801deb6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801deb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801debc:	2b00      	cmp	r3, #0
 801debe:	f000 808a 	beq.w	801dfd6 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801dec2:	2300      	movs	r3, #0
 801dec4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801dec6:	6a3b      	ldr	r3, [r7, #32]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	db02      	blt.n	801ded2 <dhcp_parse_reply+0x3fe>
 801decc:	6a3b      	ldr	r3, [r7, #32]
 801dece:	2b09      	cmp	r3, #9
 801ded0:	dd06      	ble.n	801dee0 <dhcp_parse_reply+0x40c>
 801ded2:	4b70      	ldr	r3, [pc, #448]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801ded4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801ded8:	4972      	ldr	r1, [pc, #456]	; (801e0a4 <dhcp_parse_reply+0x5d0>)
 801deda:	4870      	ldr	r0, [pc, #448]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801dedc:	f003 fae6 	bl	80214ac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801dee0:	4a71      	ldr	r2, [pc, #452]	; (801e0a8 <dhcp_parse_reply+0x5d4>)
 801dee2:	6a3b      	ldr	r3, [r7, #32]
 801dee4:	4413      	add	r3, r2
 801dee6:	781b      	ldrb	r3, [r3, #0]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d174      	bne.n	801dfd6 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801deec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801def0:	2b04      	cmp	r3, #4
 801def2:	bf28      	it	cs
 801def4:	2304      	movcs	r3, #4
 801def6:	b2db      	uxtb	r3, r3
 801def8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801defa:	8bfb      	ldrh	r3, [r7, #30]
 801defc:	8aba      	ldrh	r2, [r7, #20]
 801defe:	f107 0108 	add.w	r1, r7, #8
 801df02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801df04:	f7f7 faae 	bl	8015464 <pbuf_copy_partial>
 801df08:	4603      	mov	r3, r0
 801df0a:	461a      	mov	r2, r3
 801df0c:	8abb      	ldrh	r3, [r7, #20]
 801df0e:	4293      	cmp	r3, r2
 801df10:	d002      	beq.n	801df18 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801df12:	f06f 0301 	mvn.w	r3, #1
 801df16:	e0dc      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 801df18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801df1c:	2b04      	cmp	r3, #4
 801df1e:	d933      	bls.n	801df88 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801df20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801df24:	f003 0303 	and.w	r3, r3, #3
 801df28:	b2db      	uxtb	r3, r3
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d009      	beq.n	801df42 <dhcp_parse_reply+0x46e>
 801df2e:	4b59      	ldr	r3, [pc, #356]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801df30:	f240 6281 	movw	r2, #1665	; 0x681
 801df34:	495d      	ldr	r1, [pc, #372]	; (801e0ac <dhcp_parse_reply+0x5d8>)
 801df36:	4859      	ldr	r0, [pc, #356]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801df38:	f003 fab8 	bl	80214ac <iprintf>
 801df3c:	f06f 0305 	mvn.w	r3, #5
 801df40:	e0c7      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 801df42:	4a59      	ldr	r2, [pc, #356]	; (801e0a8 <dhcp_parse_reply+0x5d4>)
 801df44:	6a3b      	ldr	r3, [r7, #32]
 801df46:	4413      	add	r3, r2
 801df48:	2201      	movs	r2, #1
 801df4a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801df4c:	68bb      	ldr	r3, [r7, #8]
 801df4e:	4618      	mov	r0, r3
 801df50:	f7f4 fd09 	bl	8012966 <lwip_htonl>
 801df54:	4602      	mov	r2, r0
 801df56:	4956      	ldr	r1, [pc, #344]	; (801e0b0 <dhcp_parse_reply+0x5dc>)
 801df58:	6a3b      	ldr	r3, [r7, #32]
 801df5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801df5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801df62:	3b04      	subs	r3, #4
 801df64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801df68:	8bfb      	ldrh	r3, [r7, #30]
 801df6a:	3304      	adds	r3, #4
 801df6c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801df6e:	8a7a      	ldrh	r2, [r7, #18]
 801df70:	8bfb      	ldrh	r3, [r7, #30]
 801df72:	429a      	cmp	r2, r3
 801df74:	d202      	bcs.n	801df7c <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801df76:	f06f 0301 	mvn.w	r3, #1
 801df7a:	e0aa      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 801df7c:	8a7b      	ldrh	r3, [r7, #18]
 801df7e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801df80:	6a3b      	ldr	r3, [r7, #32]
 801df82:	3301      	adds	r3, #1
 801df84:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801df86:	e79e      	b.n	801dec6 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801df88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801df8c:	2b04      	cmp	r3, #4
 801df8e:	d106      	bne.n	801df9e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801df90:	68bb      	ldr	r3, [r7, #8]
 801df92:	4618      	mov	r0, r3
 801df94:	f7f4 fce7 	bl	8012966 <lwip_htonl>
 801df98:	4603      	mov	r3, r0
 801df9a:	60bb      	str	r3, [r7, #8]
 801df9c:	e011      	b.n	801dfc2 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801df9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dfa2:	2b01      	cmp	r3, #1
 801dfa4:	d009      	beq.n	801dfba <dhcp_parse_reply+0x4e6>
 801dfa6:	4b3b      	ldr	r3, [pc, #236]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801dfa8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801dfac:	4941      	ldr	r1, [pc, #260]	; (801e0b4 <dhcp_parse_reply+0x5e0>)
 801dfae:	483b      	ldr	r0, [pc, #236]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801dfb0:	f003 fa7c 	bl	80214ac <iprintf>
 801dfb4:	f06f 0305 	mvn.w	r3, #5
 801dfb8:	e08b      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 801dfba:	f107 0308 	add.w	r3, r7, #8
 801dfbe:	781b      	ldrb	r3, [r3, #0]
 801dfc0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801dfc2:	4a39      	ldr	r2, [pc, #228]	; (801e0a8 <dhcp_parse_reply+0x5d4>)
 801dfc4:	6a3b      	ldr	r3, [r7, #32]
 801dfc6:	4413      	add	r3, r2
 801dfc8:	2201      	movs	r2, #1
 801dfca:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801dfcc:	68ba      	ldr	r2, [r7, #8]
 801dfce:	4938      	ldr	r1, [pc, #224]	; (801e0b0 <dhcp_parse_reply+0x5dc>)
 801dfd0:	6a3b      	ldr	r3, [r7, #32]
 801dfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801dfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfd8:	895b      	ldrh	r3, [r3, #10]
 801dfda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dfdc:	429a      	cmp	r2, r3
 801dfde:	d324      	bcc.n	801e02a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfe2:	895b      	ldrh	r3, [r3, #10]
 801dfe4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dfe6:	1ad3      	subs	r3, r2, r3
 801dfe8:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfec:	895b      	ldrh	r3, [r3, #10]
 801dfee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801dff0:	1ad3      	subs	r3, r2, r3
 801dff2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801dff4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dff6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801dff8:	429a      	cmp	r2, r3
 801dffa:	d213      	bcs.n	801e024 <dhcp_parse_reply+0x550>
        q = q->next;
 801dffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e004:	2b00      	cmp	r3, #0
 801e006:	d109      	bne.n	801e01c <dhcp_parse_reply+0x548>
 801e008:	4b22      	ldr	r3, [pc, #136]	; (801e094 <dhcp_parse_reply+0x5c0>)
 801e00a:	f240 629d 	movw	r2, #1693	; 0x69d
 801e00e:	492a      	ldr	r1, [pc, #168]	; (801e0b8 <dhcp_parse_reply+0x5e4>)
 801e010:	4822      	ldr	r0, [pc, #136]	; (801e09c <dhcp_parse_reply+0x5c8>)
 801e012:	f003 fa4b 	bl	80214ac <iprintf>
 801e016:	f06f 0305 	mvn.w	r3, #5
 801e01a:	e05a      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 801e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e01e:	685b      	ldr	r3, [r3, #4]
 801e020:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e022:	e002      	b.n	801e02a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801e024:	f06f 0301 	mvn.w	r3, #1
 801e028:	e053      	b.n	801e0d2 <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d00a      	beq.n	801e046 <dhcp_parse_reply+0x572>
 801e030:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801e032:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801e034:	429a      	cmp	r2, r3
 801e036:	d206      	bcs.n	801e046 <dhcp_parse_reply+0x572>
 801e038:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e03a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e03c:	4413      	add	r3, r2
 801e03e:	781b      	ldrb	r3, [r3, #0]
 801e040:	2bff      	cmp	r3, #255	; 0xff
 801e042:	f47f ad8a 	bne.w	801db5a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801e046:	4b18      	ldr	r3, [pc, #96]	; (801e0a8 <dhcp_parse_reply+0x5d4>)
 801e048:	781b      	ldrb	r3, [r3, #0]
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	d018      	beq.n	801e080 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e04e:	4b18      	ldr	r3, [pc, #96]	; (801e0b0 <dhcp_parse_reply+0x5dc>)
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e054:	4b14      	ldr	r3, [pc, #80]	; (801e0a8 <dhcp_parse_reply+0x5d4>)
 801e056:	2200      	movs	r2, #0
 801e058:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	2b01      	cmp	r3, #1
 801e05e:	d102      	bne.n	801e066 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801e060:	2301      	movs	r3, #1
 801e062:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e064:	e00c      	b.n	801e080 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	2b02      	cmp	r3, #2
 801e06a:	d102      	bne.n	801e072 <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 801e06c:	2301      	movs	r3, #1
 801e06e:	62bb      	str	r3, [r7, #40]	; 0x28
 801e070:	e006      	b.n	801e080 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	2b03      	cmp	r3, #3
 801e076:	d103      	bne.n	801e080 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 801e078:	2301      	movs	r3, #1
 801e07a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801e07c:	2301      	movs	r3, #1
 801e07e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e082:	2b00      	cmp	r3, #0
 801e084:	d01a      	beq.n	801e0bc <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801e086:	2300      	movs	r3, #0
 801e088:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801e08a:	236c      	movs	r3, #108	; 0x6c
 801e08c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801e08e:	23ec      	movs	r3, #236	; 0xec
 801e090:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801e092:	e53c      	b.n	801db0e <dhcp_parse_reply+0x3a>
 801e094:	08026694 	.word	0x08026694
 801e098:	0802694c 	.word	0x0802694c
 801e09c:	080266f4 	.word	0x080266f4
 801e0a0:	0802691c 	.word	0x0802691c
 801e0a4:	08026970 	.word	0x08026970
 801e0a8:	20016c68 	.word	0x20016c68
 801e0ac:	08026984 	.word	0x08026984
 801e0b0:	20016c74 	.word	0x20016c74
 801e0b4:	0802699c 	.word	0x0802699c
 801e0b8:	080269b0 	.word	0x080269b0
  } else if (parse_sname_as_options) {
 801e0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d006      	beq.n	801e0d0 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 801e0c2:	2300      	movs	r3, #0
 801e0c4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801e0c6:	232c      	movs	r3, #44	; 0x2c
 801e0c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801e0ca:	236c      	movs	r3, #108	; 0x6c
 801e0cc:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801e0ce:	e51e      	b.n	801db0e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801e0d0:	2300      	movs	r3, #0
}
 801e0d2:	4618      	mov	r0, r3
 801e0d4:	3740      	adds	r7, #64	; 0x40
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	bd80      	pop	{r7, pc}
 801e0da:	bf00      	nop

0801e0dc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b08a      	sub	sp, #40	; 0x28
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	60f8      	str	r0, [r7, #12]
 801e0e4:	60b9      	str	r1, [r7, #8]
 801e0e6:	607a      	str	r2, [r7, #4]
 801e0e8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801e0ea:	4b60      	ldr	r3, [pc, #384]	; (801e26c <dhcp_recv+0x190>)
 801e0ec:	685b      	ldr	r3, [r3, #4]
 801e0ee:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e0f0:	6a3b      	ldr	r3, [r7, #32]
 801e0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0f4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	685b      	ldr	r3, [r3, #4]
 801e0fa:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801e0fc:	69fb      	ldr	r3, [r7, #28]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	f000 809d 	beq.w	801e23e <dhcp_recv+0x162>
 801e104:	69fb      	ldr	r3, [r7, #28]
 801e106:	791b      	ldrb	r3, [r3, #4]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	f000 8098 	beq.w	801e23e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	895b      	ldrh	r3, [r3, #10]
 801e112:	2b2b      	cmp	r3, #43	; 0x2b
 801e114:	f240 8095 	bls.w	801e242 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801e118:	69bb      	ldr	r3, [r7, #24]
 801e11a:	781b      	ldrb	r3, [r3, #0]
 801e11c:	2b02      	cmp	r3, #2
 801e11e:	f040 8092 	bne.w	801e246 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e122:	2300      	movs	r3, #0
 801e124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e128:	e012      	b.n	801e150 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801e12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e12e:	6a3a      	ldr	r2, [r7, #32]
 801e130:	4413      	add	r3, r2
 801e132:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801e136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e13a:	69b9      	ldr	r1, [r7, #24]
 801e13c:	440b      	add	r3, r1
 801e13e:	7f1b      	ldrb	r3, [r3, #28]
 801e140:	429a      	cmp	r2, r3
 801e142:	f040 8082 	bne.w	801e24a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e14a:	3301      	adds	r3, #1
 801e14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e150:	6a3b      	ldr	r3, [r7, #32]
 801e152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e156:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e15a:	429a      	cmp	r2, r3
 801e15c:	d203      	bcs.n	801e166 <dhcp_recv+0x8a>
 801e15e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e162:	2b05      	cmp	r3, #5
 801e164:	d9e1      	bls.n	801e12a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801e166:	69bb      	ldr	r3, [r7, #24]
 801e168:	685b      	ldr	r3, [r3, #4]
 801e16a:	4618      	mov	r0, r3
 801e16c:	f7f4 fbfb 	bl	8012966 <lwip_htonl>
 801e170:	4602      	mov	r2, r0
 801e172:	69fb      	ldr	r3, [r7, #28]
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	429a      	cmp	r2, r3
 801e178:	d169      	bne.n	801e24e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801e17a:	69f9      	ldr	r1, [r7, #28]
 801e17c:	6878      	ldr	r0, [r7, #4]
 801e17e:	f7ff fca9 	bl	801dad4 <dhcp_parse_reply>
 801e182:	4603      	mov	r3, r0
 801e184:	2b00      	cmp	r3, #0
 801e186:	d164      	bne.n	801e252 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801e188:	4b39      	ldr	r3, [pc, #228]	; (801e270 <dhcp_recv+0x194>)
 801e18a:	785b      	ldrb	r3, [r3, #1]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d062      	beq.n	801e256 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	685b      	ldr	r3, [r3, #4]
 801e194:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801e196:	4b37      	ldr	r3, [pc, #220]	; (801e274 <dhcp_recv+0x198>)
 801e198:	685b      	ldr	r3, [r3, #4]
 801e19a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801e19c:	7cfb      	ldrb	r3, [r7, #19]
 801e19e:	2b05      	cmp	r3, #5
 801e1a0:	d12a      	bne.n	801e1f8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801e1a2:	69fb      	ldr	r3, [r7, #28]
 801e1a4:	795b      	ldrb	r3, [r3, #5]
 801e1a6:	2b01      	cmp	r3, #1
 801e1a8:	d112      	bne.n	801e1d0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801e1aa:	6979      	ldr	r1, [r7, #20]
 801e1ac:	6a38      	ldr	r0, [r7, #32]
 801e1ae:	f7fe fdc7 	bl	801cd40 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801e1b2:	6a3b      	ldr	r3, [r7, #32]
 801e1b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1b8:	f003 0308 	and.w	r3, r3, #8
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d003      	beq.n	801e1c8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801e1c0:	6a38      	ldr	r0, [r7, #32]
 801e1c2:	f7fe fb37 	bl	801c834 <dhcp_check>
 801e1c6:	e049      	b.n	801e25c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801e1c8:	6a38      	ldr	r0, [r7, #32]
 801e1ca:	f7ff f837 	bl	801d23c <dhcp_bind>
 801e1ce:	e045      	b.n	801e25c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e1d0:	69fb      	ldr	r3, [r7, #28]
 801e1d2:	795b      	ldrb	r3, [r3, #5]
 801e1d4:	2b03      	cmp	r3, #3
 801e1d6:	d007      	beq.n	801e1e8 <dhcp_recv+0x10c>
 801e1d8:	69fb      	ldr	r3, [r7, #28]
 801e1da:	795b      	ldrb	r3, [r3, #5]
 801e1dc:	2b04      	cmp	r3, #4
 801e1de:	d003      	beq.n	801e1e8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801e1e0:	69fb      	ldr	r3, [r7, #28]
 801e1e2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e1e4:	2b05      	cmp	r3, #5
 801e1e6:	d139      	bne.n	801e25c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801e1e8:	6979      	ldr	r1, [r7, #20]
 801e1ea:	6a38      	ldr	r0, [r7, #32]
 801e1ec:	f7fe fda8 	bl	801cd40 <dhcp_handle_ack>
      dhcp_bind(netif);
 801e1f0:	6a38      	ldr	r0, [r7, #32]
 801e1f2:	f7ff f823 	bl	801d23c <dhcp_bind>
 801e1f6:	e031      	b.n	801e25c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801e1f8:	7cfb      	ldrb	r3, [r7, #19]
 801e1fa:	2b06      	cmp	r3, #6
 801e1fc:	d113      	bne.n	801e226 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e1fe:	69fb      	ldr	r3, [r7, #28]
 801e200:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801e202:	2b03      	cmp	r3, #3
 801e204:	d00b      	beq.n	801e21e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e206:	69fb      	ldr	r3, [r7, #28]
 801e208:	795b      	ldrb	r3, [r3, #5]
 801e20a:	2b01      	cmp	r3, #1
 801e20c:	d007      	beq.n	801e21e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e20e:	69fb      	ldr	r3, [r7, #28]
 801e210:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e212:	2b04      	cmp	r3, #4
 801e214:	d003      	beq.n	801e21e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e216:	69fb      	ldr	r3, [r7, #28]
 801e218:	795b      	ldrb	r3, [r3, #5]
 801e21a:	2b05      	cmp	r3, #5
 801e21c:	d103      	bne.n	801e226 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801e21e:	6a38      	ldr	r0, [r7, #32]
 801e220:	f7fe faee 	bl	801c800 <dhcp_handle_nak>
 801e224:	e01a      	b.n	801e25c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801e226:	7cfb      	ldrb	r3, [r7, #19]
 801e228:	2b02      	cmp	r3, #2
 801e22a:	d116      	bne.n	801e25a <dhcp_recv+0x17e>
 801e22c:	69fb      	ldr	r3, [r7, #28]
 801e22e:	795b      	ldrb	r3, [r3, #5]
 801e230:	2b06      	cmp	r3, #6
 801e232:	d112      	bne.n	801e25a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801e234:	6979      	ldr	r1, [r7, #20]
 801e236:	6a38      	ldr	r0, [r7, #32]
 801e238:	f7fe fb30 	bl	801c89c <dhcp_handle_offer>
 801e23c:	e00e      	b.n	801e25c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801e23e:	bf00      	nop
 801e240:	e00c      	b.n	801e25c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801e242:	bf00      	nop
 801e244:	e00a      	b.n	801e25c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801e246:	bf00      	nop
 801e248:	e008      	b.n	801e25c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801e24a:	bf00      	nop
 801e24c:	e006      	b.n	801e25c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801e24e:	bf00      	nop
 801e250:	e004      	b.n	801e25c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801e252:	bf00      	nop
 801e254:	e002      	b.n	801e25c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801e256:	bf00      	nop
 801e258:	e000      	b.n	801e25c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801e25a:	bf00      	nop
  pbuf_free(p);
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f7f6 fefb 	bl	8015058 <pbuf_free>
}
 801e262:	bf00      	nop
 801e264:	3728      	adds	r7, #40	; 0x28
 801e266:	46bd      	mov	sp, r7
 801e268:	bd80      	pop	{r7, pc}
 801e26a:	bf00      	nop
 801e26c:	2001346c 	.word	0x2001346c
 801e270:	20016c68 	.word	0x20016c68
 801e274:	20016c74 	.word	0x20016c74

0801e278 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801e278:	b580      	push	{r7, lr}
 801e27a:	b088      	sub	sp, #32
 801e27c:	af00      	add	r7, sp, #0
 801e27e:	60f8      	str	r0, [r7, #12]
 801e280:	60b9      	str	r1, [r7, #8]
 801e282:	603b      	str	r3, [r7, #0]
 801e284:	4613      	mov	r3, r2
 801e286:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d108      	bne.n	801e2a0 <dhcp_create_msg+0x28>
 801e28e:	4b5f      	ldr	r3, [pc, #380]	; (801e40c <dhcp_create_msg+0x194>)
 801e290:	f240 7269 	movw	r2, #1897	; 0x769
 801e294:	495e      	ldr	r1, [pc, #376]	; (801e410 <dhcp_create_msg+0x198>)
 801e296:	485f      	ldr	r0, [pc, #380]	; (801e414 <dhcp_create_msg+0x19c>)
 801e298:	f003 f908 	bl	80214ac <iprintf>
 801e29c:	2300      	movs	r3, #0
 801e29e:	e0b1      	b.n	801e404 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801e2a0:	68bb      	ldr	r3, [r7, #8]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d108      	bne.n	801e2b8 <dhcp_create_msg+0x40>
 801e2a6:	4b59      	ldr	r3, [pc, #356]	; (801e40c <dhcp_create_msg+0x194>)
 801e2a8:	f240 726a 	movw	r2, #1898	; 0x76a
 801e2ac:	495a      	ldr	r1, [pc, #360]	; (801e418 <dhcp_create_msg+0x1a0>)
 801e2ae:	4859      	ldr	r0, [pc, #356]	; (801e414 <dhcp_create_msg+0x19c>)
 801e2b0:	f003 f8fc 	bl	80214ac <iprintf>
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	e0a5      	b.n	801e404 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801e2b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e2bc:	f44f 719a 	mov.w	r1, #308	; 0x134
 801e2c0:	2036      	movs	r0, #54	; 0x36
 801e2c2:	f7f6 fbe5 	bl	8014a90 <pbuf_alloc>
 801e2c6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801e2c8:	69bb      	ldr	r3, [r7, #24]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d101      	bne.n	801e2d2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	e098      	b.n	801e404 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e2d2:	69bb      	ldr	r3, [r7, #24]
 801e2d4:	895b      	ldrh	r3, [r3, #10]
 801e2d6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801e2da:	d206      	bcs.n	801e2ea <dhcp_create_msg+0x72>
 801e2dc:	4b4b      	ldr	r3, [pc, #300]	; (801e40c <dhcp_create_msg+0x194>)
 801e2de:	f240 7271 	movw	r2, #1905	; 0x771
 801e2e2:	494e      	ldr	r1, [pc, #312]	; (801e41c <dhcp_create_msg+0x1a4>)
 801e2e4:	484b      	ldr	r0, [pc, #300]	; (801e414 <dhcp_create_msg+0x19c>)
 801e2e6:	f003 f8e1 	bl	80214ac <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e2ea:	79fb      	ldrb	r3, [r7, #7]
 801e2ec:	2b03      	cmp	r3, #3
 801e2ee:	d103      	bne.n	801e2f8 <dhcp_create_msg+0x80>
 801e2f0:	68bb      	ldr	r3, [r7, #8]
 801e2f2:	795b      	ldrb	r3, [r3, #5]
 801e2f4:	2b03      	cmp	r3, #3
 801e2f6:	d10d      	bne.n	801e314 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801e2f8:	68bb      	ldr	r3, [r7, #8]
 801e2fa:	799b      	ldrb	r3, [r3, #6]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d105      	bne.n	801e30c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801e300:	f003 f9a6 	bl	8021650 <rand>
 801e304:	4603      	mov	r3, r0
 801e306:	461a      	mov	r2, r3
 801e308:	4b45      	ldr	r3, [pc, #276]	; (801e420 <dhcp_create_msg+0x1a8>)
 801e30a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801e30c:	4b44      	ldr	r3, [pc, #272]	; (801e420 <dhcp_create_msg+0x1a8>)
 801e30e:	681a      	ldr	r2, [r3, #0]
 801e310:	68bb      	ldr	r3, [r7, #8]
 801e312:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801e314:	69bb      	ldr	r3, [r7, #24]
 801e316:	685b      	ldr	r3, [r3, #4]
 801e318:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801e31a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801e31e:	2100      	movs	r1, #0
 801e320:	6978      	ldr	r0, [r7, #20]
 801e322:	f003 f801 	bl	8021328 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801e326:	697b      	ldr	r3, [r7, #20]
 801e328:	2201      	movs	r2, #1
 801e32a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801e32c:	697b      	ldr	r3, [r7, #20]
 801e32e:	2201      	movs	r2, #1
 801e330:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801e338:	697b      	ldr	r3, [r7, #20]
 801e33a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801e33c:	68bb      	ldr	r3, [r7, #8]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	4618      	mov	r0, r3
 801e342:	f7f4 fb10 	bl	8012966 <lwip_htonl>
 801e346:	4602      	mov	r2, r0
 801e348:	697b      	ldr	r3, [r7, #20]
 801e34a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e34c:	79fb      	ldrb	r3, [r7, #7]
 801e34e:	2b08      	cmp	r3, #8
 801e350:	d010      	beq.n	801e374 <dhcp_create_msg+0xfc>
 801e352:	79fb      	ldrb	r3, [r7, #7]
 801e354:	2b04      	cmp	r3, #4
 801e356:	d00d      	beq.n	801e374 <dhcp_create_msg+0xfc>
 801e358:	79fb      	ldrb	r3, [r7, #7]
 801e35a:	2b07      	cmp	r3, #7
 801e35c:	d00a      	beq.n	801e374 <dhcp_create_msg+0xfc>
 801e35e:	79fb      	ldrb	r3, [r7, #7]
 801e360:	2b03      	cmp	r3, #3
 801e362:	d10c      	bne.n	801e37e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e364:	68bb      	ldr	r3, [r7, #8]
 801e366:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801e368:	2b05      	cmp	r3, #5
 801e36a:	d003      	beq.n	801e374 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e36c:	68bb      	ldr	r3, [r7, #8]
 801e36e:	795b      	ldrb	r3, [r3, #5]
 801e370:	2b04      	cmp	r3, #4
 801e372:	d104      	bne.n	801e37e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	3304      	adds	r3, #4
 801e378:	681a      	ldr	r2, [r3, #0]
 801e37a:	697b      	ldr	r3, [r7, #20]
 801e37c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e37e:	2300      	movs	r3, #0
 801e380:	83fb      	strh	r3, [r7, #30]
 801e382:	e00c      	b.n	801e39e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801e384:	8bfa      	ldrh	r2, [r7, #30]
 801e386:	8bfb      	ldrh	r3, [r7, #30]
 801e388:	68f9      	ldr	r1, [r7, #12]
 801e38a:	440a      	add	r2, r1
 801e38c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801e390:	697a      	ldr	r2, [r7, #20]
 801e392:	4413      	add	r3, r2
 801e394:	460a      	mov	r2, r1
 801e396:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e398:	8bfb      	ldrh	r3, [r7, #30]
 801e39a:	3301      	adds	r3, #1
 801e39c:	83fb      	strh	r3, [r7, #30]
 801e39e:	8bfb      	ldrh	r3, [r7, #30]
 801e3a0:	2b05      	cmp	r3, #5
 801e3a2:	d9ef      	bls.n	801e384 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e3a4:	697b      	ldr	r3, [r7, #20]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e3ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801e3b0:	2200      	movs	r2, #0
 801e3b2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801e3b6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801e3ba:	2200      	movs	r2, #0
 801e3bc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801e3c0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e3ca:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e3ce:	697b      	ldr	r3, [r7, #20]
 801e3d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	2235      	movs	r2, #53	; 0x35
 801e3d8:	2000      	movs	r0, #0
 801e3da:	f7ff faab 	bl	801d934 <dhcp_option>
 801e3de:	4603      	mov	r3, r0
 801e3e0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801e3e2:	697b      	ldr	r3, [r7, #20]
 801e3e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e3e8:	79fa      	ldrb	r2, [r7, #7]
 801e3ea:	8a7b      	ldrh	r3, [r7, #18]
 801e3ec:	4618      	mov	r0, r3
 801e3ee:	f7ff fad5 	bl	801d99c <dhcp_option_byte>
 801e3f2:	4603      	mov	r3, r0
 801e3f4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801e3f6:	683b      	ldr	r3, [r7, #0]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d002      	beq.n	801e402 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801e3fc:	683b      	ldr	r3, [r7, #0]
 801e3fe:	8a7a      	ldrh	r2, [r7, #18]
 801e400:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801e402:	69bb      	ldr	r3, [r7, #24]
}
 801e404:	4618      	mov	r0, r3
 801e406:	3720      	adds	r7, #32
 801e408:	46bd      	mov	sp, r7
 801e40a:	bd80      	pop	{r7, pc}
 801e40c:	08026694 	.word	0x08026694
 801e410:	080269c4 	.word	0x080269c4
 801e414:	080266f4 	.word	0x080266f4
 801e418:	080269e4 	.word	0x080269e4
 801e41c:	08026a04 	.word	0x08026a04
 801e420:	200055d0 	.word	0x200055d0

0801e424 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801e424:	b580      	push	{r7, lr}
 801e426:	b084      	sub	sp, #16
 801e428:	af00      	add	r7, sp, #0
 801e42a:	4603      	mov	r3, r0
 801e42c:	60b9      	str	r1, [r7, #8]
 801e42e:	607a      	str	r2, [r7, #4]
 801e430:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801e432:	89fb      	ldrh	r3, [r7, #14]
 801e434:	1c5a      	adds	r2, r3, #1
 801e436:	81fa      	strh	r2, [r7, #14]
 801e438:	461a      	mov	r2, r3
 801e43a:	68bb      	ldr	r3, [r7, #8]
 801e43c:	4413      	add	r3, r2
 801e43e:	22ff      	movs	r2, #255	; 0xff
 801e440:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e442:	e007      	b.n	801e454 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801e444:	89fb      	ldrh	r3, [r7, #14]
 801e446:	1c5a      	adds	r2, r3, #1
 801e448:	81fa      	strh	r2, [r7, #14]
 801e44a:	461a      	mov	r2, r3
 801e44c:	68bb      	ldr	r3, [r7, #8]
 801e44e:	4413      	add	r3, r2
 801e450:	2200      	movs	r2, #0
 801e452:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e454:	89fb      	ldrh	r3, [r7, #14]
 801e456:	2b43      	cmp	r3, #67	; 0x43
 801e458:	d904      	bls.n	801e464 <dhcp_option_trailer+0x40>
 801e45a:	89fb      	ldrh	r3, [r7, #14]
 801e45c:	f003 0303 	and.w	r3, r3, #3
 801e460:	2b00      	cmp	r3, #0
 801e462:	d002      	beq.n	801e46a <dhcp_option_trailer+0x46>
 801e464:	89fb      	ldrh	r3, [r7, #14]
 801e466:	2b43      	cmp	r3, #67	; 0x43
 801e468:	d9ec      	bls.n	801e444 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e46a:	89fb      	ldrh	r3, [r7, #14]
 801e46c:	33f0      	adds	r3, #240	; 0xf0
 801e46e:	b29b      	uxth	r3, r3
 801e470:	4619      	mov	r1, r3
 801e472:	6878      	ldr	r0, [r7, #4]
 801e474:	f7f6 fc6a 	bl	8014d4c <pbuf_realloc>
}
 801e478:	bf00      	nop
 801e47a:	3710      	adds	r7, #16
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}

0801e480 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e480:	b480      	push	{r7}
 801e482:	b085      	sub	sp, #20
 801e484:	af00      	add	r7, sp, #0
 801e486:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d017      	beq.n	801e4be <dhcp_supplied_address+0x3e>
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e492:	2b00      	cmp	r3, #0
 801e494:	d013      	beq.n	801e4be <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e49a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	795b      	ldrb	r3, [r3, #5]
 801e4a0:	2b0a      	cmp	r3, #10
 801e4a2:	d007      	beq.n	801e4b4 <dhcp_supplied_address+0x34>
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	795b      	ldrb	r3, [r3, #5]
 801e4a8:	2b05      	cmp	r3, #5
 801e4aa:	d003      	beq.n	801e4b4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e4b0:	2b04      	cmp	r3, #4
 801e4b2:	d101      	bne.n	801e4b8 <dhcp_supplied_address+0x38>
 801e4b4:	2301      	movs	r3, #1
 801e4b6:	e000      	b.n	801e4ba <dhcp_supplied_address+0x3a>
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	b2db      	uxtb	r3, r3
 801e4bc:	e000      	b.n	801e4c0 <dhcp_supplied_address+0x40>
  }
  return 0;
 801e4be:	2300      	movs	r3, #0
}
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	3714      	adds	r7, #20
 801e4c4:	46bd      	mov	sp, r7
 801e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ca:	4770      	bx	lr

0801e4cc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e4cc:	b580      	push	{r7, lr}
 801e4ce:	b082      	sub	sp, #8
 801e4d0:	af00      	add	r7, sp, #0
 801e4d2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e4d4:	4915      	ldr	r1, [pc, #84]	; (801e52c <etharp_free_entry+0x60>)
 801e4d6:	687a      	ldr	r2, [r7, #4]
 801e4d8:	4613      	mov	r3, r2
 801e4da:	005b      	lsls	r3, r3, #1
 801e4dc:	4413      	add	r3, r2
 801e4de:	00db      	lsls	r3, r3, #3
 801e4e0:	440b      	add	r3, r1
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d013      	beq.n	801e510 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e4e8:	4910      	ldr	r1, [pc, #64]	; (801e52c <etharp_free_entry+0x60>)
 801e4ea:	687a      	ldr	r2, [r7, #4]
 801e4ec:	4613      	mov	r3, r2
 801e4ee:	005b      	lsls	r3, r3, #1
 801e4f0:	4413      	add	r3, r2
 801e4f2:	00db      	lsls	r3, r3, #3
 801e4f4:	440b      	add	r3, r1
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	f7f6 fdad 	bl	8015058 <pbuf_free>
    arp_table[i].q = NULL;
 801e4fe:	490b      	ldr	r1, [pc, #44]	; (801e52c <etharp_free_entry+0x60>)
 801e500:	687a      	ldr	r2, [r7, #4]
 801e502:	4613      	mov	r3, r2
 801e504:	005b      	lsls	r3, r3, #1
 801e506:	4413      	add	r3, r2
 801e508:	00db      	lsls	r3, r3, #3
 801e50a:	440b      	add	r3, r1
 801e50c:	2200      	movs	r2, #0
 801e50e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e510:	4906      	ldr	r1, [pc, #24]	; (801e52c <etharp_free_entry+0x60>)
 801e512:	687a      	ldr	r2, [r7, #4]
 801e514:	4613      	mov	r3, r2
 801e516:	005b      	lsls	r3, r3, #1
 801e518:	4413      	add	r3, r2
 801e51a:	00db      	lsls	r3, r3, #3
 801e51c:	440b      	add	r3, r1
 801e51e:	3314      	adds	r3, #20
 801e520:	2200      	movs	r2, #0
 801e522:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e524:	bf00      	nop
 801e526:	3708      	adds	r7, #8
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}
 801e52c:	200055d4 	.word	0x200055d4

0801e530 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	b082      	sub	sp, #8
 801e534:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e536:	2300      	movs	r3, #0
 801e538:	607b      	str	r3, [r7, #4]
 801e53a:	e096      	b.n	801e66a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e53c:	494f      	ldr	r1, [pc, #316]	; (801e67c <etharp_tmr+0x14c>)
 801e53e:	687a      	ldr	r2, [r7, #4]
 801e540:	4613      	mov	r3, r2
 801e542:	005b      	lsls	r3, r3, #1
 801e544:	4413      	add	r3, r2
 801e546:	00db      	lsls	r3, r3, #3
 801e548:	440b      	add	r3, r1
 801e54a:	3314      	adds	r3, #20
 801e54c:	781b      	ldrb	r3, [r3, #0]
 801e54e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e550:	78fb      	ldrb	r3, [r7, #3]
 801e552:	2b00      	cmp	r3, #0
 801e554:	f000 8086 	beq.w	801e664 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801e558:	4948      	ldr	r1, [pc, #288]	; (801e67c <etharp_tmr+0x14c>)
 801e55a:	687a      	ldr	r2, [r7, #4]
 801e55c:	4613      	mov	r3, r2
 801e55e:	005b      	lsls	r3, r3, #1
 801e560:	4413      	add	r3, r2
 801e562:	00db      	lsls	r3, r3, #3
 801e564:	440b      	add	r3, r1
 801e566:	3312      	adds	r3, #18
 801e568:	881b      	ldrh	r3, [r3, #0]
 801e56a:	3301      	adds	r3, #1
 801e56c:	b298      	uxth	r0, r3
 801e56e:	4943      	ldr	r1, [pc, #268]	; (801e67c <etharp_tmr+0x14c>)
 801e570:	687a      	ldr	r2, [r7, #4]
 801e572:	4613      	mov	r3, r2
 801e574:	005b      	lsls	r3, r3, #1
 801e576:	4413      	add	r3, r2
 801e578:	00db      	lsls	r3, r3, #3
 801e57a:	440b      	add	r3, r1
 801e57c:	3312      	adds	r3, #18
 801e57e:	4602      	mov	r2, r0
 801e580:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e582:	493e      	ldr	r1, [pc, #248]	; (801e67c <etharp_tmr+0x14c>)
 801e584:	687a      	ldr	r2, [r7, #4]
 801e586:	4613      	mov	r3, r2
 801e588:	005b      	lsls	r3, r3, #1
 801e58a:	4413      	add	r3, r2
 801e58c:	00db      	lsls	r3, r3, #3
 801e58e:	440b      	add	r3, r1
 801e590:	3312      	adds	r3, #18
 801e592:	881b      	ldrh	r3, [r3, #0]
 801e594:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801e598:	d215      	bcs.n	801e5c6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e59a:	4938      	ldr	r1, [pc, #224]	; (801e67c <etharp_tmr+0x14c>)
 801e59c:	687a      	ldr	r2, [r7, #4]
 801e59e:	4613      	mov	r3, r2
 801e5a0:	005b      	lsls	r3, r3, #1
 801e5a2:	4413      	add	r3, r2
 801e5a4:	00db      	lsls	r3, r3, #3
 801e5a6:	440b      	add	r3, r1
 801e5a8:	3314      	adds	r3, #20
 801e5aa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e5ac:	2b01      	cmp	r3, #1
 801e5ae:	d10e      	bne.n	801e5ce <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e5b0:	4932      	ldr	r1, [pc, #200]	; (801e67c <etharp_tmr+0x14c>)
 801e5b2:	687a      	ldr	r2, [r7, #4]
 801e5b4:	4613      	mov	r3, r2
 801e5b6:	005b      	lsls	r3, r3, #1
 801e5b8:	4413      	add	r3, r2
 801e5ba:	00db      	lsls	r3, r3, #3
 801e5bc:	440b      	add	r3, r1
 801e5be:	3312      	adds	r3, #18
 801e5c0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e5c2:	2b04      	cmp	r3, #4
 801e5c4:	d903      	bls.n	801e5ce <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e5c6:	6878      	ldr	r0, [r7, #4]
 801e5c8:	f7ff ff80 	bl	801e4cc <etharp_free_entry>
 801e5cc:	e04a      	b.n	801e664 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e5ce:	492b      	ldr	r1, [pc, #172]	; (801e67c <etharp_tmr+0x14c>)
 801e5d0:	687a      	ldr	r2, [r7, #4]
 801e5d2:	4613      	mov	r3, r2
 801e5d4:	005b      	lsls	r3, r3, #1
 801e5d6:	4413      	add	r3, r2
 801e5d8:	00db      	lsls	r3, r3, #3
 801e5da:	440b      	add	r3, r1
 801e5dc:	3314      	adds	r3, #20
 801e5de:	781b      	ldrb	r3, [r3, #0]
 801e5e0:	2b03      	cmp	r3, #3
 801e5e2:	d10a      	bne.n	801e5fa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e5e4:	4925      	ldr	r1, [pc, #148]	; (801e67c <etharp_tmr+0x14c>)
 801e5e6:	687a      	ldr	r2, [r7, #4]
 801e5e8:	4613      	mov	r3, r2
 801e5ea:	005b      	lsls	r3, r3, #1
 801e5ec:	4413      	add	r3, r2
 801e5ee:	00db      	lsls	r3, r3, #3
 801e5f0:	440b      	add	r3, r1
 801e5f2:	3314      	adds	r3, #20
 801e5f4:	2204      	movs	r2, #4
 801e5f6:	701a      	strb	r2, [r3, #0]
 801e5f8:	e034      	b.n	801e664 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e5fa:	4920      	ldr	r1, [pc, #128]	; (801e67c <etharp_tmr+0x14c>)
 801e5fc:	687a      	ldr	r2, [r7, #4]
 801e5fe:	4613      	mov	r3, r2
 801e600:	005b      	lsls	r3, r3, #1
 801e602:	4413      	add	r3, r2
 801e604:	00db      	lsls	r3, r3, #3
 801e606:	440b      	add	r3, r1
 801e608:	3314      	adds	r3, #20
 801e60a:	781b      	ldrb	r3, [r3, #0]
 801e60c:	2b04      	cmp	r3, #4
 801e60e:	d10a      	bne.n	801e626 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e610:	491a      	ldr	r1, [pc, #104]	; (801e67c <etharp_tmr+0x14c>)
 801e612:	687a      	ldr	r2, [r7, #4]
 801e614:	4613      	mov	r3, r2
 801e616:	005b      	lsls	r3, r3, #1
 801e618:	4413      	add	r3, r2
 801e61a:	00db      	lsls	r3, r3, #3
 801e61c:	440b      	add	r3, r1
 801e61e:	3314      	adds	r3, #20
 801e620:	2202      	movs	r2, #2
 801e622:	701a      	strb	r2, [r3, #0]
 801e624:	e01e      	b.n	801e664 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e626:	4915      	ldr	r1, [pc, #84]	; (801e67c <etharp_tmr+0x14c>)
 801e628:	687a      	ldr	r2, [r7, #4]
 801e62a:	4613      	mov	r3, r2
 801e62c:	005b      	lsls	r3, r3, #1
 801e62e:	4413      	add	r3, r2
 801e630:	00db      	lsls	r3, r3, #3
 801e632:	440b      	add	r3, r1
 801e634:	3314      	adds	r3, #20
 801e636:	781b      	ldrb	r3, [r3, #0]
 801e638:	2b01      	cmp	r3, #1
 801e63a:	d113      	bne.n	801e664 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e63c:	490f      	ldr	r1, [pc, #60]	; (801e67c <etharp_tmr+0x14c>)
 801e63e:	687a      	ldr	r2, [r7, #4]
 801e640:	4613      	mov	r3, r2
 801e642:	005b      	lsls	r3, r3, #1
 801e644:	4413      	add	r3, r2
 801e646:	00db      	lsls	r3, r3, #3
 801e648:	440b      	add	r3, r1
 801e64a:	3308      	adds	r3, #8
 801e64c:	6818      	ldr	r0, [r3, #0]
 801e64e:	687a      	ldr	r2, [r7, #4]
 801e650:	4613      	mov	r3, r2
 801e652:	005b      	lsls	r3, r3, #1
 801e654:	4413      	add	r3, r2
 801e656:	00db      	lsls	r3, r3, #3
 801e658:	4a08      	ldr	r2, [pc, #32]	; (801e67c <etharp_tmr+0x14c>)
 801e65a:	4413      	add	r3, r2
 801e65c:	3304      	adds	r3, #4
 801e65e:	4619      	mov	r1, r3
 801e660:	f000 fe72 	bl	801f348 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	3301      	adds	r3, #1
 801e668:	607b      	str	r3, [r7, #4]
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	2b09      	cmp	r3, #9
 801e66e:	f77f af65 	ble.w	801e53c <etharp_tmr+0xc>
      }
    }
  }
}
 801e672:	bf00      	nop
 801e674:	bf00      	nop
 801e676:	3708      	adds	r7, #8
 801e678:	46bd      	mov	sp, r7
 801e67a:	bd80      	pop	{r7, pc}
 801e67c:	200055d4 	.word	0x200055d4

0801e680 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e680:	b580      	push	{r7, lr}
 801e682:	b08a      	sub	sp, #40	; 0x28
 801e684:	af00      	add	r7, sp, #0
 801e686:	60f8      	str	r0, [r7, #12]
 801e688:	460b      	mov	r3, r1
 801e68a:	607a      	str	r2, [r7, #4]
 801e68c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e68e:	230a      	movs	r3, #10
 801e690:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e692:	230a      	movs	r3, #10
 801e694:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801e696:	230a      	movs	r3, #10
 801e698:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801e69a:	2300      	movs	r3, #0
 801e69c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e69e:	230a      	movs	r3, #10
 801e6a0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	83bb      	strh	r3, [r7, #28]
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	837b      	strh	r3, [r7, #26]
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e6ae:	2300      	movs	r3, #0
 801e6b0:	843b      	strh	r3, [r7, #32]
 801e6b2:	e0ae      	b.n	801e812 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801e6b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e6b8:	49a6      	ldr	r1, [pc, #664]	; (801e954 <etharp_find_entry+0x2d4>)
 801e6ba:	4613      	mov	r3, r2
 801e6bc:	005b      	lsls	r3, r3, #1
 801e6be:	4413      	add	r3, r2
 801e6c0:	00db      	lsls	r3, r3, #3
 801e6c2:	440b      	add	r3, r1
 801e6c4:	3314      	adds	r3, #20
 801e6c6:	781b      	ldrb	r3, [r3, #0]
 801e6c8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e6ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e6ce:	2b0a      	cmp	r3, #10
 801e6d0:	d105      	bne.n	801e6de <etharp_find_entry+0x5e>
 801e6d2:	7dfb      	ldrb	r3, [r7, #23]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d102      	bne.n	801e6de <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801e6d8:	8c3b      	ldrh	r3, [r7, #32]
 801e6da:	847b      	strh	r3, [r7, #34]	; 0x22
 801e6dc:	e095      	b.n	801e80a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e6de:	7dfb      	ldrb	r3, [r7, #23]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	f000 8092 	beq.w	801e80a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e6e6:	7dfb      	ldrb	r3, [r7, #23]
 801e6e8:	2b01      	cmp	r3, #1
 801e6ea:	d009      	beq.n	801e700 <etharp_find_entry+0x80>
 801e6ec:	7dfb      	ldrb	r3, [r7, #23]
 801e6ee:	2b01      	cmp	r3, #1
 801e6f0:	d806      	bhi.n	801e700 <etharp_find_entry+0x80>
 801e6f2:	4b99      	ldr	r3, [pc, #612]	; (801e958 <etharp_find_entry+0x2d8>)
 801e6f4:	f240 1223 	movw	r2, #291	; 0x123
 801e6f8:	4998      	ldr	r1, [pc, #608]	; (801e95c <etharp_find_entry+0x2dc>)
 801e6fa:	4899      	ldr	r0, [pc, #612]	; (801e960 <etharp_find_entry+0x2e0>)
 801e6fc:	f002 fed6 	bl	80214ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	2b00      	cmp	r3, #0
 801e704:	d020      	beq.n	801e748 <etharp_find_entry+0xc8>
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	6819      	ldr	r1, [r3, #0]
 801e70a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e70e:	4891      	ldr	r0, [pc, #580]	; (801e954 <etharp_find_entry+0x2d4>)
 801e710:	4613      	mov	r3, r2
 801e712:	005b      	lsls	r3, r3, #1
 801e714:	4413      	add	r3, r2
 801e716:	00db      	lsls	r3, r3, #3
 801e718:	4403      	add	r3, r0
 801e71a:	3304      	adds	r3, #4
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	4299      	cmp	r1, r3
 801e720:	d112      	bne.n	801e748 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	2b00      	cmp	r3, #0
 801e726:	d00c      	beq.n	801e742 <etharp_find_entry+0xc2>
 801e728:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e72c:	4989      	ldr	r1, [pc, #548]	; (801e954 <etharp_find_entry+0x2d4>)
 801e72e:	4613      	mov	r3, r2
 801e730:	005b      	lsls	r3, r3, #1
 801e732:	4413      	add	r3, r2
 801e734:	00db      	lsls	r3, r3, #3
 801e736:	440b      	add	r3, r1
 801e738:	3308      	adds	r3, #8
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	687a      	ldr	r2, [r7, #4]
 801e73e:	429a      	cmp	r2, r3
 801e740:	d102      	bne.n	801e748 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e742:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e746:	e100      	b.n	801e94a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e748:	7dfb      	ldrb	r3, [r7, #23]
 801e74a:	2b01      	cmp	r3, #1
 801e74c:	d140      	bne.n	801e7d0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e74e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e752:	4980      	ldr	r1, [pc, #512]	; (801e954 <etharp_find_entry+0x2d4>)
 801e754:	4613      	mov	r3, r2
 801e756:	005b      	lsls	r3, r3, #1
 801e758:	4413      	add	r3, r2
 801e75a:	00db      	lsls	r3, r3, #3
 801e75c:	440b      	add	r3, r1
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	2b00      	cmp	r3, #0
 801e762:	d01a      	beq.n	801e79a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e764:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e768:	497a      	ldr	r1, [pc, #488]	; (801e954 <etharp_find_entry+0x2d4>)
 801e76a:	4613      	mov	r3, r2
 801e76c:	005b      	lsls	r3, r3, #1
 801e76e:	4413      	add	r3, r2
 801e770:	00db      	lsls	r3, r3, #3
 801e772:	440b      	add	r3, r1
 801e774:	3312      	adds	r3, #18
 801e776:	881b      	ldrh	r3, [r3, #0]
 801e778:	8bba      	ldrh	r2, [r7, #28]
 801e77a:	429a      	cmp	r2, r3
 801e77c:	d845      	bhi.n	801e80a <etharp_find_entry+0x18a>
            old_queue = i;
 801e77e:	8c3b      	ldrh	r3, [r7, #32]
 801e780:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e786:	4973      	ldr	r1, [pc, #460]	; (801e954 <etharp_find_entry+0x2d4>)
 801e788:	4613      	mov	r3, r2
 801e78a:	005b      	lsls	r3, r3, #1
 801e78c:	4413      	add	r3, r2
 801e78e:	00db      	lsls	r3, r3, #3
 801e790:	440b      	add	r3, r1
 801e792:	3312      	adds	r3, #18
 801e794:	881b      	ldrh	r3, [r3, #0]
 801e796:	83bb      	strh	r3, [r7, #28]
 801e798:	e037      	b.n	801e80a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e79a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e79e:	496d      	ldr	r1, [pc, #436]	; (801e954 <etharp_find_entry+0x2d4>)
 801e7a0:	4613      	mov	r3, r2
 801e7a2:	005b      	lsls	r3, r3, #1
 801e7a4:	4413      	add	r3, r2
 801e7a6:	00db      	lsls	r3, r3, #3
 801e7a8:	440b      	add	r3, r1
 801e7aa:	3312      	adds	r3, #18
 801e7ac:	881b      	ldrh	r3, [r3, #0]
 801e7ae:	8b7a      	ldrh	r2, [r7, #26]
 801e7b0:	429a      	cmp	r2, r3
 801e7b2:	d82a      	bhi.n	801e80a <etharp_find_entry+0x18a>
            old_pending = i;
 801e7b4:	8c3b      	ldrh	r3, [r7, #32]
 801e7b6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801e7b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e7bc:	4965      	ldr	r1, [pc, #404]	; (801e954 <etharp_find_entry+0x2d4>)
 801e7be:	4613      	mov	r3, r2
 801e7c0:	005b      	lsls	r3, r3, #1
 801e7c2:	4413      	add	r3, r2
 801e7c4:	00db      	lsls	r3, r3, #3
 801e7c6:	440b      	add	r3, r1
 801e7c8:	3312      	adds	r3, #18
 801e7ca:	881b      	ldrh	r3, [r3, #0]
 801e7cc:	837b      	strh	r3, [r7, #26]
 801e7ce:	e01c      	b.n	801e80a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e7d0:	7dfb      	ldrb	r3, [r7, #23]
 801e7d2:	2b01      	cmp	r3, #1
 801e7d4:	d919      	bls.n	801e80a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e7d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e7da:	495e      	ldr	r1, [pc, #376]	; (801e954 <etharp_find_entry+0x2d4>)
 801e7dc:	4613      	mov	r3, r2
 801e7de:	005b      	lsls	r3, r3, #1
 801e7e0:	4413      	add	r3, r2
 801e7e2:	00db      	lsls	r3, r3, #3
 801e7e4:	440b      	add	r3, r1
 801e7e6:	3312      	adds	r3, #18
 801e7e8:	881b      	ldrh	r3, [r3, #0]
 801e7ea:	8b3a      	ldrh	r2, [r7, #24]
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	d80c      	bhi.n	801e80a <etharp_find_entry+0x18a>
            old_stable = i;
 801e7f0:	8c3b      	ldrh	r3, [r7, #32]
 801e7f2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801e7f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e7f8:	4956      	ldr	r1, [pc, #344]	; (801e954 <etharp_find_entry+0x2d4>)
 801e7fa:	4613      	mov	r3, r2
 801e7fc:	005b      	lsls	r3, r3, #1
 801e7fe:	4413      	add	r3, r2
 801e800:	00db      	lsls	r3, r3, #3
 801e802:	440b      	add	r3, r1
 801e804:	3312      	adds	r3, #18
 801e806:	881b      	ldrh	r3, [r3, #0]
 801e808:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e80a:	8c3b      	ldrh	r3, [r7, #32]
 801e80c:	3301      	adds	r3, #1
 801e80e:	b29b      	uxth	r3, r3
 801e810:	843b      	strh	r3, [r7, #32]
 801e812:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e816:	2b09      	cmp	r3, #9
 801e818:	f77f af4c 	ble.w	801e6b4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e81c:	7afb      	ldrb	r3, [r7, #11]
 801e81e:	f003 0302 	and.w	r3, r3, #2
 801e822:	2b00      	cmp	r3, #0
 801e824:	d108      	bne.n	801e838 <etharp_find_entry+0x1b8>
 801e826:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e82a:	2b0a      	cmp	r3, #10
 801e82c:	d107      	bne.n	801e83e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e82e:	7afb      	ldrb	r3, [r7, #11]
 801e830:	f003 0301 	and.w	r3, r3, #1
 801e834:	2b00      	cmp	r3, #0
 801e836:	d102      	bne.n	801e83e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e838:	f04f 33ff 	mov.w	r3, #4294967295
 801e83c:	e085      	b.n	801e94a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e83e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e842:	2b09      	cmp	r3, #9
 801e844:	dc02      	bgt.n	801e84c <etharp_find_entry+0x1cc>
    i = empty;
 801e846:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e848:	843b      	strh	r3, [r7, #32]
 801e84a:	e039      	b.n	801e8c0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e84c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e850:	2b09      	cmp	r3, #9
 801e852:	dc14      	bgt.n	801e87e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e856:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e85c:	493d      	ldr	r1, [pc, #244]	; (801e954 <etharp_find_entry+0x2d4>)
 801e85e:	4613      	mov	r3, r2
 801e860:	005b      	lsls	r3, r3, #1
 801e862:	4413      	add	r3, r2
 801e864:	00db      	lsls	r3, r3, #3
 801e866:	440b      	add	r3, r1
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d018      	beq.n	801e8a0 <etharp_find_entry+0x220>
 801e86e:	4b3a      	ldr	r3, [pc, #232]	; (801e958 <etharp_find_entry+0x2d8>)
 801e870:	f240 126d 	movw	r2, #365	; 0x16d
 801e874:	493b      	ldr	r1, [pc, #236]	; (801e964 <etharp_find_entry+0x2e4>)
 801e876:	483a      	ldr	r0, [pc, #232]	; (801e960 <etharp_find_entry+0x2e0>)
 801e878:	f002 fe18 	bl	80214ac <iprintf>
 801e87c:	e010      	b.n	801e8a0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e87e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e882:	2b09      	cmp	r3, #9
 801e884:	dc02      	bgt.n	801e88c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e888:	843b      	strh	r3, [r7, #32]
 801e88a:	e009      	b.n	801e8a0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e88c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e890:	2b09      	cmp	r3, #9
 801e892:	dc02      	bgt.n	801e89a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e894:	8bfb      	ldrh	r3, [r7, #30]
 801e896:	843b      	strh	r3, [r7, #32]
 801e898:	e002      	b.n	801e8a0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e89a:	f04f 33ff 	mov.w	r3, #4294967295
 801e89e:	e054      	b.n	801e94a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e8a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e8a4:	2b09      	cmp	r3, #9
 801e8a6:	dd06      	ble.n	801e8b6 <etharp_find_entry+0x236>
 801e8a8:	4b2b      	ldr	r3, [pc, #172]	; (801e958 <etharp_find_entry+0x2d8>)
 801e8aa:	f240 127f 	movw	r2, #383	; 0x17f
 801e8ae:	492e      	ldr	r1, [pc, #184]	; (801e968 <etharp_find_entry+0x2e8>)
 801e8b0:	482b      	ldr	r0, [pc, #172]	; (801e960 <etharp_find_entry+0x2e0>)
 801e8b2:	f002 fdfb 	bl	80214ac <iprintf>
    etharp_free_entry(i);
 801e8b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e8ba:	4618      	mov	r0, r3
 801e8bc:	f7ff fe06 	bl	801e4cc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e8c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e8c4:	2b09      	cmp	r3, #9
 801e8c6:	dd06      	ble.n	801e8d6 <etharp_find_entry+0x256>
 801e8c8:	4b23      	ldr	r3, [pc, #140]	; (801e958 <etharp_find_entry+0x2d8>)
 801e8ca:	f240 1283 	movw	r2, #387	; 0x183
 801e8ce:	4926      	ldr	r1, [pc, #152]	; (801e968 <etharp_find_entry+0x2e8>)
 801e8d0:	4823      	ldr	r0, [pc, #140]	; (801e960 <etharp_find_entry+0x2e0>)
 801e8d2:	f002 fdeb 	bl	80214ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e8d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e8da:	491e      	ldr	r1, [pc, #120]	; (801e954 <etharp_find_entry+0x2d4>)
 801e8dc:	4613      	mov	r3, r2
 801e8de:	005b      	lsls	r3, r3, #1
 801e8e0:	4413      	add	r3, r2
 801e8e2:	00db      	lsls	r3, r3, #3
 801e8e4:	440b      	add	r3, r1
 801e8e6:	3314      	adds	r3, #20
 801e8e8:	781b      	ldrb	r3, [r3, #0]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d006      	beq.n	801e8fc <etharp_find_entry+0x27c>
 801e8ee:	4b1a      	ldr	r3, [pc, #104]	; (801e958 <etharp_find_entry+0x2d8>)
 801e8f0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801e8f4:	491d      	ldr	r1, [pc, #116]	; (801e96c <etharp_find_entry+0x2ec>)
 801e8f6:	481a      	ldr	r0, [pc, #104]	; (801e960 <etharp_find_entry+0x2e0>)
 801e8f8:	f002 fdd8 	bl	80214ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d00b      	beq.n	801e91a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	6819      	ldr	r1, [r3, #0]
 801e90a:	4812      	ldr	r0, [pc, #72]	; (801e954 <etharp_find_entry+0x2d4>)
 801e90c:	4613      	mov	r3, r2
 801e90e:	005b      	lsls	r3, r3, #1
 801e910:	4413      	add	r3, r2
 801e912:	00db      	lsls	r3, r3, #3
 801e914:	4403      	add	r3, r0
 801e916:	3304      	adds	r3, #4
 801e918:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e91a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e91e:	490d      	ldr	r1, [pc, #52]	; (801e954 <etharp_find_entry+0x2d4>)
 801e920:	4613      	mov	r3, r2
 801e922:	005b      	lsls	r3, r3, #1
 801e924:	4413      	add	r3, r2
 801e926:	00db      	lsls	r3, r3, #3
 801e928:	440b      	add	r3, r1
 801e92a:	3312      	adds	r3, #18
 801e92c:	2200      	movs	r2, #0
 801e92e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e934:	4907      	ldr	r1, [pc, #28]	; (801e954 <etharp_find_entry+0x2d4>)
 801e936:	4613      	mov	r3, r2
 801e938:	005b      	lsls	r3, r3, #1
 801e93a:	4413      	add	r3, r2
 801e93c:	00db      	lsls	r3, r3, #3
 801e93e:	440b      	add	r3, r1
 801e940:	3308      	adds	r3, #8
 801e942:	687a      	ldr	r2, [r7, #4]
 801e944:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e946:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801e94a:	4618      	mov	r0, r3
 801e94c:	3728      	adds	r7, #40	; 0x28
 801e94e:	46bd      	mov	sp, r7
 801e950:	bd80      	pop	{r7, pc}
 801e952:	bf00      	nop
 801e954:	200055d4 	.word	0x200055d4
 801e958:	08026a44 	.word	0x08026a44
 801e95c:	08026a7c 	.word	0x08026a7c
 801e960:	08026abc 	.word	0x08026abc
 801e964:	08026ae4 	.word	0x08026ae4
 801e968:	08026afc 	.word	0x08026afc
 801e96c:	08026b10 	.word	0x08026b10

0801e970 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e970:	b580      	push	{r7, lr}
 801e972:	b088      	sub	sp, #32
 801e974:	af02      	add	r7, sp, #8
 801e976:	60f8      	str	r0, [r7, #12]
 801e978:	60b9      	str	r1, [r7, #8]
 801e97a:	607a      	str	r2, [r7, #4]
 801e97c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e984:	2b06      	cmp	r3, #6
 801e986:	d006      	beq.n	801e996 <etharp_update_arp_entry+0x26>
 801e988:	4b48      	ldr	r3, [pc, #288]	; (801eaac <etharp_update_arp_entry+0x13c>)
 801e98a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e98e:	4948      	ldr	r1, [pc, #288]	; (801eab0 <etharp_update_arp_entry+0x140>)
 801e990:	4848      	ldr	r0, [pc, #288]	; (801eab4 <etharp_update_arp_entry+0x144>)
 801e992:	f002 fd8b 	bl	80214ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e996:	68bb      	ldr	r3, [r7, #8]
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d012      	beq.n	801e9c2 <etharp_update_arp_entry+0x52>
 801e99c:	68bb      	ldr	r3, [r7, #8]
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d00e      	beq.n	801e9c2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e9a4:	68bb      	ldr	r3, [r7, #8]
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	68f9      	ldr	r1, [r7, #12]
 801e9aa:	4618      	mov	r0, r3
 801e9ac:	f001 f920 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801e9b0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d105      	bne.n	801e9c2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e9b6:	68bb      	ldr	r3, [r7, #8]
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e9be:	2be0      	cmp	r3, #224	; 0xe0
 801e9c0:	d102      	bne.n	801e9c8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e9c2:	f06f 030f 	mvn.w	r3, #15
 801e9c6:	e06c      	b.n	801eaa2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e9c8:	78fb      	ldrb	r3, [r7, #3]
 801e9ca:	68fa      	ldr	r2, [r7, #12]
 801e9cc:	4619      	mov	r1, r3
 801e9ce:	68b8      	ldr	r0, [r7, #8]
 801e9d0:	f7ff fe56 	bl	801e680 <etharp_find_entry>
 801e9d4:	4603      	mov	r3, r0
 801e9d6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e9d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	da02      	bge.n	801e9e6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e9e0:	8afb      	ldrh	r3, [r7, #22]
 801e9e2:	b25b      	sxtb	r3, r3
 801e9e4:	e05d      	b.n	801eaa2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e9e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e9ea:	4933      	ldr	r1, [pc, #204]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801e9ec:	4613      	mov	r3, r2
 801e9ee:	005b      	lsls	r3, r3, #1
 801e9f0:	4413      	add	r3, r2
 801e9f2:	00db      	lsls	r3, r3, #3
 801e9f4:	440b      	add	r3, r1
 801e9f6:	3314      	adds	r3, #20
 801e9f8:	2202      	movs	r2, #2
 801e9fa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e9fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ea00:	492d      	ldr	r1, [pc, #180]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801ea02:	4613      	mov	r3, r2
 801ea04:	005b      	lsls	r3, r3, #1
 801ea06:	4413      	add	r3, r2
 801ea08:	00db      	lsls	r3, r3, #3
 801ea0a:	440b      	add	r3, r1
 801ea0c:	3308      	adds	r3, #8
 801ea0e:	68fa      	ldr	r2, [r7, #12]
 801ea10:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ea12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ea16:	4613      	mov	r3, r2
 801ea18:	005b      	lsls	r3, r3, #1
 801ea1a:	4413      	add	r3, r2
 801ea1c:	00db      	lsls	r3, r3, #3
 801ea1e:	3308      	adds	r3, #8
 801ea20:	4a25      	ldr	r2, [pc, #148]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801ea22:	4413      	add	r3, r2
 801ea24:	3304      	adds	r3, #4
 801ea26:	2206      	movs	r2, #6
 801ea28:	6879      	ldr	r1, [r7, #4]
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	f002 fc54 	bl	80212d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ea30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ea34:	4920      	ldr	r1, [pc, #128]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801ea36:	4613      	mov	r3, r2
 801ea38:	005b      	lsls	r3, r3, #1
 801ea3a:	4413      	add	r3, r2
 801ea3c:	00db      	lsls	r3, r3, #3
 801ea3e:	440b      	add	r3, r1
 801ea40:	3312      	adds	r3, #18
 801ea42:	2200      	movs	r2, #0
 801ea44:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ea46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ea4a:	491b      	ldr	r1, [pc, #108]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801ea4c:	4613      	mov	r3, r2
 801ea4e:	005b      	lsls	r3, r3, #1
 801ea50:	4413      	add	r3, r2
 801ea52:	00db      	lsls	r3, r3, #3
 801ea54:	440b      	add	r3, r1
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	d021      	beq.n	801eaa0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ea5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ea60:	4915      	ldr	r1, [pc, #84]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801ea62:	4613      	mov	r3, r2
 801ea64:	005b      	lsls	r3, r3, #1
 801ea66:	4413      	add	r3, r2
 801ea68:	00db      	lsls	r3, r3, #3
 801ea6a:	440b      	add	r3, r1
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ea70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ea74:	4910      	ldr	r1, [pc, #64]	; (801eab8 <etharp_update_arp_entry+0x148>)
 801ea76:	4613      	mov	r3, r2
 801ea78:	005b      	lsls	r3, r3, #1
 801ea7a:	4413      	add	r3, r2
 801ea7c:	00db      	lsls	r3, r3, #3
 801ea7e:	440b      	add	r3, r1
 801ea80:	2200      	movs	r2, #0
 801ea82:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ea84:	68fb      	ldr	r3, [r7, #12]
 801ea86:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ea8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ea8e:	9300      	str	r3, [sp, #0]
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	6939      	ldr	r1, [r7, #16]
 801ea94:	68f8      	ldr	r0, [r7, #12]
 801ea96:	f002 f8dd 	bl	8020c54 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ea9a:	6938      	ldr	r0, [r7, #16]
 801ea9c:	f7f6 fadc 	bl	8015058 <pbuf_free>
  }
  return ERR_OK;
 801eaa0:	2300      	movs	r3, #0
}
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	3718      	adds	r7, #24
 801eaa6:	46bd      	mov	sp, r7
 801eaa8:	bd80      	pop	{r7, pc}
 801eaaa:	bf00      	nop
 801eaac:	08026a44 	.word	0x08026a44
 801eab0:	08026b3c 	.word	0x08026b3c
 801eab4:	08026abc 	.word	0x08026abc
 801eab8:	200055d4 	.word	0x200055d4

0801eabc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801eabc:	b580      	push	{r7, lr}
 801eabe:	b084      	sub	sp, #16
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eac4:	2300      	movs	r3, #0
 801eac6:	60fb      	str	r3, [r7, #12]
 801eac8:	e01e      	b.n	801eb08 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801eaca:	4913      	ldr	r1, [pc, #76]	; (801eb18 <etharp_cleanup_netif+0x5c>)
 801eacc:	68fa      	ldr	r2, [r7, #12]
 801eace:	4613      	mov	r3, r2
 801ead0:	005b      	lsls	r3, r3, #1
 801ead2:	4413      	add	r3, r2
 801ead4:	00db      	lsls	r3, r3, #3
 801ead6:	440b      	add	r3, r1
 801ead8:	3314      	adds	r3, #20
 801eada:	781b      	ldrb	r3, [r3, #0]
 801eadc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801eade:	7afb      	ldrb	r3, [r7, #11]
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	d00e      	beq.n	801eb02 <etharp_cleanup_netif+0x46>
 801eae4:	490c      	ldr	r1, [pc, #48]	; (801eb18 <etharp_cleanup_netif+0x5c>)
 801eae6:	68fa      	ldr	r2, [r7, #12]
 801eae8:	4613      	mov	r3, r2
 801eaea:	005b      	lsls	r3, r3, #1
 801eaec:	4413      	add	r3, r2
 801eaee:	00db      	lsls	r3, r3, #3
 801eaf0:	440b      	add	r3, r1
 801eaf2:	3308      	adds	r3, #8
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	687a      	ldr	r2, [r7, #4]
 801eaf8:	429a      	cmp	r2, r3
 801eafa:	d102      	bne.n	801eb02 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801eafc:	68f8      	ldr	r0, [r7, #12]
 801eafe:	f7ff fce5 	bl	801e4cc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eb02:	68fb      	ldr	r3, [r7, #12]
 801eb04:	3301      	adds	r3, #1
 801eb06:	60fb      	str	r3, [r7, #12]
 801eb08:	68fb      	ldr	r3, [r7, #12]
 801eb0a:	2b09      	cmp	r3, #9
 801eb0c:	dddd      	ble.n	801eaca <etharp_cleanup_netif+0xe>
    }
  }
}
 801eb0e:	bf00      	nop
 801eb10:	bf00      	nop
 801eb12:	3710      	adds	r7, #16
 801eb14:	46bd      	mov	sp, r7
 801eb16:	bd80      	pop	{r7, pc}
 801eb18:	200055d4 	.word	0x200055d4

0801eb1c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801eb1c:	b5b0      	push	{r4, r5, r7, lr}
 801eb1e:	b08a      	sub	sp, #40	; 0x28
 801eb20:	af04      	add	r7, sp, #16
 801eb22:	6078      	str	r0, [r7, #4]
 801eb24:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801eb26:	683b      	ldr	r3, [r7, #0]
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d107      	bne.n	801eb3c <etharp_input+0x20>
 801eb2c:	4b3f      	ldr	r3, [pc, #252]	; (801ec2c <etharp_input+0x110>)
 801eb2e:	f240 228a 	movw	r2, #650	; 0x28a
 801eb32:	493f      	ldr	r1, [pc, #252]	; (801ec30 <etharp_input+0x114>)
 801eb34:	483f      	ldr	r0, [pc, #252]	; (801ec34 <etharp_input+0x118>)
 801eb36:	f002 fcb9 	bl	80214ac <iprintf>
 801eb3a:	e074      	b.n	801ec26 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	685b      	ldr	r3, [r3, #4]
 801eb40:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801eb42:	693b      	ldr	r3, [r7, #16]
 801eb44:	881b      	ldrh	r3, [r3, #0]
 801eb46:	b29b      	uxth	r3, r3
 801eb48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eb4c:	d10c      	bne.n	801eb68 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801eb4e:	693b      	ldr	r3, [r7, #16]
 801eb50:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801eb52:	2b06      	cmp	r3, #6
 801eb54:	d108      	bne.n	801eb68 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801eb56:	693b      	ldr	r3, [r7, #16]
 801eb58:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801eb5a:	2b04      	cmp	r3, #4
 801eb5c:	d104      	bne.n	801eb68 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801eb5e:	693b      	ldr	r3, [r7, #16]
 801eb60:	885b      	ldrh	r3, [r3, #2]
 801eb62:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801eb64:	2b08      	cmp	r3, #8
 801eb66:	d003      	beq.n	801eb70 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801eb68:	6878      	ldr	r0, [r7, #4]
 801eb6a:	f7f6 fa75 	bl	8015058 <pbuf_free>
    return;
 801eb6e:	e05a      	b.n	801ec26 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801eb70:	693b      	ldr	r3, [r7, #16]
 801eb72:	330e      	adds	r3, #14
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801eb78:	693b      	ldr	r3, [r7, #16]
 801eb7a:	3318      	adds	r3, #24
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801eb80:	683b      	ldr	r3, [r7, #0]
 801eb82:	3304      	adds	r3, #4
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d102      	bne.n	801eb90 <etharp_input+0x74>
    for_us = 0;
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	75fb      	strb	r3, [r7, #23]
 801eb8e:	e009      	b.n	801eba4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801eb90:	68ba      	ldr	r2, [r7, #8]
 801eb92:	683b      	ldr	r3, [r7, #0]
 801eb94:	3304      	adds	r3, #4
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	429a      	cmp	r2, r3
 801eb9a:	bf0c      	ite	eq
 801eb9c:	2301      	moveq	r3, #1
 801eb9e:	2300      	movne	r3, #0
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801eba4:	693b      	ldr	r3, [r7, #16]
 801eba6:	f103 0208 	add.w	r2, r3, #8
 801ebaa:	7dfb      	ldrb	r3, [r7, #23]
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d001      	beq.n	801ebb4 <etharp_input+0x98>
 801ebb0:	2301      	movs	r3, #1
 801ebb2:	e000      	b.n	801ebb6 <etharp_input+0x9a>
 801ebb4:	2302      	movs	r3, #2
 801ebb6:	f107 010c 	add.w	r1, r7, #12
 801ebba:	6838      	ldr	r0, [r7, #0]
 801ebbc:	f7ff fed8 	bl	801e970 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ebc0:	693b      	ldr	r3, [r7, #16]
 801ebc2:	88db      	ldrh	r3, [r3, #6]
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ebca:	d003      	beq.n	801ebd4 <etharp_input+0xb8>
 801ebcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ebd0:	d01e      	beq.n	801ec10 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ebd2:	e025      	b.n	801ec20 <etharp_input+0x104>
      if (for_us) {
 801ebd4:	7dfb      	ldrb	r3, [r7, #23]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d021      	beq.n	801ec1e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ebda:	683b      	ldr	r3, [r7, #0]
 801ebdc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ebe0:	693b      	ldr	r3, [r7, #16]
 801ebe2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ebe6:	683b      	ldr	r3, [r7, #0]
 801ebe8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801ebec:	683b      	ldr	r3, [r7, #0]
 801ebee:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ebf0:	693a      	ldr	r2, [r7, #16]
 801ebf2:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ebf4:	2102      	movs	r1, #2
 801ebf6:	9103      	str	r1, [sp, #12]
 801ebf8:	f107 010c 	add.w	r1, r7, #12
 801ebfc:	9102      	str	r1, [sp, #8]
 801ebfe:	9201      	str	r2, [sp, #4]
 801ec00:	9300      	str	r3, [sp, #0]
 801ec02:	462b      	mov	r3, r5
 801ec04:	4622      	mov	r2, r4
 801ec06:	4601      	mov	r1, r0
 801ec08:	6838      	ldr	r0, [r7, #0]
 801ec0a:	f000 faef 	bl	801f1ec <etharp_raw>
      break;
 801ec0e:	e006      	b.n	801ec1e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801ec10:	f107 030c 	add.w	r3, r7, #12
 801ec14:	4619      	mov	r1, r3
 801ec16:	6838      	ldr	r0, [r7, #0]
 801ec18:	f7fe f9cc 	bl	801cfb4 <dhcp_arp_reply>
      break;
 801ec1c:	e000      	b.n	801ec20 <etharp_input+0x104>
      break;
 801ec1e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ec20:	6878      	ldr	r0, [r7, #4]
 801ec22:	f7f6 fa19 	bl	8015058 <pbuf_free>
}
 801ec26:	3718      	adds	r7, #24
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	bdb0      	pop	{r4, r5, r7, pc}
 801ec2c:	08026a44 	.word	0x08026a44
 801ec30:	08026b94 	.word	0x08026b94
 801ec34:	08026abc 	.word	0x08026abc

0801ec38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ec38:	b580      	push	{r7, lr}
 801ec3a:	b086      	sub	sp, #24
 801ec3c:	af02      	add	r7, sp, #8
 801ec3e:	60f8      	str	r0, [r7, #12]
 801ec40:	60b9      	str	r1, [r7, #8]
 801ec42:	4613      	mov	r3, r2
 801ec44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ec46:	79fa      	ldrb	r2, [r7, #7]
 801ec48:	4944      	ldr	r1, [pc, #272]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ec4a:	4613      	mov	r3, r2
 801ec4c:	005b      	lsls	r3, r3, #1
 801ec4e:	4413      	add	r3, r2
 801ec50:	00db      	lsls	r3, r3, #3
 801ec52:	440b      	add	r3, r1
 801ec54:	3314      	adds	r3, #20
 801ec56:	781b      	ldrb	r3, [r3, #0]
 801ec58:	2b01      	cmp	r3, #1
 801ec5a:	d806      	bhi.n	801ec6a <etharp_output_to_arp_index+0x32>
 801ec5c:	4b40      	ldr	r3, [pc, #256]	; (801ed60 <etharp_output_to_arp_index+0x128>)
 801ec5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ec62:	4940      	ldr	r1, [pc, #256]	; (801ed64 <etharp_output_to_arp_index+0x12c>)
 801ec64:	4840      	ldr	r0, [pc, #256]	; (801ed68 <etharp_output_to_arp_index+0x130>)
 801ec66:	f002 fc21 	bl	80214ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ec6a:	79fa      	ldrb	r2, [r7, #7]
 801ec6c:	493b      	ldr	r1, [pc, #236]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ec6e:	4613      	mov	r3, r2
 801ec70:	005b      	lsls	r3, r3, #1
 801ec72:	4413      	add	r3, r2
 801ec74:	00db      	lsls	r3, r3, #3
 801ec76:	440b      	add	r3, r1
 801ec78:	3314      	adds	r3, #20
 801ec7a:	781b      	ldrb	r3, [r3, #0]
 801ec7c:	2b02      	cmp	r3, #2
 801ec7e:	d153      	bne.n	801ed28 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ec80:	79fa      	ldrb	r2, [r7, #7]
 801ec82:	4936      	ldr	r1, [pc, #216]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ec84:	4613      	mov	r3, r2
 801ec86:	005b      	lsls	r3, r3, #1
 801ec88:	4413      	add	r3, r2
 801ec8a:	00db      	lsls	r3, r3, #3
 801ec8c:	440b      	add	r3, r1
 801ec8e:	3312      	adds	r3, #18
 801ec90:	881b      	ldrh	r3, [r3, #0]
 801ec92:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801ec96:	d919      	bls.n	801eccc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ec98:	79fa      	ldrb	r2, [r7, #7]
 801ec9a:	4613      	mov	r3, r2
 801ec9c:	005b      	lsls	r3, r3, #1
 801ec9e:	4413      	add	r3, r2
 801eca0:	00db      	lsls	r3, r3, #3
 801eca2:	4a2e      	ldr	r2, [pc, #184]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801eca4:	4413      	add	r3, r2
 801eca6:	3304      	adds	r3, #4
 801eca8:	4619      	mov	r1, r3
 801ecaa:	68f8      	ldr	r0, [r7, #12]
 801ecac:	f000 fb4c 	bl	801f348 <etharp_request>
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d138      	bne.n	801ed28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ecb6:	79fa      	ldrb	r2, [r7, #7]
 801ecb8:	4928      	ldr	r1, [pc, #160]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ecba:	4613      	mov	r3, r2
 801ecbc:	005b      	lsls	r3, r3, #1
 801ecbe:	4413      	add	r3, r2
 801ecc0:	00db      	lsls	r3, r3, #3
 801ecc2:	440b      	add	r3, r1
 801ecc4:	3314      	adds	r3, #20
 801ecc6:	2203      	movs	r2, #3
 801ecc8:	701a      	strb	r2, [r3, #0]
 801ecca:	e02d      	b.n	801ed28 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801eccc:	79fa      	ldrb	r2, [r7, #7]
 801ecce:	4923      	ldr	r1, [pc, #140]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ecd0:	4613      	mov	r3, r2
 801ecd2:	005b      	lsls	r3, r3, #1
 801ecd4:	4413      	add	r3, r2
 801ecd6:	00db      	lsls	r3, r3, #3
 801ecd8:	440b      	add	r3, r1
 801ecda:	3312      	adds	r3, #18
 801ecdc:	881b      	ldrh	r3, [r3, #0]
 801ecde:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801ece2:	d321      	bcc.n	801ed28 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801ece4:	79fa      	ldrb	r2, [r7, #7]
 801ece6:	4613      	mov	r3, r2
 801ece8:	005b      	lsls	r3, r3, #1
 801ecea:	4413      	add	r3, r2
 801ecec:	00db      	lsls	r3, r3, #3
 801ecee:	4a1b      	ldr	r2, [pc, #108]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ecf0:	4413      	add	r3, r2
 801ecf2:	1d19      	adds	r1, r3, #4
 801ecf4:	79fa      	ldrb	r2, [r7, #7]
 801ecf6:	4613      	mov	r3, r2
 801ecf8:	005b      	lsls	r3, r3, #1
 801ecfa:	4413      	add	r3, r2
 801ecfc:	00db      	lsls	r3, r3, #3
 801ecfe:	3308      	adds	r3, #8
 801ed00:	4a16      	ldr	r2, [pc, #88]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ed02:	4413      	add	r3, r2
 801ed04:	3304      	adds	r3, #4
 801ed06:	461a      	mov	r2, r3
 801ed08:	68f8      	ldr	r0, [r7, #12]
 801ed0a:	f000 fafb 	bl	801f304 <etharp_request_dst>
 801ed0e:	4603      	mov	r3, r0
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d109      	bne.n	801ed28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ed14:	79fa      	ldrb	r2, [r7, #7]
 801ed16:	4911      	ldr	r1, [pc, #68]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ed18:	4613      	mov	r3, r2
 801ed1a:	005b      	lsls	r3, r3, #1
 801ed1c:	4413      	add	r3, r2
 801ed1e:	00db      	lsls	r3, r3, #3
 801ed20:	440b      	add	r3, r1
 801ed22:	3314      	adds	r3, #20
 801ed24:	2203      	movs	r2, #3
 801ed26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801ed2e:	79fa      	ldrb	r2, [r7, #7]
 801ed30:	4613      	mov	r3, r2
 801ed32:	005b      	lsls	r3, r3, #1
 801ed34:	4413      	add	r3, r2
 801ed36:	00db      	lsls	r3, r3, #3
 801ed38:	3308      	adds	r3, #8
 801ed3a:	4a08      	ldr	r2, [pc, #32]	; (801ed5c <etharp_output_to_arp_index+0x124>)
 801ed3c:	4413      	add	r3, r2
 801ed3e:	3304      	adds	r3, #4
 801ed40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ed44:	9200      	str	r2, [sp, #0]
 801ed46:	460a      	mov	r2, r1
 801ed48:	68b9      	ldr	r1, [r7, #8]
 801ed4a:	68f8      	ldr	r0, [r7, #12]
 801ed4c:	f001 ff82 	bl	8020c54 <ethernet_output>
 801ed50:	4603      	mov	r3, r0
}
 801ed52:	4618      	mov	r0, r3
 801ed54:	3710      	adds	r7, #16
 801ed56:	46bd      	mov	sp, r7
 801ed58:	bd80      	pop	{r7, pc}
 801ed5a:	bf00      	nop
 801ed5c:	200055d4 	.word	0x200055d4
 801ed60:	08026a44 	.word	0x08026a44
 801ed64:	08026bb4 	.word	0x08026bb4
 801ed68:	08026abc 	.word	0x08026abc

0801ed6c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ed6c:	b580      	push	{r7, lr}
 801ed6e:	b08a      	sub	sp, #40	; 0x28
 801ed70:	af02      	add	r7, sp, #8
 801ed72:	60f8      	str	r0, [r7, #12]
 801ed74:	60b9      	str	r1, [r7, #8]
 801ed76:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d106      	bne.n	801ed90 <etharp_output+0x24>
 801ed82:	4b73      	ldr	r3, [pc, #460]	; (801ef50 <etharp_output+0x1e4>)
 801ed84:	f240 321e 	movw	r2, #798	; 0x31e
 801ed88:	4972      	ldr	r1, [pc, #456]	; (801ef54 <etharp_output+0x1e8>)
 801ed8a:	4873      	ldr	r0, [pc, #460]	; (801ef58 <etharp_output+0x1ec>)
 801ed8c:	f002 fb8e 	bl	80214ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ed90:	68bb      	ldr	r3, [r7, #8]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d106      	bne.n	801eda4 <etharp_output+0x38>
 801ed96:	4b6e      	ldr	r3, [pc, #440]	; (801ef50 <etharp_output+0x1e4>)
 801ed98:	f240 321f 	movw	r2, #799	; 0x31f
 801ed9c:	496f      	ldr	r1, [pc, #444]	; (801ef5c <etharp_output+0x1f0>)
 801ed9e:	486e      	ldr	r0, [pc, #440]	; (801ef58 <etharp_output+0x1ec>)
 801eda0:	f002 fb84 	bl	80214ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d106      	bne.n	801edb8 <etharp_output+0x4c>
 801edaa:	4b69      	ldr	r3, [pc, #420]	; (801ef50 <etharp_output+0x1e4>)
 801edac:	f44f 7248 	mov.w	r2, #800	; 0x320
 801edb0:	496b      	ldr	r1, [pc, #428]	; (801ef60 <etharp_output+0x1f4>)
 801edb2:	4869      	ldr	r0, [pc, #420]	; (801ef58 <etharp_output+0x1ec>)
 801edb4:	f002 fb7a 	bl	80214ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	68f9      	ldr	r1, [r7, #12]
 801edbe:	4618      	mov	r0, r3
 801edc0:	f000 ff16 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801edc4:	4603      	mov	r3, r0
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d002      	beq.n	801edd0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801edca:	4b66      	ldr	r3, [pc, #408]	; (801ef64 <etharp_output+0x1f8>)
 801edcc:	61fb      	str	r3, [r7, #28]
 801edce:	e0af      	b.n	801ef30 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801edd8:	2be0      	cmp	r3, #224	; 0xe0
 801edda:	d118      	bne.n	801ee0e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801eddc:	2301      	movs	r3, #1
 801edde:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ede0:	2300      	movs	r3, #0
 801ede2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ede4:	235e      	movs	r3, #94	; 0x5e
 801ede6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	3301      	adds	r3, #1
 801edec:	781b      	ldrb	r3, [r3, #0]
 801edee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801edf2:	b2db      	uxtb	r3, r3
 801edf4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	3302      	adds	r3, #2
 801edfa:	781b      	ldrb	r3, [r3, #0]
 801edfc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	3303      	adds	r3, #3
 801ee02:	781b      	ldrb	r3, [r3, #0]
 801ee04:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ee06:	f107 0310 	add.w	r3, r7, #16
 801ee0a:	61fb      	str	r3, [r7, #28]
 801ee0c:	e090      	b.n	801ef30 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	681a      	ldr	r2, [r3, #0]
 801ee12:	68fb      	ldr	r3, [r7, #12]
 801ee14:	3304      	adds	r3, #4
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	405a      	eors	r2, r3
 801ee1a:	68fb      	ldr	r3, [r7, #12]
 801ee1c:	3308      	adds	r3, #8
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	4013      	ands	r3, r2
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d012      	beq.n	801ee4c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ee2c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ee30:	4293      	cmp	r3, r2
 801ee32:	d00b      	beq.n	801ee4c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	330c      	adds	r3, #12
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d003      	beq.n	801ee46 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	330c      	adds	r3, #12
 801ee42:	61bb      	str	r3, [r7, #24]
 801ee44:	e002      	b.n	801ee4c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ee46:	f06f 0303 	mvn.w	r3, #3
 801ee4a:	e07d      	b.n	801ef48 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ee4c:	4b46      	ldr	r3, [pc, #280]	; (801ef68 <etharp_output+0x1fc>)
 801ee4e:	781b      	ldrb	r3, [r3, #0]
 801ee50:	4619      	mov	r1, r3
 801ee52:	4a46      	ldr	r2, [pc, #280]	; (801ef6c <etharp_output+0x200>)
 801ee54:	460b      	mov	r3, r1
 801ee56:	005b      	lsls	r3, r3, #1
 801ee58:	440b      	add	r3, r1
 801ee5a:	00db      	lsls	r3, r3, #3
 801ee5c:	4413      	add	r3, r2
 801ee5e:	3314      	adds	r3, #20
 801ee60:	781b      	ldrb	r3, [r3, #0]
 801ee62:	2b01      	cmp	r3, #1
 801ee64:	d925      	bls.n	801eeb2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ee66:	4b40      	ldr	r3, [pc, #256]	; (801ef68 <etharp_output+0x1fc>)
 801ee68:	781b      	ldrb	r3, [r3, #0]
 801ee6a:	4619      	mov	r1, r3
 801ee6c:	4a3f      	ldr	r2, [pc, #252]	; (801ef6c <etharp_output+0x200>)
 801ee6e:	460b      	mov	r3, r1
 801ee70:	005b      	lsls	r3, r3, #1
 801ee72:	440b      	add	r3, r1
 801ee74:	00db      	lsls	r3, r3, #3
 801ee76:	4413      	add	r3, r2
 801ee78:	3308      	adds	r3, #8
 801ee7a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ee7c:	68fa      	ldr	r2, [r7, #12]
 801ee7e:	429a      	cmp	r2, r3
 801ee80:	d117      	bne.n	801eeb2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ee82:	69bb      	ldr	r3, [r7, #24]
 801ee84:	681a      	ldr	r2, [r3, #0]
 801ee86:	4b38      	ldr	r3, [pc, #224]	; (801ef68 <etharp_output+0x1fc>)
 801ee88:	781b      	ldrb	r3, [r3, #0]
 801ee8a:	4618      	mov	r0, r3
 801ee8c:	4937      	ldr	r1, [pc, #220]	; (801ef6c <etharp_output+0x200>)
 801ee8e:	4603      	mov	r3, r0
 801ee90:	005b      	lsls	r3, r3, #1
 801ee92:	4403      	add	r3, r0
 801ee94:	00db      	lsls	r3, r3, #3
 801ee96:	440b      	add	r3, r1
 801ee98:	3304      	adds	r3, #4
 801ee9a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ee9c:	429a      	cmp	r2, r3
 801ee9e:	d108      	bne.n	801eeb2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801eea0:	4b31      	ldr	r3, [pc, #196]	; (801ef68 <etharp_output+0x1fc>)
 801eea2:	781b      	ldrb	r3, [r3, #0]
 801eea4:	461a      	mov	r2, r3
 801eea6:	68b9      	ldr	r1, [r7, #8]
 801eea8:	68f8      	ldr	r0, [r7, #12]
 801eeaa:	f7ff fec5 	bl	801ec38 <etharp_output_to_arp_index>
 801eeae:	4603      	mov	r3, r0
 801eeb0:	e04a      	b.n	801ef48 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	75fb      	strb	r3, [r7, #23]
 801eeb6:	e031      	b.n	801ef1c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801eeb8:	7dfa      	ldrb	r2, [r7, #23]
 801eeba:	492c      	ldr	r1, [pc, #176]	; (801ef6c <etharp_output+0x200>)
 801eebc:	4613      	mov	r3, r2
 801eebe:	005b      	lsls	r3, r3, #1
 801eec0:	4413      	add	r3, r2
 801eec2:	00db      	lsls	r3, r3, #3
 801eec4:	440b      	add	r3, r1
 801eec6:	3314      	adds	r3, #20
 801eec8:	781b      	ldrb	r3, [r3, #0]
 801eeca:	2b01      	cmp	r3, #1
 801eecc:	d923      	bls.n	801ef16 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801eece:	7dfa      	ldrb	r2, [r7, #23]
 801eed0:	4926      	ldr	r1, [pc, #152]	; (801ef6c <etharp_output+0x200>)
 801eed2:	4613      	mov	r3, r2
 801eed4:	005b      	lsls	r3, r3, #1
 801eed6:	4413      	add	r3, r2
 801eed8:	00db      	lsls	r3, r3, #3
 801eeda:	440b      	add	r3, r1
 801eedc:	3308      	adds	r3, #8
 801eede:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801eee0:	68fa      	ldr	r2, [r7, #12]
 801eee2:	429a      	cmp	r2, r3
 801eee4:	d117      	bne.n	801ef16 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801eee6:	69bb      	ldr	r3, [r7, #24]
 801eee8:	6819      	ldr	r1, [r3, #0]
 801eeea:	7dfa      	ldrb	r2, [r7, #23]
 801eeec:	481f      	ldr	r0, [pc, #124]	; (801ef6c <etharp_output+0x200>)
 801eeee:	4613      	mov	r3, r2
 801eef0:	005b      	lsls	r3, r3, #1
 801eef2:	4413      	add	r3, r2
 801eef4:	00db      	lsls	r3, r3, #3
 801eef6:	4403      	add	r3, r0
 801eef8:	3304      	adds	r3, #4
 801eefa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801eefc:	4299      	cmp	r1, r3
 801eefe:	d10a      	bne.n	801ef16 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ef00:	4a19      	ldr	r2, [pc, #100]	; (801ef68 <etharp_output+0x1fc>)
 801ef02:	7dfb      	ldrb	r3, [r7, #23]
 801ef04:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ef06:	7dfb      	ldrb	r3, [r7, #23]
 801ef08:	461a      	mov	r2, r3
 801ef0a:	68b9      	ldr	r1, [r7, #8]
 801ef0c:	68f8      	ldr	r0, [r7, #12]
 801ef0e:	f7ff fe93 	bl	801ec38 <etharp_output_to_arp_index>
 801ef12:	4603      	mov	r3, r0
 801ef14:	e018      	b.n	801ef48 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ef16:	7dfb      	ldrb	r3, [r7, #23]
 801ef18:	3301      	adds	r3, #1
 801ef1a:	75fb      	strb	r3, [r7, #23]
 801ef1c:	7dfb      	ldrb	r3, [r7, #23]
 801ef1e:	2b09      	cmp	r3, #9
 801ef20:	d9ca      	bls.n	801eeb8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ef22:	68ba      	ldr	r2, [r7, #8]
 801ef24:	69b9      	ldr	r1, [r7, #24]
 801ef26:	68f8      	ldr	r0, [r7, #12]
 801ef28:	f000 f822 	bl	801ef70 <etharp_query>
 801ef2c:	4603      	mov	r3, r0
 801ef2e:	e00b      	b.n	801ef48 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ef36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ef3a:	9300      	str	r3, [sp, #0]
 801ef3c:	69fb      	ldr	r3, [r7, #28]
 801ef3e:	68b9      	ldr	r1, [r7, #8]
 801ef40:	68f8      	ldr	r0, [r7, #12]
 801ef42:	f001 fe87 	bl	8020c54 <ethernet_output>
 801ef46:	4603      	mov	r3, r0
}
 801ef48:	4618      	mov	r0, r3
 801ef4a:	3720      	adds	r7, #32
 801ef4c:	46bd      	mov	sp, r7
 801ef4e:	bd80      	pop	{r7, pc}
 801ef50:	08026a44 	.word	0x08026a44
 801ef54:	08026b94 	.word	0x08026b94
 801ef58:	08026abc 	.word	0x08026abc
 801ef5c:	08026be4 	.word	0x08026be4
 801ef60:	08026b84 	.word	0x08026b84
 801ef64:	080274ec 	.word	0x080274ec
 801ef68:	200056c4 	.word	0x200056c4
 801ef6c:	200055d4 	.word	0x200055d4

0801ef70 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	b08c      	sub	sp, #48	; 0x30
 801ef74:	af02      	add	r7, sp, #8
 801ef76:	60f8      	str	r0, [r7, #12]
 801ef78:	60b9      	str	r1, [r7, #8]
 801ef7a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	332a      	adds	r3, #42	; 0x2a
 801ef80:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ef82:	23ff      	movs	r3, #255	; 0xff
 801ef84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801ef88:	2300      	movs	r3, #0
 801ef8a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ef8c:	68bb      	ldr	r3, [r7, #8]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	68f9      	ldr	r1, [r7, #12]
 801ef92:	4618      	mov	r0, r3
 801ef94:	f000 fe2c 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801ef98:	4603      	mov	r3, r0
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d10c      	bne.n	801efb8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ef9e:	68bb      	ldr	r3, [r7, #8]
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801efa6:	2be0      	cmp	r3, #224	; 0xe0
 801efa8:	d006      	beq.n	801efb8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801efaa:	68bb      	ldr	r3, [r7, #8]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d003      	beq.n	801efb8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801efb0:	68bb      	ldr	r3, [r7, #8]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d102      	bne.n	801efbe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801efb8:	f06f 030f 	mvn.w	r3, #15
 801efbc:	e101      	b.n	801f1c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801efbe:	68fa      	ldr	r2, [r7, #12]
 801efc0:	2101      	movs	r1, #1
 801efc2:	68b8      	ldr	r0, [r7, #8]
 801efc4:	f7ff fb5c 	bl	801e680 <etharp_find_entry>
 801efc8:	4603      	mov	r3, r0
 801efca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801efcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	da02      	bge.n	801efda <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801efd4:	8a7b      	ldrh	r3, [r7, #18]
 801efd6:	b25b      	sxtb	r3, r3
 801efd8:	e0f3      	b.n	801f1c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801efda:	8a7b      	ldrh	r3, [r7, #18]
 801efdc:	2b7e      	cmp	r3, #126	; 0x7e
 801efde:	d906      	bls.n	801efee <etharp_query+0x7e>
 801efe0:	4b7a      	ldr	r3, [pc, #488]	; (801f1cc <etharp_query+0x25c>)
 801efe2:	f240 32c1 	movw	r2, #961	; 0x3c1
 801efe6:	497a      	ldr	r1, [pc, #488]	; (801f1d0 <etharp_query+0x260>)
 801efe8:	487a      	ldr	r0, [pc, #488]	; (801f1d4 <etharp_query+0x264>)
 801efea:	f002 fa5f 	bl	80214ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 801efee:	8a7b      	ldrh	r3, [r7, #18]
 801eff0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801eff2:	7c7a      	ldrb	r2, [r7, #17]
 801eff4:	4978      	ldr	r1, [pc, #480]	; (801f1d8 <etharp_query+0x268>)
 801eff6:	4613      	mov	r3, r2
 801eff8:	005b      	lsls	r3, r3, #1
 801effa:	4413      	add	r3, r2
 801effc:	00db      	lsls	r3, r3, #3
 801effe:	440b      	add	r3, r1
 801f000:	3314      	adds	r3, #20
 801f002:	781b      	ldrb	r3, [r3, #0]
 801f004:	2b00      	cmp	r3, #0
 801f006:	d115      	bne.n	801f034 <etharp_query+0xc4>
    is_new_entry = 1;
 801f008:	2301      	movs	r3, #1
 801f00a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f00c:	7c7a      	ldrb	r2, [r7, #17]
 801f00e:	4972      	ldr	r1, [pc, #456]	; (801f1d8 <etharp_query+0x268>)
 801f010:	4613      	mov	r3, r2
 801f012:	005b      	lsls	r3, r3, #1
 801f014:	4413      	add	r3, r2
 801f016:	00db      	lsls	r3, r3, #3
 801f018:	440b      	add	r3, r1
 801f01a:	3314      	adds	r3, #20
 801f01c:	2201      	movs	r2, #1
 801f01e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801f020:	7c7a      	ldrb	r2, [r7, #17]
 801f022:	496d      	ldr	r1, [pc, #436]	; (801f1d8 <etharp_query+0x268>)
 801f024:	4613      	mov	r3, r2
 801f026:	005b      	lsls	r3, r3, #1
 801f028:	4413      	add	r3, r2
 801f02a:	00db      	lsls	r3, r3, #3
 801f02c:	440b      	add	r3, r1
 801f02e:	3308      	adds	r3, #8
 801f030:	68fa      	ldr	r2, [r7, #12]
 801f032:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801f034:	7c7a      	ldrb	r2, [r7, #17]
 801f036:	4968      	ldr	r1, [pc, #416]	; (801f1d8 <etharp_query+0x268>)
 801f038:	4613      	mov	r3, r2
 801f03a:	005b      	lsls	r3, r3, #1
 801f03c:	4413      	add	r3, r2
 801f03e:	00db      	lsls	r3, r3, #3
 801f040:	440b      	add	r3, r1
 801f042:	3314      	adds	r3, #20
 801f044:	781b      	ldrb	r3, [r3, #0]
 801f046:	2b01      	cmp	r3, #1
 801f048:	d011      	beq.n	801f06e <etharp_query+0xfe>
 801f04a:	7c7a      	ldrb	r2, [r7, #17]
 801f04c:	4962      	ldr	r1, [pc, #392]	; (801f1d8 <etharp_query+0x268>)
 801f04e:	4613      	mov	r3, r2
 801f050:	005b      	lsls	r3, r3, #1
 801f052:	4413      	add	r3, r2
 801f054:	00db      	lsls	r3, r3, #3
 801f056:	440b      	add	r3, r1
 801f058:	3314      	adds	r3, #20
 801f05a:	781b      	ldrb	r3, [r3, #0]
 801f05c:	2b01      	cmp	r3, #1
 801f05e:	d806      	bhi.n	801f06e <etharp_query+0xfe>
 801f060:	4b5a      	ldr	r3, [pc, #360]	; (801f1cc <etharp_query+0x25c>)
 801f062:	f240 32cd 	movw	r2, #973	; 0x3cd
 801f066:	495d      	ldr	r1, [pc, #372]	; (801f1dc <etharp_query+0x26c>)
 801f068:	485a      	ldr	r0, [pc, #360]	; (801f1d4 <etharp_query+0x264>)
 801f06a:	f002 fa1f 	bl	80214ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801f06e:	6a3b      	ldr	r3, [r7, #32]
 801f070:	2b00      	cmp	r3, #0
 801f072:	d102      	bne.n	801f07a <etharp_query+0x10a>
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	2b00      	cmp	r3, #0
 801f078:	d10c      	bne.n	801f094 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801f07a:	68b9      	ldr	r1, [r7, #8]
 801f07c:	68f8      	ldr	r0, [r7, #12]
 801f07e:	f000 f963 	bl	801f348 <etharp_request>
 801f082:	4603      	mov	r3, r0
 801f084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d102      	bne.n	801f094 <etharp_query+0x124>
      return result;
 801f08e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f092:	e096      	b.n	801f1c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	2b00      	cmp	r3, #0
 801f098:	d106      	bne.n	801f0a8 <etharp_query+0x138>
 801f09a:	4b4c      	ldr	r3, [pc, #304]	; (801f1cc <etharp_query+0x25c>)
 801f09c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801f0a0:	494f      	ldr	r1, [pc, #316]	; (801f1e0 <etharp_query+0x270>)
 801f0a2:	484c      	ldr	r0, [pc, #304]	; (801f1d4 <etharp_query+0x264>)
 801f0a4:	f002 fa02 	bl	80214ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f0a8:	7c7a      	ldrb	r2, [r7, #17]
 801f0aa:	494b      	ldr	r1, [pc, #300]	; (801f1d8 <etharp_query+0x268>)
 801f0ac:	4613      	mov	r3, r2
 801f0ae:	005b      	lsls	r3, r3, #1
 801f0b0:	4413      	add	r3, r2
 801f0b2:	00db      	lsls	r3, r3, #3
 801f0b4:	440b      	add	r3, r1
 801f0b6:	3314      	adds	r3, #20
 801f0b8:	781b      	ldrb	r3, [r3, #0]
 801f0ba:	2b01      	cmp	r3, #1
 801f0bc:	d917      	bls.n	801f0ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801f0be:	4a49      	ldr	r2, [pc, #292]	; (801f1e4 <etharp_query+0x274>)
 801f0c0:	7c7b      	ldrb	r3, [r7, #17]
 801f0c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f0c4:	7c7a      	ldrb	r2, [r7, #17]
 801f0c6:	4613      	mov	r3, r2
 801f0c8:	005b      	lsls	r3, r3, #1
 801f0ca:	4413      	add	r3, r2
 801f0cc:	00db      	lsls	r3, r3, #3
 801f0ce:	3308      	adds	r3, #8
 801f0d0:	4a41      	ldr	r2, [pc, #260]	; (801f1d8 <etharp_query+0x268>)
 801f0d2:	4413      	add	r3, r2
 801f0d4:	3304      	adds	r3, #4
 801f0d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f0da:	9200      	str	r2, [sp, #0]
 801f0dc:	697a      	ldr	r2, [r7, #20]
 801f0de:	6879      	ldr	r1, [r7, #4]
 801f0e0:	68f8      	ldr	r0, [r7, #12]
 801f0e2:	f001 fdb7 	bl	8020c54 <ethernet_output>
 801f0e6:	4603      	mov	r3, r0
 801f0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f0ec:	e067      	b.n	801f1be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f0ee:	7c7a      	ldrb	r2, [r7, #17]
 801f0f0:	4939      	ldr	r1, [pc, #228]	; (801f1d8 <etharp_query+0x268>)
 801f0f2:	4613      	mov	r3, r2
 801f0f4:	005b      	lsls	r3, r3, #1
 801f0f6:	4413      	add	r3, r2
 801f0f8:	00db      	lsls	r3, r3, #3
 801f0fa:	440b      	add	r3, r1
 801f0fc:	3314      	adds	r3, #20
 801f0fe:	781b      	ldrb	r3, [r3, #0]
 801f100:	2b01      	cmp	r3, #1
 801f102:	d15c      	bne.n	801f1be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801f104:	2300      	movs	r3, #0
 801f106:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f10c:	e01c      	b.n	801f148 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f10e:	69fb      	ldr	r3, [r7, #28]
 801f110:	895a      	ldrh	r2, [r3, #10]
 801f112:	69fb      	ldr	r3, [r7, #28]
 801f114:	891b      	ldrh	r3, [r3, #8]
 801f116:	429a      	cmp	r2, r3
 801f118:	d10a      	bne.n	801f130 <etharp_query+0x1c0>
 801f11a:	69fb      	ldr	r3, [r7, #28]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d006      	beq.n	801f130 <etharp_query+0x1c0>
 801f122:	4b2a      	ldr	r3, [pc, #168]	; (801f1cc <etharp_query+0x25c>)
 801f124:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801f128:	492f      	ldr	r1, [pc, #188]	; (801f1e8 <etharp_query+0x278>)
 801f12a:	482a      	ldr	r0, [pc, #168]	; (801f1d4 <etharp_query+0x264>)
 801f12c:	f002 f9be 	bl	80214ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801f130:	69fb      	ldr	r3, [r7, #28]
 801f132:	7b1b      	ldrb	r3, [r3, #12]
 801f134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d002      	beq.n	801f142 <etharp_query+0x1d2>
        copy_needed = 1;
 801f13c:	2301      	movs	r3, #1
 801f13e:	61bb      	str	r3, [r7, #24]
        break;
 801f140:	e005      	b.n	801f14e <etharp_query+0x1de>
      }
      p = p->next;
 801f142:	69fb      	ldr	r3, [r7, #28]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f148:	69fb      	ldr	r3, [r7, #28]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d1df      	bne.n	801f10e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801f14e:	69bb      	ldr	r3, [r7, #24]
 801f150:	2b00      	cmp	r3, #0
 801f152:	d007      	beq.n	801f164 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801f154:	687a      	ldr	r2, [r7, #4]
 801f156:	f44f 7120 	mov.w	r1, #640	; 0x280
 801f15a:	200e      	movs	r0, #14
 801f15c:	f7f6 fb2c 	bl	80157b8 <pbuf_clone>
 801f160:	61f8      	str	r0, [r7, #28]
 801f162:	e004      	b.n	801f16e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801f168:	69f8      	ldr	r0, [r7, #28]
 801f16a:	f7f6 f81b 	bl	80151a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801f16e:	69fb      	ldr	r3, [r7, #28]
 801f170:	2b00      	cmp	r3, #0
 801f172:	d021      	beq.n	801f1b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801f174:	7c7a      	ldrb	r2, [r7, #17]
 801f176:	4918      	ldr	r1, [pc, #96]	; (801f1d8 <etharp_query+0x268>)
 801f178:	4613      	mov	r3, r2
 801f17a:	005b      	lsls	r3, r3, #1
 801f17c:	4413      	add	r3, r2
 801f17e:	00db      	lsls	r3, r3, #3
 801f180:	440b      	add	r3, r1
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	2b00      	cmp	r3, #0
 801f186:	d00a      	beq.n	801f19e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801f188:	7c7a      	ldrb	r2, [r7, #17]
 801f18a:	4913      	ldr	r1, [pc, #76]	; (801f1d8 <etharp_query+0x268>)
 801f18c:	4613      	mov	r3, r2
 801f18e:	005b      	lsls	r3, r3, #1
 801f190:	4413      	add	r3, r2
 801f192:	00db      	lsls	r3, r3, #3
 801f194:	440b      	add	r3, r1
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	4618      	mov	r0, r3
 801f19a:	f7f5 ff5d 	bl	8015058 <pbuf_free>
      }
      arp_table[i].q = p;
 801f19e:	7c7a      	ldrb	r2, [r7, #17]
 801f1a0:	490d      	ldr	r1, [pc, #52]	; (801f1d8 <etharp_query+0x268>)
 801f1a2:	4613      	mov	r3, r2
 801f1a4:	005b      	lsls	r3, r3, #1
 801f1a6:	4413      	add	r3, r2
 801f1a8:	00db      	lsls	r3, r3, #3
 801f1aa:	440b      	add	r3, r1
 801f1ac:	69fa      	ldr	r2, [r7, #28]
 801f1ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801f1b0:	2300      	movs	r3, #0
 801f1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f1b6:	e002      	b.n	801f1be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801f1b8:	23ff      	movs	r3, #255	; 0xff
 801f1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801f1be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	3728      	adds	r7, #40	; 0x28
 801f1c6:	46bd      	mov	sp, r7
 801f1c8:	bd80      	pop	{r7, pc}
 801f1ca:	bf00      	nop
 801f1cc:	08026a44 	.word	0x08026a44
 801f1d0:	08026bf0 	.word	0x08026bf0
 801f1d4:	08026abc 	.word	0x08026abc
 801f1d8:	200055d4 	.word	0x200055d4
 801f1dc:	08026c00 	.word	0x08026c00
 801f1e0:	08026be4 	.word	0x08026be4
 801f1e4:	200056c4 	.word	0x200056c4
 801f1e8:	08026c28 	.word	0x08026c28

0801f1ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f1ec:	b580      	push	{r7, lr}
 801f1ee:	b08a      	sub	sp, #40	; 0x28
 801f1f0:	af02      	add	r7, sp, #8
 801f1f2:	60f8      	str	r0, [r7, #12]
 801f1f4:	60b9      	str	r1, [r7, #8]
 801f1f6:	607a      	str	r2, [r7, #4]
 801f1f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	2b00      	cmp	r3, #0
 801f202:	d106      	bne.n	801f212 <etharp_raw+0x26>
 801f204:	4b3a      	ldr	r3, [pc, #232]	; (801f2f0 <etharp_raw+0x104>)
 801f206:	f240 4257 	movw	r2, #1111	; 0x457
 801f20a:	493a      	ldr	r1, [pc, #232]	; (801f2f4 <etharp_raw+0x108>)
 801f20c:	483a      	ldr	r0, [pc, #232]	; (801f2f8 <etharp_raw+0x10c>)
 801f20e:	f002 f94d 	bl	80214ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f212:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f216:	211c      	movs	r1, #28
 801f218:	200e      	movs	r0, #14
 801f21a:	f7f5 fc39 	bl	8014a90 <pbuf_alloc>
 801f21e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f220:	69bb      	ldr	r3, [r7, #24]
 801f222:	2b00      	cmp	r3, #0
 801f224:	d102      	bne.n	801f22c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801f226:	f04f 33ff 	mov.w	r3, #4294967295
 801f22a:	e05d      	b.n	801f2e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f22c:	69bb      	ldr	r3, [r7, #24]
 801f22e:	895b      	ldrh	r3, [r3, #10]
 801f230:	2b1b      	cmp	r3, #27
 801f232:	d806      	bhi.n	801f242 <etharp_raw+0x56>
 801f234:	4b2e      	ldr	r3, [pc, #184]	; (801f2f0 <etharp_raw+0x104>)
 801f236:	f240 4262 	movw	r2, #1122	; 0x462
 801f23a:	4930      	ldr	r1, [pc, #192]	; (801f2fc <etharp_raw+0x110>)
 801f23c:	482e      	ldr	r0, [pc, #184]	; (801f2f8 <etharp_raw+0x10c>)
 801f23e:	f002 f935 	bl	80214ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f242:	69bb      	ldr	r3, [r7, #24]
 801f244:	685b      	ldr	r3, [r3, #4]
 801f246:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f248:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801f24a:	4618      	mov	r0, r3
 801f24c:	f7f3 fb76 	bl	801293c <lwip_htons>
 801f250:	4603      	mov	r3, r0
 801f252:	461a      	mov	r2, r3
 801f254:	697b      	ldr	r3, [r7, #20]
 801f256:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f25e:	2b06      	cmp	r3, #6
 801f260:	d006      	beq.n	801f270 <etharp_raw+0x84>
 801f262:	4b23      	ldr	r3, [pc, #140]	; (801f2f0 <etharp_raw+0x104>)
 801f264:	f240 4269 	movw	r2, #1129	; 0x469
 801f268:	4925      	ldr	r1, [pc, #148]	; (801f300 <etharp_raw+0x114>)
 801f26a:	4823      	ldr	r0, [pc, #140]	; (801f2f8 <etharp_raw+0x10c>)
 801f26c:	f002 f91e 	bl	80214ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f270:	697b      	ldr	r3, [r7, #20]
 801f272:	3308      	adds	r3, #8
 801f274:	2206      	movs	r2, #6
 801f276:	6839      	ldr	r1, [r7, #0]
 801f278:	4618      	mov	r0, r3
 801f27a:	f002 f82d 	bl	80212d8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f27e:	697b      	ldr	r3, [r7, #20]
 801f280:	3312      	adds	r3, #18
 801f282:	2206      	movs	r2, #6
 801f284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f286:	4618      	mov	r0, r3
 801f288:	f002 f826 	bl	80212d8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801f28c:	697b      	ldr	r3, [r7, #20]
 801f28e:	330e      	adds	r3, #14
 801f290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f292:	6812      	ldr	r2, [r2, #0]
 801f294:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f296:	697b      	ldr	r3, [r7, #20]
 801f298:	3318      	adds	r3, #24
 801f29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f29c:	6812      	ldr	r2, [r2, #0]
 801f29e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f2a0:	697b      	ldr	r3, [r7, #20]
 801f2a2:	2200      	movs	r2, #0
 801f2a4:	701a      	strb	r2, [r3, #0]
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	f042 0201 	orr.w	r2, r2, #1
 801f2ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f2ae:	697b      	ldr	r3, [r7, #20]
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	f042 0208 	orr.w	r2, r2, #8
 801f2b6:	709a      	strb	r2, [r3, #2]
 801f2b8:	2200      	movs	r2, #0
 801f2ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f2bc:	697b      	ldr	r3, [r7, #20]
 801f2be:	2206      	movs	r2, #6
 801f2c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f2c2:	697b      	ldr	r3, [r7, #20]
 801f2c4:	2204      	movs	r2, #4
 801f2c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f2c8:	f640 0306 	movw	r3, #2054	; 0x806
 801f2cc:	9300      	str	r3, [sp, #0]
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	68ba      	ldr	r2, [r7, #8]
 801f2d2:	69b9      	ldr	r1, [r7, #24]
 801f2d4:	68f8      	ldr	r0, [r7, #12]
 801f2d6:	f001 fcbd 	bl	8020c54 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801f2da:	69b8      	ldr	r0, [r7, #24]
 801f2dc:	f7f5 febc 	bl	8015058 <pbuf_free>
  p = NULL;
 801f2e0:	2300      	movs	r3, #0
 801f2e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f2e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f2e8:	4618      	mov	r0, r3
 801f2ea:	3720      	adds	r7, #32
 801f2ec:	46bd      	mov	sp, r7
 801f2ee:	bd80      	pop	{r7, pc}
 801f2f0:	08026a44 	.word	0x08026a44
 801f2f4:	08026b94 	.word	0x08026b94
 801f2f8:	08026abc 	.word	0x08026abc
 801f2fc:	08026c44 	.word	0x08026c44
 801f300:	08026c78 	.word	0x08026c78

0801f304 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801f304:	b580      	push	{r7, lr}
 801f306:	b088      	sub	sp, #32
 801f308:	af04      	add	r7, sp, #16
 801f30a:	60f8      	str	r0, [r7, #12]
 801f30c:	60b9      	str	r1, [r7, #8]
 801f30e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f310:	68fb      	ldr	r3, [r7, #12]
 801f312:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f320:	2201      	movs	r2, #1
 801f322:	9203      	str	r2, [sp, #12]
 801f324:	68ba      	ldr	r2, [r7, #8]
 801f326:	9202      	str	r2, [sp, #8]
 801f328:	4a06      	ldr	r2, [pc, #24]	; (801f344 <etharp_request_dst+0x40>)
 801f32a:	9201      	str	r2, [sp, #4]
 801f32c:	9300      	str	r3, [sp, #0]
 801f32e:	4603      	mov	r3, r0
 801f330:	687a      	ldr	r2, [r7, #4]
 801f332:	68f8      	ldr	r0, [r7, #12]
 801f334:	f7ff ff5a 	bl	801f1ec <etharp_raw>
 801f338:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f33a:	4618      	mov	r0, r3
 801f33c:	3710      	adds	r7, #16
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}
 801f342:	bf00      	nop
 801f344:	080274f4 	.word	0x080274f4

0801f348 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f348:	b580      	push	{r7, lr}
 801f34a:	b082      	sub	sp, #8
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
 801f350:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f352:	4a05      	ldr	r2, [pc, #20]	; (801f368 <etharp_request+0x20>)
 801f354:	6839      	ldr	r1, [r7, #0]
 801f356:	6878      	ldr	r0, [r7, #4]
 801f358:	f7ff ffd4 	bl	801f304 <etharp_request_dst>
 801f35c:	4603      	mov	r3, r0
}
 801f35e:	4618      	mov	r0, r3
 801f360:	3708      	adds	r7, #8
 801f362:	46bd      	mov	sp, r7
 801f364:	bd80      	pop	{r7, pc}
 801f366:	bf00      	nop
 801f368:	080274ec 	.word	0x080274ec

0801f36c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f36c:	b580      	push	{r7, lr}
 801f36e:	b08e      	sub	sp, #56	; 0x38
 801f370:	af04      	add	r7, sp, #16
 801f372:	6078      	str	r0, [r7, #4]
 801f374:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801f376:	4b79      	ldr	r3, [pc, #484]	; (801f55c <icmp_input+0x1f0>)
 801f378:	689b      	ldr	r3, [r3, #8]
 801f37a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f37e:	781b      	ldrb	r3, [r3, #0]
 801f380:	f003 030f 	and.w	r3, r3, #15
 801f384:	b2db      	uxtb	r3, r3
 801f386:	009b      	lsls	r3, r3, #2
 801f388:	b2db      	uxtb	r3, r3
 801f38a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801f38c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f38e:	2b13      	cmp	r3, #19
 801f390:	f240 80cd 	bls.w	801f52e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	895b      	ldrh	r3, [r3, #10]
 801f398:	2b03      	cmp	r3, #3
 801f39a:	f240 80ca 	bls.w	801f532 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	685b      	ldr	r3, [r3, #4]
 801f3a2:	781b      	ldrb	r3, [r3, #0]
 801f3a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f3a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	f000 80b7 	beq.w	801f520 <icmp_input+0x1b4>
 801f3b2:	2b08      	cmp	r3, #8
 801f3b4:	f040 80b7 	bne.w	801f526 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801f3b8:	4b69      	ldr	r3, [pc, #420]	; (801f560 <icmp_input+0x1f4>)
 801f3ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f3bc:	4b67      	ldr	r3, [pc, #412]	; (801f55c <icmp_input+0x1f0>)
 801f3be:	695b      	ldr	r3, [r3, #20]
 801f3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f3c4:	2be0      	cmp	r3, #224	; 0xe0
 801f3c6:	f000 80bb 	beq.w	801f540 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f3ca:	4b64      	ldr	r3, [pc, #400]	; (801f55c <icmp_input+0x1f0>)
 801f3cc:	695b      	ldr	r3, [r3, #20]
 801f3ce:	4a63      	ldr	r2, [pc, #396]	; (801f55c <icmp_input+0x1f0>)
 801f3d0:	6812      	ldr	r2, [r2, #0]
 801f3d2:	4611      	mov	r1, r2
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f000 fc0b 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	f040 80b1 	bne.w	801f544 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	891b      	ldrh	r3, [r3, #8]
 801f3e6:	2b07      	cmp	r3, #7
 801f3e8:	f240 80a5 	bls.w	801f536 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f3ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f3ee:	330e      	adds	r3, #14
 801f3f0:	4619      	mov	r1, r3
 801f3f2:	6878      	ldr	r0, [r7, #4]
 801f3f4:	f7f5 fd9a 	bl	8014f2c <pbuf_add_header>
 801f3f8:	4603      	mov	r3, r0
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d04b      	beq.n	801f496 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	891a      	ldrh	r2, [r3, #8]
 801f402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f404:	4413      	add	r3, r2
 801f406:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	891b      	ldrh	r3, [r3, #8]
 801f40c:	8b7a      	ldrh	r2, [r7, #26]
 801f40e:	429a      	cmp	r2, r3
 801f410:	f0c0 809a 	bcc.w	801f548 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f414:	8b7b      	ldrh	r3, [r7, #26]
 801f416:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f41a:	4619      	mov	r1, r3
 801f41c:	200e      	movs	r0, #14
 801f41e:	f7f5 fb37 	bl	8014a90 <pbuf_alloc>
 801f422:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f424:	697b      	ldr	r3, [r7, #20]
 801f426:	2b00      	cmp	r3, #0
 801f428:	f000 8090 	beq.w	801f54c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f42c:	697b      	ldr	r3, [r7, #20]
 801f42e:	895b      	ldrh	r3, [r3, #10]
 801f430:	461a      	mov	r2, r3
 801f432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f434:	3308      	adds	r3, #8
 801f436:	429a      	cmp	r2, r3
 801f438:	d203      	bcs.n	801f442 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f43a:	6978      	ldr	r0, [r7, #20]
 801f43c:	f7f5 fe0c 	bl	8015058 <pbuf_free>
          goto icmperr;
 801f440:	e085      	b.n	801f54e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f442:	697b      	ldr	r3, [r7, #20]
 801f444:	685b      	ldr	r3, [r3, #4]
 801f446:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f44a:	4618      	mov	r0, r3
 801f44c:	f001 ff44 	bl	80212d8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f452:	4619      	mov	r1, r3
 801f454:	6978      	ldr	r0, [r7, #20]
 801f456:	f7f5 fd79 	bl	8014f4c <pbuf_remove_header>
 801f45a:	4603      	mov	r3, r0
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	d009      	beq.n	801f474 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f460:	4b40      	ldr	r3, [pc, #256]	; (801f564 <icmp_input+0x1f8>)
 801f462:	22b6      	movs	r2, #182	; 0xb6
 801f464:	4940      	ldr	r1, [pc, #256]	; (801f568 <icmp_input+0x1fc>)
 801f466:	4841      	ldr	r0, [pc, #260]	; (801f56c <icmp_input+0x200>)
 801f468:	f002 f820 	bl	80214ac <iprintf>
          pbuf_free(r);
 801f46c:	6978      	ldr	r0, [r7, #20]
 801f46e:	f7f5 fdf3 	bl	8015058 <pbuf_free>
          goto icmperr;
 801f472:	e06c      	b.n	801f54e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f474:	6879      	ldr	r1, [r7, #4]
 801f476:	6978      	ldr	r0, [r7, #20]
 801f478:	f7f5 ff22 	bl	80152c0 <pbuf_copy>
 801f47c:	4603      	mov	r3, r0
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d003      	beq.n	801f48a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f482:	6978      	ldr	r0, [r7, #20]
 801f484:	f7f5 fde8 	bl	8015058 <pbuf_free>
          goto icmperr;
 801f488:	e061      	b.n	801f54e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801f48a:	6878      	ldr	r0, [r7, #4]
 801f48c:	f7f5 fde4 	bl	8015058 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f490:	697b      	ldr	r3, [r7, #20]
 801f492:	607b      	str	r3, [r7, #4]
 801f494:	e00f      	b.n	801f4b6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f498:	330e      	adds	r3, #14
 801f49a:	4619      	mov	r1, r3
 801f49c:	6878      	ldr	r0, [r7, #4]
 801f49e:	f7f5 fd55 	bl	8014f4c <pbuf_remove_header>
 801f4a2:	4603      	mov	r3, r0
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d006      	beq.n	801f4b6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f4a8:	4b2e      	ldr	r3, [pc, #184]	; (801f564 <icmp_input+0x1f8>)
 801f4aa:	22c7      	movs	r2, #199	; 0xc7
 801f4ac:	4930      	ldr	r1, [pc, #192]	; (801f570 <icmp_input+0x204>)
 801f4ae:	482f      	ldr	r0, [pc, #188]	; (801f56c <icmp_input+0x200>)
 801f4b0:	f001 fffc 	bl	80214ac <iprintf>
          goto icmperr;
 801f4b4:	e04b      	b.n	801f54e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	685b      	ldr	r3, [r3, #4]
 801f4ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f4be:	4619      	mov	r1, r3
 801f4c0:	6878      	ldr	r0, [r7, #4]
 801f4c2:	f7f5 fd33 	bl	8014f2c <pbuf_add_header>
 801f4c6:	4603      	mov	r3, r0
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d12b      	bne.n	801f524 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	685b      	ldr	r3, [r3, #4]
 801f4d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f4d2:	69fb      	ldr	r3, [r7, #28]
 801f4d4:	681a      	ldr	r2, [r3, #0]
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f4da:	4b20      	ldr	r3, [pc, #128]	; (801f55c <icmp_input+0x1f0>)
 801f4dc:	691a      	ldr	r2, [r3, #16]
 801f4de:	68fb      	ldr	r3, [r7, #12]
 801f4e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f4e2:	693b      	ldr	r3, [r7, #16]
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f4e8:	693b      	ldr	r3, [r7, #16]
 801f4ea:	2200      	movs	r2, #0
 801f4ec:	709a      	strb	r2, [r3, #2]
 801f4ee:	2200      	movs	r2, #0
 801f4f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f4f2:	68fb      	ldr	r3, [r7, #12]
 801f4f4:	22ff      	movs	r2, #255	; 0xff
 801f4f6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f4f8:	68fb      	ldr	r3, [r7, #12]
 801f4fa:	2200      	movs	r2, #0
 801f4fc:	729a      	strb	r2, [r3, #10]
 801f4fe:	2200      	movs	r2, #0
 801f500:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f502:	683b      	ldr	r3, [r7, #0]
 801f504:	9302      	str	r3, [sp, #8]
 801f506:	2301      	movs	r3, #1
 801f508:	9301      	str	r3, [sp, #4]
 801f50a:	2300      	movs	r3, #0
 801f50c:	9300      	str	r3, [sp, #0]
 801f50e:	23ff      	movs	r3, #255	; 0xff
 801f510:	2200      	movs	r2, #0
 801f512:	69f9      	ldr	r1, [r7, #28]
 801f514:	6878      	ldr	r0, [r7, #4]
 801f516:	f000 fa93 	bl	801fa40 <ip4_output_if>
 801f51a:	4603      	mov	r3, r0
 801f51c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f51e:	e001      	b.n	801f524 <icmp_input+0x1b8>
      break;
 801f520:	bf00      	nop
 801f522:	e000      	b.n	801f526 <icmp_input+0x1ba>
      break;
 801f524:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f526:	6878      	ldr	r0, [r7, #4]
 801f528:	f7f5 fd96 	bl	8015058 <pbuf_free>
  return;
 801f52c:	e013      	b.n	801f556 <icmp_input+0x1ea>
    goto lenerr;
 801f52e:	bf00      	nop
 801f530:	e002      	b.n	801f538 <icmp_input+0x1cc>
    goto lenerr;
 801f532:	bf00      	nop
 801f534:	e000      	b.n	801f538 <icmp_input+0x1cc>
        goto lenerr;
 801f536:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f538:	6878      	ldr	r0, [r7, #4]
 801f53a:	f7f5 fd8d 	bl	8015058 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f53e:	e00a      	b.n	801f556 <icmp_input+0x1ea>
        goto icmperr;
 801f540:	bf00      	nop
 801f542:	e004      	b.n	801f54e <icmp_input+0x1e2>
        goto icmperr;
 801f544:	bf00      	nop
 801f546:	e002      	b.n	801f54e <icmp_input+0x1e2>
          goto icmperr;
 801f548:	bf00      	nop
 801f54a:	e000      	b.n	801f54e <icmp_input+0x1e2>
          goto icmperr;
 801f54c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f54e:	6878      	ldr	r0, [r7, #4]
 801f550:	f7f5 fd82 	bl	8015058 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f554:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f556:	3728      	adds	r7, #40	; 0x28
 801f558:	46bd      	mov	sp, r7
 801f55a:	bd80      	pop	{r7, pc}
 801f55c:	2001346c 	.word	0x2001346c
 801f560:	20013480 	.word	0x20013480
 801f564:	08026cbc 	.word	0x08026cbc
 801f568:	08026cf4 	.word	0x08026cf4
 801f56c:	08026d2c 	.word	0x08026d2c
 801f570:	08026d54 	.word	0x08026d54

0801f574 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f574:	b580      	push	{r7, lr}
 801f576:	b082      	sub	sp, #8
 801f578:	af00      	add	r7, sp, #0
 801f57a:	6078      	str	r0, [r7, #4]
 801f57c:	460b      	mov	r3, r1
 801f57e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801f580:	78fb      	ldrb	r3, [r7, #3]
 801f582:	461a      	mov	r2, r3
 801f584:	2103      	movs	r1, #3
 801f586:	6878      	ldr	r0, [r7, #4]
 801f588:	f000 f814 	bl	801f5b4 <icmp_send_response>
}
 801f58c:	bf00      	nop
 801f58e:	3708      	adds	r7, #8
 801f590:	46bd      	mov	sp, r7
 801f592:	bd80      	pop	{r7, pc}

0801f594 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f594:	b580      	push	{r7, lr}
 801f596:	b082      	sub	sp, #8
 801f598:	af00      	add	r7, sp, #0
 801f59a:	6078      	str	r0, [r7, #4]
 801f59c:	460b      	mov	r3, r1
 801f59e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801f5a0:	78fb      	ldrb	r3, [r7, #3]
 801f5a2:	461a      	mov	r2, r3
 801f5a4:	210b      	movs	r1, #11
 801f5a6:	6878      	ldr	r0, [r7, #4]
 801f5a8:	f000 f804 	bl	801f5b4 <icmp_send_response>
}
 801f5ac:	bf00      	nop
 801f5ae:	3708      	adds	r7, #8
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	bd80      	pop	{r7, pc}

0801f5b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f5b4:	b580      	push	{r7, lr}
 801f5b6:	b08c      	sub	sp, #48	; 0x30
 801f5b8:	af04      	add	r7, sp, #16
 801f5ba:	6078      	str	r0, [r7, #4]
 801f5bc:	460b      	mov	r3, r1
 801f5be:	70fb      	strb	r3, [r7, #3]
 801f5c0:	4613      	mov	r3, r2
 801f5c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f5c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f5c8:	2124      	movs	r1, #36	; 0x24
 801f5ca:	2022      	movs	r0, #34	; 0x22
 801f5cc:	f7f5 fa60 	bl	8014a90 <pbuf_alloc>
 801f5d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801f5d2:	69fb      	ldr	r3, [r7, #28]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d04c      	beq.n	801f672 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f5d8:	69fb      	ldr	r3, [r7, #28]
 801f5da:	895b      	ldrh	r3, [r3, #10]
 801f5dc:	2b23      	cmp	r3, #35	; 0x23
 801f5de:	d806      	bhi.n	801f5ee <icmp_send_response+0x3a>
 801f5e0:	4b26      	ldr	r3, [pc, #152]	; (801f67c <icmp_send_response+0xc8>)
 801f5e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801f5e6:	4926      	ldr	r1, [pc, #152]	; (801f680 <icmp_send_response+0xcc>)
 801f5e8:	4826      	ldr	r0, [pc, #152]	; (801f684 <icmp_send_response+0xd0>)
 801f5ea:	f001 ff5f 	bl	80214ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	685b      	ldr	r3, [r3, #4]
 801f5f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f5f4:	69fb      	ldr	r3, [r7, #28]
 801f5f6:	685b      	ldr	r3, [r3, #4]
 801f5f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801f5fa:	697b      	ldr	r3, [r7, #20]
 801f5fc:	78fa      	ldrb	r2, [r7, #3]
 801f5fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f600:	697b      	ldr	r3, [r7, #20]
 801f602:	78ba      	ldrb	r2, [r7, #2]
 801f604:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f606:	697b      	ldr	r3, [r7, #20]
 801f608:	2200      	movs	r2, #0
 801f60a:	711a      	strb	r2, [r3, #4]
 801f60c:	2200      	movs	r2, #0
 801f60e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f610:	697b      	ldr	r3, [r7, #20]
 801f612:	2200      	movs	r2, #0
 801f614:	719a      	strb	r2, [r3, #6]
 801f616:	2200      	movs	r2, #0
 801f618:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f61a:	69fb      	ldr	r3, [r7, #28]
 801f61c:	685b      	ldr	r3, [r3, #4]
 801f61e:	f103 0008 	add.w	r0, r3, #8
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	685b      	ldr	r3, [r3, #4]
 801f626:	221c      	movs	r2, #28
 801f628:	4619      	mov	r1, r3
 801f62a:	f001 fe55 	bl	80212d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f62e:	69bb      	ldr	r3, [r7, #24]
 801f630:	68db      	ldr	r3, [r3, #12]
 801f632:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f634:	f107 030c 	add.w	r3, r7, #12
 801f638:	4618      	mov	r0, r3
 801f63a:	f000 f825 	bl	801f688 <ip4_route>
 801f63e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801f640:	693b      	ldr	r3, [r7, #16]
 801f642:	2b00      	cmp	r3, #0
 801f644:	d011      	beq.n	801f66a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f646:	697b      	ldr	r3, [r7, #20]
 801f648:	2200      	movs	r2, #0
 801f64a:	709a      	strb	r2, [r3, #2]
 801f64c:	2200      	movs	r2, #0
 801f64e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f650:	f107 020c 	add.w	r2, r7, #12
 801f654:	693b      	ldr	r3, [r7, #16]
 801f656:	9302      	str	r3, [sp, #8]
 801f658:	2301      	movs	r3, #1
 801f65a:	9301      	str	r3, [sp, #4]
 801f65c:	2300      	movs	r3, #0
 801f65e:	9300      	str	r3, [sp, #0]
 801f660:	23ff      	movs	r3, #255	; 0xff
 801f662:	2100      	movs	r1, #0
 801f664:	69f8      	ldr	r0, [r7, #28]
 801f666:	f000 f9eb 	bl	801fa40 <ip4_output_if>
  }
  pbuf_free(q);
 801f66a:	69f8      	ldr	r0, [r7, #28]
 801f66c:	f7f5 fcf4 	bl	8015058 <pbuf_free>
 801f670:	e000      	b.n	801f674 <icmp_send_response+0xc0>
    return;
 801f672:	bf00      	nop
}
 801f674:	3720      	adds	r7, #32
 801f676:	46bd      	mov	sp, r7
 801f678:	bd80      	pop	{r7, pc}
 801f67a:	bf00      	nop
 801f67c:	08026cbc 	.word	0x08026cbc
 801f680:	08026d88 	.word	0x08026d88
 801f684:	08026d2c 	.word	0x08026d2c

0801f688 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f688:	b480      	push	{r7}
 801f68a:	b085      	sub	sp, #20
 801f68c:	af00      	add	r7, sp, #0
 801f68e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801f690:	4b33      	ldr	r3, [pc, #204]	; (801f760 <ip4_route+0xd8>)
 801f692:	681b      	ldr	r3, [r3, #0]
 801f694:	60fb      	str	r3, [r7, #12]
 801f696:	e036      	b.n	801f706 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f69e:	f003 0301 	and.w	r3, r3, #1
 801f6a2:	b2db      	uxtb	r3, r3
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d02b      	beq.n	801f700 <ip4_route+0x78>
 801f6a8:	68fb      	ldr	r3, [r7, #12]
 801f6aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f6ae:	089b      	lsrs	r3, r3, #2
 801f6b0:	f003 0301 	and.w	r3, r3, #1
 801f6b4:	b2db      	uxtb	r3, r3
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d022      	beq.n	801f700 <ip4_route+0x78>
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	3304      	adds	r3, #4
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d01d      	beq.n	801f700 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	681a      	ldr	r2, [r3, #0]
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	3304      	adds	r3, #4
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	405a      	eors	r2, r3
 801f6d0:	68fb      	ldr	r3, [r7, #12]
 801f6d2:	3308      	adds	r3, #8
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	4013      	ands	r3, r2
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d101      	bne.n	801f6e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	e038      	b.n	801f752 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f6e0:	68fb      	ldr	r3, [r7, #12]
 801f6e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f6e6:	f003 0302 	and.w	r3, r3, #2
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d108      	bne.n	801f700 <ip4_route+0x78>
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	681a      	ldr	r2, [r3, #0]
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	330c      	adds	r3, #12
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	429a      	cmp	r2, r3
 801f6fa:	d101      	bne.n	801f700 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f6fc:	68fb      	ldr	r3, [r7, #12]
 801f6fe:	e028      	b.n	801f752 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	60fb      	str	r3, [r7, #12]
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	2b00      	cmp	r3, #0
 801f70a:	d1c5      	bne.n	801f698 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f70c:	4b15      	ldr	r3, [pc, #84]	; (801f764 <ip4_route+0xdc>)
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	2b00      	cmp	r3, #0
 801f712:	d01a      	beq.n	801f74a <ip4_route+0xc2>
 801f714:	4b13      	ldr	r3, [pc, #76]	; (801f764 <ip4_route+0xdc>)
 801f716:	681b      	ldr	r3, [r3, #0]
 801f718:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f71c:	f003 0301 	and.w	r3, r3, #1
 801f720:	2b00      	cmp	r3, #0
 801f722:	d012      	beq.n	801f74a <ip4_route+0xc2>
 801f724:	4b0f      	ldr	r3, [pc, #60]	; (801f764 <ip4_route+0xdc>)
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f72c:	f003 0304 	and.w	r3, r3, #4
 801f730:	2b00      	cmp	r3, #0
 801f732:	d00a      	beq.n	801f74a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f734:	4b0b      	ldr	r3, [pc, #44]	; (801f764 <ip4_route+0xdc>)
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	3304      	adds	r3, #4
 801f73a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d004      	beq.n	801f74a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	b2db      	uxtb	r3, r3
 801f746:	2b7f      	cmp	r3, #127	; 0x7f
 801f748:	d101      	bne.n	801f74e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f74a:	2300      	movs	r3, #0
 801f74c:	e001      	b.n	801f752 <ip4_route+0xca>
  }

  return netif_default;
 801f74e:	4b05      	ldr	r3, [pc, #20]	; (801f764 <ip4_route+0xdc>)
 801f750:	681b      	ldr	r3, [r3, #0]
}
 801f752:	4618      	mov	r0, r3
 801f754:	3714      	adds	r7, #20
 801f756:	46bd      	mov	sp, r7
 801f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f75c:	4770      	bx	lr
 801f75e:	bf00      	nop
 801f760:	20016c3c 	.word	0x20016c3c
 801f764:	20016c40 	.word	0x20016c40

0801f768 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f768:	b580      	push	{r7, lr}
 801f76a:	b082      	sub	sp, #8
 801f76c:	af00      	add	r7, sp, #0
 801f76e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f776:	f003 0301 	and.w	r3, r3, #1
 801f77a:	b2db      	uxtb	r3, r3
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d016      	beq.n	801f7ae <ip4_input_accept+0x46>
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	3304      	adds	r3, #4
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d011      	beq.n	801f7ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f78a:	4b0b      	ldr	r3, [pc, #44]	; (801f7b8 <ip4_input_accept+0x50>)
 801f78c:	695a      	ldr	r2, [r3, #20]
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	3304      	adds	r3, #4
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	429a      	cmp	r2, r3
 801f796:	d008      	beq.n	801f7aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f798:	4b07      	ldr	r3, [pc, #28]	; (801f7b8 <ip4_input_accept+0x50>)
 801f79a:	695b      	ldr	r3, [r3, #20]
 801f79c:	6879      	ldr	r1, [r7, #4]
 801f79e:	4618      	mov	r0, r3
 801f7a0:	f000 fa26 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801f7a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	d001      	beq.n	801f7ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f7aa:	2301      	movs	r3, #1
 801f7ac:	e000      	b.n	801f7b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f7ae:	2300      	movs	r3, #0
}
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	3708      	adds	r7, #8
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd80      	pop	{r7, pc}
 801f7b8:	2001346c 	.word	0x2001346c

0801f7bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f7bc:	b580      	push	{r7, lr}
 801f7be:	b088      	sub	sp, #32
 801f7c0:	af00      	add	r7, sp, #0
 801f7c2:	6078      	str	r0, [r7, #4]
 801f7c4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f7c6:	2301      	movs	r3, #1
 801f7c8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	685b      	ldr	r3, [r3, #4]
 801f7ce:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801f7d0:	69fb      	ldr	r3, [r7, #28]
 801f7d2:	781b      	ldrb	r3, [r3, #0]
 801f7d4:	091b      	lsrs	r3, r3, #4
 801f7d6:	b2db      	uxtb	r3, r3
 801f7d8:	2b04      	cmp	r3, #4
 801f7da:	d004      	beq.n	801f7e6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f7dc:	6878      	ldr	r0, [r7, #4]
 801f7de:	f7f5 fc3b 	bl	8015058 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f7e2:	2300      	movs	r3, #0
 801f7e4:	e123      	b.n	801fa2e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f7e6:	69fb      	ldr	r3, [r7, #28]
 801f7e8:	781b      	ldrb	r3, [r3, #0]
 801f7ea:	f003 030f 	and.w	r3, r3, #15
 801f7ee:	b2db      	uxtb	r3, r3
 801f7f0:	009b      	lsls	r3, r3, #2
 801f7f2:	b2db      	uxtb	r3, r3
 801f7f4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f7f6:	69fb      	ldr	r3, [r7, #28]
 801f7f8:	885b      	ldrh	r3, [r3, #2]
 801f7fa:	b29b      	uxth	r3, r3
 801f7fc:	4618      	mov	r0, r3
 801f7fe:	f7f3 f89d 	bl	801293c <lwip_htons>
 801f802:	4603      	mov	r3, r0
 801f804:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	891b      	ldrh	r3, [r3, #8]
 801f80a:	8a3a      	ldrh	r2, [r7, #16]
 801f80c:	429a      	cmp	r2, r3
 801f80e:	d204      	bcs.n	801f81a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801f810:	8a3b      	ldrh	r3, [r7, #16]
 801f812:	4619      	mov	r1, r3
 801f814:	6878      	ldr	r0, [r7, #4]
 801f816:	f7f5 fa99 	bl	8014d4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	895b      	ldrh	r3, [r3, #10]
 801f81e:	8a7a      	ldrh	r2, [r7, #18]
 801f820:	429a      	cmp	r2, r3
 801f822:	d807      	bhi.n	801f834 <ip4_input+0x78>
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	891b      	ldrh	r3, [r3, #8]
 801f828:	8a3a      	ldrh	r2, [r7, #16]
 801f82a:	429a      	cmp	r2, r3
 801f82c:	d802      	bhi.n	801f834 <ip4_input+0x78>
 801f82e:	8a7b      	ldrh	r3, [r7, #18]
 801f830:	2b13      	cmp	r3, #19
 801f832:	d804      	bhi.n	801f83e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f834:	6878      	ldr	r0, [r7, #4]
 801f836:	f7f5 fc0f 	bl	8015058 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f83a:	2300      	movs	r3, #0
 801f83c:	e0f7      	b.n	801fa2e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f83e:	69fb      	ldr	r3, [r7, #28]
 801f840:	691b      	ldr	r3, [r3, #16]
 801f842:	4a7d      	ldr	r2, [pc, #500]	; (801fa38 <ip4_input+0x27c>)
 801f844:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f846:	69fb      	ldr	r3, [r7, #28]
 801f848:	68db      	ldr	r3, [r3, #12]
 801f84a:	4a7b      	ldr	r2, [pc, #492]	; (801fa38 <ip4_input+0x27c>)
 801f84c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f84e:	4b7a      	ldr	r3, [pc, #488]	; (801fa38 <ip4_input+0x27c>)
 801f850:	695b      	ldr	r3, [r3, #20]
 801f852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f856:	2be0      	cmp	r3, #224	; 0xe0
 801f858:	d112      	bne.n	801f880 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f85a:	683b      	ldr	r3, [r7, #0]
 801f85c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f860:	f003 0301 	and.w	r3, r3, #1
 801f864:	b2db      	uxtb	r3, r3
 801f866:	2b00      	cmp	r3, #0
 801f868:	d007      	beq.n	801f87a <ip4_input+0xbe>
 801f86a:	683b      	ldr	r3, [r7, #0]
 801f86c:	3304      	adds	r3, #4
 801f86e:	681b      	ldr	r3, [r3, #0]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d002      	beq.n	801f87a <ip4_input+0xbe>
      netif = inp;
 801f874:	683b      	ldr	r3, [r7, #0]
 801f876:	61bb      	str	r3, [r7, #24]
 801f878:	e02a      	b.n	801f8d0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f87a:	2300      	movs	r3, #0
 801f87c:	61bb      	str	r3, [r7, #24]
 801f87e:	e027      	b.n	801f8d0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f880:	6838      	ldr	r0, [r7, #0]
 801f882:	f7ff ff71 	bl	801f768 <ip4_input_accept>
 801f886:	4603      	mov	r3, r0
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d002      	beq.n	801f892 <ip4_input+0xd6>
      netif = inp;
 801f88c:	683b      	ldr	r3, [r7, #0]
 801f88e:	61bb      	str	r3, [r7, #24]
 801f890:	e01e      	b.n	801f8d0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f892:	2300      	movs	r3, #0
 801f894:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f896:	4b68      	ldr	r3, [pc, #416]	; (801fa38 <ip4_input+0x27c>)
 801f898:	695b      	ldr	r3, [r3, #20]
 801f89a:	b2db      	uxtb	r3, r3
 801f89c:	2b7f      	cmp	r3, #127	; 0x7f
 801f89e:	d017      	beq.n	801f8d0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f8a0:	4b66      	ldr	r3, [pc, #408]	; (801fa3c <ip4_input+0x280>)
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	61bb      	str	r3, [r7, #24]
 801f8a6:	e00e      	b.n	801f8c6 <ip4_input+0x10a>
          if (netif == inp) {
 801f8a8:	69ba      	ldr	r2, [r7, #24]
 801f8aa:	683b      	ldr	r3, [r7, #0]
 801f8ac:	429a      	cmp	r2, r3
 801f8ae:	d006      	beq.n	801f8be <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f8b0:	69b8      	ldr	r0, [r7, #24]
 801f8b2:	f7ff ff59 	bl	801f768 <ip4_input_accept>
 801f8b6:	4603      	mov	r3, r0
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d108      	bne.n	801f8ce <ip4_input+0x112>
 801f8bc:	e000      	b.n	801f8c0 <ip4_input+0x104>
            continue;
 801f8be:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f8c0:	69bb      	ldr	r3, [r7, #24]
 801f8c2:	681b      	ldr	r3, [r3, #0]
 801f8c4:	61bb      	str	r3, [r7, #24]
 801f8c6:	69bb      	ldr	r3, [r7, #24]
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d1ed      	bne.n	801f8a8 <ip4_input+0xec>
 801f8cc:	e000      	b.n	801f8d0 <ip4_input+0x114>
            break;
 801f8ce:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f8d0:	69bb      	ldr	r3, [r7, #24]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d111      	bne.n	801f8fa <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f8d6:	69fb      	ldr	r3, [r7, #28]
 801f8d8:	7a5b      	ldrb	r3, [r3, #9]
 801f8da:	2b11      	cmp	r3, #17
 801f8dc:	d10d      	bne.n	801f8fa <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801f8de:	8a7b      	ldrh	r3, [r7, #18]
 801f8e0:	69fa      	ldr	r2, [r7, #28]
 801f8e2:	4413      	add	r3, r2
 801f8e4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	885b      	ldrh	r3, [r3, #2]
 801f8ea:	b29b      	uxth	r3, r3
 801f8ec:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f8f0:	d103      	bne.n	801f8fa <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f8f2:	683b      	ldr	r3, [r7, #0]
 801f8f4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801f8f6:	2300      	movs	r3, #0
 801f8f8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f8fa:	697b      	ldr	r3, [r7, #20]
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d017      	beq.n	801f930 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f900:	4b4d      	ldr	r3, [pc, #308]	; (801fa38 <ip4_input+0x27c>)
 801f902:	691b      	ldr	r3, [r3, #16]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d013      	beq.n	801f930 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f908:	4b4b      	ldr	r3, [pc, #300]	; (801fa38 <ip4_input+0x27c>)
 801f90a:	691b      	ldr	r3, [r3, #16]
 801f90c:	6839      	ldr	r1, [r7, #0]
 801f90e:	4618      	mov	r0, r3
 801f910:	f000 f96e 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801f914:	4603      	mov	r3, r0
 801f916:	2b00      	cmp	r3, #0
 801f918:	d105      	bne.n	801f926 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f91a:	4b47      	ldr	r3, [pc, #284]	; (801fa38 <ip4_input+0x27c>)
 801f91c:	691b      	ldr	r3, [r3, #16]
 801f91e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f922:	2be0      	cmp	r3, #224	; 0xe0
 801f924:	d104      	bne.n	801f930 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f926:	6878      	ldr	r0, [r7, #4]
 801f928:	f7f5 fb96 	bl	8015058 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f92c:	2300      	movs	r3, #0
 801f92e:	e07e      	b.n	801fa2e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f930:	69bb      	ldr	r3, [r7, #24]
 801f932:	2b00      	cmp	r3, #0
 801f934:	d104      	bne.n	801f940 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f936:	6878      	ldr	r0, [r7, #4]
 801f938:	f7f5 fb8e 	bl	8015058 <pbuf_free>
    return ERR_OK;
 801f93c:	2300      	movs	r3, #0
 801f93e:	e076      	b.n	801fa2e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f940:	69fb      	ldr	r3, [r7, #28]
 801f942:	88db      	ldrh	r3, [r3, #6]
 801f944:	b29b      	uxth	r3, r3
 801f946:	461a      	mov	r2, r3
 801f948:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f94c:	4013      	ands	r3, r2
 801f94e:	2b00      	cmp	r3, #0
 801f950:	d00b      	beq.n	801f96a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f952:	6878      	ldr	r0, [r7, #4]
 801f954:	f000 fdbc 	bl	80204d0 <ip4_reass>
 801f958:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d101      	bne.n	801f964 <ip4_input+0x1a8>
      return ERR_OK;
 801f960:	2300      	movs	r3, #0
 801f962:	e064      	b.n	801fa2e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	685b      	ldr	r3, [r3, #4]
 801f968:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f96a:	4a33      	ldr	r2, [pc, #204]	; (801fa38 <ip4_input+0x27c>)
 801f96c:	69bb      	ldr	r3, [r7, #24]
 801f96e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f970:	4a31      	ldr	r2, [pc, #196]	; (801fa38 <ip4_input+0x27c>)
 801f972:	683b      	ldr	r3, [r7, #0]
 801f974:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f976:	4a30      	ldr	r2, [pc, #192]	; (801fa38 <ip4_input+0x27c>)
 801f978:	69fb      	ldr	r3, [r7, #28]
 801f97a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f97c:	69fb      	ldr	r3, [r7, #28]
 801f97e:	781b      	ldrb	r3, [r3, #0]
 801f980:	f003 030f 	and.w	r3, r3, #15
 801f984:	b2db      	uxtb	r3, r3
 801f986:	009b      	lsls	r3, r3, #2
 801f988:	b2db      	uxtb	r3, r3
 801f98a:	b29a      	uxth	r2, r3
 801f98c:	4b2a      	ldr	r3, [pc, #168]	; (801fa38 <ip4_input+0x27c>)
 801f98e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f990:	8a7b      	ldrh	r3, [r7, #18]
 801f992:	4619      	mov	r1, r3
 801f994:	6878      	ldr	r0, [r7, #4]
 801f996:	f7f5 fad9 	bl	8014f4c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f99a:	69fb      	ldr	r3, [r7, #28]
 801f99c:	7a5b      	ldrb	r3, [r3, #9]
 801f99e:	2b11      	cmp	r3, #17
 801f9a0:	d006      	beq.n	801f9b0 <ip4_input+0x1f4>
 801f9a2:	2b11      	cmp	r3, #17
 801f9a4:	dc13      	bgt.n	801f9ce <ip4_input+0x212>
 801f9a6:	2b01      	cmp	r3, #1
 801f9a8:	d00c      	beq.n	801f9c4 <ip4_input+0x208>
 801f9aa:	2b06      	cmp	r3, #6
 801f9ac:	d005      	beq.n	801f9ba <ip4_input+0x1fe>
 801f9ae:	e00e      	b.n	801f9ce <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f9b0:	6839      	ldr	r1, [r7, #0]
 801f9b2:	6878      	ldr	r0, [r7, #4]
 801f9b4:	f7fc f9d6 	bl	801bd64 <udp_input>
        break;
 801f9b8:	e026      	b.n	801fa08 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f9ba:	6839      	ldr	r1, [r7, #0]
 801f9bc:	6878      	ldr	r0, [r7, #4]
 801f9be:	f7f7 fd93 	bl	80174e8 <tcp_input>
        break;
 801f9c2:	e021      	b.n	801fa08 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f9c4:	6839      	ldr	r1, [r7, #0]
 801f9c6:	6878      	ldr	r0, [r7, #4]
 801f9c8:	f7ff fcd0 	bl	801f36c <icmp_input>
        break;
 801f9cc:	e01c      	b.n	801fa08 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f9ce:	4b1a      	ldr	r3, [pc, #104]	; (801fa38 <ip4_input+0x27c>)
 801f9d0:	695b      	ldr	r3, [r3, #20]
 801f9d2:	69b9      	ldr	r1, [r7, #24]
 801f9d4:	4618      	mov	r0, r3
 801f9d6:	f000 f90b 	bl	801fbf0 <ip4_addr_isbroadcast_u32>
 801f9da:	4603      	mov	r3, r0
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d10f      	bne.n	801fa00 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f9e0:	4b15      	ldr	r3, [pc, #84]	; (801fa38 <ip4_input+0x27c>)
 801f9e2:	695b      	ldr	r3, [r3, #20]
 801f9e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f9e8:	2be0      	cmp	r3, #224	; 0xe0
 801f9ea:	d009      	beq.n	801fa00 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f9ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f9f0:	4619      	mov	r1, r3
 801f9f2:	6878      	ldr	r0, [r7, #4]
 801f9f4:	f7f5 fb1d 	bl	8015032 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f9f8:	2102      	movs	r1, #2
 801f9fa:	6878      	ldr	r0, [r7, #4]
 801f9fc:	f7ff fdba 	bl	801f574 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801fa00:	6878      	ldr	r0, [r7, #4]
 801fa02:	f7f5 fb29 	bl	8015058 <pbuf_free>
        break;
 801fa06:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801fa08:	4b0b      	ldr	r3, [pc, #44]	; (801fa38 <ip4_input+0x27c>)
 801fa0a:	2200      	movs	r2, #0
 801fa0c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801fa0e:	4b0a      	ldr	r3, [pc, #40]	; (801fa38 <ip4_input+0x27c>)
 801fa10:	2200      	movs	r2, #0
 801fa12:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801fa14:	4b08      	ldr	r3, [pc, #32]	; (801fa38 <ip4_input+0x27c>)
 801fa16:	2200      	movs	r2, #0
 801fa18:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801fa1a:	4b07      	ldr	r3, [pc, #28]	; (801fa38 <ip4_input+0x27c>)
 801fa1c:	2200      	movs	r2, #0
 801fa1e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801fa20:	4b05      	ldr	r3, [pc, #20]	; (801fa38 <ip4_input+0x27c>)
 801fa22:	2200      	movs	r2, #0
 801fa24:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801fa26:	4b04      	ldr	r3, [pc, #16]	; (801fa38 <ip4_input+0x27c>)
 801fa28:	2200      	movs	r2, #0
 801fa2a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801fa2c:	2300      	movs	r3, #0
}
 801fa2e:	4618      	mov	r0, r3
 801fa30:	3720      	adds	r7, #32
 801fa32:	46bd      	mov	sp, r7
 801fa34:	bd80      	pop	{r7, pc}
 801fa36:	bf00      	nop
 801fa38:	2001346c 	.word	0x2001346c
 801fa3c:	20016c3c 	.word	0x20016c3c

0801fa40 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801fa40:	b580      	push	{r7, lr}
 801fa42:	b08a      	sub	sp, #40	; 0x28
 801fa44:	af04      	add	r7, sp, #16
 801fa46:	60f8      	str	r0, [r7, #12]
 801fa48:	60b9      	str	r1, [r7, #8]
 801fa4a:	607a      	str	r2, [r7, #4]
 801fa4c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801fa4e:	68bb      	ldr	r3, [r7, #8]
 801fa50:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d009      	beq.n	801fa6c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801fa58:	68bb      	ldr	r3, [r7, #8]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d003      	beq.n	801fa66 <ip4_output_if+0x26>
 801fa5e:	68bb      	ldr	r3, [r7, #8]
 801fa60:	681b      	ldr	r3, [r3, #0]
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	d102      	bne.n	801fa6c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801fa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa68:	3304      	adds	r3, #4
 801fa6a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801fa6c:	78fa      	ldrb	r2, [r7, #3]
 801fa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa70:	9302      	str	r3, [sp, #8]
 801fa72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801fa76:	9301      	str	r3, [sp, #4]
 801fa78:	f897 3020 	ldrb.w	r3, [r7, #32]
 801fa7c:	9300      	str	r3, [sp, #0]
 801fa7e:	4613      	mov	r3, r2
 801fa80:	687a      	ldr	r2, [r7, #4]
 801fa82:	6979      	ldr	r1, [r7, #20]
 801fa84:	68f8      	ldr	r0, [r7, #12]
 801fa86:	f000 f805 	bl	801fa94 <ip4_output_if_src>
 801fa8a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801fa8c:	4618      	mov	r0, r3
 801fa8e:	3718      	adds	r7, #24
 801fa90:	46bd      	mov	sp, r7
 801fa92:	bd80      	pop	{r7, pc}

0801fa94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801fa94:	b580      	push	{r7, lr}
 801fa96:	b088      	sub	sp, #32
 801fa98:	af00      	add	r7, sp, #0
 801fa9a:	60f8      	str	r0, [r7, #12]
 801fa9c:	60b9      	str	r1, [r7, #8]
 801fa9e:	607a      	str	r2, [r7, #4]
 801faa0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801faa2:	68fb      	ldr	r3, [r7, #12]
 801faa4:	7b9b      	ldrb	r3, [r3, #14]
 801faa6:	2b01      	cmp	r3, #1
 801faa8:	d006      	beq.n	801fab8 <ip4_output_if_src+0x24>
 801faaa:	4b4b      	ldr	r3, [pc, #300]	; (801fbd8 <ip4_output_if_src+0x144>)
 801faac:	f44f 7255 	mov.w	r2, #852	; 0x354
 801fab0:	494a      	ldr	r1, [pc, #296]	; (801fbdc <ip4_output_if_src+0x148>)
 801fab2:	484b      	ldr	r0, [pc, #300]	; (801fbe0 <ip4_output_if_src+0x14c>)
 801fab4:	f001 fcfa 	bl	80214ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d060      	beq.n	801fb80 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801fabe:	2314      	movs	r3, #20
 801fac0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801fac2:	2114      	movs	r1, #20
 801fac4:	68f8      	ldr	r0, [r7, #12]
 801fac6:	f7f5 fa31 	bl	8014f2c <pbuf_add_header>
 801faca:	4603      	mov	r3, r0
 801facc:	2b00      	cmp	r3, #0
 801face:	d002      	beq.n	801fad6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801fad0:	f06f 0301 	mvn.w	r3, #1
 801fad4:	e07c      	b.n	801fbd0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	685b      	ldr	r3, [r3, #4]
 801fada:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801fadc:	68fb      	ldr	r3, [r7, #12]
 801fade:	895b      	ldrh	r3, [r3, #10]
 801fae0:	2b13      	cmp	r3, #19
 801fae2:	d806      	bhi.n	801faf2 <ip4_output_if_src+0x5e>
 801fae4:	4b3c      	ldr	r3, [pc, #240]	; (801fbd8 <ip4_output_if_src+0x144>)
 801fae6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801faea:	493e      	ldr	r1, [pc, #248]	; (801fbe4 <ip4_output_if_src+0x150>)
 801faec:	483c      	ldr	r0, [pc, #240]	; (801fbe0 <ip4_output_if_src+0x14c>)
 801faee:	f001 fcdd 	bl	80214ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801faf2:	69fb      	ldr	r3, [r7, #28]
 801faf4:	78fa      	ldrb	r2, [r7, #3]
 801faf6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801faf8:	69fb      	ldr	r3, [r7, #28]
 801fafa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801fafe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	681a      	ldr	r2, [r3, #0]
 801fb04:	69fb      	ldr	r3, [r7, #28]
 801fb06:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801fb08:	8b7b      	ldrh	r3, [r7, #26]
 801fb0a:	089b      	lsrs	r3, r3, #2
 801fb0c:	b29b      	uxth	r3, r3
 801fb0e:	b2db      	uxtb	r3, r3
 801fb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb14:	b2da      	uxtb	r2, r3
 801fb16:	69fb      	ldr	r3, [r7, #28]
 801fb18:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801fb1a:	69fb      	ldr	r3, [r7, #28]
 801fb1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801fb20:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	891b      	ldrh	r3, [r3, #8]
 801fb26:	4618      	mov	r0, r3
 801fb28:	f7f2 ff08 	bl	801293c <lwip_htons>
 801fb2c:	4603      	mov	r3, r0
 801fb2e:	461a      	mov	r2, r3
 801fb30:	69fb      	ldr	r3, [r7, #28]
 801fb32:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801fb34:	69fb      	ldr	r3, [r7, #28]
 801fb36:	2200      	movs	r2, #0
 801fb38:	719a      	strb	r2, [r3, #6]
 801fb3a:	2200      	movs	r2, #0
 801fb3c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801fb3e:	4b2a      	ldr	r3, [pc, #168]	; (801fbe8 <ip4_output_if_src+0x154>)
 801fb40:	881b      	ldrh	r3, [r3, #0]
 801fb42:	4618      	mov	r0, r3
 801fb44:	f7f2 fefa 	bl	801293c <lwip_htons>
 801fb48:	4603      	mov	r3, r0
 801fb4a:	461a      	mov	r2, r3
 801fb4c:	69fb      	ldr	r3, [r7, #28]
 801fb4e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801fb50:	4b25      	ldr	r3, [pc, #148]	; (801fbe8 <ip4_output_if_src+0x154>)
 801fb52:	881b      	ldrh	r3, [r3, #0]
 801fb54:	3301      	adds	r3, #1
 801fb56:	b29a      	uxth	r2, r3
 801fb58:	4b23      	ldr	r3, [pc, #140]	; (801fbe8 <ip4_output_if_src+0x154>)
 801fb5a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801fb5c:	68bb      	ldr	r3, [r7, #8]
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d104      	bne.n	801fb6c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801fb62:	4b22      	ldr	r3, [pc, #136]	; (801fbec <ip4_output_if_src+0x158>)
 801fb64:	681a      	ldr	r2, [r3, #0]
 801fb66:	69fb      	ldr	r3, [r7, #28]
 801fb68:	60da      	str	r2, [r3, #12]
 801fb6a:	e003      	b.n	801fb74 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801fb6c:	68bb      	ldr	r3, [r7, #8]
 801fb6e:	681a      	ldr	r2, [r3, #0]
 801fb70:	69fb      	ldr	r3, [r7, #28]
 801fb72:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801fb74:	69fb      	ldr	r3, [r7, #28]
 801fb76:	2200      	movs	r2, #0
 801fb78:	729a      	strb	r2, [r3, #10]
 801fb7a:	2200      	movs	r2, #0
 801fb7c:	72da      	strb	r2, [r3, #11]
 801fb7e:	e00f      	b.n	801fba0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	895b      	ldrh	r3, [r3, #10]
 801fb84:	2b13      	cmp	r3, #19
 801fb86:	d802      	bhi.n	801fb8e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801fb88:	f06f 0301 	mvn.w	r3, #1
 801fb8c:	e020      	b.n	801fbd0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801fb8e:	68fb      	ldr	r3, [r7, #12]
 801fb90:	685b      	ldr	r3, [r3, #4]
 801fb92:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801fb94:	69fb      	ldr	r3, [r7, #28]
 801fb96:	691b      	ldr	r3, [r3, #16]
 801fb98:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801fb9a:	f107 0314 	add.w	r3, r7, #20
 801fb9e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801fba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d00c      	beq.n	801fbc2 <ip4_output_if_src+0x12e>
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	891a      	ldrh	r2, [r3, #8]
 801fbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fbb0:	429a      	cmp	r2, r3
 801fbb2:	d906      	bls.n	801fbc2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801fbb4:	687a      	ldr	r2, [r7, #4]
 801fbb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fbb8:	68f8      	ldr	r0, [r7, #12]
 801fbba:	f000 fe77 	bl	80208ac <ip4_frag>
 801fbbe:	4603      	mov	r3, r0
 801fbc0:	e006      	b.n	801fbd0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbc4:	695b      	ldr	r3, [r3, #20]
 801fbc6:	687a      	ldr	r2, [r7, #4]
 801fbc8:	68f9      	ldr	r1, [r7, #12]
 801fbca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fbcc:	4798      	blx	r3
 801fbce:	4603      	mov	r3, r0
}
 801fbd0:	4618      	mov	r0, r3
 801fbd2:	3720      	adds	r7, #32
 801fbd4:	46bd      	mov	sp, r7
 801fbd6:	bd80      	pop	{r7, pc}
 801fbd8:	08026db4 	.word	0x08026db4
 801fbdc:	08026de8 	.word	0x08026de8
 801fbe0:	08026df4 	.word	0x08026df4
 801fbe4:	08026e1c 	.word	0x08026e1c
 801fbe8:	200056c6 	.word	0x200056c6
 801fbec:	080274e4 	.word	0x080274e4

0801fbf0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801fbf0:	b480      	push	{r7}
 801fbf2:	b085      	sub	sp, #20
 801fbf4:	af00      	add	r7, sp, #0
 801fbf6:	6078      	str	r0, [r7, #4]
 801fbf8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc04:	d002      	beq.n	801fc0c <ip4_addr_isbroadcast_u32+0x1c>
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d101      	bne.n	801fc10 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801fc0c:	2301      	movs	r3, #1
 801fc0e:	e02a      	b.n	801fc66 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801fc10:	683b      	ldr	r3, [r7, #0]
 801fc12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fc16:	f003 0302 	and.w	r3, r3, #2
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d101      	bne.n	801fc22 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801fc1e:	2300      	movs	r3, #0
 801fc20:	e021      	b.n	801fc66 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801fc22:	683b      	ldr	r3, [r7, #0]
 801fc24:	3304      	adds	r3, #4
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	687a      	ldr	r2, [r7, #4]
 801fc2a:	429a      	cmp	r2, r3
 801fc2c:	d101      	bne.n	801fc32 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801fc2e:	2300      	movs	r3, #0
 801fc30:	e019      	b.n	801fc66 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801fc32:	68fa      	ldr	r2, [r7, #12]
 801fc34:	683b      	ldr	r3, [r7, #0]
 801fc36:	3304      	adds	r3, #4
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	405a      	eors	r2, r3
 801fc3c:	683b      	ldr	r3, [r7, #0]
 801fc3e:	3308      	adds	r3, #8
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	4013      	ands	r3, r2
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	d10d      	bne.n	801fc64 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fc48:	683b      	ldr	r3, [r7, #0]
 801fc4a:	3308      	adds	r3, #8
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	43da      	mvns	r2, r3
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801fc54:	683b      	ldr	r3, [r7, #0]
 801fc56:	3308      	adds	r3, #8
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fc5c:	429a      	cmp	r2, r3
 801fc5e:	d101      	bne.n	801fc64 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801fc60:	2301      	movs	r3, #1
 801fc62:	e000      	b.n	801fc66 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801fc64:	2300      	movs	r3, #0
  }
}
 801fc66:	4618      	mov	r0, r3
 801fc68:	3714      	adds	r7, #20
 801fc6a:	46bd      	mov	sp, r7
 801fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc70:	4770      	bx	lr
	...

0801fc74 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801fc74:	b580      	push	{r7, lr}
 801fc76:	b08a      	sub	sp, #40	; 0x28
 801fc78:	af00      	add	r7, sp, #0
 801fc7a:	6078      	str	r0, [r7, #4]
 801fc7c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801fc7e:	f107 030c 	add.w	r3, r7, #12
 801fc82:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	781b      	ldrb	r3, [r3, #0]
 801fc88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801fc8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fc90:	3301      	adds	r3, #1
 801fc92:	4a89      	ldr	r2, [pc, #548]	; (801feb8 <ip4addr_aton+0x244>)
 801fc94:	4413      	add	r3, r2
 801fc96:	781b      	ldrb	r3, [r3, #0]
 801fc98:	f003 0304 	and.w	r3, r3, #4
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d101      	bne.n	801fca4 <ip4addr_aton+0x30>
      return 0;
 801fca0:	2300      	movs	r3, #0
 801fca2:	e105      	b.n	801feb0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801fca4:	2300      	movs	r3, #0
 801fca6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801fca8:	230a      	movs	r3, #10
 801fcaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801fcae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fcb2:	2b30      	cmp	r3, #48	; 0x30
 801fcb4:	d11c      	bne.n	801fcf0 <ip4addr_aton+0x7c>
      c = *++cp;
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	3301      	adds	r3, #1
 801fcba:	607b      	str	r3, [r7, #4]
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	781b      	ldrb	r3, [r3, #0]
 801fcc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801fcc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fcc8:	2b78      	cmp	r3, #120	; 0x78
 801fcca:	d003      	beq.n	801fcd4 <ip4addr_aton+0x60>
 801fccc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fcd0:	2b58      	cmp	r3, #88	; 0x58
 801fcd2:	d10a      	bne.n	801fcea <ip4addr_aton+0x76>
        base = 16;
 801fcd4:	2310      	movs	r3, #16
 801fcd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	3301      	adds	r3, #1
 801fcde:	607b      	str	r3, [r7, #4]
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	781b      	ldrb	r3, [r3, #0]
 801fce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801fce8:	e002      	b.n	801fcf0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801fcea:	2308      	movs	r3, #8
 801fcec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801fcf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fcf4:	3301      	adds	r3, #1
 801fcf6:	4a70      	ldr	r2, [pc, #448]	; (801feb8 <ip4addr_aton+0x244>)
 801fcf8:	4413      	add	r3, r2
 801fcfa:	781b      	ldrb	r3, [r3, #0]
 801fcfc:	f003 0304 	and.w	r3, r3, #4
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d011      	beq.n	801fd28 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801fd04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd0a:	fb02 f203 	mul.w	r2, r2, r3
 801fd0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fd12:	4413      	add	r3, r2
 801fd14:	3b30      	subs	r3, #48	; 0x30
 801fd16:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	3301      	adds	r3, #1
 801fd1c:	607b      	str	r3, [r7, #4]
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	781b      	ldrb	r3, [r3, #0]
 801fd22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801fd26:	e7e3      	b.n	801fcf0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801fd28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fd2c:	2b10      	cmp	r3, #16
 801fd2e:	d127      	bne.n	801fd80 <ip4addr_aton+0x10c>
 801fd30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fd34:	3301      	adds	r3, #1
 801fd36:	4a60      	ldr	r2, [pc, #384]	; (801feb8 <ip4addr_aton+0x244>)
 801fd38:	4413      	add	r3, r2
 801fd3a:	781b      	ldrb	r3, [r3, #0]
 801fd3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801fd40:	2b00      	cmp	r3, #0
 801fd42:	d01d      	beq.n	801fd80 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801fd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd46:	011b      	lsls	r3, r3, #4
 801fd48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801fd4c:	f102 010a 	add.w	r1, r2, #10
 801fd50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801fd54:	3201      	adds	r2, #1
 801fd56:	4858      	ldr	r0, [pc, #352]	; (801feb8 <ip4addr_aton+0x244>)
 801fd58:	4402      	add	r2, r0
 801fd5a:	7812      	ldrb	r2, [r2, #0]
 801fd5c:	f002 0203 	and.w	r2, r2, #3
 801fd60:	2a02      	cmp	r2, #2
 801fd62:	d101      	bne.n	801fd68 <ip4addr_aton+0xf4>
 801fd64:	2261      	movs	r2, #97	; 0x61
 801fd66:	e000      	b.n	801fd6a <ip4addr_aton+0xf6>
 801fd68:	2241      	movs	r2, #65	; 0x41
 801fd6a:	1a8a      	subs	r2, r1, r2
 801fd6c:	4313      	orrs	r3, r2
 801fd6e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	3301      	adds	r3, #1
 801fd74:	607b      	str	r3, [r7, #4]
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	781b      	ldrb	r3, [r3, #0]
 801fd7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801fd7e:	e7b7      	b.n	801fcf0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801fd80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fd84:	2b2e      	cmp	r3, #46	; 0x2e
 801fd86:	d114      	bne.n	801fdb2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801fd88:	f107 030c 	add.w	r3, r7, #12
 801fd8c:	330c      	adds	r3, #12
 801fd8e:	69fa      	ldr	r2, [r7, #28]
 801fd90:	429a      	cmp	r2, r3
 801fd92:	d301      	bcc.n	801fd98 <ip4addr_aton+0x124>
        return 0;
 801fd94:	2300      	movs	r3, #0
 801fd96:	e08b      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801fd98:	69fb      	ldr	r3, [r7, #28]
 801fd9a:	1d1a      	adds	r2, r3, #4
 801fd9c:	61fa      	str	r2, [r7, #28]
 801fd9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fda0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	3301      	adds	r3, #1
 801fda6:	607b      	str	r3, [r7, #4]
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	781b      	ldrb	r3, [r3, #0]
 801fdac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801fdb0:	e76c      	b.n	801fc8c <ip4addr_aton+0x18>
    } else {
      break;
 801fdb2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801fdb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d00b      	beq.n	801fdd4 <ip4addr_aton+0x160>
 801fdbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fdc0:	3301      	adds	r3, #1
 801fdc2:	4a3d      	ldr	r2, [pc, #244]	; (801feb8 <ip4addr_aton+0x244>)
 801fdc4:	4413      	add	r3, r2
 801fdc6:	781b      	ldrb	r3, [r3, #0]
 801fdc8:	f003 0308 	and.w	r3, r3, #8
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d101      	bne.n	801fdd4 <ip4addr_aton+0x160>
    return 0;
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	e06d      	b.n	801feb0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801fdd4:	f107 030c 	add.w	r3, r7, #12
 801fdd8:	69fa      	ldr	r2, [r7, #28]
 801fdda:	1ad3      	subs	r3, r2, r3
 801fddc:	109b      	asrs	r3, r3, #2
 801fdde:	3301      	adds	r3, #1
 801fde0:	2b04      	cmp	r3, #4
 801fde2:	d853      	bhi.n	801fe8c <ip4addr_aton+0x218>
 801fde4:	a201      	add	r2, pc, #4	; (adr r2, 801fdec <ip4addr_aton+0x178>)
 801fde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fdea:	bf00      	nop
 801fdec:	0801fe01 	.word	0x0801fe01
 801fdf0:	0801fe9b 	.word	0x0801fe9b
 801fdf4:	0801fe05 	.word	0x0801fe05
 801fdf8:	0801fe27 	.word	0x0801fe27
 801fdfc:	0801fe55 	.word	0x0801fe55

    case 0:
      return 0;       /* initial nondigit */
 801fe00:	2300      	movs	r3, #0
 801fe02:	e055      	b.n	801feb0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801fe04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801fe0a:	d301      	bcc.n	801fe10 <ip4addr_aton+0x19c>
        return 0;
 801fe0c:	2300      	movs	r3, #0
 801fe0e:	e04f      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801fe10:	68fb      	ldr	r3, [r7, #12]
 801fe12:	2bff      	cmp	r3, #255	; 0xff
 801fe14:	d901      	bls.n	801fe1a <ip4addr_aton+0x1a6>
        return 0;
 801fe16:	2300      	movs	r3, #0
 801fe18:	e04a      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	061b      	lsls	r3, r3, #24
 801fe1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe20:	4313      	orrs	r3, r2
 801fe22:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fe24:	e03a      	b.n	801fe9c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fe2c:	d301      	bcc.n	801fe32 <ip4addr_aton+0x1be>
        return 0;
 801fe2e:	2300      	movs	r3, #0
 801fe30:	e03e      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801fe32:	68fb      	ldr	r3, [r7, #12]
 801fe34:	2bff      	cmp	r3, #255	; 0xff
 801fe36:	d802      	bhi.n	801fe3e <ip4addr_aton+0x1ca>
 801fe38:	693b      	ldr	r3, [r7, #16]
 801fe3a:	2bff      	cmp	r3, #255	; 0xff
 801fe3c:	d901      	bls.n	801fe42 <ip4addr_aton+0x1ce>
        return 0;
 801fe3e:	2300      	movs	r3, #0
 801fe40:	e036      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801fe42:	68fb      	ldr	r3, [r7, #12]
 801fe44:	061a      	lsls	r2, r3, #24
 801fe46:	693b      	ldr	r3, [r7, #16]
 801fe48:	041b      	lsls	r3, r3, #16
 801fe4a:	4313      	orrs	r3, r2
 801fe4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe4e:	4313      	orrs	r3, r2
 801fe50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fe52:	e023      	b.n	801fe9c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe56:	2bff      	cmp	r3, #255	; 0xff
 801fe58:	d901      	bls.n	801fe5e <ip4addr_aton+0x1ea>
        return 0;
 801fe5a:	2300      	movs	r3, #0
 801fe5c:	e028      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801fe5e:	68fb      	ldr	r3, [r7, #12]
 801fe60:	2bff      	cmp	r3, #255	; 0xff
 801fe62:	d805      	bhi.n	801fe70 <ip4addr_aton+0x1fc>
 801fe64:	693b      	ldr	r3, [r7, #16]
 801fe66:	2bff      	cmp	r3, #255	; 0xff
 801fe68:	d802      	bhi.n	801fe70 <ip4addr_aton+0x1fc>
 801fe6a:	697b      	ldr	r3, [r7, #20]
 801fe6c:	2bff      	cmp	r3, #255	; 0xff
 801fe6e:	d901      	bls.n	801fe74 <ip4addr_aton+0x200>
        return 0;
 801fe70:	2300      	movs	r3, #0
 801fe72:	e01d      	b.n	801feb0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801fe74:	68fb      	ldr	r3, [r7, #12]
 801fe76:	061a      	lsls	r2, r3, #24
 801fe78:	693b      	ldr	r3, [r7, #16]
 801fe7a:	041b      	lsls	r3, r3, #16
 801fe7c:	431a      	orrs	r2, r3
 801fe7e:	697b      	ldr	r3, [r7, #20]
 801fe80:	021b      	lsls	r3, r3, #8
 801fe82:	4313      	orrs	r3, r2
 801fe84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe86:	4313      	orrs	r3, r2
 801fe88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fe8a:	e007      	b.n	801fe9c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801fe8c:	4b0b      	ldr	r3, [pc, #44]	; (801febc <ip4addr_aton+0x248>)
 801fe8e:	22f9      	movs	r2, #249	; 0xf9
 801fe90:	490b      	ldr	r1, [pc, #44]	; (801fec0 <ip4addr_aton+0x24c>)
 801fe92:	480c      	ldr	r0, [pc, #48]	; (801fec4 <ip4addr_aton+0x250>)
 801fe94:	f001 fb0a 	bl	80214ac <iprintf>
      break;
 801fe98:	e000      	b.n	801fe9c <ip4addr_aton+0x228>
      break;
 801fe9a:	bf00      	nop
  }
  if (addr) {
 801fe9c:	683b      	ldr	r3, [r7, #0]
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	d005      	beq.n	801feae <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801fea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fea4:	f7f2 fd5f 	bl	8012966 <lwip_htonl>
 801fea8:	4602      	mov	r2, r0
 801feaa:	683b      	ldr	r3, [r7, #0]
 801feac:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801feae:	2301      	movs	r3, #1
}
 801feb0:	4618      	mov	r0, r3
 801feb2:	3728      	adds	r7, #40	; 0x28
 801feb4:	46bd      	mov	sp, r7
 801feb6:	bd80      	pop	{r7, pc}
 801feb8:	080274fa 	.word	0x080274fa
 801febc:	08026e4c 	.word	0x08026e4c
 801fec0:	08026e88 	.word	0x08026e88
 801fec4:	08026e94 	.word	0x08026e94

0801fec8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801fec8:	b580      	push	{r7, lr}
 801feca:	b084      	sub	sp, #16
 801fecc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801fece:	2300      	movs	r3, #0
 801fed0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801fed2:	4b12      	ldr	r3, [pc, #72]	; (801ff1c <ip_reass_tmr+0x54>)
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801fed8:	e018      	b.n	801ff0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801feda:	68fb      	ldr	r3, [r7, #12]
 801fedc:	7fdb      	ldrb	r3, [r3, #31]
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d00b      	beq.n	801fefa <ip_reass_tmr+0x32>
      r->timer--;
 801fee2:	68fb      	ldr	r3, [r7, #12]
 801fee4:	7fdb      	ldrb	r3, [r3, #31]
 801fee6:	3b01      	subs	r3, #1
 801fee8:	b2da      	uxtb	r2, r3
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801feee:	68fb      	ldr	r3, [r7, #12]
 801fef0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801fef2:	68fb      	ldr	r3, [r7, #12]
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	60fb      	str	r3, [r7, #12]
 801fef8:	e008      	b.n	801ff0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801fefa:	68fb      	ldr	r3, [r7, #12]
 801fefc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ff04:	68b9      	ldr	r1, [r7, #8]
 801ff06:	6878      	ldr	r0, [r7, #4]
 801ff08:	f000 f80a 	bl	801ff20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ff0c:	68fb      	ldr	r3, [r7, #12]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d1e3      	bne.n	801feda <ip_reass_tmr+0x12>
    }
  }
}
 801ff12:	bf00      	nop
 801ff14:	bf00      	nop
 801ff16:	3710      	adds	r7, #16
 801ff18:	46bd      	mov	sp, r7
 801ff1a:	bd80      	pop	{r7, pc}
 801ff1c:	200056c8 	.word	0x200056c8

0801ff20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ff20:	b580      	push	{r7, lr}
 801ff22:	b088      	sub	sp, #32
 801ff24:	af00      	add	r7, sp, #0
 801ff26:	6078      	str	r0, [r7, #4]
 801ff28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ff2a:	2300      	movs	r3, #0
 801ff2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ff2e:	683a      	ldr	r2, [r7, #0]
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	429a      	cmp	r2, r3
 801ff34:	d105      	bne.n	801ff42 <ip_reass_free_complete_datagram+0x22>
 801ff36:	4b45      	ldr	r3, [pc, #276]	; (802004c <ip_reass_free_complete_datagram+0x12c>)
 801ff38:	22ab      	movs	r2, #171	; 0xab
 801ff3a:	4945      	ldr	r1, [pc, #276]	; (8020050 <ip_reass_free_complete_datagram+0x130>)
 801ff3c:	4845      	ldr	r0, [pc, #276]	; (8020054 <ip_reass_free_complete_datagram+0x134>)
 801ff3e:	f001 fab5 	bl	80214ac <iprintf>
  if (prev != NULL) {
 801ff42:	683b      	ldr	r3, [r7, #0]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d00a      	beq.n	801ff5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ff48:	683b      	ldr	r3, [r7, #0]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	687a      	ldr	r2, [r7, #4]
 801ff4e:	429a      	cmp	r2, r3
 801ff50:	d005      	beq.n	801ff5e <ip_reass_free_complete_datagram+0x3e>
 801ff52:	4b3e      	ldr	r3, [pc, #248]	; (802004c <ip_reass_free_complete_datagram+0x12c>)
 801ff54:	22ad      	movs	r2, #173	; 0xad
 801ff56:	4940      	ldr	r1, [pc, #256]	; (8020058 <ip_reass_free_complete_datagram+0x138>)
 801ff58:	483e      	ldr	r0, [pc, #248]	; (8020054 <ip_reass_free_complete_datagram+0x134>)
 801ff5a:	f001 faa7 	bl	80214ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	685b      	ldr	r3, [r3, #4]
 801ff62:	685b      	ldr	r3, [r3, #4]
 801ff64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ff66:	697b      	ldr	r3, [r7, #20]
 801ff68:	889b      	ldrh	r3, [r3, #4]
 801ff6a:	b29b      	uxth	r3, r3
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d12a      	bne.n	801ffc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	685b      	ldr	r3, [r3, #4]
 801ff74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ff76:	697b      	ldr	r3, [r7, #20]
 801ff78:	681a      	ldr	r2, [r3, #0]
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ff7e:	69bb      	ldr	r3, [r7, #24]
 801ff80:	6858      	ldr	r0, [r3, #4]
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	3308      	adds	r3, #8
 801ff86:	2214      	movs	r2, #20
 801ff88:	4619      	mov	r1, r3
 801ff8a:	f001 f9a5 	bl	80212d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ff8e:	2101      	movs	r1, #1
 801ff90:	69b8      	ldr	r0, [r7, #24]
 801ff92:	f7ff faff 	bl	801f594 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ff96:	69b8      	ldr	r0, [r7, #24]
 801ff98:	f7f5 f8ec 	bl	8015174 <pbuf_clen>
 801ff9c:	4603      	mov	r3, r0
 801ff9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ffa0:	8bfa      	ldrh	r2, [r7, #30]
 801ffa2:	8a7b      	ldrh	r3, [r7, #18]
 801ffa4:	4413      	add	r3, r2
 801ffa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ffaa:	db05      	blt.n	801ffb8 <ip_reass_free_complete_datagram+0x98>
 801ffac:	4b27      	ldr	r3, [pc, #156]	; (802004c <ip_reass_free_complete_datagram+0x12c>)
 801ffae:	22bc      	movs	r2, #188	; 0xbc
 801ffb0:	492a      	ldr	r1, [pc, #168]	; (802005c <ip_reass_free_complete_datagram+0x13c>)
 801ffb2:	4828      	ldr	r0, [pc, #160]	; (8020054 <ip_reass_free_complete_datagram+0x134>)
 801ffb4:	f001 fa7a 	bl	80214ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ffb8:	8bfa      	ldrh	r2, [r7, #30]
 801ffba:	8a7b      	ldrh	r3, [r7, #18]
 801ffbc:	4413      	add	r3, r2
 801ffbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ffc0:	69b8      	ldr	r0, [r7, #24]
 801ffc2:	f7f5 f849 	bl	8015058 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	685b      	ldr	r3, [r3, #4]
 801ffca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ffcc:	e01f      	b.n	802000e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ffce:	69bb      	ldr	r3, [r7, #24]
 801ffd0:	685b      	ldr	r3, [r3, #4]
 801ffd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ffd4:	69bb      	ldr	r3, [r7, #24]
 801ffd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ffd8:	697b      	ldr	r3, [r7, #20]
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ffde:	68f8      	ldr	r0, [r7, #12]
 801ffe0:	f7f5 f8c8 	bl	8015174 <pbuf_clen>
 801ffe4:	4603      	mov	r3, r0
 801ffe6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ffe8:	8bfa      	ldrh	r2, [r7, #30]
 801ffea:	8a7b      	ldrh	r3, [r7, #18]
 801ffec:	4413      	add	r3, r2
 801ffee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fff2:	db05      	blt.n	8020000 <ip_reass_free_complete_datagram+0xe0>
 801fff4:	4b15      	ldr	r3, [pc, #84]	; (802004c <ip_reass_free_complete_datagram+0x12c>)
 801fff6:	22cc      	movs	r2, #204	; 0xcc
 801fff8:	4918      	ldr	r1, [pc, #96]	; (802005c <ip_reass_free_complete_datagram+0x13c>)
 801fffa:	4816      	ldr	r0, [pc, #88]	; (8020054 <ip_reass_free_complete_datagram+0x134>)
 801fffc:	f001 fa56 	bl	80214ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020000:	8bfa      	ldrh	r2, [r7, #30]
 8020002:	8a7b      	ldrh	r3, [r7, #18]
 8020004:	4413      	add	r3, r2
 8020006:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8020008:	68f8      	ldr	r0, [r7, #12]
 802000a:	f7f5 f825 	bl	8015058 <pbuf_free>
  while (p != NULL) {
 802000e:	69bb      	ldr	r3, [r7, #24]
 8020010:	2b00      	cmp	r3, #0
 8020012:	d1dc      	bne.n	801ffce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8020014:	6839      	ldr	r1, [r7, #0]
 8020016:	6878      	ldr	r0, [r7, #4]
 8020018:	f000 f8c2 	bl	80201a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802001c:	4b10      	ldr	r3, [pc, #64]	; (8020060 <ip_reass_free_complete_datagram+0x140>)
 802001e:	881b      	ldrh	r3, [r3, #0]
 8020020:	8bfa      	ldrh	r2, [r7, #30]
 8020022:	429a      	cmp	r2, r3
 8020024:	d905      	bls.n	8020032 <ip_reass_free_complete_datagram+0x112>
 8020026:	4b09      	ldr	r3, [pc, #36]	; (802004c <ip_reass_free_complete_datagram+0x12c>)
 8020028:	22d2      	movs	r2, #210	; 0xd2
 802002a:	490e      	ldr	r1, [pc, #56]	; (8020064 <ip_reass_free_complete_datagram+0x144>)
 802002c:	4809      	ldr	r0, [pc, #36]	; (8020054 <ip_reass_free_complete_datagram+0x134>)
 802002e:	f001 fa3d 	bl	80214ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020032:	4b0b      	ldr	r3, [pc, #44]	; (8020060 <ip_reass_free_complete_datagram+0x140>)
 8020034:	881a      	ldrh	r2, [r3, #0]
 8020036:	8bfb      	ldrh	r3, [r7, #30]
 8020038:	1ad3      	subs	r3, r2, r3
 802003a:	b29a      	uxth	r2, r3
 802003c:	4b08      	ldr	r3, [pc, #32]	; (8020060 <ip_reass_free_complete_datagram+0x140>)
 802003e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020040:	8bfb      	ldrh	r3, [r7, #30]
}
 8020042:	4618      	mov	r0, r3
 8020044:	3720      	adds	r7, #32
 8020046:	46bd      	mov	sp, r7
 8020048:	bd80      	pop	{r7, pc}
 802004a:	bf00      	nop
 802004c:	08026ebc 	.word	0x08026ebc
 8020050:	08026ef8 	.word	0x08026ef8
 8020054:	08026f04 	.word	0x08026f04
 8020058:	08026f2c 	.word	0x08026f2c
 802005c:	08026f40 	.word	0x08026f40
 8020060:	200056cc 	.word	0x200056cc
 8020064:	08026f60 	.word	0x08026f60

08020068 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8020068:	b580      	push	{r7, lr}
 802006a:	b08a      	sub	sp, #40	; 0x28
 802006c:	af00      	add	r7, sp, #0
 802006e:	6078      	str	r0, [r7, #4]
 8020070:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8020072:	2300      	movs	r3, #0
 8020074:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8020076:	2300      	movs	r3, #0
 8020078:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802007a:	2300      	movs	r3, #0
 802007c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802007e:	2300      	movs	r3, #0
 8020080:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020082:	2300      	movs	r3, #0
 8020084:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8020086:	4b28      	ldr	r3, [pc, #160]	; (8020128 <ip_reass_remove_oldest_datagram+0xc0>)
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 802008c:	e030      	b.n	80200f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802008e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020090:	695a      	ldr	r2, [r3, #20]
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	68db      	ldr	r3, [r3, #12]
 8020096:	429a      	cmp	r2, r3
 8020098:	d10c      	bne.n	80200b4 <ip_reass_remove_oldest_datagram+0x4c>
 802009a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802009c:	699a      	ldr	r2, [r3, #24]
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	691b      	ldr	r3, [r3, #16]
 80200a2:	429a      	cmp	r2, r3
 80200a4:	d106      	bne.n	80200b4 <ip_reass_remove_oldest_datagram+0x4c>
 80200a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200a8:	899a      	ldrh	r2, [r3, #12]
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	889b      	ldrh	r3, [r3, #4]
 80200ae:	b29b      	uxth	r3, r3
 80200b0:	429a      	cmp	r2, r3
 80200b2:	d014      	beq.n	80200de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80200b4:	693b      	ldr	r3, [r7, #16]
 80200b6:	3301      	adds	r3, #1
 80200b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80200ba:	6a3b      	ldr	r3, [r7, #32]
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d104      	bne.n	80200ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80200c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80200c4:	69fb      	ldr	r3, [r7, #28]
 80200c6:	61bb      	str	r3, [r7, #24]
 80200c8:	e009      	b.n	80200de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80200ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200cc:	7fda      	ldrb	r2, [r3, #31]
 80200ce:	6a3b      	ldr	r3, [r7, #32]
 80200d0:	7fdb      	ldrb	r3, [r3, #31]
 80200d2:	429a      	cmp	r2, r3
 80200d4:	d803      	bhi.n	80200de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80200d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80200da:	69fb      	ldr	r3, [r7, #28]
 80200dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80200de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d001      	beq.n	80200ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80200e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80200ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200ec:	681b      	ldr	r3, [r3, #0]
 80200ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80200f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	d1cb      	bne.n	802008e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80200f6:	6a3b      	ldr	r3, [r7, #32]
 80200f8:	2b00      	cmp	r3, #0
 80200fa:	d008      	beq.n	802010e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80200fc:	69b9      	ldr	r1, [r7, #24]
 80200fe:	6a38      	ldr	r0, [r7, #32]
 8020100:	f7ff ff0e 	bl	801ff20 <ip_reass_free_complete_datagram>
 8020104:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8020106:	697a      	ldr	r2, [r7, #20]
 8020108:	68fb      	ldr	r3, [r7, #12]
 802010a:	4413      	add	r3, r2
 802010c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802010e:	697a      	ldr	r2, [r7, #20]
 8020110:	683b      	ldr	r3, [r7, #0]
 8020112:	429a      	cmp	r2, r3
 8020114:	da02      	bge.n	802011c <ip_reass_remove_oldest_datagram+0xb4>
 8020116:	693b      	ldr	r3, [r7, #16]
 8020118:	2b01      	cmp	r3, #1
 802011a:	dcac      	bgt.n	8020076 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 802011c:	697b      	ldr	r3, [r7, #20]
}
 802011e:	4618      	mov	r0, r3
 8020120:	3728      	adds	r7, #40	; 0x28
 8020122:	46bd      	mov	sp, r7
 8020124:	bd80      	pop	{r7, pc}
 8020126:	bf00      	nop
 8020128:	200056c8 	.word	0x200056c8

0802012c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 802012c:	b580      	push	{r7, lr}
 802012e:	b084      	sub	sp, #16
 8020130:	af00      	add	r7, sp, #0
 8020132:	6078      	str	r0, [r7, #4]
 8020134:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020136:	2004      	movs	r0, #4
 8020138:	f7f4 f88c 	bl	8014254 <memp_malloc>
 802013c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802013e:	68fb      	ldr	r3, [r7, #12]
 8020140:	2b00      	cmp	r3, #0
 8020142:	d110      	bne.n	8020166 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020144:	6839      	ldr	r1, [r7, #0]
 8020146:	6878      	ldr	r0, [r7, #4]
 8020148:	f7ff ff8e 	bl	8020068 <ip_reass_remove_oldest_datagram>
 802014c:	4602      	mov	r2, r0
 802014e:	683b      	ldr	r3, [r7, #0]
 8020150:	4293      	cmp	r3, r2
 8020152:	dc03      	bgt.n	802015c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020154:	2004      	movs	r0, #4
 8020156:	f7f4 f87d 	bl	8014254 <memp_malloc>
 802015a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	2b00      	cmp	r3, #0
 8020160:	d101      	bne.n	8020166 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8020162:	2300      	movs	r3, #0
 8020164:	e016      	b.n	8020194 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8020166:	2220      	movs	r2, #32
 8020168:	2100      	movs	r1, #0
 802016a:	68f8      	ldr	r0, [r7, #12]
 802016c:	f001 f8dc 	bl	8021328 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020170:	68fb      	ldr	r3, [r7, #12]
 8020172:	220f      	movs	r2, #15
 8020174:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020176:	4b09      	ldr	r3, [pc, #36]	; (802019c <ip_reass_enqueue_new_datagram+0x70>)
 8020178:	681a      	ldr	r2, [r3, #0]
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802017e:	4a07      	ldr	r2, [pc, #28]	; (802019c <ip_reass_enqueue_new_datagram+0x70>)
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	3308      	adds	r3, #8
 8020188:	2214      	movs	r2, #20
 802018a:	6879      	ldr	r1, [r7, #4]
 802018c:	4618      	mov	r0, r3
 802018e:	f001 f8a3 	bl	80212d8 <memcpy>
  return ipr;
 8020192:	68fb      	ldr	r3, [r7, #12]
}
 8020194:	4618      	mov	r0, r3
 8020196:	3710      	adds	r7, #16
 8020198:	46bd      	mov	sp, r7
 802019a:	bd80      	pop	{r7, pc}
 802019c:	200056c8 	.word	0x200056c8

080201a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80201a0:	b580      	push	{r7, lr}
 80201a2:	b082      	sub	sp, #8
 80201a4:	af00      	add	r7, sp, #0
 80201a6:	6078      	str	r0, [r7, #4]
 80201a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80201aa:	4b10      	ldr	r3, [pc, #64]	; (80201ec <ip_reass_dequeue_datagram+0x4c>)
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	687a      	ldr	r2, [r7, #4]
 80201b0:	429a      	cmp	r2, r3
 80201b2:	d104      	bne.n	80201be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	4a0c      	ldr	r2, [pc, #48]	; (80201ec <ip_reass_dequeue_datagram+0x4c>)
 80201ba:	6013      	str	r3, [r2, #0]
 80201bc:	e00d      	b.n	80201da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80201be:	683b      	ldr	r3, [r7, #0]
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d106      	bne.n	80201d2 <ip_reass_dequeue_datagram+0x32>
 80201c4:	4b0a      	ldr	r3, [pc, #40]	; (80201f0 <ip_reass_dequeue_datagram+0x50>)
 80201c6:	f240 1245 	movw	r2, #325	; 0x145
 80201ca:	490a      	ldr	r1, [pc, #40]	; (80201f4 <ip_reass_dequeue_datagram+0x54>)
 80201cc:	480a      	ldr	r0, [pc, #40]	; (80201f8 <ip_reass_dequeue_datagram+0x58>)
 80201ce:	f001 f96d 	bl	80214ac <iprintf>
    prev->next = ipr->next;
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	681a      	ldr	r2, [r3, #0]
 80201d6:	683b      	ldr	r3, [r7, #0]
 80201d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80201da:	6879      	ldr	r1, [r7, #4]
 80201dc:	2004      	movs	r0, #4
 80201de:	f7f4 f88b 	bl	80142f8 <memp_free>
}
 80201e2:	bf00      	nop
 80201e4:	3708      	adds	r7, #8
 80201e6:	46bd      	mov	sp, r7
 80201e8:	bd80      	pop	{r7, pc}
 80201ea:	bf00      	nop
 80201ec:	200056c8 	.word	0x200056c8
 80201f0:	08026ebc 	.word	0x08026ebc
 80201f4:	08026f84 	.word	0x08026f84
 80201f8:	08026f04 	.word	0x08026f04

080201fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80201fc:	b580      	push	{r7, lr}
 80201fe:	b08c      	sub	sp, #48	; 0x30
 8020200:	af00      	add	r7, sp, #0
 8020202:	60f8      	str	r0, [r7, #12]
 8020204:	60b9      	str	r1, [r7, #8]
 8020206:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8020208:	2300      	movs	r3, #0
 802020a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 802020c:	2301      	movs	r3, #1
 802020e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8020210:	68bb      	ldr	r3, [r7, #8]
 8020212:	685b      	ldr	r3, [r3, #4]
 8020214:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8020216:	69fb      	ldr	r3, [r7, #28]
 8020218:	885b      	ldrh	r3, [r3, #2]
 802021a:	b29b      	uxth	r3, r3
 802021c:	4618      	mov	r0, r3
 802021e:	f7f2 fb8d 	bl	801293c <lwip_htons>
 8020222:	4603      	mov	r3, r0
 8020224:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8020226:	69fb      	ldr	r3, [r7, #28]
 8020228:	781b      	ldrb	r3, [r3, #0]
 802022a:	f003 030f 	and.w	r3, r3, #15
 802022e:	b2db      	uxtb	r3, r3
 8020230:	009b      	lsls	r3, r3, #2
 8020232:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8020234:	7e7b      	ldrb	r3, [r7, #25]
 8020236:	b29b      	uxth	r3, r3
 8020238:	8b7a      	ldrh	r2, [r7, #26]
 802023a:	429a      	cmp	r2, r3
 802023c:	d202      	bcs.n	8020244 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802023e:	f04f 33ff 	mov.w	r3, #4294967295
 8020242:	e135      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8020244:	7e7b      	ldrb	r3, [r7, #25]
 8020246:	b29b      	uxth	r3, r3
 8020248:	8b7a      	ldrh	r2, [r7, #26]
 802024a:	1ad3      	subs	r3, r2, r3
 802024c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802024e:	69fb      	ldr	r3, [r7, #28]
 8020250:	88db      	ldrh	r3, [r3, #6]
 8020252:	b29b      	uxth	r3, r3
 8020254:	4618      	mov	r0, r3
 8020256:	f7f2 fb71 	bl	801293c <lwip_htons>
 802025a:	4603      	mov	r3, r0
 802025c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020260:	b29b      	uxth	r3, r3
 8020262:	00db      	lsls	r3, r3, #3
 8020264:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8020266:	68bb      	ldr	r3, [r7, #8]
 8020268:	685b      	ldr	r3, [r3, #4]
 802026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 802026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802026e:	2200      	movs	r2, #0
 8020270:	701a      	strb	r2, [r3, #0]
 8020272:	2200      	movs	r2, #0
 8020274:	705a      	strb	r2, [r3, #1]
 8020276:	2200      	movs	r2, #0
 8020278:	709a      	strb	r2, [r3, #2]
 802027a:	2200      	movs	r2, #0
 802027c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020280:	8afa      	ldrh	r2, [r7, #22]
 8020282:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8020284:	8afa      	ldrh	r2, [r7, #22]
 8020286:	8b7b      	ldrh	r3, [r7, #26]
 8020288:	4413      	add	r3, r2
 802028a:	b29a      	uxth	r2, r3
 802028c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802028e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8020290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020292:	88db      	ldrh	r3, [r3, #6]
 8020294:	b29b      	uxth	r3, r3
 8020296:	8afa      	ldrh	r2, [r7, #22]
 8020298:	429a      	cmp	r2, r3
 802029a:	d902      	bls.n	80202a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802029c:	f04f 33ff 	mov.w	r3, #4294967295
 80202a0:	e106      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	685b      	ldr	r3, [r3, #4]
 80202a6:	627b      	str	r3, [r7, #36]	; 0x24
 80202a8:	e068      	b.n	802037c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80202aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ac:	685b      	ldr	r3, [r3, #4]
 80202ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80202b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202b2:	889b      	ldrh	r3, [r3, #4]
 80202b4:	b29a      	uxth	r2, r3
 80202b6:	693b      	ldr	r3, [r7, #16]
 80202b8:	889b      	ldrh	r3, [r3, #4]
 80202ba:	b29b      	uxth	r3, r3
 80202bc:	429a      	cmp	r2, r3
 80202be:	d235      	bcs.n	802032c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80202c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80202c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80202c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d020      	beq.n	802030e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80202cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202ce:	889b      	ldrh	r3, [r3, #4]
 80202d0:	b29a      	uxth	r2, r3
 80202d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202d4:	88db      	ldrh	r3, [r3, #6]
 80202d6:	b29b      	uxth	r3, r3
 80202d8:	429a      	cmp	r2, r3
 80202da:	d307      	bcc.n	80202ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80202dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202de:	88db      	ldrh	r3, [r3, #6]
 80202e0:	b29a      	uxth	r2, r3
 80202e2:	693b      	ldr	r3, [r7, #16]
 80202e4:	889b      	ldrh	r3, [r3, #4]
 80202e6:	b29b      	uxth	r3, r3
 80202e8:	429a      	cmp	r2, r3
 80202ea:	d902      	bls.n	80202f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80202ec:	f04f 33ff 	mov.w	r3, #4294967295
 80202f0:	e0de      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80202f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202f4:	68ba      	ldr	r2, [r7, #8]
 80202f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80202f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202fa:	88db      	ldrh	r3, [r3, #6]
 80202fc:	b29a      	uxth	r2, r3
 80202fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020300:	889b      	ldrh	r3, [r3, #4]
 8020302:	b29b      	uxth	r3, r3
 8020304:	429a      	cmp	r2, r3
 8020306:	d03d      	beq.n	8020384 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020308:	2300      	movs	r3, #0
 802030a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 802030c:	e03a      	b.n	8020384 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802030e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020310:	88db      	ldrh	r3, [r3, #6]
 8020312:	b29a      	uxth	r2, r3
 8020314:	693b      	ldr	r3, [r7, #16]
 8020316:	889b      	ldrh	r3, [r3, #4]
 8020318:	b29b      	uxth	r3, r3
 802031a:	429a      	cmp	r2, r3
 802031c:	d902      	bls.n	8020324 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802031e:	f04f 33ff 	mov.w	r3, #4294967295
 8020322:	e0c5      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8020324:	68fb      	ldr	r3, [r7, #12]
 8020326:	68ba      	ldr	r2, [r7, #8]
 8020328:	605a      	str	r2, [r3, #4]
      break;
 802032a:	e02b      	b.n	8020384 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 802032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802032e:	889b      	ldrh	r3, [r3, #4]
 8020330:	b29a      	uxth	r2, r3
 8020332:	693b      	ldr	r3, [r7, #16]
 8020334:	889b      	ldrh	r3, [r3, #4]
 8020336:	b29b      	uxth	r3, r3
 8020338:	429a      	cmp	r2, r3
 802033a:	d102      	bne.n	8020342 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802033c:	f04f 33ff 	mov.w	r3, #4294967295
 8020340:	e0b6      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020344:	889b      	ldrh	r3, [r3, #4]
 8020346:	b29a      	uxth	r2, r3
 8020348:	693b      	ldr	r3, [r7, #16]
 802034a:	88db      	ldrh	r3, [r3, #6]
 802034c:	b29b      	uxth	r3, r3
 802034e:	429a      	cmp	r2, r3
 8020350:	d202      	bcs.n	8020358 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020352:	f04f 33ff 	mov.w	r3, #4294967295
 8020356:	e0ab      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802035a:	2b00      	cmp	r3, #0
 802035c:	d009      	beq.n	8020372 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802035e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020360:	88db      	ldrh	r3, [r3, #6]
 8020362:	b29a      	uxth	r2, r3
 8020364:	693b      	ldr	r3, [r7, #16]
 8020366:	889b      	ldrh	r3, [r3, #4]
 8020368:	b29b      	uxth	r3, r3
 802036a:	429a      	cmp	r2, r3
 802036c:	d001      	beq.n	8020372 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802036e:	2300      	movs	r3, #0
 8020370:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020372:	693b      	ldr	r3, [r7, #16]
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8020378:	693b      	ldr	r3, [r7, #16]
 802037a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 802037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802037e:	2b00      	cmp	r3, #0
 8020380:	d193      	bne.n	80202aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8020382:	e000      	b.n	8020386 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8020384:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020388:	2b00      	cmp	r3, #0
 802038a:	d12d      	bne.n	80203e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 802038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802038e:	2b00      	cmp	r3, #0
 8020390:	d01c      	beq.n	80203cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020394:	88db      	ldrh	r3, [r3, #6]
 8020396:	b29a      	uxth	r2, r3
 8020398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802039a:	889b      	ldrh	r3, [r3, #4]
 802039c:	b29b      	uxth	r3, r3
 802039e:	429a      	cmp	r2, r3
 80203a0:	d906      	bls.n	80203b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80203a2:	4b45      	ldr	r3, [pc, #276]	; (80204b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80203a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80203a8:	4944      	ldr	r1, [pc, #272]	; (80204bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80203aa:	4845      	ldr	r0, [pc, #276]	; (80204c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80203ac:	f001 f87e 	bl	80214ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80203b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80203b2:	68ba      	ldr	r2, [r7, #8]
 80203b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80203b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80203b8:	88db      	ldrh	r3, [r3, #6]
 80203ba:	b29a      	uxth	r2, r3
 80203bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203be:	889b      	ldrh	r3, [r3, #4]
 80203c0:	b29b      	uxth	r3, r3
 80203c2:	429a      	cmp	r2, r3
 80203c4:	d010      	beq.n	80203e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80203c6:	2300      	movs	r3, #0
 80203c8:	623b      	str	r3, [r7, #32]
 80203ca:	e00d      	b.n	80203e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80203cc:	68fb      	ldr	r3, [r7, #12]
 80203ce:	685b      	ldr	r3, [r3, #4]
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d006      	beq.n	80203e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80203d4:	4b38      	ldr	r3, [pc, #224]	; (80204b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80203d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80203da:	493a      	ldr	r1, [pc, #232]	; (80204c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80203dc:	4838      	ldr	r0, [pc, #224]	; (80204c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80203de:	f001 f865 	bl	80214ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80203e2:	68fb      	ldr	r3, [r7, #12]
 80203e4:	68ba      	ldr	r2, [r7, #8]
 80203e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d105      	bne.n	80203fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80203ee:	68fb      	ldr	r3, [r7, #12]
 80203f0:	7f9b      	ldrb	r3, [r3, #30]
 80203f2:	f003 0301 	and.w	r3, r3, #1
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d059      	beq.n	80204ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80203fa:	6a3b      	ldr	r3, [r7, #32]
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d04f      	beq.n	80204a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8020400:	68fb      	ldr	r3, [r7, #12]
 8020402:	685b      	ldr	r3, [r3, #4]
 8020404:	2b00      	cmp	r3, #0
 8020406:	d006      	beq.n	8020416 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	685b      	ldr	r3, [r3, #4]
 802040c:	685b      	ldr	r3, [r3, #4]
 802040e:	889b      	ldrh	r3, [r3, #4]
 8020410:	b29b      	uxth	r3, r3
 8020412:	2b00      	cmp	r3, #0
 8020414:	d002      	beq.n	802041c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8020416:	2300      	movs	r3, #0
 8020418:	623b      	str	r3, [r7, #32]
 802041a:	e041      	b.n	80204a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802041e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8020420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8020426:	e012      	b.n	802044e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8020428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802042a:	685b      	ldr	r3, [r3, #4]
 802042c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020430:	88db      	ldrh	r3, [r3, #6]
 8020432:	b29a      	uxth	r2, r3
 8020434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020436:	889b      	ldrh	r3, [r3, #4]
 8020438:	b29b      	uxth	r3, r3
 802043a:	429a      	cmp	r2, r3
 802043c:	d002      	beq.n	8020444 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802043e:	2300      	movs	r3, #0
 8020440:	623b      	str	r3, [r7, #32]
            break;
 8020442:	e007      	b.n	8020454 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8020444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020446:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8020448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020450:	2b00      	cmp	r3, #0
 8020452:	d1e9      	bne.n	8020428 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020454:	6a3b      	ldr	r3, [r7, #32]
 8020456:	2b00      	cmp	r3, #0
 8020458:	d022      	beq.n	80204a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802045a:	68fb      	ldr	r3, [r7, #12]
 802045c:	685b      	ldr	r3, [r3, #4]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d106      	bne.n	8020470 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8020462:	4b15      	ldr	r3, [pc, #84]	; (80204b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020464:	f240 12df 	movw	r2, #479	; 0x1df
 8020468:	4917      	ldr	r1, [pc, #92]	; (80204c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802046a:	4815      	ldr	r0, [pc, #84]	; (80204c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802046c:	f001 f81e 	bl	80214ac <iprintf>
          LWIP_ASSERT("sanity check",
 8020470:	68fb      	ldr	r3, [r7, #12]
 8020472:	685b      	ldr	r3, [r3, #4]
 8020474:	685b      	ldr	r3, [r3, #4]
 8020476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020478:	429a      	cmp	r2, r3
 802047a:	d106      	bne.n	802048a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 802047c:	4b0e      	ldr	r3, [pc, #56]	; (80204b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802047e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020482:	4911      	ldr	r1, [pc, #68]	; (80204c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020484:	480e      	ldr	r0, [pc, #56]	; (80204c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020486:	f001 f811 	bl	80214ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802048c:	681b      	ldr	r3, [r3, #0]
 802048e:	2b00      	cmp	r3, #0
 8020490:	d006      	beq.n	80204a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8020492:	4b09      	ldr	r3, [pc, #36]	; (80204b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020494:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8020498:	490c      	ldr	r1, [pc, #48]	; (80204cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 802049a:	4809      	ldr	r0, [pc, #36]	; (80204c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802049c:	f001 f806 	bl	80214ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80204a0:	6a3b      	ldr	r3, [r7, #32]
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	bf14      	ite	ne
 80204a6:	2301      	movne	r3, #1
 80204a8:	2300      	moveq	r3, #0
 80204aa:	b2db      	uxtb	r3, r3
 80204ac:	e000      	b.n	80204b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80204ae:	2300      	movs	r3, #0
}
 80204b0:	4618      	mov	r0, r3
 80204b2:	3730      	adds	r7, #48	; 0x30
 80204b4:	46bd      	mov	sp, r7
 80204b6:	bd80      	pop	{r7, pc}
 80204b8:	08026ebc 	.word	0x08026ebc
 80204bc:	08026fa0 	.word	0x08026fa0
 80204c0:	08026f04 	.word	0x08026f04
 80204c4:	08026fc0 	.word	0x08026fc0
 80204c8:	08026ff8 	.word	0x08026ff8
 80204cc:	08027008 	.word	0x08027008

080204d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80204d0:	b580      	push	{r7, lr}
 80204d2:	b08e      	sub	sp, #56	; 0x38
 80204d4:	af00      	add	r7, sp, #0
 80204d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	685b      	ldr	r3, [r3, #4]
 80204dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80204de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204e0:	781b      	ldrb	r3, [r3, #0]
 80204e2:	f003 030f 	and.w	r3, r3, #15
 80204e6:	b2db      	uxtb	r3, r3
 80204e8:	009b      	lsls	r3, r3, #2
 80204ea:	b2db      	uxtb	r3, r3
 80204ec:	2b14      	cmp	r3, #20
 80204ee:	f040 8167 	bne.w	80207c0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80204f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204f4:	88db      	ldrh	r3, [r3, #6]
 80204f6:	b29b      	uxth	r3, r3
 80204f8:	4618      	mov	r0, r3
 80204fa:	f7f2 fa1f 	bl	801293c <lwip_htons>
 80204fe:	4603      	mov	r3, r0
 8020500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020504:	b29b      	uxth	r3, r3
 8020506:	00db      	lsls	r3, r3, #3
 8020508:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802050c:	885b      	ldrh	r3, [r3, #2]
 802050e:	b29b      	uxth	r3, r3
 8020510:	4618      	mov	r0, r3
 8020512:	f7f2 fa13 	bl	801293c <lwip_htons>
 8020516:	4603      	mov	r3, r0
 8020518:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802051c:	781b      	ldrb	r3, [r3, #0]
 802051e:	f003 030f 	and.w	r3, r3, #15
 8020522:	b2db      	uxtb	r3, r3
 8020524:	009b      	lsls	r3, r3, #2
 8020526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802052a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802052e:	b29b      	uxth	r3, r3
 8020530:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020532:	429a      	cmp	r2, r3
 8020534:	f0c0 8146 	bcc.w	80207c4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8020538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802053c:	b29b      	uxth	r3, r3
 802053e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020540:	1ad3      	subs	r3, r2, r3
 8020542:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020544:	6878      	ldr	r0, [r7, #4]
 8020546:	f7f4 fe15 	bl	8015174 <pbuf_clen>
 802054a:	4603      	mov	r3, r0
 802054c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802054e:	4b9f      	ldr	r3, [pc, #636]	; (80207cc <ip4_reass+0x2fc>)
 8020550:	881b      	ldrh	r3, [r3, #0]
 8020552:	461a      	mov	r2, r3
 8020554:	8c3b      	ldrh	r3, [r7, #32]
 8020556:	4413      	add	r3, r2
 8020558:	2b0a      	cmp	r3, #10
 802055a:	dd10      	ble.n	802057e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802055c:	8c3b      	ldrh	r3, [r7, #32]
 802055e:	4619      	mov	r1, r3
 8020560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020562:	f7ff fd81 	bl	8020068 <ip_reass_remove_oldest_datagram>
 8020566:	4603      	mov	r3, r0
 8020568:	2b00      	cmp	r3, #0
 802056a:	f000 812d 	beq.w	80207c8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802056e:	4b97      	ldr	r3, [pc, #604]	; (80207cc <ip4_reass+0x2fc>)
 8020570:	881b      	ldrh	r3, [r3, #0]
 8020572:	461a      	mov	r2, r3
 8020574:	8c3b      	ldrh	r3, [r7, #32]
 8020576:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020578:	2b0a      	cmp	r3, #10
 802057a:	f300 8125 	bgt.w	80207c8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802057e:	4b94      	ldr	r3, [pc, #592]	; (80207d0 <ip4_reass+0x300>)
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	633b      	str	r3, [r7, #48]	; 0x30
 8020584:	e015      	b.n	80205b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020588:	695a      	ldr	r2, [r3, #20]
 802058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802058c:	68db      	ldr	r3, [r3, #12]
 802058e:	429a      	cmp	r2, r3
 8020590:	d10c      	bne.n	80205ac <ip4_reass+0xdc>
 8020592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020594:	699a      	ldr	r2, [r3, #24]
 8020596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020598:	691b      	ldr	r3, [r3, #16]
 802059a:	429a      	cmp	r2, r3
 802059c:	d106      	bne.n	80205ac <ip4_reass+0xdc>
 802059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205a0:	899a      	ldrh	r2, [r3, #12]
 80205a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205a4:	889b      	ldrh	r3, [r3, #4]
 80205a6:	b29b      	uxth	r3, r3
 80205a8:	429a      	cmp	r2, r3
 80205aa:	d006      	beq.n	80205ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80205ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	633b      	str	r3, [r7, #48]	; 0x30
 80205b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d1e6      	bne.n	8020586 <ip4_reass+0xb6>
 80205b8:	e000      	b.n	80205bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80205ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80205bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d109      	bne.n	80205d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80205c2:	8c3b      	ldrh	r3, [r7, #32]
 80205c4:	4619      	mov	r1, r3
 80205c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80205c8:	f7ff fdb0 	bl	802012c <ip_reass_enqueue_new_datagram>
 80205cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80205ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d11c      	bne.n	802060e <ip4_reass+0x13e>
      goto nullreturn;
 80205d4:	e109      	b.n	80207ea <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80205d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205d8:	88db      	ldrh	r3, [r3, #6]
 80205da:	b29b      	uxth	r3, r3
 80205dc:	4618      	mov	r0, r3
 80205de:	f7f2 f9ad 	bl	801293c <lwip_htons>
 80205e2:	4603      	mov	r3, r0
 80205e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d110      	bne.n	802060e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80205ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205ee:	89db      	ldrh	r3, [r3, #14]
 80205f0:	4618      	mov	r0, r3
 80205f2:	f7f2 f9a3 	bl	801293c <lwip_htons>
 80205f6:	4603      	mov	r3, r0
 80205f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d006      	beq.n	802060e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020602:	3308      	adds	r3, #8
 8020604:	2214      	movs	r2, #20
 8020606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020608:	4618      	mov	r0, r3
 802060a:	f000 fe65 	bl	80212d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020610:	88db      	ldrh	r3, [r3, #6]
 8020612:	b29b      	uxth	r3, r3
 8020614:	f003 0320 	and.w	r3, r3, #32
 8020618:	2b00      	cmp	r3, #0
 802061a:	bf0c      	ite	eq
 802061c:	2301      	moveq	r3, #1
 802061e:	2300      	movne	r3, #0
 8020620:	b2db      	uxtb	r3, r3
 8020622:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020624:	69fb      	ldr	r3, [r7, #28]
 8020626:	2b00      	cmp	r3, #0
 8020628:	d00e      	beq.n	8020648 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802062a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802062c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802062e:	4413      	add	r3, r2
 8020630:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020632:	8b7a      	ldrh	r2, [r7, #26]
 8020634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020636:	429a      	cmp	r2, r3
 8020638:	f0c0 80a0 	bcc.w	802077c <ip4_reass+0x2ac>
 802063c:	8b7b      	ldrh	r3, [r7, #26]
 802063e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8020642:	4293      	cmp	r3, r2
 8020644:	f200 809a 	bhi.w	802077c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020648:	69fa      	ldr	r2, [r7, #28]
 802064a:	6879      	ldr	r1, [r7, #4]
 802064c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802064e:	f7ff fdd5 	bl	80201fc <ip_reass_chain_frag_into_datagram_and_validate>
 8020652:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020654:	697b      	ldr	r3, [r7, #20]
 8020656:	f1b3 3fff 	cmp.w	r3, #4294967295
 802065a:	f000 8091 	beq.w	8020780 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802065e:	4b5b      	ldr	r3, [pc, #364]	; (80207cc <ip4_reass+0x2fc>)
 8020660:	881a      	ldrh	r2, [r3, #0]
 8020662:	8c3b      	ldrh	r3, [r7, #32]
 8020664:	4413      	add	r3, r2
 8020666:	b29a      	uxth	r2, r3
 8020668:	4b58      	ldr	r3, [pc, #352]	; (80207cc <ip4_reass+0x2fc>)
 802066a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 802066c:	69fb      	ldr	r3, [r7, #28]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d00d      	beq.n	802068e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8020672:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020676:	4413      	add	r3, r2
 8020678:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802067c:	8a7a      	ldrh	r2, [r7, #18]
 802067e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020682:	7f9b      	ldrb	r3, [r3, #30]
 8020684:	f043 0301 	orr.w	r3, r3, #1
 8020688:	b2da      	uxtb	r2, r3
 802068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802068c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	2b01      	cmp	r3, #1
 8020692:	d171      	bne.n	8020778 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8020694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020696:	8b9b      	ldrh	r3, [r3, #28]
 8020698:	3314      	adds	r3, #20
 802069a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802069e:	685b      	ldr	r3, [r3, #4]
 80206a0:	685b      	ldr	r3, [r3, #4]
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80206a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206a8:	685b      	ldr	r3, [r3, #4]
 80206aa:	685b      	ldr	r3, [r3, #4]
 80206ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80206ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206b0:	3308      	adds	r3, #8
 80206b2:	2214      	movs	r2, #20
 80206b4:	4619      	mov	r1, r3
 80206b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80206b8:	f000 fe0e 	bl	80212d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80206bc:	8a3b      	ldrh	r3, [r7, #16]
 80206be:	4618      	mov	r0, r3
 80206c0:	f7f2 f93c 	bl	801293c <lwip_htons>
 80206c4:	4603      	mov	r3, r0
 80206c6:	461a      	mov	r2, r3
 80206c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80206cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206ce:	2200      	movs	r2, #0
 80206d0:	719a      	strb	r2, [r3, #6]
 80206d2:	2200      	movs	r2, #0
 80206d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80206d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206d8:	2200      	movs	r2, #0
 80206da:	729a      	strb	r2, [r3, #10]
 80206dc:	2200      	movs	r2, #0
 80206de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80206e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206e2:	685b      	ldr	r3, [r3, #4]
 80206e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80206e6:	e00d      	b.n	8020704 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80206e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80206ea:	685b      	ldr	r3, [r3, #4]
 80206ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80206ee:	2114      	movs	r1, #20
 80206f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80206f2:	f7f4 fc2b 	bl	8014f4c <pbuf_remove_header>
      pbuf_cat(p, r);
 80206f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80206f8:	6878      	ldr	r0, [r7, #4]
 80206fa:	f7f4 fd7b 	bl	80151f4 <pbuf_cat>
      r = iprh->next_pbuf;
 80206fe:	68fb      	ldr	r3, [r7, #12]
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8020704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020706:	2b00      	cmp	r3, #0
 8020708:	d1ee      	bne.n	80206e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802070a:	4b31      	ldr	r3, [pc, #196]	; (80207d0 <ip4_reass+0x300>)
 802070c:	681b      	ldr	r3, [r3, #0]
 802070e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020710:	429a      	cmp	r2, r3
 8020712:	d102      	bne.n	802071a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020714:	2300      	movs	r3, #0
 8020716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020718:	e010      	b.n	802073c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802071a:	4b2d      	ldr	r3, [pc, #180]	; (80207d0 <ip4_reass+0x300>)
 802071c:	681b      	ldr	r3, [r3, #0]
 802071e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020720:	e007      	b.n	8020732 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020724:	681b      	ldr	r3, [r3, #0]
 8020726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020728:	429a      	cmp	r2, r3
 802072a:	d006      	beq.n	802073a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020734:	2b00      	cmp	r3, #0
 8020736:	d1f4      	bne.n	8020722 <ip4_reass+0x252>
 8020738:	e000      	b.n	802073c <ip4_reass+0x26c>
          break;
 802073a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802073c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802073e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020740:	f7ff fd2e 	bl	80201a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020744:	6878      	ldr	r0, [r7, #4]
 8020746:	f7f4 fd15 	bl	8015174 <pbuf_clen>
 802074a:	4603      	mov	r3, r0
 802074c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802074e:	4b1f      	ldr	r3, [pc, #124]	; (80207cc <ip4_reass+0x2fc>)
 8020750:	881b      	ldrh	r3, [r3, #0]
 8020752:	8c3a      	ldrh	r2, [r7, #32]
 8020754:	429a      	cmp	r2, r3
 8020756:	d906      	bls.n	8020766 <ip4_reass+0x296>
 8020758:	4b1e      	ldr	r3, [pc, #120]	; (80207d4 <ip4_reass+0x304>)
 802075a:	f240 229b 	movw	r2, #667	; 0x29b
 802075e:	491e      	ldr	r1, [pc, #120]	; (80207d8 <ip4_reass+0x308>)
 8020760:	481e      	ldr	r0, [pc, #120]	; (80207dc <ip4_reass+0x30c>)
 8020762:	f000 fea3 	bl	80214ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8020766:	4b19      	ldr	r3, [pc, #100]	; (80207cc <ip4_reass+0x2fc>)
 8020768:	881a      	ldrh	r2, [r3, #0]
 802076a:	8c3b      	ldrh	r3, [r7, #32]
 802076c:	1ad3      	subs	r3, r2, r3
 802076e:	b29a      	uxth	r2, r3
 8020770:	4b16      	ldr	r3, [pc, #88]	; (80207cc <ip4_reass+0x2fc>)
 8020772:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	e03c      	b.n	80207f2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8020778:	2300      	movs	r3, #0
 802077a:	e03a      	b.n	80207f2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 802077c:	bf00      	nop
 802077e:	e000      	b.n	8020782 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8020780:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8020782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020784:	2b00      	cmp	r3, #0
 8020786:	d106      	bne.n	8020796 <ip4_reass+0x2c6>
 8020788:	4b12      	ldr	r3, [pc, #72]	; (80207d4 <ip4_reass+0x304>)
 802078a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802078e:	4914      	ldr	r1, [pc, #80]	; (80207e0 <ip4_reass+0x310>)
 8020790:	4812      	ldr	r0, [pc, #72]	; (80207dc <ip4_reass+0x30c>)
 8020792:	f000 fe8b 	bl	80214ac <iprintf>
  if (ipr->p == NULL) {
 8020796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020798:	685b      	ldr	r3, [r3, #4]
 802079a:	2b00      	cmp	r3, #0
 802079c:	d124      	bne.n	80207e8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802079e:	4b0c      	ldr	r3, [pc, #48]	; (80207d0 <ip4_reass+0x300>)
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80207a4:	429a      	cmp	r2, r3
 80207a6:	d006      	beq.n	80207b6 <ip4_reass+0x2e6>
 80207a8:	4b0a      	ldr	r3, [pc, #40]	; (80207d4 <ip4_reass+0x304>)
 80207aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80207ae:	490d      	ldr	r1, [pc, #52]	; (80207e4 <ip4_reass+0x314>)
 80207b0:	480a      	ldr	r0, [pc, #40]	; (80207dc <ip4_reass+0x30c>)
 80207b2:	f000 fe7b 	bl	80214ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80207b6:	2100      	movs	r1, #0
 80207b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80207ba:	f7ff fcf1 	bl	80201a0 <ip_reass_dequeue_datagram>
 80207be:	e014      	b.n	80207ea <ip4_reass+0x31a>
    goto nullreturn;
 80207c0:	bf00      	nop
 80207c2:	e012      	b.n	80207ea <ip4_reass+0x31a>
    goto nullreturn;
 80207c4:	bf00      	nop
 80207c6:	e010      	b.n	80207ea <ip4_reass+0x31a>
      goto nullreturn;
 80207c8:	bf00      	nop
 80207ca:	e00e      	b.n	80207ea <ip4_reass+0x31a>
 80207cc:	200056cc 	.word	0x200056cc
 80207d0:	200056c8 	.word	0x200056c8
 80207d4:	08026ebc 	.word	0x08026ebc
 80207d8:	0802702c 	.word	0x0802702c
 80207dc:	08026f04 	.word	0x08026f04
 80207e0:	08027048 	.word	0x08027048
 80207e4:	08027054 	.word	0x08027054
  }

nullreturn:
 80207e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80207ea:	6878      	ldr	r0, [r7, #4]
 80207ec:	f7f4 fc34 	bl	8015058 <pbuf_free>
  return NULL;
 80207f0:	2300      	movs	r3, #0
}
 80207f2:	4618      	mov	r0, r3
 80207f4:	3738      	adds	r7, #56	; 0x38
 80207f6:	46bd      	mov	sp, r7
 80207f8:	bd80      	pop	{r7, pc}
 80207fa:	bf00      	nop

080207fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80207fc:	b580      	push	{r7, lr}
 80207fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020800:	2005      	movs	r0, #5
 8020802:	f7f3 fd27 	bl	8014254 <memp_malloc>
 8020806:	4603      	mov	r3, r0
}
 8020808:	4618      	mov	r0, r3
 802080a:	bd80      	pop	{r7, pc}

0802080c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 802080c:	b580      	push	{r7, lr}
 802080e:	b082      	sub	sp, #8
 8020810:	af00      	add	r7, sp, #0
 8020812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	2b00      	cmp	r3, #0
 8020818:	d106      	bne.n	8020828 <ip_frag_free_pbuf_custom_ref+0x1c>
 802081a:	4b07      	ldr	r3, [pc, #28]	; (8020838 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802081c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020820:	4906      	ldr	r1, [pc, #24]	; (802083c <ip_frag_free_pbuf_custom_ref+0x30>)
 8020822:	4807      	ldr	r0, [pc, #28]	; (8020840 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020824:	f000 fe42 	bl	80214ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020828:	6879      	ldr	r1, [r7, #4]
 802082a:	2005      	movs	r0, #5
 802082c:	f7f3 fd64 	bl	80142f8 <memp_free>
}
 8020830:	bf00      	nop
 8020832:	3708      	adds	r7, #8
 8020834:	46bd      	mov	sp, r7
 8020836:	bd80      	pop	{r7, pc}
 8020838:	08026ebc 	.word	0x08026ebc
 802083c:	08027074 	.word	0x08027074
 8020840:	08026f04 	.word	0x08026f04

08020844 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020844:	b580      	push	{r7, lr}
 8020846:	b084      	sub	sp, #16
 8020848:	af00      	add	r7, sp, #0
 802084a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020850:	68fb      	ldr	r3, [r7, #12]
 8020852:	2b00      	cmp	r3, #0
 8020854:	d106      	bne.n	8020864 <ipfrag_free_pbuf_custom+0x20>
 8020856:	4b11      	ldr	r3, [pc, #68]	; (802089c <ipfrag_free_pbuf_custom+0x58>)
 8020858:	f240 22ce 	movw	r2, #718	; 0x2ce
 802085c:	4910      	ldr	r1, [pc, #64]	; (80208a0 <ipfrag_free_pbuf_custom+0x5c>)
 802085e:	4811      	ldr	r0, [pc, #68]	; (80208a4 <ipfrag_free_pbuf_custom+0x60>)
 8020860:	f000 fe24 	bl	80214ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020864:	68fa      	ldr	r2, [r7, #12]
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	429a      	cmp	r2, r3
 802086a:	d006      	beq.n	802087a <ipfrag_free_pbuf_custom+0x36>
 802086c:	4b0b      	ldr	r3, [pc, #44]	; (802089c <ipfrag_free_pbuf_custom+0x58>)
 802086e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020872:	490d      	ldr	r1, [pc, #52]	; (80208a8 <ipfrag_free_pbuf_custom+0x64>)
 8020874:	480b      	ldr	r0, [pc, #44]	; (80208a4 <ipfrag_free_pbuf_custom+0x60>)
 8020876:	f000 fe19 	bl	80214ac <iprintf>
  if (pcr->original != NULL) {
 802087a:	68fb      	ldr	r3, [r7, #12]
 802087c:	695b      	ldr	r3, [r3, #20]
 802087e:	2b00      	cmp	r3, #0
 8020880:	d004      	beq.n	802088c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	695b      	ldr	r3, [r3, #20]
 8020886:	4618      	mov	r0, r3
 8020888:	f7f4 fbe6 	bl	8015058 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 802088c:	68f8      	ldr	r0, [r7, #12]
 802088e:	f7ff ffbd 	bl	802080c <ip_frag_free_pbuf_custom_ref>
}
 8020892:	bf00      	nop
 8020894:	3710      	adds	r7, #16
 8020896:	46bd      	mov	sp, r7
 8020898:	bd80      	pop	{r7, pc}
 802089a:	bf00      	nop
 802089c:	08026ebc 	.word	0x08026ebc
 80208a0:	08027080 	.word	0x08027080
 80208a4:	08026f04 	.word	0x08026f04
 80208a8:	0802708c 	.word	0x0802708c

080208ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b094      	sub	sp, #80	; 0x50
 80208b0:	af02      	add	r7, sp, #8
 80208b2:	60f8      	str	r0, [r7, #12]
 80208b4:	60b9      	str	r1, [r7, #8]
 80208b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80208b8:	2300      	movs	r3, #0
 80208ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80208be:	68bb      	ldr	r3, [r7, #8]
 80208c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80208c2:	3b14      	subs	r3, #20
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	da00      	bge.n	80208ca <ip4_frag+0x1e>
 80208c8:	3307      	adds	r3, #7
 80208ca:	10db      	asrs	r3, r3, #3
 80208cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80208ce:	2314      	movs	r3, #20
 80208d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	685b      	ldr	r3, [r3, #4]
 80208d6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80208d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80208da:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80208dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208de:	781b      	ldrb	r3, [r3, #0]
 80208e0:	f003 030f 	and.w	r3, r3, #15
 80208e4:	b2db      	uxtb	r3, r3
 80208e6:	009b      	lsls	r3, r3, #2
 80208e8:	b2db      	uxtb	r3, r3
 80208ea:	2b14      	cmp	r3, #20
 80208ec:	d002      	beq.n	80208f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80208ee:	f06f 0305 	mvn.w	r3, #5
 80208f2:	e110      	b.n	8020b16 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80208f4:	68fb      	ldr	r3, [r7, #12]
 80208f6:	895b      	ldrh	r3, [r3, #10]
 80208f8:	2b13      	cmp	r3, #19
 80208fa:	d809      	bhi.n	8020910 <ip4_frag+0x64>
 80208fc:	4b88      	ldr	r3, [pc, #544]	; (8020b20 <ip4_frag+0x274>)
 80208fe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020902:	4988      	ldr	r1, [pc, #544]	; (8020b24 <ip4_frag+0x278>)
 8020904:	4888      	ldr	r0, [pc, #544]	; (8020b28 <ip4_frag+0x27c>)
 8020906:	f000 fdd1 	bl	80214ac <iprintf>
 802090a:	f06f 0305 	mvn.w	r3, #5
 802090e:	e102      	b.n	8020b16 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020912:	88db      	ldrh	r3, [r3, #6]
 8020914:	b29b      	uxth	r3, r3
 8020916:	4618      	mov	r0, r3
 8020918:	f7f2 f810 	bl	801293c <lwip_htons>
 802091c:	4603      	mov	r3, r0
 802091e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020920:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020926:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802092a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802092c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020930:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020932:	68fb      	ldr	r3, [r7, #12]
 8020934:	891b      	ldrh	r3, [r3, #8]
 8020936:	3b14      	subs	r3, #20
 8020938:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802093c:	e0e1      	b.n	8020b02 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802093e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020940:	00db      	lsls	r3, r3, #3
 8020942:	b29b      	uxth	r3, r3
 8020944:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020948:	4293      	cmp	r3, r2
 802094a:	bf28      	it	cs
 802094c:	4613      	movcs	r3, r2
 802094e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020950:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020954:	2114      	movs	r1, #20
 8020956:	200e      	movs	r0, #14
 8020958:	f7f4 f89a 	bl	8014a90 <pbuf_alloc>
 802095c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020960:	2b00      	cmp	r3, #0
 8020962:	f000 80d5 	beq.w	8020b10 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020968:	895b      	ldrh	r3, [r3, #10]
 802096a:	2b13      	cmp	r3, #19
 802096c:	d806      	bhi.n	802097c <ip4_frag+0xd0>
 802096e:	4b6c      	ldr	r3, [pc, #432]	; (8020b20 <ip4_frag+0x274>)
 8020970:	f44f 7249 	mov.w	r2, #804	; 0x324
 8020974:	496d      	ldr	r1, [pc, #436]	; (8020b2c <ip4_frag+0x280>)
 8020976:	486c      	ldr	r0, [pc, #432]	; (8020b28 <ip4_frag+0x27c>)
 8020978:	f000 fd98 	bl	80214ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802097e:	685b      	ldr	r3, [r3, #4]
 8020980:	2214      	movs	r2, #20
 8020982:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020984:	4618      	mov	r0, r3
 8020986:	f000 fca7 	bl	80212d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802098c:	685b      	ldr	r3, [r3, #4]
 802098e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8020990:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020992:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8020996:	e064      	b.n	8020a62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8020998:	68fb      	ldr	r3, [r7, #12]
 802099a:	895a      	ldrh	r2, [r3, #10]
 802099c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802099e:	1ad3      	subs	r3, r2, r3
 80209a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80209a2:	68fb      	ldr	r3, [r7, #12]
 80209a4:	895b      	ldrh	r3, [r3, #10]
 80209a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80209a8:	429a      	cmp	r2, r3
 80209aa:	d906      	bls.n	80209ba <ip4_frag+0x10e>
 80209ac:	4b5c      	ldr	r3, [pc, #368]	; (8020b20 <ip4_frag+0x274>)
 80209ae:	f240 322d 	movw	r2, #813	; 0x32d
 80209b2:	495f      	ldr	r1, [pc, #380]	; (8020b30 <ip4_frag+0x284>)
 80209b4:	485c      	ldr	r0, [pc, #368]	; (8020b28 <ip4_frag+0x27c>)
 80209b6:	f000 fd79 	bl	80214ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80209ba:	8bfa      	ldrh	r2, [r7, #30]
 80209bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80209c0:	4293      	cmp	r3, r2
 80209c2:	bf28      	it	cs
 80209c4:	4613      	movcs	r3, r2
 80209c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80209ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d105      	bne.n	80209de <ip4_frag+0x132>
        poff = 0;
 80209d2:	2300      	movs	r3, #0
 80209d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80209d6:	68fb      	ldr	r3, [r7, #12]
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	60fb      	str	r3, [r7, #12]
        continue;
 80209dc:	e041      	b.n	8020a62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80209de:	f7ff ff0d 	bl	80207fc <ip_frag_alloc_pbuf_custom_ref>
 80209e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80209e4:	69bb      	ldr	r3, [r7, #24]
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	d103      	bne.n	80209f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80209ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80209ec:	f7f4 fb34 	bl	8015058 <pbuf_free>
        goto memerr;
 80209f0:	e08f      	b.n	8020b12 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80209f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80209f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80209fa:	4413      	add	r3, r2
 80209fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8020a00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020a04:	9201      	str	r2, [sp, #4]
 8020a06:	9300      	str	r3, [sp, #0]
 8020a08:	4603      	mov	r3, r0
 8020a0a:	2241      	movs	r2, #65	; 0x41
 8020a0c:	2000      	movs	r0, #0
 8020a0e:	f7f4 f969 	bl	8014ce4 <pbuf_alloced_custom>
 8020a12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020a14:	697b      	ldr	r3, [r7, #20]
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d106      	bne.n	8020a28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8020a1a:	69b8      	ldr	r0, [r7, #24]
 8020a1c:	f7ff fef6 	bl	802080c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020a22:	f7f4 fb19 	bl	8015058 <pbuf_free>
        goto memerr;
 8020a26:	e074      	b.n	8020b12 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8020a28:	68f8      	ldr	r0, [r7, #12]
 8020a2a:	f7f4 fbbb 	bl	80151a4 <pbuf_ref>
      pcr->original = p;
 8020a2e:	69bb      	ldr	r3, [r7, #24]
 8020a30:	68fa      	ldr	r2, [r7, #12]
 8020a32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020a34:	69bb      	ldr	r3, [r7, #24]
 8020a36:	4a3f      	ldr	r2, [pc, #252]	; (8020b34 <ip4_frag+0x288>)
 8020a38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8020a3a:	6979      	ldr	r1, [r7, #20]
 8020a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020a3e:	f7f4 fbd9 	bl	80151f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020a42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8020a46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020a4a:	1ad3      	subs	r3, r2, r3
 8020a4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020a50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d004      	beq.n	8020a62 <ip4_frag+0x1b6>
        poff = 0;
 8020a58:	2300      	movs	r3, #0
 8020a5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020a62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d196      	bne.n	8020998 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8020a6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8020a6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020a70:	4413      	add	r3, r2
 8020a72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020a74:	68bb      	ldr	r3, [r7, #8]
 8020a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020a78:	f1a3 0213 	sub.w	r2, r3, #19
 8020a7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020a80:	429a      	cmp	r2, r3
 8020a82:	bfcc      	ite	gt
 8020a84:	2301      	movgt	r3, #1
 8020a86:	2300      	movle	r3, #0
 8020a88:	b2db      	uxtb	r3, r3
 8020a8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020a8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8020a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020a94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8020a96:	6a3b      	ldr	r3, [r7, #32]
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d002      	beq.n	8020aa2 <ip4_frag+0x1f6>
 8020a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d003      	beq.n	8020aaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8020aa2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020aa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020aaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020aac:	4618      	mov	r0, r3
 8020aae:	f7f1 ff45 	bl	801293c <lwip_htons>
 8020ab2:	4603      	mov	r3, r0
 8020ab4:	461a      	mov	r2, r3
 8020ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ab8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020aba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020abc:	3314      	adds	r3, #20
 8020abe:	b29b      	uxth	r3, r3
 8020ac0:	4618      	mov	r0, r3
 8020ac2:	f7f1 ff3b 	bl	801293c <lwip_htons>
 8020ac6:	4603      	mov	r3, r0
 8020ac8:	461a      	mov	r2, r3
 8020aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020acc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8020ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ad0:	2200      	movs	r2, #0
 8020ad2:	729a      	strb	r2, [r3, #10]
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8020ad8:	68bb      	ldr	r3, [r7, #8]
 8020ada:	695b      	ldr	r3, [r3, #20]
 8020adc:	687a      	ldr	r2, [r7, #4]
 8020ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020ae0:	68b8      	ldr	r0, [r7, #8]
 8020ae2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020ae6:	f7f4 fab7 	bl	8015058 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8020aea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020af0:	1ad3      	subs	r3, r2, r3
 8020af2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020af6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8020afa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020afc:	4413      	add	r3, r2
 8020afe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8020b02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	f47f af19 	bne.w	802093e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	e002      	b.n	8020b16 <ip4_frag+0x26a>
      goto memerr;
 8020b10:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020b16:	4618      	mov	r0, r3
 8020b18:	3748      	adds	r7, #72	; 0x48
 8020b1a:	46bd      	mov	sp, r7
 8020b1c:	bd80      	pop	{r7, pc}
 8020b1e:	bf00      	nop
 8020b20:	08026ebc 	.word	0x08026ebc
 8020b24:	08027098 	.word	0x08027098
 8020b28:	08026f04 	.word	0x08026f04
 8020b2c:	080270b4 	.word	0x080270b4
 8020b30:	080270d4 	.word	0x080270d4
 8020b34:	08020845 	.word	0x08020845

08020b38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b086      	sub	sp, #24
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	6078      	str	r0, [r7, #4]
 8020b40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8020b42:	230e      	movs	r3, #14
 8020b44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	895b      	ldrh	r3, [r3, #10]
 8020b4a:	2b0e      	cmp	r3, #14
 8020b4c:	d96e      	bls.n	8020c2c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	7bdb      	ldrb	r3, [r3, #15]
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d106      	bne.n	8020b64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020b56:	683b      	ldr	r3, [r7, #0]
 8020b58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020b5c:	3301      	adds	r3, #1
 8020b5e:	b2da      	uxtb	r2, r3
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	685b      	ldr	r3, [r3, #4]
 8020b68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020b6a:	693b      	ldr	r3, [r7, #16]
 8020b6c:	7b1a      	ldrb	r2, [r3, #12]
 8020b6e:	7b5b      	ldrb	r3, [r3, #13]
 8020b70:	021b      	lsls	r3, r3, #8
 8020b72:	4313      	orrs	r3, r2
 8020b74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020b76:	693b      	ldr	r3, [r7, #16]
 8020b78:	781b      	ldrb	r3, [r3, #0]
 8020b7a:	f003 0301 	and.w	r3, r3, #1
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d023      	beq.n	8020bca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020b82:	693b      	ldr	r3, [r7, #16]
 8020b84:	781b      	ldrb	r3, [r3, #0]
 8020b86:	2b01      	cmp	r3, #1
 8020b88:	d10f      	bne.n	8020baa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020b8a:	693b      	ldr	r3, [r7, #16]
 8020b8c:	785b      	ldrb	r3, [r3, #1]
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d11b      	bne.n	8020bca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020b92:	693b      	ldr	r3, [r7, #16]
 8020b94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020b96:	2b5e      	cmp	r3, #94	; 0x5e
 8020b98:	d117      	bne.n	8020bca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	7b5b      	ldrb	r3, [r3, #13]
 8020b9e:	f043 0310 	orr.w	r3, r3, #16
 8020ba2:	b2da      	uxtb	r2, r3
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	735a      	strb	r2, [r3, #13]
 8020ba8:	e00f      	b.n	8020bca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8020baa:	693b      	ldr	r3, [r7, #16]
 8020bac:	2206      	movs	r2, #6
 8020bae:	4928      	ldr	r1, [pc, #160]	; (8020c50 <ethernet_input+0x118>)
 8020bb0:	4618      	mov	r0, r3
 8020bb2:	f000 fb83 	bl	80212bc <memcmp>
 8020bb6:	4603      	mov	r3, r0
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d106      	bne.n	8020bca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	7b5b      	ldrb	r3, [r3, #13]
 8020bc0:	f043 0308 	orr.w	r3, r3, #8
 8020bc4:	b2da      	uxtb	r2, r3
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8020bca:	89fb      	ldrh	r3, [r7, #14]
 8020bcc:	2b08      	cmp	r3, #8
 8020bce:	d003      	beq.n	8020bd8 <ethernet_input+0xa0>
 8020bd0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8020bd4:	d014      	beq.n	8020c00 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8020bd6:	e032      	b.n	8020c3e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020bd8:	683b      	ldr	r3, [r7, #0]
 8020bda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020bde:	f003 0308 	and.w	r3, r3, #8
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d024      	beq.n	8020c30 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020be6:	8afb      	ldrh	r3, [r7, #22]
 8020be8:	4619      	mov	r1, r3
 8020bea:	6878      	ldr	r0, [r7, #4]
 8020bec:	f7f4 f9ae 	bl	8014f4c <pbuf_remove_header>
 8020bf0:	4603      	mov	r3, r0
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d11e      	bne.n	8020c34 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8020bf6:	6839      	ldr	r1, [r7, #0]
 8020bf8:	6878      	ldr	r0, [r7, #4]
 8020bfa:	f7fe fddf 	bl	801f7bc <ip4_input>
      break;
 8020bfe:	e013      	b.n	8020c28 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020c00:	683b      	ldr	r3, [r7, #0]
 8020c02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020c06:	f003 0308 	and.w	r3, r3, #8
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d014      	beq.n	8020c38 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020c0e:	8afb      	ldrh	r3, [r7, #22]
 8020c10:	4619      	mov	r1, r3
 8020c12:	6878      	ldr	r0, [r7, #4]
 8020c14:	f7f4 f99a 	bl	8014f4c <pbuf_remove_header>
 8020c18:	4603      	mov	r3, r0
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	d10e      	bne.n	8020c3c <ethernet_input+0x104>
        etharp_input(p, netif);
 8020c1e:	6839      	ldr	r1, [r7, #0]
 8020c20:	6878      	ldr	r0, [r7, #4]
 8020c22:	f7fd ff7b 	bl	801eb1c <etharp_input>
      break;
 8020c26:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020c28:	2300      	movs	r3, #0
 8020c2a:	e00c      	b.n	8020c46 <ethernet_input+0x10e>
    goto free_and_return;
 8020c2c:	bf00      	nop
 8020c2e:	e006      	b.n	8020c3e <ethernet_input+0x106>
        goto free_and_return;
 8020c30:	bf00      	nop
 8020c32:	e004      	b.n	8020c3e <ethernet_input+0x106>
        goto free_and_return;
 8020c34:	bf00      	nop
 8020c36:	e002      	b.n	8020c3e <ethernet_input+0x106>
        goto free_and_return;
 8020c38:	bf00      	nop
 8020c3a:	e000      	b.n	8020c3e <ethernet_input+0x106>
        goto free_and_return;
 8020c3c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8020c3e:	6878      	ldr	r0, [r7, #4]
 8020c40:	f7f4 fa0a 	bl	8015058 <pbuf_free>
  return ERR_OK;
 8020c44:	2300      	movs	r3, #0
}
 8020c46:	4618      	mov	r0, r3
 8020c48:	3718      	adds	r7, #24
 8020c4a:	46bd      	mov	sp, r7
 8020c4c:	bd80      	pop	{r7, pc}
 8020c4e:	bf00      	nop
 8020c50:	080274ec 	.word	0x080274ec

08020c54 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020c54:	b580      	push	{r7, lr}
 8020c56:	b086      	sub	sp, #24
 8020c58:	af00      	add	r7, sp, #0
 8020c5a:	60f8      	str	r0, [r7, #12]
 8020c5c:	60b9      	str	r1, [r7, #8]
 8020c5e:	607a      	str	r2, [r7, #4]
 8020c60:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020c62:	8c3b      	ldrh	r3, [r7, #32]
 8020c64:	4618      	mov	r0, r3
 8020c66:	f7f1 fe69 	bl	801293c <lwip_htons>
 8020c6a:	4603      	mov	r3, r0
 8020c6c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8020c6e:	210e      	movs	r1, #14
 8020c70:	68b8      	ldr	r0, [r7, #8]
 8020c72:	f7f4 f95b 	bl	8014f2c <pbuf_add_header>
 8020c76:	4603      	mov	r3, r0
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d125      	bne.n	8020cc8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020c7c:	68bb      	ldr	r3, [r7, #8]
 8020c7e:	685b      	ldr	r3, [r3, #4]
 8020c80:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8020c82:	693b      	ldr	r3, [r7, #16]
 8020c84:	8afa      	ldrh	r2, [r7, #22]
 8020c86:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020c88:	693b      	ldr	r3, [r7, #16]
 8020c8a:	2206      	movs	r2, #6
 8020c8c:	6839      	ldr	r1, [r7, #0]
 8020c8e:	4618      	mov	r0, r3
 8020c90:	f000 fb22 	bl	80212d8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020c94:	693b      	ldr	r3, [r7, #16]
 8020c96:	3306      	adds	r3, #6
 8020c98:	2206      	movs	r2, #6
 8020c9a:	6879      	ldr	r1, [r7, #4]
 8020c9c:	4618      	mov	r0, r3
 8020c9e:	f000 fb1b 	bl	80212d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020ca8:	2b06      	cmp	r3, #6
 8020caa:	d006      	beq.n	8020cba <ethernet_output+0x66>
 8020cac:	4b0a      	ldr	r3, [pc, #40]	; (8020cd8 <ethernet_output+0x84>)
 8020cae:	f44f 7299 	mov.w	r2, #306	; 0x132
 8020cb2:	490a      	ldr	r1, [pc, #40]	; (8020cdc <ethernet_output+0x88>)
 8020cb4:	480a      	ldr	r0, [pc, #40]	; (8020ce0 <ethernet_output+0x8c>)
 8020cb6:	f000 fbf9 	bl	80214ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020cba:	68fb      	ldr	r3, [r7, #12]
 8020cbc:	699b      	ldr	r3, [r3, #24]
 8020cbe:	68b9      	ldr	r1, [r7, #8]
 8020cc0:	68f8      	ldr	r0, [r7, #12]
 8020cc2:	4798      	blx	r3
 8020cc4:	4603      	mov	r3, r0
 8020cc6:	e002      	b.n	8020cce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8020cc8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8020cca:	f06f 0301 	mvn.w	r3, #1
}
 8020cce:	4618      	mov	r0, r3
 8020cd0:	3718      	adds	r7, #24
 8020cd2:	46bd      	mov	sp, r7
 8020cd4:	bd80      	pop	{r7, pc}
 8020cd6:	bf00      	nop
 8020cd8:	080270e4 	.word	0x080270e4
 8020cdc:	0802711c 	.word	0x0802711c
 8020ce0:	08027150 	.word	0x08027150

08020ce4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020ce4:	b580      	push	{r7, lr}
 8020ce6:	b082      	sub	sp, #8
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	6078      	str	r0, [r7, #4]
 8020cec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8020cee:	683b      	ldr	r3, [r7, #0]
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	2104      	movs	r1, #4
 8020cf4:	4618      	mov	r0, r3
 8020cf6:	f7eb fb79 	bl	800c3ec <osMessageQueueNew>
 8020cfa:	4602      	mov	r2, r0
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	2b00      	cmp	r3, #0
 8020d06:	d102      	bne.n	8020d0e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8020d08:	f04f 33ff 	mov.w	r3, #4294967295
 8020d0c:	e000      	b.n	8020d10 <sys_mbox_new+0x2c>

  return ERR_OK;
 8020d0e:	2300      	movs	r3, #0
}
 8020d10:	4618      	mov	r0, r3
 8020d12:	3708      	adds	r7, #8
 8020d14:	46bd      	mov	sp, r7
 8020d16:	bd80      	pop	{r7, pc}

08020d18 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8020d18:	b580      	push	{r7, lr}
 8020d1a:	b082      	sub	sp, #8
 8020d1c:	af00      	add	r7, sp, #0
 8020d1e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	4618      	mov	r0, r3
 8020d26:	f7eb fc93 	bl	800c650 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f7eb fcd0 	bl	800c6d4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8020d34:	bf00      	nop
 8020d36:	3708      	adds	r7, #8
 8020d38:	46bd      	mov	sp, r7
 8020d3a:	bd80      	pop	{r7, pc}

08020d3c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020d3c:	b580      	push	{r7, lr}
 8020d3e:	b084      	sub	sp, #16
 8020d40:	af00      	add	r7, sp, #0
 8020d42:	6078      	str	r0, [r7, #4]
 8020d44:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	6818      	ldr	r0, [r3, #0]
 8020d4a:	4639      	mov	r1, r7
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	2200      	movs	r2, #0
 8020d50:	f7eb fbc0 	bl	800c4d4 <osMessageQueuePut>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	d102      	bne.n	8020d60 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8020d5a:	2300      	movs	r3, #0
 8020d5c:	73fb      	strb	r3, [r7, #15]
 8020d5e:	e001      	b.n	8020d64 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020d60:	23ff      	movs	r3, #255	; 0xff
 8020d62:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8020d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020d68:	4618      	mov	r0, r3
 8020d6a:	3710      	adds	r7, #16
 8020d6c:	46bd      	mov	sp, r7
 8020d6e:	bd80      	pop	{r7, pc}

08020d70 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020d70:	b580      	push	{r7, lr}
 8020d72:	b086      	sub	sp, #24
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	60f8      	str	r0, [r7, #12]
 8020d78:	60b9      	str	r1, [r7, #8]
 8020d7a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8020d7c:	f7ea fdf0 	bl	800b960 <osKernelGetTickCount>
 8020d80:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d013      	beq.n	8020db0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8020d88:	68fb      	ldr	r3, [r7, #12]
 8020d8a:	6818      	ldr	r0, [r3, #0]
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	2200      	movs	r2, #0
 8020d90:	68b9      	ldr	r1, [r7, #8]
 8020d92:	f7eb fbff 	bl	800c594 <osMessageQueueGet>
 8020d96:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8020d98:	693b      	ldr	r3, [r7, #16]
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d105      	bne.n	8020daa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8020d9e:	f7ea fddf 	bl	800b960 <osKernelGetTickCount>
 8020da2:	4602      	mov	r2, r0
 8020da4:	697b      	ldr	r3, [r7, #20]
 8020da6:	1ad3      	subs	r3, r2, r3
 8020da8:	e00f      	b.n	8020dca <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020daa:	f04f 33ff 	mov.w	r3, #4294967295
 8020dae:	e00c      	b.n	8020dca <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	6818      	ldr	r0, [r3, #0]
 8020db4:	f04f 33ff 	mov.w	r3, #4294967295
 8020db8:	2200      	movs	r2, #0
 8020dba:	68b9      	ldr	r1, [r7, #8]
 8020dbc:	f7eb fbea 	bl	800c594 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8020dc0:	f7ea fdce 	bl	800b960 <osKernelGetTickCount>
 8020dc4:	4602      	mov	r2, r0
 8020dc6:	697b      	ldr	r3, [r7, #20]
 8020dc8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8020dca:	4618      	mov	r0, r3
 8020dcc:	3718      	adds	r7, #24
 8020dce:	46bd      	mov	sp, r7
 8020dd0:	bd80      	pop	{r7, pc}

08020dd2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8020dd2:	b580      	push	{r7, lr}
 8020dd4:	b082      	sub	sp, #8
 8020dd6:	af00      	add	r7, sp, #0
 8020dd8:	6078      	str	r0, [r7, #4]
 8020dda:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	6818      	ldr	r0, [r3, #0]
 8020de0:	2300      	movs	r3, #0
 8020de2:	2200      	movs	r2, #0
 8020de4:	6839      	ldr	r1, [r7, #0]
 8020de6:	f7eb fbd5 	bl	800c594 <osMessageQueueGet>
 8020dea:	4603      	mov	r3, r0
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d101      	bne.n	8020df4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8020df0:	2300      	movs	r3, #0
 8020df2:	e001      	b.n	8020df8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8020df4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8020df8:	4618      	mov	r0, r3
 8020dfa:	3708      	adds	r7, #8
 8020dfc:	46bd      	mov	sp, r7
 8020dfe:	bd80      	pop	{r7, pc}

08020e00 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8020e00:	b480      	push	{r7}
 8020e02:	b083      	sub	sp, #12
 8020e04:	af00      	add	r7, sp, #0
 8020e06:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d101      	bne.n	8020e14 <sys_mbox_valid+0x14>
    return 0;
 8020e10:	2300      	movs	r3, #0
 8020e12:	e000      	b.n	8020e16 <sys_mbox_valid+0x16>
  else
    return 1;
 8020e14:	2301      	movs	r3, #1
}
 8020e16:	4618      	mov	r0, r3
 8020e18:	370c      	adds	r7, #12
 8020e1a:	46bd      	mov	sp, r7
 8020e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e20:	4770      	bx	lr

08020e22 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8020e22:	b480      	push	{r7}
 8020e24:	b083      	sub	sp, #12
 8020e26:	af00      	add	r7, sp, #0
 8020e28:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	2200      	movs	r2, #0
 8020e2e:	601a      	str	r2, [r3, #0]
}
 8020e30:	bf00      	nop
 8020e32:	370c      	adds	r7, #12
 8020e34:	46bd      	mov	sp, r7
 8020e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e3a:	4770      	bx	lr

08020e3c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b082      	sub	sp, #8
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
 8020e44:	460b      	mov	r3, r1
 8020e46:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8020e48:	78fb      	ldrb	r3, [r7, #3]
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	4619      	mov	r1, r3
 8020e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8020e52:	f7eb f988 	bl	800c166 <osSemaphoreNew>
 8020e56:	4602      	mov	r2, r0
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d102      	bne.n	8020e6a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020e64:	f04f 33ff 	mov.w	r3, #4294967295
 8020e68:	e009      	b.n	8020e7e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8020e6a:	78fb      	ldrb	r3, [r7, #3]
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	d105      	bne.n	8020e7c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	681b      	ldr	r3, [r3, #0]
 8020e74:	2100      	movs	r1, #0
 8020e76:	4618      	mov	r0, r3
 8020e78:	f7eb f9fe 	bl	800c278 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8020e7c:	2300      	movs	r3, #0
}
 8020e7e:	4618      	mov	r0, r3
 8020e80:	3708      	adds	r7, #8
 8020e82:	46bd      	mov	sp, r7
 8020e84:	bd80      	pop	{r7, pc}

08020e86 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8020e86:	b580      	push	{r7, lr}
 8020e88:	b084      	sub	sp, #16
 8020e8a:	af00      	add	r7, sp, #0
 8020e8c:	6078      	str	r0, [r7, #4]
 8020e8e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8020e90:	f7ea fd66 	bl	800b960 <osKernelGetTickCount>
 8020e94:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8020e96:	683b      	ldr	r3, [r7, #0]
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	d011      	beq.n	8020ec0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	6839      	ldr	r1, [r7, #0]
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	f7eb f9e8 	bl	800c278 <osSemaphoreAcquire>
 8020ea8:	4603      	mov	r3, r0
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	d105      	bne.n	8020eba <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8020eae:	f7ea fd57 	bl	800b960 <osKernelGetTickCount>
 8020eb2:	4602      	mov	r2, r0
 8020eb4:	68fb      	ldr	r3, [r7, #12]
 8020eb6:	1ad3      	subs	r3, r2, r3
 8020eb8:	e012      	b.n	8020ee0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020eba:	f04f 33ff 	mov.w	r3, #4294967295
 8020ebe:	e00f      	b.n	8020ee0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8020ec0:	bf00      	nop
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	681b      	ldr	r3, [r3, #0]
 8020ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8020eca:	4618      	mov	r0, r3
 8020ecc:	f7eb f9d4 	bl	800c278 <osSemaphoreAcquire>
 8020ed0:	4603      	mov	r3, r0
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d1f5      	bne.n	8020ec2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8020ed6:	f7ea fd43 	bl	800b960 <osKernelGetTickCount>
 8020eda:	4602      	mov	r2, r0
 8020edc:	68fb      	ldr	r3, [r7, #12]
 8020ede:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8020ee0:	4618      	mov	r0, r3
 8020ee2:	3710      	adds	r7, #16
 8020ee4:	46bd      	mov	sp, r7
 8020ee6:	bd80      	pop	{r7, pc}

08020ee8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b082      	sub	sp, #8
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	4618      	mov	r0, r3
 8020ef6:	f7eb fa11 	bl	800c31c <osSemaphoreRelease>
}
 8020efa:	bf00      	nop
 8020efc:	3708      	adds	r7, #8
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd80      	pop	{r7, pc}

08020f02 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8020f02:	b580      	push	{r7, lr}
 8020f04:	b082      	sub	sp, #8
 8020f06:	af00      	add	r7, sp, #0
 8020f08:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	681b      	ldr	r3, [r3, #0]
 8020f0e:	4618      	mov	r0, r3
 8020f10:	f7eb fa48 	bl	800c3a4 <osSemaphoreDelete>
}
 8020f14:	bf00      	nop
 8020f16:	3708      	adds	r7, #8
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	bd80      	pop	{r7, pc}

08020f1c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8020f1c:	b480      	push	{r7}
 8020f1e:	b083      	sub	sp, #12
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d101      	bne.n	8020f30 <sys_sem_valid+0x14>
    return 0;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	e000      	b.n	8020f32 <sys_sem_valid+0x16>
  else
    return 1;
 8020f30:	2301      	movs	r3, #1
}
 8020f32:	4618      	mov	r0, r3
 8020f34:	370c      	adds	r7, #12
 8020f36:	46bd      	mov	sp, r7
 8020f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3c:	4770      	bx	lr

08020f3e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8020f3e:	b480      	push	{r7}
 8020f40:	b083      	sub	sp, #12
 8020f42:	af00      	add	r7, sp, #0
 8020f44:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	2200      	movs	r2, #0
 8020f4a:	601a      	str	r2, [r3, #0]
}
 8020f4c:	bf00      	nop
 8020f4e:	370c      	adds	r7, #12
 8020f50:	46bd      	mov	sp, r7
 8020f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f56:	4770      	bx	lr

08020f58 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8020f5c:	2000      	movs	r0, #0
 8020f5e:	f7ea fff4 	bl	800bf4a <osMutexNew>
 8020f62:	4603      	mov	r3, r0
 8020f64:	4a01      	ldr	r2, [pc, #4]	; (8020f6c <sys_init+0x14>)
 8020f66:	6013      	str	r3, [r2, #0]
#endif
}
 8020f68:	bf00      	nop
 8020f6a:	bd80      	pop	{r7, pc}
 8020f6c:	20016ca0 	.word	0x20016ca0

08020f70 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020f70:	b580      	push	{r7, lr}
 8020f72:	b082      	sub	sp, #8
 8020f74:	af00      	add	r7, sp, #0
 8020f76:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8020f78:	2000      	movs	r0, #0
 8020f7a:	f7ea ffe6 	bl	800bf4a <osMutexNew>
 8020f7e:	4602      	mov	r2, r0
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d102      	bne.n	8020f92 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8020f90:	e000      	b.n	8020f94 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020f92:	2300      	movs	r3, #0
}
 8020f94:	4618      	mov	r0, r3
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}

08020f9c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b082      	sub	sp, #8
 8020fa0:	af00      	add	r7, sp, #0
 8020fa2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8020fac:	4618      	mov	r0, r3
 8020fae:	f7eb f852 	bl	800c056 <osMutexAcquire>
#endif
}
 8020fb2:	bf00      	nop
 8020fb4:	3708      	adds	r7, #8
 8020fb6:	46bd      	mov	sp, r7
 8020fb8:	bd80      	pop	{r7, pc}

08020fba <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8020fba:	b580      	push	{r7, lr}
 8020fbc:	b082      	sub	sp, #8
 8020fbe:	af00      	add	r7, sp, #0
 8020fc0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	4618      	mov	r0, r3
 8020fc8:	f7eb f890 	bl	800c0ec <osMutexRelease>
}
 8020fcc:	bf00      	nop
 8020fce:	3708      	adds	r7, #8
 8020fd0:	46bd      	mov	sp, r7
 8020fd2:	bd80      	pop	{r7, pc}

08020fd4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020fd4:	b580      	push	{r7, lr}
 8020fd6:	b08e      	sub	sp, #56	; 0x38
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	60f8      	str	r0, [r7, #12]
 8020fdc:	60b9      	str	r1, [r7, #8]
 8020fde:	607a      	str	r2, [r7, #4]
 8020fe0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8020fe2:	f107 0314 	add.w	r3, r7, #20
 8020fe6:	2224      	movs	r2, #36	; 0x24
 8020fe8:	2100      	movs	r1, #0
 8020fea:	4618      	mov	r0, r3
 8020fec:	f000 f99c 	bl	8021328 <memset>
 8020ff0:	68fb      	ldr	r3, [r7, #12]
 8020ff2:	617b      	str	r3, [r7, #20]
 8020ff4:	683b      	ldr	r3, [r7, #0]
 8020ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8020ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8020ffc:	f107 0314 	add.w	r3, r7, #20
 8021000:	461a      	mov	r2, r3
 8021002:	6879      	ldr	r1, [r7, #4]
 8021004:	68b8      	ldr	r0, [r7, #8]
 8021006:	f7ea fcc0 	bl	800b98a <osThreadNew>
 802100a:	4603      	mov	r3, r0
#endif
}
 802100c:	4618      	mov	r0, r3
 802100e:	3738      	adds	r7, #56	; 0x38
 8021010:	46bd      	mov	sp, r7
 8021012:	bd80      	pop	{r7, pc}

08021014 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8021014:	b580      	push	{r7, lr}
 8021016:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8021018:	4b04      	ldr	r3, [pc, #16]	; (802102c <sys_arch_protect+0x18>)
 802101a:	681b      	ldr	r3, [r3, #0]
 802101c:	f04f 31ff 	mov.w	r1, #4294967295
 8021020:	4618      	mov	r0, r3
 8021022:	f7eb f818 	bl	800c056 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8021026:	2301      	movs	r3, #1
}
 8021028:	4618      	mov	r0, r3
 802102a:	bd80      	pop	{r7, pc}
 802102c:	20016ca0 	.word	0x20016ca0

08021030 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8021030:	b580      	push	{r7, lr}
 8021032:	b082      	sub	sp, #8
 8021034:	af00      	add	r7, sp, #0
 8021036:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8021038:	4b04      	ldr	r3, [pc, #16]	; (802104c <sys_arch_unprotect+0x1c>)
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	4618      	mov	r0, r3
 802103e:	f7eb f855 	bl	800c0ec <osMutexRelease>
}
 8021042:	bf00      	nop
 8021044:	3708      	adds	r7, #8
 8021046:	46bd      	mov	sp, r7
 8021048:	bd80      	pop	{r7, pc}
 802104a:	bf00      	nop
 802104c:	20016ca0 	.word	0x20016ca0

08021050 <calloc>:
 8021050:	4b02      	ldr	r3, [pc, #8]	; (802105c <calloc+0xc>)
 8021052:	460a      	mov	r2, r1
 8021054:	4601      	mov	r1, r0
 8021056:	6818      	ldr	r0, [r3, #0]
 8021058:	f000 b96e 	b.w	8021338 <_calloc_r>
 802105c:	20000370 	.word	0x20000370

08021060 <std>:
 8021060:	2300      	movs	r3, #0
 8021062:	b510      	push	{r4, lr}
 8021064:	4604      	mov	r4, r0
 8021066:	e9c0 3300 	strd	r3, r3, [r0]
 802106a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802106e:	6083      	str	r3, [r0, #8]
 8021070:	8181      	strh	r1, [r0, #12]
 8021072:	6643      	str	r3, [r0, #100]	; 0x64
 8021074:	81c2      	strh	r2, [r0, #14]
 8021076:	6183      	str	r3, [r0, #24]
 8021078:	4619      	mov	r1, r3
 802107a:	2208      	movs	r2, #8
 802107c:	305c      	adds	r0, #92	; 0x5c
 802107e:	f000 f953 	bl	8021328 <memset>
 8021082:	4b05      	ldr	r3, [pc, #20]	; (8021098 <std+0x38>)
 8021084:	6263      	str	r3, [r4, #36]	; 0x24
 8021086:	4b05      	ldr	r3, [pc, #20]	; (802109c <std+0x3c>)
 8021088:	62a3      	str	r3, [r4, #40]	; 0x28
 802108a:	4b05      	ldr	r3, [pc, #20]	; (80210a0 <std+0x40>)
 802108c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802108e:	4b05      	ldr	r3, [pc, #20]	; (80210a4 <std+0x44>)
 8021090:	6224      	str	r4, [r4, #32]
 8021092:	6323      	str	r3, [r4, #48]	; 0x30
 8021094:	bd10      	pop	{r4, pc}
 8021096:	bf00      	nop
 8021098:	08021805 	.word	0x08021805
 802109c:	08021827 	.word	0x08021827
 80210a0:	0802185f 	.word	0x0802185f
 80210a4:	08021883 	.word	0x08021883

080210a8 <_cleanup_r>:
 80210a8:	4901      	ldr	r1, [pc, #4]	; (80210b0 <_cleanup_r+0x8>)
 80210aa:	f000 b8af 	b.w	802120c <_fwalk_reent>
 80210ae:	bf00      	nop
 80210b0:	08021c15 	.word	0x08021c15

080210b4 <__sfmoreglue>:
 80210b4:	b570      	push	{r4, r5, r6, lr}
 80210b6:	1e4a      	subs	r2, r1, #1
 80210b8:	2568      	movs	r5, #104	; 0x68
 80210ba:	4355      	muls	r5, r2
 80210bc:	460e      	mov	r6, r1
 80210be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80210c2:	f000 f999 	bl	80213f8 <_malloc_r>
 80210c6:	4604      	mov	r4, r0
 80210c8:	b140      	cbz	r0, 80210dc <__sfmoreglue+0x28>
 80210ca:	2100      	movs	r1, #0
 80210cc:	e9c0 1600 	strd	r1, r6, [r0]
 80210d0:	300c      	adds	r0, #12
 80210d2:	60a0      	str	r0, [r4, #8]
 80210d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80210d8:	f000 f926 	bl	8021328 <memset>
 80210dc:	4620      	mov	r0, r4
 80210de:	bd70      	pop	{r4, r5, r6, pc}

080210e0 <__sfp_lock_acquire>:
 80210e0:	4801      	ldr	r0, [pc, #4]	; (80210e8 <__sfp_lock_acquire+0x8>)
 80210e2:	f000 b8d8 	b.w	8021296 <__retarget_lock_acquire_recursive>
 80210e6:	bf00      	nop
 80210e8:	20016cac 	.word	0x20016cac

080210ec <__sfp_lock_release>:
 80210ec:	4801      	ldr	r0, [pc, #4]	; (80210f4 <__sfp_lock_release+0x8>)
 80210ee:	f000 b8d3 	b.w	8021298 <__retarget_lock_release_recursive>
 80210f2:	bf00      	nop
 80210f4:	20016cac 	.word	0x20016cac

080210f8 <__sinit_lock_acquire>:
 80210f8:	4801      	ldr	r0, [pc, #4]	; (8021100 <__sinit_lock_acquire+0x8>)
 80210fa:	f000 b8cc 	b.w	8021296 <__retarget_lock_acquire_recursive>
 80210fe:	bf00      	nop
 8021100:	20016ca7 	.word	0x20016ca7

08021104 <__sinit_lock_release>:
 8021104:	4801      	ldr	r0, [pc, #4]	; (802110c <__sinit_lock_release+0x8>)
 8021106:	f000 b8c7 	b.w	8021298 <__retarget_lock_release_recursive>
 802110a:	bf00      	nop
 802110c:	20016ca7 	.word	0x20016ca7

08021110 <__sinit>:
 8021110:	b510      	push	{r4, lr}
 8021112:	4604      	mov	r4, r0
 8021114:	f7ff fff0 	bl	80210f8 <__sinit_lock_acquire>
 8021118:	69a3      	ldr	r3, [r4, #24]
 802111a:	b11b      	cbz	r3, 8021124 <__sinit+0x14>
 802111c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021120:	f7ff bff0 	b.w	8021104 <__sinit_lock_release>
 8021124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021128:	6523      	str	r3, [r4, #80]	; 0x50
 802112a:	4b13      	ldr	r3, [pc, #76]	; (8021178 <__sinit+0x68>)
 802112c:	4a13      	ldr	r2, [pc, #76]	; (802117c <__sinit+0x6c>)
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	62a2      	str	r2, [r4, #40]	; 0x28
 8021132:	42a3      	cmp	r3, r4
 8021134:	bf04      	itt	eq
 8021136:	2301      	moveq	r3, #1
 8021138:	61a3      	streq	r3, [r4, #24]
 802113a:	4620      	mov	r0, r4
 802113c:	f000 f820 	bl	8021180 <__sfp>
 8021140:	6060      	str	r0, [r4, #4]
 8021142:	4620      	mov	r0, r4
 8021144:	f000 f81c 	bl	8021180 <__sfp>
 8021148:	60a0      	str	r0, [r4, #8]
 802114a:	4620      	mov	r0, r4
 802114c:	f000 f818 	bl	8021180 <__sfp>
 8021150:	2200      	movs	r2, #0
 8021152:	60e0      	str	r0, [r4, #12]
 8021154:	2104      	movs	r1, #4
 8021156:	6860      	ldr	r0, [r4, #4]
 8021158:	f7ff ff82 	bl	8021060 <std>
 802115c:	68a0      	ldr	r0, [r4, #8]
 802115e:	2201      	movs	r2, #1
 8021160:	2109      	movs	r1, #9
 8021162:	f7ff ff7d 	bl	8021060 <std>
 8021166:	68e0      	ldr	r0, [r4, #12]
 8021168:	2202      	movs	r2, #2
 802116a:	2112      	movs	r1, #18
 802116c:	f7ff ff78 	bl	8021060 <std>
 8021170:	2301      	movs	r3, #1
 8021172:	61a3      	str	r3, [r4, #24]
 8021174:	e7d2      	b.n	802111c <__sinit+0xc>
 8021176:	bf00      	nop
 8021178:	0802765c 	.word	0x0802765c
 802117c:	080210a9 	.word	0x080210a9

08021180 <__sfp>:
 8021180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021182:	4607      	mov	r7, r0
 8021184:	f7ff ffac 	bl	80210e0 <__sfp_lock_acquire>
 8021188:	4b1e      	ldr	r3, [pc, #120]	; (8021204 <__sfp+0x84>)
 802118a:	681e      	ldr	r6, [r3, #0]
 802118c:	69b3      	ldr	r3, [r6, #24]
 802118e:	b913      	cbnz	r3, 8021196 <__sfp+0x16>
 8021190:	4630      	mov	r0, r6
 8021192:	f7ff ffbd 	bl	8021110 <__sinit>
 8021196:	3648      	adds	r6, #72	; 0x48
 8021198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802119c:	3b01      	subs	r3, #1
 802119e:	d503      	bpl.n	80211a8 <__sfp+0x28>
 80211a0:	6833      	ldr	r3, [r6, #0]
 80211a2:	b30b      	cbz	r3, 80211e8 <__sfp+0x68>
 80211a4:	6836      	ldr	r6, [r6, #0]
 80211a6:	e7f7      	b.n	8021198 <__sfp+0x18>
 80211a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80211ac:	b9d5      	cbnz	r5, 80211e4 <__sfp+0x64>
 80211ae:	4b16      	ldr	r3, [pc, #88]	; (8021208 <__sfp+0x88>)
 80211b0:	60e3      	str	r3, [r4, #12]
 80211b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80211b6:	6665      	str	r5, [r4, #100]	; 0x64
 80211b8:	f000 f86c 	bl	8021294 <__retarget_lock_init_recursive>
 80211bc:	f7ff ff96 	bl	80210ec <__sfp_lock_release>
 80211c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80211c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80211c8:	6025      	str	r5, [r4, #0]
 80211ca:	61a5      	str	r5, [r4, #24]
 80211cc:	2208      	movs	r2, #8
 80211ce:	4629      	mov	r1, r5
 80211d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80211d4:	f000 f8a8 	bl	8021328 <memset>
 80211d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80211dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80211e0:	4620      	mov	r0, r4
 80211e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80211e4:	3468      	adds	r4, #104	; 0x68
 80211e6:	e7d9      	b.n	802119c <__sfp+0x1c>
 80211e8:	2104      	movs	r1, #4
 80211ea:	4638      	mov	r0, r7
 80211ec:	f7ff ff62 	bl	80210b4 <__sfmoreglue>
 80211f0:	4604      	mov	r4, r0
 80211f2:	6030      	str	r0, [r6, #0]
 80211f4:	2800      	cmp	r0, #0
 80211f6:	d1d5      	bne.n	80211a4 <__sfp+0x24>
 80211f8:	f7ff ff78 	bl	80210ec <__sfp_lock_release>
 80211fc:	230c      	movs	r3, #12
 80211fe:	603b      	str	r3, [r7, #0]
 8021200:	e7ee      	b.n	80211e0 <__sfp+0x60>
 8021202:	bf00      	nop
 8021204:	0802765c 	.word	0x0802765c
 8021208:	ffff0001 	.word	0xffff0001

0802120c <_fwalk_reent>:
 802120c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021210:	4606      	mov	r6, r0
 8021212:	4688      	mov	r8, r1
 8021214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021218:	2700      	movs	r7, #0
 802121a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802121e:	f1b9 0901 	subs.w	r9, r9, #1
 8021222:	d505      	bpl.n	8021230 <_fwalk_reent+0x24>
 8021224:	6824      	ldr	r4, [r4, #0]
 8021226:	2c00      	cmp	r4, #0
 8021228:	d1f7      	bne.n	802121a <_fwalk_reent+0xe>
 802122a:	4638      	mov	r0, r7
 802122c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021230:	89ab      	ldrh	r3, [r5, #12]
 8021232:	2b01      	cmp	r3, #1
 8021234:	d907      	bls.n	8021246 <_fwalk_reent+0x3a>
 8021236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802123a:	3301      	adds	r3, #1
 802123c:	d003      	beq.n	8021246 <_fwalk_reent+0x3a>
 802123e:	4629      	mov	r1, r5
 8021240:	4630      	mov	r0, r6
 8021242:	47c0      	blx	r8
 8021244:	4307      	orrs	r7, r0
 8021246:	3568      	adds	r5, #104	; 0x68
 8021248:	e7e9      	b.n	802121e <_fwalk_reent+0x12>
	...

0802124c <__libc_init_array>:
 802124c:	b570      	push	{r4, r5, r6, lr}
 802124e:	4d0d      	ldr	r5, [pc, #52]	; (8021284 <__libc_init_array+0x38>)
 8021250:	4c0d      	ldr	r4, [pc, #52]	; (8021288 <__libc_init_array+0x3c>)
 8021252:	1b64      	subs	r4, r4, r5
 8021254:	10a4      	asrs	r4, r4, #2
 8021256:	2600      	movs	r6, #0
 8021258:	42a6      	cmp	r6, r4
 802125a:	d109      	bne.n	8021270 <__libc_init_array+0x24>
 802125c:	4d0b      	ldr	r5, [pc, #44]	; (802128c <__libc_init_array+0x40>)
 802125e:	4c0c      	ldr	r4, [pc, #48]	; (8021290 <__libc_init_array+0x44>)
 8021260:	f001 fb02 	bl	8022868 <_init>
 8021264:	1b64      	subs	r4, r4, r5
 8021266:	10a4      	asrs	r4, r4, #2
 8021268:	2600      	movs	r6, #0
 802126a:	42a6      	cmp	r6, r4
 802126c:	d105      	bne.n	802127a <__libc_init_array+0x2e>
 802126e:	bd70      	pop	{r4, r5, r6, pc}
 8021270:	f855 3b04 	ldr.w	r3, [r5], #4
 8021274:	4798      	blx	r3
 8021276:	3601      	adds	r6, #1
 8021278:	e7ee      	b.n	8021258 <__libc_init_array+0xc>
 802127a:	f855 3b04 	ldr.w	r3, [r5], #4
 802127e:	4798      	blx	r3
 8021280:	3601      	adds	r6, #1
 8021282:	e7f2      	b.n	802126a <__libc_init_array+0x1e>
 8021284:	08027750 	.word	0x08027750
 8021288:	08027750 	.word	0x08027750
 802128c:	08027750 	.word	0x08027750
 8021290:	08027754 	.word	0x08027754

08021294 <__retarget_lock_init_recursive>:
 8021294:	4770      	bx	lr

08021296 <__retarget_lock_acquire_recursive>:
 8021296:	4770      	bx	lr

08021298 <__retarget_lock_release_recursive>:
 8021298:	4770      	bx	lr
	...

0802129c <malloc>:
 802129c:	4b02      	ldr	r3, [pc, #8]	; (80212a8 <malloc+0xc>)
 802129e:	4601      	mov	r1, r0
 80212a0:	6818      	ldr	r0, [r3, #0]
 80212a2:	f000 b8a9 	b.w	80213f8 <_malloc_r>
 80212a6:	bf00      	nop
 80212a8:	20000370 	.word	0x20000370

080212ac <free>:
 80212ac:	4b02      	ldr	r3, [pc, #8]	; (80212b8 <free+0xc>)
 80212ae:	4601      	mov	r1, r0
 80212b0:	6818      	ldr	r0, [r3, #0]
 80212b2:	f000 b851 	b.w	8021358 <_free_r>
 80212b6:	bf00      	nop
 80212b8:	20000370 	.word	0x20000370

080212bc <memcmp>:
 80212bc:	b530      	push	{r4, r5, lr}
 80212be:	3901      	subs	r1, #1
 80212c0:	2400      	movs	r4, #0
 80212c2:	42a2      	cmp	r2, r4
 80212c4:	d101      	bne.n	80212ca <memcmp+0xe>
 80212c6:	2000      	movs	r0, #0
 80212c8:	e005      	b.n	80212d6 <memcmp+0x1a>
 80212ca:	5d03      	ldrb	r3, [r0, r4]
 80212cc:	3401      	adds	r4, #1
 80212ce:	5d0d      	ldrb	r5, [r1, r4]
 80212d0:	42ab      	cmp	r3, r5
 80212d2:	d0f6      	beq.n	80212c2 <memcmp+0x6>
 80212d4:	1b58      	subs	r0, r3, r5
 80212d6:	bd30      	pop	{r4, r5, pc}

080212d8 <memcpy>:
 80212d8:	440a      	add	r2, r1
 80212da:	4291      	cmp	r1, r2
 80212dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80212e0:	d100      	bne.n	80212e4 <memcpy+0xc>
 80212e2:	4770      	bx	lr
 80212e4:	b510      	push	{r4, lr}
 80212e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80212ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80212ee:	4291      	cmp	r1, r2
 80212f0:	d1f9      	bne.n	80212e6 <memcpy+0xe>
 80212f2:	bd10      	pop	{r4, pc}

080212f4 <memmove>:
 80212f4:	4288      	cmp	r0, r1
 80212f6:	b510      	push	{r4, lr}
 80212f8:	eb01 0402 	add.w	r4, r1, r2
 80212fc:	d902      	bls.n	8021304 <memmove+0x10>
 80212fe:	4284      	cmp	r4, r0
 8021300:	4623      	mov	r3, r4
 8021302:	d807      	bhi.n	8021314 <memmove+0x20>
 8021304:	1e43      	subs	r3, r0, #1
 8021306:	42a1      	cmp	r1, r4
 8021308:	d008      	beq.n	802131c <memmove+0x28>
 802130a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802130e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021312:	e7f8      	b.n	8021306 <memmove+0x12>
 8021314:	4402      	add	r2, r0
 8021316:	4601      	mov	r1, r0
 8021318:	428a      	cmp	r2, r1
 802131a:	d100      	bne.n	802131e <memmove+0x2a>
 802131c:	bd10      	pop	{r4, pc}
 802131e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021326:	e7f7      	b.n	8021318 <memmove+0x24>

08021328 <memset>:
 8021328:	4402      	add	r2, r0
 802132a:	4603      	mov	r3, r0
 802132c:	4293      	cmp	r3, r2
 802132e:	d100      	bne.n	8021332 <memset+0xa>
 8021330:	4770      	bx	lr
 8021332:	f803 1b01 	strb.w	r1, [r3], #1
 8021336:	e7f9      	b.n	802132c <memset+0x4>

08021338 <_calloc_r>:
 8021338:	b513      	push	{r0, r1, r4, lr}
 802133a:	434a      	muls	r2, r1
 802133c:	4611      	mov	r1, r2
 802133e:	9201      	str	r2, [sp, #4]
 8021340:	f000 f85a 	bl	80213f8 <_malloc_r>
 8021344:	4604      	mov	r4, r0
 8021346:	b118      	cbz	r0, 8021350 <_calloc_r+0x18>
 8021348:	9a01      	ldr	r2, [sp, #4]
 802134a:	2100      	movs	r1, #0
 802134c:	f7ff ffec 	bl	8021328 <memset>
 8021350:	4620      	mov	r0, r4
 8021352:	b002      	add	sp, #8
 8021354:	bd10      	pop	{r4, pc}
	...

08021358 <_free_r>:
 8021358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802135a:	2900      	cmp	r1, #0
 802135c:	d048      	beq.n	80213f0 <_free_r+0x98>
 802135e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021362:	9001      	str	r0, [sp, #4]
 8021364:	2b00      	cmp	r3, #0
 8021366:	f1a1 0404 	sub.w	r4, r1, #4
 802136a:	bfb8      	it	lt
 802136c:	18e4      	addlt	r4, r4, r3
 802136e:	f000 fd27 	bl	8021dc0 <__malloc_lock>
 8021372:	4a20      	ldr	r2, [pc, #128]	; (80213f4 <_free_r+0x9c>)
 8021374:	9801      	ldr	r0, [sp, #4]
 8021376:	6813      	ldr	r3, [r2, #0]
 8021378:	4615      	mov	r5, r2
 802137a:	b933      	cbnz	r3, 802138a <_free_r+0x32>
 802137c:	6063      	str	r3, [r4, #4]
 802137e:	6014      	str	r4, [r2, #0]
 8021380:	b003      	add	sp, #12
 8021382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021386:	f000 bd21 	b.w	8021dcc <__malloc_unlock>
 802138a:	42a3      	cmp	r3, r4
 802138c:	d90b      	bls.n	80213a6 <_free_r+0x4e>
 802138e:	6821      	ldr	r1, [r4, #0]
 8021390:	1862      	adds	r2, r4, r1
 8021392:	4293      	cmp	r3, r2
 8021394:	bf04      	itt	eq
 8021396:	681a      	ldreq	r2, [r3, #0]
 8021398:	685b      	ldreq	r3, [r3, #4]
 802139a:	6063      	str	r3, [r4, #4]
 802139c:	bf04      	itt	eq
 802139e:	1852      	addeq	r2, r2, r1
 80213a0:	6022      	streq	r2, [r4, #0]
 80213a2:	602c      	str	r4, [r5, #0]
 80213a4:	e7ec      	b.n	8021380 <_free_r+0x28>
 80213a6:	461a      	mov	r2, r3
 80213a8:	685b      	ldr	r3, [r3, #4]
 80213aa:	b10b      	cbz	r3, 80213b0 <_free_r+0x58>
 80213ac:	42a3      	cmp	r3, r4
 80213ae:	d9fa      	bls.n	80213a6 <_free_r+0x4e>
 80213b0:	6811      	ldr	r1, [r2, #0]
 80213b2:	1855      	adds	r5, r2, r1
 80213b4:	42a5      	cmp	r5, r4
 80213b6:	d10b      	bne.n	80213d0 <_free_r+0x78>
 80213b8:	6824      	ldr	r4, [r4, #0]
 80213ba:	4421      	add	r1, r4
 80213bc:	1854      	adds	r4, r2, r1
 80213be:	42a3      	cmp	r3, r4
 80213c0:	6011      	str	r1, [r2, #0]
 80213c2:	d1dd      	bne.n	8021380 <_free_r+0x28>
 80213c4:	681c      	ldr	r4, [r3, #0]
 80213c6:	685b      	ldr	r3, [r3, #4]
 80213c8:	6053      	str	r3, [r2, #4]
 80213ca:	4421      	add	r1, r4
 80213cc:	6011      	str	r1, [r2, #0]
 80213ce:	e7d7      	b.n	8021380 <_free_r+0x28>
 80213d0:	d902      	bls.n	80213d8 <_free_r+0x80>
 80213d2:	230c      	movs	r3, #12
 80213d4:	6003      	str	r3, [r0, #0]
 80213d6:	e7d3      	b.n	8021380 <_free_r+0x28>
 80213d8:	6825      	ldr	r5, [r4, #0]
 80213da:	1961      	adds	r1, r4, r5
 80213dc:	428b      	cmp	r3, r1
 80213de:	bf04      	itt	eq
 80213e0:	6819      	ldreq	r1, [r3, #0]
 80213e2:	685b      	ldreq	r3, [r3, #4]
 80213e4:	6063      	str	r3, [r4, #4]
 80213e6:	bf04      	itt	eq
 80213e8:	1949      	addeq	r1, r1, r5
 80213ea:	6021      	streq	r1, [r4, #0]
 80213ec:	6054      	str	r4, [r2, #4]
 80213ee:	e7c7      	b.n	8021380 <_free_r+0x28>
 80213f0:	b003      	add	sp, #12
 80213f2:	bd30      	pop	{r4, r5, pc}
 80213f4:	200056d0 	.word	0x200056d0

080213f8 <_malloc_r>:
 80213f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213fa:	1ccd      	adds	r5, r1, #3
 80213fc:	f025 0503 	bic.w	r5, r5, #3
 8021400:	3508      	adds	r5, #8
 8021402:	2d0c      	cmp	r5, #12
 8021404:	bf38      	it	cc
 8021406:	250c      	movcc	r5, #12
 8021408:	2d00      	cmp	r5, #0
 802140a:	4606      	mov	r6, r0
 802140c:	db01      	blt.n	8021412 <_malloc_r+0x1a>
 802140e:	42a9      	cmp	r1, r5
 8021410:	d903      	bls.n	802141a <_malloc_r+0x22>
 8021412:	230c      	movs	r3, #12
 8021414:	6033      	str	r3, [r6, #0]
 8021416:	2000      	movs	r0, #0
 8021418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802141a:	f000 fcd1 	bl	8021dc0 <__malloc_lock>
 802141e:	4921      	ldr	r1, [pc, #132]	; (80214a4 <_malloc_r+0xac>)
 8021420:	680a      	ldr	r2, [r1, #0]
 8021422:	4614      	mov	r4, r2
 8021424:	b99c      	cbnz	r4, 802144e <_malloc_r+0x56>
 8021426:	4f20      	ldr	r7, [pc, #128]	; (80214a8 <_malloc_r+0xb0>)
 8021428:	683b      	ldr	r3, [r7, #0]
 802142a:	b923      	cbnz	r3, 8021436 <_malloc_r+0x3e>
 802142c:	4621      	mov	r1, r4
 802142e:	4630      	mov	r0, r6
 8021430:	f000 f9b8 	bl	80217a4 <_sbrk_r>
 8021434:	6038      	str	r0, [r7, #0]
 8021436:	4629      	mov	r1, r5
 8021438:	4630      	mov	r0, r6
 802143a:	f000 f9b3 	bl	80217a4 <_sbrk_r>
 802143e:	1c43      	adds	r3, r0, #1
 8021440:	d123      	bne.n	802148a <_malloc_r+0x92>
 8021442:	230c      	movs	r3, #12
 8021444:	6033      	str	r3, [r6, #0]
 8021446:	4630      	mov	r0, r6
 8021448:	f000 fcc0 	bl	8021dcc <__malloc_unlock>
 802144c:	e7e3      	b.n	8021416 <_malloc_r+0x1e>
 802144e:	6823      	ldr	r3, [r4, #0]
 8021450:	1b5b      	subs	r3, r3, r5
 8021452:	d417      	bmi.n	8021484 <_malloc_r+0x8c>
 8021454:	2b0b      	cmp	r3, #11
 8021456:	d903      	bls.n	8021460 <_malloc_r+0x68>
 8021458:	6023      	str	r3, [r4, #0]
 802145a:	441c      	add	r4, r3
 802145c:	6025      	str	r5, [r4, #0]
 802145e:	e004      	b.n	802146a <_malloc_r+0x72>
 8021460:	6863      	ldr	r3, [r4, #4]
 8021462:	42a2      	cmp	r2, r4
 8021464:	bf0c      	ite	eq
 8021466:	600b      	streq	r3, [r1, #0]
 8021468:	6053      	strne	r3, [r2, #4]
 802146a:	4630      	mov	r0, r6
 802146c:	f000 fcae 	bl	8021dcc <__malloc_unlock>
 8021470:	f104 000b 	add.w	r0, r4, #11
 8021474:	1d23      	adds	r3, r4, #4
 8021476:	f020 0007 	bic.w	r0, r0, #7
 802147a:	1ac2      	subs	r2, r0, r3
 802147c:	d0cc      	beq.n	8021418 <_malloc_r+0x20>
 802147e:	1a1b      	subs	r3, r3, r0
 8021480:	50a3      	str	r3, [r4, r2]
 8021482:	e7c9      	b.n	8021418 <_malloc_r+0x20>
 8021484:	4622      	mov	r2, r4
 8021486:	6864      	ldr	r4, [r4, #4]
 8021488:	e7cc      	b.n	8021424 <_malloc_r+0x2c>
 802148a:	1cc4      	adds	r4, r0, #3
 802148c:	f024 0403 	bic.w	r4, r4, #3
 8021490:	42a0      	cmp	r0, r4
 8021492:	d0e3      	beq.n	802145c <_malloc_r+0x64>
 8021494:	1a21      	subs	r1, r4, r0
 8021496:	4630      	mov	r0, r6
 8021498:	f000 f984 	bl	80217a4 <_sbrk_r>
 802149c:	3001      	adds	r0, #1
 802149e:	d1dd      	bne.n	802145c <_malloc_r+0x64>
 80214a0:	e7cf      	b.n	8021442 <_malloc_r+0x4a>
 80214a2:	bf00      	nop
 80214a4:	200056d0 	.word	0x200056d0
 80214a8:	200056d4 	.word	0x200056d4

080214ac <iprintf>:
 80214ac:	b40f      	push	{r0, r1, r2, r3}
 80214ae:	4b0a      	ldr	r3, [pc, #40]	; (80214d8 <iprintf+0x2c>)
 80214b0:	b513      	push	{r0, r1, r4, lr}
 80214b2:	681c      	ldr	r4, [r3, #0]
 80214b4:	b124      	cbz	r4, 80214c0 <iprintf+0x14>
 80214b6:	69a3      	ldr	r3, [r4, #24]
 80214b8:	b913      	cbnz	r3, 80214c0 <iprintf+0x14>
 80214ba:	4620      	mov	r0, r4
 80214bc:	f7ff fe28 	bl	8021110 <__sinit>
 80214c0:	ab05      	add	r3, sp, #20
 80214c2:	9a04      	ldr	r2, [sp, #16]
 80214c4:	68a1      	ldr	r1, [r4, #8]
 80214c6:	9301      	str	r3, [sp, #4]
 80214c8:	4620      	mov	r0, r4
 80214ca:	f000 fe0b 	bl	80220e4 <_vfiprintf_r>
 80214ce:	b002      	add	sp, #8
 80214d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214d4:	b004      	add	sp, #16
 80214d6:	4770      	bx	lr
 80214d8:	20000370 	.word	0x20000370

080214dc <putchar>:
 80214dc:	4b09      	ldr	r3, [pc, #36]	; (8021504 <putchar+0x28>)
 80214de:	b513      	push	{r0, r1, r4, lr}
 80214e0:	681c      	ldr	r4, [r3, #0]
 80214e2:	4601      	mov	r1, r0
 80214e4:	b134      	cbz	r4, 80214f4 <putchar+0x18>
 80214e6:	69a3      	ldr	r3, [r4, #24]
 80214e8:	b923      	cbnz	r3, 80214f4 <putchar+0x18>
 80214ea:	9001      	str	r0, [sp, #4]
 80214ec:	4620      	mov	r0, r4
 80214ee:	f7ff fe0f 	bl	8021110 <__sinit>
 80214f2:	9901      	ldr	r1, [sp, #4]
 80214f4:	68a2      	ldr	r2, [r4, #8]
 80214f6:	4620      	mov	r0, r4
 80214f8:	b002      	add	sp, #8
 80214fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214fe:	f001 b8b5 	b.w	802266c <_putc_r>
 8021502:	bf00      	nop
 8021504:	20000370 	.word	0x20000370

08021508 <_puts_r>:
 8021508:	b570      	push	{r4, r5, r6, lr}
 802150a:	460e      	mov	r6, r1
 802150c:	4605      	mov	r5, r0
 802150e:	b118      	cbz	r0, 8021518 <_puts_r+0x10>
 8021510:	6983      	ldr	r3, [r0, #24]
 8021512:	b90b      	cbnz	r3, 8021518 <_puts_r+0x10>
 8021514:	f7ff fdfc 	bl	8021110 <__sinit>
 8021518:	69ab      	ldr	r3, [r5, #24]
 802151a:	68ac      	ldr	r4, [r5, #8]
 802151c:	b913      	cbnz	r3, 8021524 <_puts_r+0x1c>
 802151e:	4628      	mov	r0, r5
 8021520:	f7ff fdf6 	bl	8021110 <__sinit>
 8021524:	4b2c      	ldr	r3, [pc, #176]	; (80215d8 <_puts_r+0xd0>)
 8021526:	429c      	cmp	r4, r3
 8021528:	d120      	bne.n	802156c <_puts_r+0x64>
 802152a:	686c      	ldr	r4, [r5, #4]
 802152c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802152e:	07db      	lsls	r3, r3, #31
 8021530:	d405      	bmi.n	802153e <_puts_r+0x36>
 8021532:	89a3      	ldrh	r3, [r4, #12]
 8021534:	0598      	lsls	r0, r3, #22
 8021536:	d402      	bmi.n	802153e <_puts_r+0x36>
 8021538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802153a:	f7ff feac 	bl	8021296 <__retarget_lock_acquire_recursive>
 802153e:	89a3      	ldrh	r3, [r4, #12]
 8021540:	0719      	lsls	r1, r3, #28
 8021542:	d51d      	bpl.n	8021580 <_puts_r+0x78>
 8021544:	6923      	ldr	r3, [r4, #16]
 8021546:	b1db      	cbz	r3, 8021580 <_puts_r+0x78>
 8021548:	3e01      	subs	r6, #1
 802154a:	68a3      	ldr	r3, [r4, #8]
 802154c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021550:	3b01      	subs	r3, #1
 8021552:	60a3      	str	r3, [r4, #8]
 8021554:	bb39      	cbnz	r1, 80215a6 <_puts_r+0x9e>
 8021556:	2b00      	cmp	r3, #0
 8021558:	da38      	bge.n	80215cc <_puts_r+0xc4>
 802155a:	4622      	mov	r2, r4
 802155c:	210a      	movs	r1, #10
 802155e:	4628      	mov	r0, r5
 8021560:	f000 f9d2 	bl	8021908 <__swbuf_r>
 8021564:	3001      	adds	r0, #1
 8021566:	d011      	beq.n	802158c <_puts_r+0x84>
 8021568:	250a      	movs	r5, #10
 802156a:	e011      	b.n	8021590 <_puts_r+0x88>
 802156c:	4b1b      	ldr	r3, [pc, #108]	; (80215dc <_puts_r+0xd4>)
 802156e:	429c      	cmp	r4, r3
 8021570:	d101      	bne.n	8021576 <_puts_r+0x6e>
 8021572:	68ac      	ldr	r4, [r5, #8]
 8021574:	e7da      	b.n	802152c <_puts_r+0x24>
 8021576:	4b1a      	ldr	r3, [pc, #104]	; (80215e0 <_puts_r+0xd8>)
 8021578:	429c      	cmp	r4, r3
 802157a:	bf08      	it	eq
 802157c:	68ec      	ldreq	r4, [r5, #12]
 802157e:	e7d5      	b.n	802152c <_puts_r+0x24>
 8021580:	4621      	mov	r1, r4
 8021582:	4628      	mov	r0, r5
 8021584:	f000 fa24 	bl	80219d0 <__swsetup_r>
 8021588:	2800      	cmp	r0, #0
 802158a:	d0dd      	beq.n	8021548 <_puts_r+0x40>
 802158c:	f04f 35ff 	mov.w	r5, #4294967295
 8021590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021592:	07da      	lsls	r2, r3, #31
 8021594:	d405      	bmi.n	80215a2 <_puts_r+0x9a>
 8021596:	89a3      	ldrh	r3, [r4, #12]
 8021598:	059b      	lsls	r3, r3, #22
 802159a:	d402      	bmi.n	80215a2 <_puts_r+0x9a>
 802159c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802159e:	f7ff fe7b 	bl	8021298 <__retarget_lock_release_recursive>
 80215a2:	4628      	mov	r0, r5
 80215a4:	bd70      	pop	{r4, r5, r6, pc}
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	da04      	bge.n	80215b4 <_puts_r+0xac>
 80215aa:	69a2      	ldr	r2, [r4, #24]
 80215ac:	429a      	cmp	r2, r3
 80215ae:	dc06      	bgt.n	80215be <_puts_r+0xb6>
 80215b0:	290a      	cmp	r1, #10
 80215b2:	d004      	beq.n	80215be <_puts_r+0xb6>
 80215b4:	6823      	ldr	r3, [r4, #0]
 80215b6:	1c5a      	adds	r2, r3, #1
 80215b8:	6022      	str	r2, [r4, #0]
 80215ba:	7019      	strb	r1, [r3, #0]
 80215bc:	e7c5      	b.n	802154a <_puts_r+0x42>
 80215be:	4622      	mov	r2, r4
 80215c0:	4628      	mov	r0, r5
 80215c2:	f000 f9a1 	bl	8021908 <__swbuf_r>
 80215c6:	3001      	adds	r0, #1
 80215c8:	d1bf      	bne.n	802154a <_puts_r+0x42>
 80215ca:	e7df      	b.n	802158c <_puts_r+0x84>
 80215cc:	6823      	ldr	r3, [r4, #0]
 80215ce:	250a      	movs	r5, #10
 80215d0:	1c5a      	adds	r2, r3, #1
 80215d2:	6022      	str	r2, [r4, #0]
 80215d4:	701d      	strb	r5, [r3, #0]
 80215d6:	e7db      	b.n	8021590 <_puts_r+0x88>
 80215d8:	0802761c 	.word	0x0802761c
 80215dc:	0802763c 	.word	0x0802763c
 80215e0:	080275fc 	.word	0x080275fc

080215e4 <puts>:
 80215e4:	4b02      	ldr	r3, [pc, #8]	; (80215f0 <puts+0xc>)
 80215e6:	4601      	mov	r1, r0
 80215e8:	6818      	ldr	r0, [r3, #0]
 80215ea:	f7ff bf8d 	b.w	8021508 <_puts_r>
 80215ee:	bf00      	nop
 80215f0:	20000370 	.word	0x20000370

080215f4 <srand>:
 80215f4:	b538      	push	{r3, r4, r5, lr}
 80215f6:	4b10      	ldr	r3, [pc, #64]	; (8021638 <srand+0x44>)
 80215f8:	681d      	ldr	r5, [r3, #0]
 80215fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80215fc:	4604      	mov	r4, r0
 80215fe:	b9b3      	cbnz	r3, 802162e <srand+0x3a>
 8021600:	2018      	movs	r0, #24
 8021602:	f7ff fe4b 	bl	802129c <malloc>
 8021606:	4602      	mov	r2, r0
 8021608:	63a8      	str	r0, [r5, #56]	; 0x38
 802160a:	b920      	cbnz	r0, 8021616 <srand+0x22>
 802160c:	4b0b      	ldr	r3, [pc, #44]	; (802163c <srand+0x48>)
 802160e:	480c      	ldr	r0, [pc, #48]	; (8021640 <srand+0x4c>)
 8021610:	2142      	movs	r1, #66	; 0x42
 8021612:	f000 fa4b 	bl	8021aac <__assert_func>
 8021616:	490b      	ldr	r1, [pc, #44]	; (8021644 <srand+0x50>)
 8021618:	4b0b      	ldr	r3, [pc, #44]	; (8021648 <srand+0x54>)
 802161a:	e9c0 1300 	strd	r1, r3, [r0]
 802161e:	4b0b      	ldr	r3, [pc, #44]	; (802164c <srand+0x58>)
 8021620:	6083      	str	r3, [r0, #8]
 8021622:	230b      	movs	r3, #11
 8021624:	8183      	strh	r3, [r0, #12]
 8021626:	2100      	movs	r1, #0
 8021628:	2001      	movs	r0, #1
 802162a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802162e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021630:	2200      	movs	r2, #0
 8021632:	611c      	str	r4, [r3, #16]
 8021634:	615a      	str	r2, [r3, #20]
 8021636:	bd38      	pop	{r3, r4, r5, pc}
 8021638:	20000370 	.word	0x20000370
 802163c:	08027660 	.word	0x08027660
 8021640:	08027677 	.word	0x08027677
 8021644:	abcd330e 	.word	0xabcd330e
 8021648:	e66d1234 	.word	0xe66d1234
 802164c:	0005deec 	.word	0x0005deec

08021650 <rand>:
 8021650:	4b17      	ldr	r3, [pc, #92]	; (80216b0 <rand+0x60>)
 8021652:	b510      	push	{r4, lr}
 8021654:	681c      	ldr	r4, [r3, #0]
 8021656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021658:	b9b3      	cbnz	r3, 8021688 <rand+0x38>
 802165a:	2018      	movs	r0, #24
 802165c:	f7ff fe1e 	bl	802129c <malloc>
 8021660:	63a0      	str	r0, [r4, #56]	; 0x38
 8021662:	b928      	cbnz	r0, 8021670 <rand+0x20>
 8021664:	4602      	mov	r2, r0
 8021666:	4b13      	ldr	r3, [pc, #76]	; (80216b4 <rand+0x64>)
 8021668:	4813      	ldr	r0, [pc, #76]	; (80216b8 <rand+0x68>)
 802166a:	214e      	movs	r1, #78	; 0x4e
 802166c:	f000 fa1e 	bl	8021aac <__assert_func>
 8021670:	4a12      	ldr	r2, [pc, #72]	; (80216bc <rand+0x6c>)
 8021672:	4b13      	ldr	r3, [pc, #76]	; (80216c0 <rand+0x70>)
 8021674:	e9c0 2300 	strd	r2, r3, [r0]
 8021678:	4b12      	ldr	r3, [pc, #72]	; (80216c4 <rand+0x74>)
 802167a:	6083      	str	r3, [r0, #8]
 802167c:	230b      	movs	r3, #11
 802167e:	8183      	strh	r3, [r0, #12]
 8021680:	2201      	movs	r2, #1
 8021682:	2300      	movs	r3, #0
 8021684:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021688:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802168a:	480f      	ldr	r0, [pc, #60]	; (80216c8 <rand+0x78>)
 802168c:	690a      	ldr	r2, [r1, #16]
 802168e:	694b      	ldr	r3, [r1, #20]
 8021690:	4c0e      	ldr	r4, [pc, #56]	; (80216cc <rand+0x7c>)
 8021692:	4350      	muls	r0, r2
 8021694:	fb04 0003 	mla	r0, r4, r3, r0
 8021698:	fba2 3404 	umull	r3, r4, r2, r4
 802169c:	1c5a      	adds	r2, r3, #1
 802169e:	4404      	add	r4, r0
 80216a0:	f144 0000 	adc.w	r0, r4, #0
 80216a4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80216a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80216ac:	bd10      	pop	{r4, pc}
 80216ae:	bf00      	nop
 80216b0:	20000370 	.word	0x20000370
 80216b4:	08027660 	.word	0x08027660
 80216b8:	08027677 	.word	0x08027677
 80216bc:	abcd330e 	.word	0xabcd330e
 80216c0:	e66d1234 	.word	0xe66d1234
 80216c4:	0005deec 	.word	0x0005deec
 80216c8:	5851f42d 	.word	0x5851f42d
 80216cc:	4c957f2d 	.word	0x4c957f2d

080216d0 <cleanup_glue>:
 80216d0:	b538      	push	{r3, r4, r5, lr}
 80216d2:	460c      	mov	r4, r1
 80216d4:	6809      	ldr	r1, [r1, #0]
 80216d6:	4605      	mov	r5, r0
 80216d8:	b109      	cbz	r1, 80216de <cleanup_glue+0xe>
 80216da:	f7ff fff9 	bl	80216d0 <cleanup_glue>
 80216de:	4621      	mov	r1, r4
 80216e0:	4628      	mov	r0, r5
 80216e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80216e6:	f7ff be37 	b.w	8021358 <_free_r>
	...

080216ec <_reclaim_reent>:
 80216ec:	4b2c      	ldr	r3, [pc, #176]	; (80217a0 <_reclaim_reent+0xb4>)
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	4283      	cmp	r3, r0
 80216f2:	b570      	push	{r4, r5, r6, lr}
 80216f4:	4604      	mov	r4, r0
 80216f6:	d051      	beq.n	802179c <_reclaim_reent+0xb0>
 80216f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80216fa:	b143      	cbz	r3, 802170e <_reclaim_reent+0x22>
 80216fc:	68db      	ldr	r3, [r3, #12]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d14a      	bne.n	8021798 <_reclaim_reent+0xac>
 8021702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021704:	6819      	ldr	r1, [r3, #0]
 8021706:	b111      	cbz	r1, 802170e <_reclaim_reent+0x22>
 8021708:	4620      	mov	r0, r4
 802170a:	f7ff fe25 	bl	8021358 <_free_r>
 802170e:	6961      	ldr	r1, [r4, #20]
 8021710:	b111      	cbz	r1, 8021718 <_reclaim_reent+0x2c>
 8021712:	4620      	mov	r0, r4
 8021714:	f7ff fe20 	bl	8021358 <_free_r>
 8021718:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802171a:	b111      	cbz	r1, 8021722 <_reclaim_reent+0x36>
 802171c:	4620      	mov	r0, r4
 802171e:	f7ff fe1b 	bl	8021358 <_free_r>
 8021722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021724:	b111      	cbz	r1, 802172c <_reclaim_reent+0x40>
 8021726:	4620      	mov	r0, r4
 8021728:	f7ff fe16 	bl	8021358 <_free_r>
 802172c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802172e:	b111      	cbz	r1, 8021736 <_reclaim_reent+0x4a>
 8021730:	4620      	mov	r0, r4
 8021732:	f7ff fe11 	bl	8021358 <_free_r>
 8021736:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021738:	b111      	cbz	r1, 8021740 <_reclaim_reent+0x54>
 802173a:	4620      	mov	r0, r4
 802173c:	f7ff fe0c 	bl	8021358 <_free_r>
 8021740:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021742:	b111      	cbz	r1, 802174a <_reclaim_reent+0x5e>
 8021744:	4620      	mov	r0, r4
 8021746:	f7ff fe07 	bl	8021358 <_free_r>
 802174a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802174c:	b111      	cbz	r1, 8021754 <_reclaim_reent+0x68>
 802174e:	4620      	mov	r0, r4
 8021750:	f7ff fe02 	bl	8021358 <_free_r>
 8021754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021756:	b111      	cbz	r1, 802175e <_reclaim_reent+0x72>
 8021758:	4620      	mov	r0, r4
 802175a:	f7ff fdfd 	bl	8021358 <_free_r>
 802175e:	69a3      	ldr	r3, [r4, #24]
 8021760:	b1e3      	cbz	r3, 802179c <_reclaim_reent+0xb0>
 8021762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021764:	4620      	mov	r0, r4
 8021766:	4798      	blx	r3
 8021768:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802176a:	b1b9      	cbz	r1, 802179c <_reclaim_reent+0xb0>
 802176c:	4620      	mov	r0, r4
 802176e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021772:	f7ff bfad 	b.w	80216d0 <cleanup_glue>
 8021776:	5949      	ldr	r1, [r1, r5]
 8021778:	b941      	cbnz	r1, 802178c <_reclaim_reent+0xa0>
 802177a:	3504      	adds	r5, #4
 802177c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802177e:	2d80      	cmp	r5, #128	; 0x80
 8021780:	68d9      	ldr	r1, [r3, #12]
 8021782:	d1f8      	bne.n	8021776 <_reclaim_reent+0x8a>
 8021784:	4620      	mov	r0, r4
 8021786:	f7ff fde7 	bl	8021358 <_free_r>
 802178a:	e7ba      	b.n	8021702 <_reclaim_reent+0x16>
 802178c:	680e      	ldr	r6, [r1, #0]
 802178e:	4620      	mov	r0, r4
 8021790:	f7ff fde2 	bl	8021358 <_free_r>
 8021794:	4631      	mov	r1, r6
 8021796:	e7ef      	b.n	8021778 <_reclaim_reent+0x8c>
 8021798:	2500      	movs	r5, #0
 802179a:	e7ef      	b.n	802177c <_reclaim_reent+0x90>
 802179c:	bd70      	pop	{r4, r5, r6, pc}
 802179e:	bf00      	nop
 80217a0:	20000370 	.word	0x20000370

080217a4 <_sbrk_r>:
 80217a4:	b538      	push	{r3, r4, r5, lr}
 80217a6:	4d06      	ldr	r5, [pc, #24]	; (80217c0 <_sbrk_r+0x1c>)
 80217a8:	2300      	movs	r3, #0
 80217aa:	4604      	mov	r4, r0
 80217ac:	4608      	mov	r0, r1
 80217ae:	602b      	str	r3, [r5, #0]
 80217b0:	f7e0 f8ce 	bl	8001950 <_sbrk>
 80217b4:	1c43      	adds	r3, r0, #1
 80217b6:	d102      	bne.n	80217be <_sbrk_r+0x1a>
 80217b8:	682b      	ldr	r3, [r5, #0]
 80217ba:	b103      	cbz	r3, 80217be <_sbrk_r+0x1a>
 80217bc:	6023      	str	r3, [r4, #0]
 80217be:	bd38      	pop	{r3, r4, r5, pc}
 80217c0:	20016c9c 	.word	0x20016c9c

080217c4 <siprintf>:
 80217c4:	b40e      	push	{r1, r2, r3}
 80217c6:	b500      	push	{lr}
 80217c8:	b09c      	sub	sp, #112	; 0x70
 80217ca:	ab1d      	add	r3, sp, #116	; 0x74
 80217cc:	9002      	str	r0, [sp, #8]
 80217ce:	9006      	str	r0, [sp, #24]
 80217d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80217d4:	4809      	ldr	r0, [pc, #36]	; (80217fc <siprintf+0x38>)
 80217d6:	9107      	str	r1, [sp, #28]
 80217d8:	9104      	str	r1, [sp, #16]
 80217da:	4909      	ldr	r1, [pc, #36]	; (8021800 <siprintf+0x3c>)
 80217dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80217e0:	9105      	str	r1, [sp, #20]
 80217e2:	6800      	ldr	r0, [r0, #0]
 80217e4:	9301      	str	r3, [sp, #4]
 80217e6:	a902      	add	r1, sp, #8
 80217e8:	f000 fb52 	bl	8021e90 <_svfiprintf_r>
 80217ec:	9b02      	ldr	r3, [sp, #8]
 80217ee:	2200      	movs	r2, #0
 80217f0:	701a      	strb	r2, [r3, #0]
 80217f2:	b01c      	add	sp, #112	; 0x70
 80217f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80217f8:	b003      	add	sp, #12
 80217fa:	4770      	bx	lr
 80217fc:	20000370 	.word	0x20000370
 8021800:	ffff0208 	.word	0xffff0208

08021804 <__sread>:
 8021804:	b510      	push	{r4, lr}
 8021806:	460c      	mov	r4, r1
 8021808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802180c:	f000 ff76 	bl	80226fc <_read_r>
 8021810:	2800      	cmp	r0, #0
 8021812:	bfab      	itete	ge
 8021814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021816:	89a3      	ldrhlt	r3, [r4, #12]
 8021818:	181b      	addge	r3, r3, r0
 802181a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802181e:	bfac      	ite	ge
 8021820:	6563      	strge	r3, [r4, #84]	; 0x54
 8021822:	81a3      	strhlt	r3, [r4, #12]
 8021824:	bd10      	pop	{r4, pc}

08021826 <__swrite>:
 8021826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802182a:	461f      	mov	r7, r3
 802182c:	898b      	ldrh	r3, [r1, #12]
 802182e:	05db      	lsls	r3, r3, #23
 8021830:	4605      	mov	r5, r0
 8021832:	460c      	mov	r4, r1
 8021834:	4616      	mov	r6, r2
 8021836:	d505      	bpl.n	8021844 <__swrite+0x1e>
 8021838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802183c:	2302      	movs	r3, #2
 802183e:	2200      	movs	r2, #0
 8021840:	f000 fa48 	bl	8021cd4 <_lseek_r>
 8021844:	89a3      	ldrh	r3, [r4, #12]
 8021846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802184a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802184e:	81a3      	strh	r3, [r4, #12]
 8021850:	4632      	mov	r2, r6
 8021852:	463b      	mov	r3, r7
 8021854:	4628      	mov	r0, r5
 8021856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802185a:	f000 b8a7 	b.w	80219ac <_write_r>

0802185e <__sseek>:
 802185e:	b510      	push	{r4, lr}
 8021860:	460c      	mov	r4, r1
 8021862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021866:	f000 fa35 	bl	8021cd4 <_lseek_r>
 802186a:	1c43      	adds	r3, r0, #1
 802186c:	89a3      	ldrh	r3, [r4, #12]
 802186e:	bf15      	itete	ne
 8021870:	6560      	strne	r0, [r4, #84]	; 0x54
 8021872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802187a:	81a3      	strheq	r3, [r4, #12]
 802187c:	bf18      	it	ne
 802187e:	81a3      	strhne	r3, [r4, #12]
 8021880:	bd10      	pop	{r4, pc}

08021882 <__sclose>:
 8021882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021886:	f000 b92f 	b.w	8021ae8 <_close_r>

0802188a <strchr>:
 802188a:	b2c9      	uxtb	r1, r1
 802188c:	4603      	mov	r3, r0
 802188e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021892:	b11a      	cbz	r2, 802189c <strchr+0x12>
 8021894:	428a      	cmp	r2, r1
 8021896:	d1f9      	bne.n	802188c <strchr+0x2>
 8021898:	4618      	mov	r0, r3
 802189a:	4770      	bx	lr
 802189c:	2900      	cmp	r1, #0
 802189e:	bf18      	it	ne
 80218a0:	2300      	movne	r3, #0
 80218a2:	e7f9      	b.n	8021898 <strchr+0xe>

080218a4 <strstr>:
 80218a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218a6:	780c      	ldrb	r4, [r1, #0]
 80218a8:	b164      	cbz	r4, 80218c4 <strstr+0x20>
 80218aa:	4603      	mov	r3, r0
 80218ac:	781a      	ldrb	r2, [r3, #0]
 80218ae:	4618      	mov	r0, r3
 80218b0:	1c5e      	adds	r6, r3, #1
 80218b2:	b90a      	cbnz	r2, 80218b8 <strstr+0x14>
 80218b4:	4610      	mov	r0, r2
 80218b6:	e005      	b.n	80218c4 <strstr+0x20>
 80218b8:	4294      	cmp	r4, r2
 80218ba:	d108      	bne.n	80218ce <strstr+0x2a>
 80218bc:	460d      	mov	r5, r1
 80218be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80218c2:	b902      	cbnz	r2, 80218c6 <strstr+0x22>
 80218c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218c6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80218ca:	4297      	cmp	r7, r2
 80218cc:	d0f7      	beq.n	80218be <strstr+0x1a>
 80218ce:	4633      	mov	r3, r6
 80218d0:	e7ec      	b.n	80218ac <strstr+0x8>
	...

080218d4 <time>:
 80218d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80218d6:	4b0b      	ldr	r3, [pc, #44]	; (8021904 <time+0x30>)
 80218d8:	2200      	movs	r2, #0
 80218da:	4669      	mov	r1, sp
 80218dc:	4604      	mov	r4, r0
 80218de:	6818      	ldr	r0, [r3, #0]
 80218e0:	f000 f9e6 	bl	8021cb0 <_gettimeofday_r>
 80218e4:	2800      	cmp	r0, #0
 80218e6:	bfbe      	ittt	lt
 80218e8:	f04f 32ff 	movlt.w	r2, #4294967295
 80218ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80218f0:	e9cd 2300 	strdlt	r2, r3, [sp]
 80218f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80218f8:	b10c      	cbz	r4, 80218fe <time+0x2a>
 80218fa:	e9c4 0100 	strd	r0, r1, [r4]
 80218fe:	b004      	add	sp, #16
 8021900:	bd10      	pop	{r4, pc}
 8021902:	bf00      	nop
 8021904:	20000370 	.word	0x20000370

08021908 <__swbuf_r>:
 8021908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802190a:	460e      	mov	r6, r1
 802190c:	4614      	mov	r4, r2
 802190e:	4605      	mov	r5, r0
 8021910:	b118      	cbz	r0, 802191a <__swbuf_r+0x12>
 8021912:	6983      	ldr	r3, [r0, #24]
 8021914:	b90b      	cbnz	r3, 802191a <__swbuf_r+0x12>
 8021916:	f7ff fbfb 	bl	8021110 <__sinit>
 802191a:	4b21      	ldr	r3, [pc, #132]	; (80219a0 <__swbuf_r+0x98>)
 802191c:	429c      	cmp	r4, r3
 802191e:	d12b      	bne.n	8021978 <__swbuf_r+0x70>
 8021920:	686c      	ldr	r4, [r5, #4]
 8021922:	69a3      	ldr	r3, [r4, #24]
 8021924:	60a3      	str	r3, [r4, #8]
 8021926:	89a3      	ldrh	r3, [r4, #12]
 8021928:	071a      	lsls	r2, r3, #28
 802192a:	d52f      	bpl.n	802198c <__swbuf_r+0x84>
 802192c:	6923      	ldr	r3, [r4, #16]
 802192e:	b36b      	cbz	r3, 802198c <__swbuf_r+0x84>
 8021930:	6923      	ldr	r3, [r4, #16]
 8021932:	6820      	ldr	r0, [r4, #0]
 8021934:	1ac0      	subs	r0, r0, r3
 8021936:	6963      	ldr	r3, [r4, #20]
 8021938:	b2f6      	uxtb	r6, r6
 802193a:	4283      	cmp	r3, r0
 802193c:	4637      	mov	r7, r6
 802193e:	dc04      	bgt.n	802194a <__swbuf_r+0x42>
 8021940:	4621      	mov	r1, r4
 8021942:	4628      	mov	r0, r5
 8021944:	f000 f966 	bl	8021c14 <_fflush_r>
 8021948:	bb30      	cbnz	r0, 8021998 <__swbuf_r+0x90>
 802194a:	68a3      	ldr	r3, [r4, #8]
 802194c:	3b01      	subs	r3, #1
 802194e:	60a3      	str	r3, [r4, #8]
 8021950:	6823      	ldr	r3, [r4, #0]
 8021952:	1c5a      	adds	r2, r3, #1
 8021954:	6022      	str	r2, [r4, #0]
 8021956:	701e      	strb	r6, [r3, #0]
 8021958:	6963      	ldr	r3, [r4, #20]
 802195a:	3001      	adds	r0, #1
 802195c:	4283      	cmp	r3, r0
 802195e:	d004      	beq.n	802196a <__swbuf_r+0x62>
 8021960:	89a3      	ldrh	r3, [r4, #12]
 8021962:	07db      	lsls	r3, r3, #31
 8021964:	d506      	bpl.n	8021974 <__swbuf_r+0x6c>
 8021966:	2e0a      	cmp	r6, #10
 8021968:	d104      	bne.n	8021974 <__swbuf_r+0x6c>
 802196a:	4621      	mov	r1, r4
 802196c:	4628      	mov	r0, r5
 802196e:	f000 f951 	bl	8021c14 <_fflush_r>
 8021972:	b988      	cbnz	r0, 8021998 <__swbuf_r+0x90>
 8021974:	4638      	mov	r0, r7
 8021976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021978:	4b0a      	ldr	r3, [pc, #40]	; (80219a4 <__swbuf_r+0x9c>)
 802197a:	429c      	cmp	r4, r3
 802197c:	d101      	bne.n	8021982 <__swbuf_r+0x7a>
 802197e:	68ac      	ldr	r4, [r5, #8]
 8021980:	e7cf      	b.n	8021922 <__swbuf_r+0x1a>
 8021982:	4b09      	ldr	r3, [pc, #36]	; (80219a8 <__swbuf_r+0xa0>)
 8021984:	429c      	cmp	r4, r3
 8021986:	bf08      	it	eq
 8021988:	68ec      	ldreq	r4, [r5, #12]
 802198a:	e7ca      	b.n	8021922 <__swbuf_r+0x1a>
 802198c:	4621      	mov	r1, r4
 802198e:	4628      	mov	r0, r5
 8021990:	f000 f81e 	bl	80219d0 <__swsetup_r>
 8021994:	2800      	cmp	r0, #0
 8021996:	d0cb      	beq.n	8021930 <__swbuf_r+0x28>
 8021998:	f04f 37ff 	mov.w	r7, #4294967295
 802199c:	e7ea      	b.n	8021974 <__swbuf_r+0x6c>
 802199e:	bf00      	nop
 80219a0:	0802761c 	.word	0x0802761c
 80219a4:	0802763c 	.word	0x0802763c
 80219a8:	080275fc 	.word	0x080275fc

080219ac <_write_r>:
 80219ac:	b538      	push	{r3, r4, r5, lr}
 80219ae:	4d07      	ldr	r5, [pc, #28]	; (80219cc <_write_r+0x20>)
 80219b0:	4604      	mov	r4, r0
 80219b2:	4608      	mov	r0, r1
 80219b4:	4611      	mov	r1, r2
 80219b6:	2200      	movs	r2, #0
 80219b8:	602a      	str	r2, [r5, #0]
 80219ba:	461a      	mov	r2, r3
 80219bc:	f7df f9b4 	bl	8000d28 <_write>
 80219c0:	1c43      	adds	r3, r0, #1
 80219c2:	d102      	bne.n	80219ca <_write_r+0x1e>
 80219c4:	682b      	ldr	r3, [r5, #0]
 80219c6:	b103      	cbz	r3, 80219ca <_write_r+0x1e>
 80219c8:	6023      	str	r3, [r4, #0]
 80219ca:	bd38      	pop	{r3, r4, r5, pc}
 80219cc:	20016c9c 	.word	0x20016c9c

080219d0 <__swsetup_r>:
 80219d0:	4b32      	ldr	r3, [pc, #200]	; (8021a9c <__swsetup_r+0xcc>)
 80219d2:	b570      	push	{r4, r5, r6, lr}
 80219d4:	681d      	ldr	r5, [r3, #0]
 80219d6:	4606      	mov	r6, r0
 80219d8:	460c      	mov	r4, r1
 80219da:	b125      	cbz	r5, 80219e6 <__swsetup_r+0x16>
 80219dc:	69ab      	ldr	r3, [r5, #24]
 80219de:	b913      	cbnz	r3, 80219e6 <__swsetup_r+0x16>
 80219e0:	4628      	mov	r0, r5
 80219e2:	f7ff fb95 	bl	8021110 <__sinit>
 80219e6:	4b2e      	ldr	r3, [pc, #184]	; (8021aa0 <__swsetup_r+0xd0>)
 80219e8:	429c      	cmp	r4, r3
 80219ea:	d10f      	bne.n	8021a0c <__swsetup_r+0x3c>
 80219ec:	686c      	ldr	r4, [r5, #4]
 80219ee:	89a3      	ldrh	r3, [r4, #12]
 80219f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80219f4:	0719      	lsls	r1, r3, #28
 80219f6:	d42c      	bmi.n	8021a52 <__swsetup_r+0x82>
 80219f8:	06dd      	lsls	r5, r3, #27
 80219fa:	d411      	bmi.n	8021a20 <__swsetup_r+0x50>
 80219fc:	2309      	movs	r3, #9
 80219fe:	6033      	str	r3, [r6, #0]
 8021a00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021a04:	81a3      	strh	r3, [r4, #12]
 8021a06:	f04f 30ff 	mov.w	r0, #4294967295
 8021a0a:	e03e      	b.n	8021a8a <__swsetup_r+0xba>
 8021a0c:	4b25      	ldr	r3, [pc, #148]	; (8021aa4 <__swsetup_r+0xd4>)
 8021a0e:	429c      	cmp	r4, r3
 8021a10:	d101      	bne.n	8021a16 <__swsetup_r+0x46>
 8021a12:	68ac      	ldr	r4, [r5, #8]
 8021a14:	e7eb      	b.n	80219ee <__swsetup_r+0x1e>
 8021a16:	4b24      	ldr	r3, [pc, #144]	; (8021aa8 <__swsetup_r+0xd8>)
 8021a18:	429c      	cmp	r4, r3
 8021a1a:	bf08      	it	eq
 8021a1c:	68ec      	ldreq	r4, [r5, #12]
 8021a1e:	e7e6      	b.n	80219ee <__swsetup_r+0x1e>
 8021a20:	0758      	lsls	r0, r3, #29
 8021a22:	d512      	bpl.n	8021a4a <__swsetup_r+0x7a>
 8021a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021a26:	b141      	cbz	r1, 8021a3a <__swsetup_r+0x6a>
 8021a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021a2c:	4299      	cmp	r1, r3
 8021a2e:	d002      	beq.n	8021a36 <__swsetup_r+0x66>
 8021a30:	4630      	mov	r0, r6
 8021a32:	f7ff fc91 	bl	8021358 <_free_r>
 8021a36:	2300      	movs	r3, #0
 8021a38:	6363      	str	r3, [r4, #52]	; 0x34
 8021a3a:	89a3      	ldrh	r3, [r4, #12]
 8021a3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021a40:	81a3      	strh	r3, [r4, #12]
 8021a42:	2300      	movs	r3, #0
 8021a44:	6063      	str	r3, [r4, #4]
 8021a46:	6923      	ldr	r3, [r4, #16]
 8021a48:	6023      	str	r3, [r4, #0]
 8021a4a:	89a3      	ldrh	r3, [r4, #12]
 8021a4c:	f043 0308 	orr.w	r3, r3, #8
 8021a50:	81a3      	strh	r3, [r4, #12]
 8021a52:	6923      	ldr	r3, [r4, #16]
 8021a54:	b94b      	cbnz	r3, 8021a6a <__swsetup_r+0x9a>
 8021a56:	89a3      	ldrh	r3, [r4, #12]
 8021a58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021a60:	d003      	beq.n	8021a6a <__swsetup_r+0x9a>
 8021a62:	4621      	mov	r1, r4
 8021a64:	4630      	mov	r0, r6
 8021a66:	f000 f96b 	bl	8021d40 <__smakebuf_r>
 8021a6a:	89a0      	ldrh	r0, [r4, #12]
 8021a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021a70:	f010 0301 	ands.w	r3, r0, #1
 8021a74:	d00a      	beq.n	8021a8c <__swsetup_r+0xbc>
 8021a76:	2300      	movs	r3, #0
 8021a78:	60a3      	str	r3, [r4, #8]
 8021a7a:	6963      	ldr	r3, [r4, #20]
 8021a7c:	425b      	negs	r3, r3
 8021a7e:	61a3      	str	r3, [r4, #24]
 8021a80:	6923      	ldr	r3, [r4, #16]
 8021a82:	b943      	cbnz	r3, 8021a96 <__swsetup_r+0xc6>
 8021a84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021a88:	d1ba      	bne.n	8021a00 <__swsetup_r+0x30>
 8021a8a:	bd70      	pop	{r4, r5, r6, pc}
 8021a8c:	0781      	lsls	r1, r0, #30
 8021a8e:	bf58      	it	pl
 8021a90:	6963      	ldrpl	r3, [r4, #20]
 8021a92:	60a3      	str	r3, [r4, #8]
 8021a94:	e7f4      	b.n	8021a80 <__swsetup_r+0xb0>
 8021a96:	2000      	movs	r0, #0
 8021a98:	e7f7      	b.n	8021a8a <__swsetup_r+0xba>
 8021a9a:	bf00      	nop
 8021a9c:	20000370 	.word	0x20000370
 8021aa0:	0802761c 	.word	0x0802761c
 8021aa4:	0802763c 	.word	0x0802763c
 8021aa8:	080275fc 	.word	0x080275fc

08021aac <__assert_func>:
 8021aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021aae:	4614      	mov	r4, r2
 8021ab0:	461a      	mov	r2, r3
 8021ab2:	4b09      	ldr	r3, [pc, #36]	; (8021ad8 <__assert_func+0x2c>)
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	4605      	mov	r5, r0
 8021ab8:	68d8      	ldr	r0, [r3, #12]
 8021aba:	b14c      	cbz	r4, 8021ad0 <__assert_func+0x24>
 8021abc:	4b07      	ldr	r3, [pc, #28]	; (8021adc <__assert_func+0x30>)
 8021abe:	9100      	str	r1, [sp, #0]
 8021ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021ac4:	4906      	ldr	r1, [pc, #24]	; (8021ae0 <__assert_func+0x34>)
 8021ac6:	462b      	mov	r3, r5
 8021ac8:	f000 f8e0 	bl	8021c8c <fiprintf>
 8021acc:	f000 fe28 	bl	8022720 <abort>
 8021ad0:	4b04      	ldr	r3, [pc, #16]	; (8021ae4 <__assert_func+0x38>)
 8021ad2:	461c      	mov	r4, r3
 8021ad4:	e7f3      	b.n	8021abe <__assert_func+0x12>
 8021ad6:	bf00      	nop
 8021ad8:	20000370 	.word	0x20000370
 8021adc:	080276d6 	.word	0x080276d6
 8021ae0:	080276e3 	.word	0x080276e3
 8021ae4:	08027711 	.word	0x08027711

08021ae8 <_close_r>:
 8021ae8:	b538      	push	{r3, r4, r5, lr}
 8021aea:	4d06      	ldr	r5, [pc, #24]	; (8021b04 <_close_r+0x1c>)
 8021aec:	2300      	movs	r3, #0
 8021aee:	4604      	mov	r4, r0
 8021af0:	4608      	mov	r0, r1
 8021af2:	602b      	str	r3, [r5, #0]
 8021af4:	f7df fef7 	bl	80018e6 <_close>
 8021af8:	1c43      	adds	r3, r0, #1
 8021afa:	d102      	bne.n	8021b02 <_close_r+0x1a>
 8021afc:	682b      	ldr	r3, [r5, #0]
 8021afe:	b103      	cbz	r3, 8021b02 <_close_r+0x1a>
 8021b00:	6023      	str	r3, [r4, #0]
 8021b02:	bd38      	pop	{r3, r4, r5, pc}
 8021b04:	20016c9c 	.word	0x20016c9c

08021b08 <__sflush_r>:
 8021b08:	898a      	ldrh	r2, [r1, #12]
 8021b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b0e:	4605      	mov	r5, r0
 8021b10:	0710      	lsls	r0, r2, #28
 8021b12:	460c      	mov	r4, r1
 8021b14:	d458      	bmi.n	8021bc8 <__sflush_r+0xc0>
 8021b16:	684b      	ldr	r3, [r1, #4]
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	dc05      	bgt.n	8021b28 <__sflush_r+0x20>
 8021b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	dc02      	bgt.n	8021b28 <__sflush_r+0x20>
 8021b22:	2000      	movs	r0, #0
 8021b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021b2a:	2e00      	cmp	r6, #0
 8021b2c:	d0f9      	beq.n	8021b22 <__sflush_r+0x1a>
 8021b2e:	2300      	movs	r3, #0
 8021b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021b34:	682f      	ldr	r7, [r5, #0]
 8021b36:	602b      	str	r3, [r5, #0]
 8021b38:	d032      	beq.n	8021ba0 <__sflush_r+0x98>
 8021b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021b3c:	89a3      	ldrh	r3, [r4, #12]
 8021b3e:	075a      	lsls	r2, r3, #29
 8021b40:	d505      	bpl.n	8021b4e <__sflush_r+0x46>
 8021b42:	6863      	ldr	r3, [r4, #4]
 8021b44:	1ac0      	subs	r0, r0, r3
 8021b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021b48:	b10b      	cbz	r3, 8021b4e <__sflush_r+0x46>
 8021b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021b4c:	1ac0      	subs	r0, r0, r3
 8021b4e:	2300      	movs	r3, #0
 8021b50:	4602      	mov	r2, r0
 8021b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021b54:	6a21      	ldr	r1, [r4, #32]
 8021b56:	4628      	mov	r0, r5
 8021b58:	47b0      	blx	r6
 8021b5a:	1c43      	adds	r3, r0, #1
 8021b5c:	89a3      	ldrh	r3, [r4, #12]
 8021b5e:	d106      	bne.n	8021b6e <__sflush_r+0x66>
 8021b60:	6829      	ldr	r1, [r5, #0]
 8021b62:	291d      	cmp	r1, #29
 8021b64:	d82c      	bhi.n	8021bc0 <__sflush_r+0xb8>
 8021b66:	4a2a      	ldr	r2, [pc, #168]	; (8021c10 <__sflush_r+0x108>)
 8021b68:	40ca      	lsrs	r2, r1
 8021b6a:	07d6      	lsls	r6, r2, #31
 8021b6c:	d528      	bpl.n	8021bc0 <__sflush_r+0xb8>
 8021b6e:	2200      	movs	r2, #0
 8021b70:	6062      	str	r2, [r4, #4]
 8021b72:	04d9      	lsls	r1, r3, #19
 8021b74:	6922      	ldr	r2, [r4, #16]
 8021b76:	6022      	str	r2, [r4, #0]
 8021b78:	d504      	bpl.n	8021b84 <__sflush_r+0x7c>
 8021b7a:	1c42      	adds	r2, r0, #1
 8021b7c:	d101      	bne.n	8021b82 <__sflush_r+0x7a>
 8021b7e:	682b      	ldr	r3, [r5, #0]
 8021b80:	b903      	cbnz	r3, 8021b84 <__sflush_r+0x7c>
 8021b82:	6560      	str	r0, [r4, #84]	; 0x54
 8021b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b86:	602f      	str	r7, [r5, #0]
 8021b88:	2900      	cmp	r1, #0
 8021b8a:	d0ca      	beq.n	8021b22 <__sflush_r+0x1a>
 8021b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021b90:	4299      	cmp	r1, r3
 8021b92:	d002      	beq.n	8021b9a <__sflush_r+0x92>
 8021b94:	4628      	mov	r0, r5
 8021b96:	f7ff fbdf 	bl	8021358 <_free_r>
 8021b9a:	2000      	movs	r0, #0
 8021b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8021b9e:	e7c1      	b.n	8021b24 <__sflush_r+0x1c>
 8021ba0:	6a21      	ldr	r1, [r4, #32]
 8021ba2:	2301      	movs	r3, #1
 8021ba4:	4628      	mov	r0, r5
 8021ba6:	47b0      	blx	r6
 8021ba8:	1c41      	adds	r1, r0, #1
 8021baa:	d1c7      	bne.n	8021b3c <__sflush_r+0x34>
 8021bac:	682b      	ldr	r3, [r5, #0]
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d0c4      	beq.n	8021b3c <__sflush_r+0x34>
 8021bb2:	2b1d      	cmp	r3, #29
 8021bb4:	d001      	beq.n	8021bba <__sflush_r+0xb2>
 8021bb6:	2b16      	cmp	r3, #22
 8021bb8:	d101      	bne.n	8021bbe <__sflush_r+0xb6>
 8021bba:	602f      	str	r7, [r5, #0]
 8021bbc:	e7b1      	b.n	8021b22 <__sflush_r+0x1a>
 8021bbe:	89a3      	ldrh	r3, [r4, #12]
 8021bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bc4:	81a3      	strh	r3, [r4, #12]
 8021bc6:	e7ad      	b.n	8021b24 <__sflush_r+0x1c>
 8021bc8:	690f      	ldr	r7, [r1, #16]
 8021bca:	2f00      	cmp	r7, #0
 8021bcc:	d0a9      	beq.n	8021b22 <__sflush_r+0x1a>
 8021bce:	0793      	lsls	r3, r2, #30
 8021bd0:	680e      	ldr	r6, [r1, #0]
 8021bd2:	bf08      	it	eq
 8021bd4:	694b      	ldreq	r3, [r1, #20]
 8021bd6:	600f      	str	r7, [r1, #0]
 8021bd8:	bf18      	it	ne
 8021bda:	2300      	movne	r3, #0
 8021bdc:	eba6 0807 	sub.w	r8, r6, r7
 8021be0:	608b      	str	r3, [r1, #8]
 8021be2:	f1b8 0f00 	cmp.w	r8, #0
 8021be6:	dd9c      	ble.n	8021b22 <__sflush_r+0x1a>
 8021be8:	6a21      	ldr	r1, [r4, #32]
 8021bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021bec:	4643      	mov	r3, r8
 8021bee:	463a      	mov	r2, r7
 8021bf0:	4628      	mov	r0, r5
 8021bf2:	47b0      	blx	r6
 8021bf4:	2800      	cmp	r0, #0
 8021bf6:	dc06      	bgt.n	8021c06 <__sflush_r+0xfe>
 8021bf8:	89a3      	ldrh	r3, [r4, #12]
 8021bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bfe:	81a3      	strh	r3, [r4, #12]
 8021c00:	f04f 30ff 	mov.w	r0, #4294967295
 8021c04:	e78e      	b.n	8021b24 <__sflush_r+0x1c>
 8021c06:	4407      	add	r7, r0
 8021c08:	eba8 0800 	sub.w	r8, r8, r0
 8021c0c:	e7e9      	b.n	8021be2 <__sflush_r+0xda>
 8021c0e:	bf00      	nop
 8021c10:	20400001 	.word	0x20400001

08021c14 <_fflush_r>:
 8021c14:	b538      	push	{r3, r4, r5, lr}
 8021c16:	690b      	ldr	r3, [r1, #16]
 8021c18:	4605      	mov	r5, r0
 8021c1a:	460c      	mov	r4, r1
 8021c1c:	b913      	cbnz	r3, 8021c24 <_fflush_r+0x10>
 8021c1e:	2500      	movs	r5, #0
 8021c20:	4628      	mov	r0, r5
 8021c22:	bd38      	pop	{r3, r4, r5, pc}
 8021c24:	b118      	cbz	r0, 8021c2e <_fflush_r+0x1a>
 8021c26:	6983      	ldr	r3, [r0, #24]
 8021c28:	b90b      	cbnz	r3, 8021c2e <_fflush_r+0x1a>
 8021c2a:	f7ff fa71 	bl	8021110 <__sinit>
 8021c2e:	4b14      	ldr	r3, [pc, #80]	; (8021c80 <_fflush_r+0x6c>)
 8021c30:	429c      	cmp	r4, r3
 8021c32:	d11b      	bne.n	8021c6c <_fflush_r+0x58>
 8021c34:	686c      	ldr	r4, [r5, #4]
 8021c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d0ef      	beq.n	8021c1e <_fflush_r+0xa>
 8021c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021c40:	07d0      	lsls	r0, r2, #31
 8021c42:	d404      	bmi.n	8021c4e <_fflush_r+0x3a>
 8021c44:	0599      	lsls	r1, r3, #22
 8021c46:	d402      	bmi.n	8021c4e <_fflush_r+0x3a>
 8021c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c4a:	f7ff fb24 	bl	8021296 <__retarget_lock_acquire_recursive>
 8021c4e:	4628      	mov	r0, r5
 8021c50:	4621      	mov	r1, r4
 8021c52:	f7ff ff59 	bl	8021b08 <__sflush_r>
 8021c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021c58:	07da      	lsls	r2, r3, #31
 8021c5a:	4605      	mov	r5, r0
 8021c5c:	d4e0      	bmi.n	8021c20 <_fflush_r+0xc>
 8021c5e:	89a3      	ldrh	r3, [r4, #12]
 8021c60:	059b      	lsls	r3, r3, #22
 8021c62:	d4dd      	bmi.n	8021c20 <_fflush_r+0xc>
 8021c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c66:	f7ff fb17 	bl	8021298 <__retarget_lock_release_recursive>
 8021c6a:	e7d9      	b.n	8021c20 <_fflush_r+0xc>
 8021c6c:	4b05      	ldr	r3, [pc, #20]	; (8021c84 <_fflush_r+0x70>)
 8021c6e:	429c      	cmp	r4, r3
 8021c70:	d101      	bne.n	8021c76 <_fflush_r+0x62>
 8021c72:	68ac      	ldr	r4, [r5, #8]
 8021c74:	e7df      	b.n	8021c36 <_fflush_r+0x22>
 8021c76:	4b04      	ldr	r3, [pc, #16]	; (8021c88 <_fflush_r+0x74>)
 8021c78:	429c      	cmp	r4, r3
 8021c7a:	bf08      	it	eq
 8021c7c:	68ec      	ldreq	r4, [r5, #12]
 8021c7e:	e7da      	b.n	8021c36 <_fflush_r+0x22>
 8021c80:	0802761c 	.word	0x0802761c
 8021c84:	0802763c 	.word	0x0802763c
 8021c88:	080275fc 	.word	0x080275fc

08021c8c <fiprintf>:
 8021c8c:	b40e      	push	{r1, r2, r3}
 8021c8e:	b503      	push	{r0, r1, lr}
 8021c90:	4601      	mov	r1, r0
 8021c92:	ab03      	add	r3, sp, #12
 8021c94:	4805      	ldr	r0, [pc, #20]	; (8021cac <fiprintf+0x20>)
 8021c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c9a:	6800      	ldr	r0, [r0, #0]
 8021c9c:	9301      	str	r3, [sp, #4]
 8021c9e:	f000 fa21 	bl	80220e4 <_vfiprintf_r>
 8021ca2:	b002      	add	sp, #8
 8021ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021ca8:	b003      	add	sp, #12
 8021caa:	4770      	bx	lr
 8021cac:	20000370 	.word	0x20000370

08021cb0 <_gettimeofday_r>:
 8021cb0:	b538      	push	{r3, r4, r5, lr}
 8021cb2:	4d07      	ldr	r5, [pc, #28]	; (8021cd0 <_gettimeofday_r+0x20>)
 8021cb4:	2300      	movs	r3, #0
 8021cb6:	4604      	mov	r4, r0
 8021cb8:	4608      	mov	r0, r1
 8021cba:	4611      	mov	r1, r2
 8021cbc:	602b      	str	r3, [r5, #0]
 8021cbe:	f000 fdcb 	bl	8022858 <_gettimeofday>
 8021cc2:	1c43      	adds	r3, r0, #1
 8021cc4:	d102      	bne.n	8021ccc <_gettimeofday_r+0x1c>
 8021cc6:	682b      	ldr	r3, [r5, #0]
 8021cc8:	b103      	cbz	r3, 8021ccc <_gettimeofday_r+0x1c>
 8021cca:	6023      	str	r3, [r4, #0]
 8021ccc:	bd38      	pop	{r3, r4, r5, pc}
 8021cce:	bf00      	nop
 8021cd0:	20016c9c 	.word	0x20016c9c

08021cd4 <_lseek_r>:
 8021cd4:	b538      	push	{r3, r4, r5, lr}
 8021cd6:	4d07      	ldr	r5, [pc, #28]	; (8021cf4 <_lseek_r+0x20>)
 8021cd8:	4604      	mov	r4, r0
 8021cda:	4608      	mov	r0, r1
 8021cdc:	4611      	mov	r1, r2
 8021cde:	2200      	movs	r2, #0
 8021ce0:	602a      	str	r2, [r5, #0]
 8021ce2:	461a      	mov	r2, r3
 8021ce4:	f7df fe26 	bl	8001934 <_lseek>
 8021ce8:	1c43      	adds	r3, r0, #1
 8021cea:	d102      	bne.n	8021cf2 <_lseek_r+0x1e>
 8021cec:	682b      	ldr	r3, [r5, #0]
 8021cee:	b103      	cbz	r3, 8021cf2 <_lseek_r+0x1e>
 8021cf0:	6023      	str	r3, [r4, #0]
 8021cf2:	bd38      	pop	{r3, r4, r5, pc}
 8021cf4:	20016c9c 	.word	0x20016c9c

08021cf8 <__swhatbuf_r>:
 8021cf8:	b570      	push	{r4, r5, r6, lr}
 8021cfa:	460e      	mov	r6, r1
 8021cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d00:	2900      	cmp	r1, #0
 8021d02:	b096      	sub	sp, #88	; 0x58
 8021d04:	4614      	mov	r4, r2
 8021d06:	461d      	mov	r5, r3
 8021d08:	da07      	bge.n	8021d1a <__swhatbuf_r+0x22>
 8021d0a:	2300      	movs	r3, #0
 8021d0c:	602b      	str	r3, [r5, #0]
 8021d0e:	89b3      	ldrh	r3, [r6, #12]
 8021d10:	061a      	lsls	r2, r3, #24
 8021d12:	d410      	bmi.n	8021d36 <__swhatbuf_r+0x3e>
 8021d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021d18:	e00e      	b.n	8021d38 <__swhatbuf_r+0x40>
 8021d1a:	466a      	mov	r2, sp
 8021d1c:	f000 fd08 	bl	8022730 <_fstat_r>
 8021d20:	2800      	cmp	r0, #0
 8021d22:	dbf2      	blt.n	8021d0a <__swhatbuf_r+0x12>
 8021d24:	9a01      	ldr	r2, [sp, #4]
 8021d26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021d2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021d2e:	425a      	negs	r2, r3
 8021d30:	415a      	adcs	r2, r3
 8021d32:	602a      	str	r2, [r5, #0]
 8021d34:	e7ee      	b.n	8021d14 <__swhatbuf_r+0x1c>
 8021d36:	2340      	movs	r3, #64	; 0x40
 8021d38:	2000      	movs	r0, #0
 8021d3a:	6023      	str	r3, [r4, #0]
 8021d3c:	b016      	add	sp, #88	; 0x58
 8021d3e:	bd70      	pop	{r4, r5, r6, pc}

08021d40 <__smakebuf_r>:
 8021d40:	898b      	ldrh	r3, [r1, #12]
 8021d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021d44:	079d      	lsls	r5, r3, #30
 8021d46:	4606      	mov	r6, r0
 8021d48:	460c      	mov	r4, r1
 8021d4a:	d507      	bpl.n	8021d5c <__smakebuf_r+0x1c>
 8021d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021d50:	6023      	str	r3, [r4, #0]
 8021d52:	6123      	str	r3, [r4, #16]
 8021d54:	2301      	movs	r3, #1
 8021d56:	6163      	str	r3, [r4, #20]
 8021d58:	b002      	add	sp, #8
 8021d5a:	bd70      	pop	{r4, r5, r6, pc}
 8021d5c:	ab01      	add	r3, sp, #4
 8021d5e:	466a      	mov	r2, sp
 8021d60:	f7ff ffca 	bl	8021cf8 <__swhatbuf_r>
 8021d64:	9900      	ldr	r1, [sp, #0]
 8021d66:	4605      	mov	r5, r0
 8021d68:	4630      	mov	r0, r6
 8021d6a:	f7ff fb45 	bl	80213f8 <_malloc_r>
 8021d6e:	b948      	cbnz	r0, 8021d84 <__smakebuf_r+0x44>
 8021d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d74:	059a      	lsls	r2, r3, #22
 8021d76:	d4ef      	bmi.n	8021d58 <__smakebuf_r+0x18>
 8021d78:	f023 0303 	bic.w	r3, r3, #3
 8021d7c:	f043 0302 	orr.w	r3, r3, #2
 8021d80:	81a3      	strh	r3, [r4, #12]
 8021d82:	e7e3      	b.n	8021d4c <__smakebuf_r+0xc>
 8021d84:	4b0d      	ldr	r3, [pc, #52]	; (8021dbc <__smakebuf_r+0x7c>)
 8021d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8021d88:	89a3      	ldrh	r3, [r4, #12]
 8021d8a:	6020      	str	r0, [r4, #0]
 8021d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021d90:	81a3      	strh	r3, [r4, #12]
 8021d92:	9b00      	ldr	r3, [sp, #0]
 8021d94:	6163      	str	r3, [r4, #20]
 8021d96:	9b01      	ldr	r3, [sp, #4]
 8021d98:	6120      	str	r0, [r4, #16]
 8021d9a:	b15b      	cbz	r3, 8021db4 <__smakebuf_r+0x74>
 8021d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021da0:	4630      	mov	r0, r6
 8021da2:	f000 fcd7 	bl	8022754 <_isatty_r>
 8021da6:	b128      	cbz	r0, 8021db4 <__smakebuf_r+0x74>
 8021da8:	89a3      	ldrh	r3, [r4, #12]
 8021daa:	f023 0303 	bic.w	r3, r3, #3
 8021dae:	f043 0301 	orr.w	r3, r3, #1
 8021db2:	81a3      	strh	r3, [r4, #12]
 8021db4:	89a0      	ldrh	r0, [r4, #12]
 8021db6:	4305      	orrs	r5, r0
 8021db8:	81a5      	strh	r5, [r4, #12]
 8021dba:	e7cd      	b.n	8021d58 <__smakebuf_r+0x18>
 8021dbc:	080210a9 	.word	0x080210a9

08021dc0 <__malloc_lock>:
 8021dc0:	4801      	ldr	r0, [pc, #4]	; (8021dc8 <__malloc_lock+0x8>)
 8021dc2:	f7ff ba68 	b.w	8021296 <__retarget_lock_acquire_recursive>
 8021dc6:	bf00      	nop
 8021dc8:	20016ca8 	.word	0x20016ca8

08021dcc <__malloc_unlock>:
 8021dcc:	4801      	ldr	r0, [pc, #4]	; (8021dd4 <__malloc_unlock+0x8>)
 8021dce:	f7ff ba63 	b.w	8021298 <__retarget_lock_release_recursive>
 8021dd2:	bf00      	nop
 8021dd4:	20016ca8 	.word	0x20016ca8

08021dd8 <__ssputs_r>:
 8021dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ddc:	688e      	ldr	r6, [r1, #8]
 8021dde:	429e      	cmp	r6, r3
 8021de0:	4682      	mov	sl, r0
 8021de2:	460c      	mov	r4, r1
 8021de4:	4690      	mov	r8, r2
 8021de6:	461f      	mov	r7, r3
 8021de8:	d838      	bhi.n	8021e5c <__ssputs_r+0x84>
 8021dea:	898a      	ldrh	r2, [r1, #12]
 8021dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021df0:	d032      	beq.n	8021e58 <__ssputs_r+0x80>
 8021df2:	6825      	ldr	r5, [r4, #0]
 8021df4:	6909      	ldr	r1, [r1, #16]
 8021df6:	eba5 0901 	sub.w	r9, r5, r1
 8021dfa:	6965      	ldr	r5, [r4, #20]
 8021dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021e04:	3301      	adds	r3, #1
 8021e06:	444b      	add	r3, r9
 8021e08:	106d      	asrs	r5, r5, #1
 8021e0a:	429d      	cmp	r5, r3
 8021e0c:	bf38      	it	cc
 8021e0e:	461d      	movcc	r5, r3
 8021e10:	0553      	lsls	r3, r2, #21
 8021e12:	d531      	bpl.n	8021e78 <__ssputs_r+0xa0>
 8021e14:	4629      	mov	r1, r5
 8021e16:	f7ff faef 	bl	80213f8 <_malloc_r>
 8021e1a:	4606      	mov	r6, r0
 8021e1c:	b950      	cbnz	r0, 8021e34 <__ssputs_r+0x5c>
 8021e1e:	230c      	movs	r3, #12
 8021e20:	f8ca 3000 	str.w	r3, [sl]
 8021e24:	89a3      	ldrh	r3, [r4, #12]
 8021e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e2a:	81a3      	strh	r3, [r4, #12]
 8021e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8021e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e34:	6921      	ldr	r1, [r4, #16]
 8021e36:	464a      	mov	r2, r9
 8021e38:	f7ff fa4e 	bl	80212d8 <memcpy>
 8021e3c:	89a3      	ldrh	r3, [r4, #12]
 8021e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021e46:	81a3      	strh	r3, [r4, #12]
 8021e48:	6126      	str	r6, [r4, #16]
 8021e4a:	6165      	str	r5, [r4, #20]
 8021e4c:	444e      	add	r6, r9
 8021e4e:	eba5 0509 	sub.w	r5, r5, r9
 8021e52:	6026      	str	r6, [r4, #0]
 8021e54:	60a5      	str	r5, [r4, #8]
 8021e56:	463e      	mov	r6, r7
 8021e58:	42be      	cmp	r6, r7
 8021e5a:	d900      	bls.n	8021e5e <__ssputs_r+0x86>
 8021e5c:	463e      	mov	r6, r7
 8021e5e:	4632      	mov	r2, r6
 8021e60:	6820      	ldr	r0, [r4, #0]
 8021e62:	4641      	mov	r1, r8
 8021e64:	f7ff fa46 	bl	80212f4 <memmove>
 8021e68:	68a3      	ldr	r3, [r4, #8]
 8021e6a:	6822      	ldr	r2, [r4, #0]
 8021e6c:	1b9b      	subs	r3, r3, r6
 8021e6e:	4432      	add	r2, r6
 8021e70:	60a3      	str	r3, [r4, #8]
 8021e72:	6022      	str	r2, [r4, #0]
 8021e74:	2000      	movs	r0, #0
 8021e76:	e7db      	b.n	8021e30 <__ssputs_r+0x58>
 8021e78:	462a      	mov	r2, r5
 8021e7a:	f000 fc7b 	bl	8022774 <_realloc_r>
 8021e7e:	4606      	mov	r6, r0
 8021e80:	2800      	cmp	r0, #0
 8021e82:	d1e1      	bne.n	8021e48 <__ssputs_r+0x70>
 8021e84:	6921      	ldr	r1, [r4, #16]
 8021e86:	4650      	mov	r0, sl
 8021e88:	f7ff fa66 	bl	8021358 <_free_r>
 8021e8c:	e7c7      	b.n	8021e1e <__ssputs_r+0x46>
	...

08021e90 <_svfiprintf_r>:
 8021e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e94:	4698      	mov	r8, r3
 8021e96:	898b      	ldrh	r3, [r1, #12]
 8021e98:	061b      	lsls	r3, r3, #24
 8021e9a:	b09d      	sub	sp, #116	; 0x74
 8021e9c:	4607      	mov	r7, r0
 8021e9e:	460d      	mov	r5, r1
 8021ea0:	4614      	mov	r4, r2
 8021ea2:	d50e      	bpl.n	8021ec2 <_svfiprintf_r+0x32>
 8021ea4:	690b      	ldr	r3, [r1, #16]
 8021ea6:	b963      	cbnz	r3, 8021ec2 <_svfiprintf_r+0x32>
 8021ea8:	2140      	movs	r1, #64	; 0x40
 8021eaa:	f7ff faa5 	bl	80213f8 <_malloc_r>
 8021eae:	6028      	str	r0, [r5, #0]
 8021eb0:	6128      	str	r0, [r5, #16]
 8021eb2:	b920      	cbnz	r0, 8021ebe <_svfiprintf_r+0x2e>
 8021eb4:	230c      	movs	r3, #12
 8021eb6:	603b      	str	r3, [r7, #0]
 8021eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8021ebc:	e0d1      	b.n	8022062 <_svfiprintf_r+0x1d2>
 8021ebe:	2340      	movs	r3, #64	; 0x40
 8021ec0:	616b      	str	r3, [r5, #20]
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8021ec6:	2320      	movs	r3, #32
 8021ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8021ed0:	2330      	movs	r3, #48	; 0x30
 8021ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802207c <_svfiprintf_r+0x1ec>
 8021ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021eda:	f04f 0901 	mov.w	r9, #1
 8021ede:	4623      	mov	r3, r4
 8021ee0:	469a      	mov	sl, r3
 8021ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ee6:	b10a      	cbz	r2, 8021eec <_svfiprintf_r+0x5c>
 8021ee8:	2a25      	cmp	r2, #37	; 0x25
 8021eea:	d1f9      	bne.n	8021ee0 <_svfiprintf_r+0x50>
 8021eec:	ebba 0b04 	subs.w	fp, sl, r4
 8021ef0:	d00b      	beq.n	8021f0a <_svfiprintf_r+0x7a>
 8021ef2:	465b      	mov	r3, fp
 8021ef4:	4622      	mov	r2, r4
 8021ef6:	4629      	mov	r1, r5
 8021ef8:	4638      	mov	r0, r7
 8021efa:	f7ff ff6d 	bl	8021dd8 <__ssputs_r>
 8021efe:	3001      	adds	r0, #1
 8021f00:	f000 80aa 	beq.w	8022058 <_svfiprintf_r+0x1c8>
 8021f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f06:	445a      	add	r2, fp
 8021f08:	9209      	str	r2, [sp, #36]	; 0x24
 8021f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	f000 80a2 	beq.w	8022058 <_svfiprintf_r+0x1c8>
 8021f14:	2300      	movs	r3, #0
 8021f16:	f04f 32ff 	mov.w	r2, #4294967295
 8021f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f1e:	f10a 0a01 	add.w	sl, sl, #1
 8021f22:	9304      	str	r3, [sp, #16]
 8021f24:	9307      	str	r3, [sp, #28]
 8021f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8021f2c:	4654      	mov	r4, sl
 8021f2e:	2205      	movs	r2, #5
 8021f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f34:	4851      	ldr	r0, [pc, #324]	; (802207c <_svfiprintf_r+0x1ec>)
 8021f36:	f7de f953 	bl	80001e0 <memchr>
 8021f3a:	9a04      	ldr	r2, [sp, #16]
 8021f3c:	b9d8      	cbnz	r0, 8021f76 <_svfiprintf_r+0xe6>
 8021f3e:	06d0      	lsls	r0, r2, #27
 8021f40:	bf44      	itt	mi
 8021f42:	2320      	movmi	r3, #32
 8021f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021f48:	0711      	lsls	r1, r2, #28
 8021f4a:	bf44      	itt	mi
 8021f4c:	232b      	movmi	r3, #43	; 0x2b
 8021f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021f52:	f89a 3000 	ldrb.w	r3, [sl]
 8021f56:	2b2a      	cmp	r3, #42	; 0x2a
 8021f58:	d015      	beq.n	8021f86 <_svfiprintf_r+0xf6>
 8021f5a:	9a07      	ldr	r2, [sp, #28]
 8021f5c:	4654      	mov	r4, sl
 8021f5e:	2000      	movs	r0, #0
 8021f60:	f04f 0c0a 	mov.w	ip, #10
 8021f64:	4621      	mov	r1, r4
 8021f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021f6a:	3b30      	subs	r3, #48	; 0x30
 8021f6c:	2b09      	cmp	r3, #9
 8021f6e:	d94e      	bls.n	802200e <_svfiprintf_r+0x17e>
 8021f70:	b1b0      	cbz	r0, 8021fa0 <_svfiprintf_r+0x110>
 8021f72:	9207      	str	r2, [sp, #28]
 8021f74:	e014      	b.n	8021fa0 <_svfiprintf_r+0x110>
 8021f76:	eba0 0308 	sub.w	r3, r0, r8
 8021f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8021f7e:	4313      	orrs	r3, r2
 8021f80:	9304      	str	r3, [sp, #16]
 8021f82:	46a2      	mov	sl, r4
 8021f84:	e7d2      	b.n	8021f2c <_svfiprintf_r+0x9c>
 8021f86:	9b03      	ldr	r3, [sp, #12]
 8021f88:	1d19      	adds	r1, r3, #4
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	9103      	str	r1, [sp, #12]
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	bfbb      	ittet	lt
 8021f92:	425b      	neglt	r3, r3
 8021f94:	f042 0202 	orrlt.w	r2, r2, #2
 8021f98:	9307      	strge	r3, [sp, #28]
 8021f9a:	9307      	strlt	r3, [sp, #28]
 8021f9c:	bfb8      	it	lt
 8021f9e:	9204      	strlt	r2, [sp, #16]
 8021fa0:	7823      	ldrb	r3, [r4, #0]
 8021fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8021fa4:	d10c      	bne.n	8021fc0 <_svfiprintf_r+0x130>
 8021fa6:	7863      	ldrb	r3, [r4, #1]
 8021fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8021faa:	d135      	bne.n	8022018 <_svfiprintf_r+0x188>
 8021fac:	9b03      	ldr	r3, [sp, #12]
 8021fae:	1d1a      	adds	r2, r3, #4
 8021fb0:	681b      	ldr	r3, [r3, #0]
 8021fb2:	9203      	str	r2, [sp, #12]
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	bfb8      	it	lt
 8021fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8021fbc:	3402      	adds	r4, #2
 8021fbe:	9305      	str	r3, [sp, #20]
 8021fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802208c <_svfiprintf_r+0x1fc>
 8021fc4:	7821      	ldrb	r1, [r4, #0]
 8021fc6:	2203      	movs	r2, #3
 8021fc8:	4650      	mov	r0, sl
 8021fca:	f7de f909 	bl	80001e0 <memchr>
 8021fce:	b140      	cbz	r0, 8021fe2 <_svfiprintf_r+0x152>
 8021fd0:	2340      	movs	r3, #64	; 0x40
 8021fd2:	eba0 000a 	sub.w	r0, r0, sl
 8021fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8021fda:	9b04      	ldr	r3, [sp, #16]
 8021fdc:	4303      	orrs	r3, r0
 8021fde:	3401      	adds	r4, #1
 8021fe0:	9304      	str	r3, [sp, #16]
 8021fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021fe6:	4826      	ldr	r0, [pc, #152]	; (8022080 <_svfiprintf_r+0x1f0>)
 8021fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021fec:	2206      	movs	r2, #6
 8021fee:	f7de f8f7 	bl	80001e0 <memchr>
 8021ff2:	2800      	cmp	r0, #0
 8021ff4:	d038      	beq.n	8022068 <_svfiprintf_r+0x1d8>
 8021ff6:	4b23      	ldr	r3, [pc, #140]	; (8022084 <_svfiprintf_r+0x1f4>)
 8021ff8:	bb1b      	cbnz	r3, 8022042 <_svfiprintf_r+0x1b2>
 8021ffa:	9b03      	ldr	r3, [sp, #12]
 8021ffc:	3307      	adds	r3, #7
 8021ffe:	f023 0307 	bic.w	r3, r3, #7
 8022002:	3308      	adds	r3, #8
 8022004:	9303      	str	r3, [sp, #12]
 8022006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022008:	4433      	add	r3, r6
 802200a:	9309      	str	r3, [sp, #36]	; 0x24
 802200c:	e767      	b.n	8021ede <_svfiprintf_r+0x4e>
 802200e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022012:	460c      	mov	r4, r1
 8022014:	2001      	movs	r0, #1
 8022016:	e7a5      	b.n	8021f64 <_svfiprintf_r+0xd4>
 8022018:	2300      	movs	r3, #0
 802201a:	3401      	adds	r4, #1
 802201c:	9305      	str	r3, [sp, #20]
 802201e:	4619      	mov	r1, r3
 8022020:	f04f 0c0a 	mov.w	ip, #10
 8022024:	4620      	mov	r0, r4
 8022026:	f810 2b01 	ldrb.w	r2, [r0], #1
 802202a:	3a30      	subs	r2, #48	; 0x30
 802202c:	2a09      	cmp	r2, #9
 802202e:	d903      	bls.n	8022038 <_svfiprintf_r+0x1a8>
 8022030:	2b00      	cmp	r3, #0
 8022032:	d0c5      	beq.n	8021fc0 <_svfiprintf_r+0x130>
 8022034:	9105      	str	r1, [sp, #20]
 8022036:	e7c3      	b.n	8021fc0 <_svfiprintf_r+0x130>
 8022038:	fb0c 2101 	mla	r1, ip, r1, r2
 802203c:	4604      	mov	r4, r0
 802203e:	2301      	movs	r3, #1
 8022040:	e7f0      	b.n	8022024 <_svfiprintf_r+0x194>
 8022042:	ab03      	add	r3, sp, #12
 8022044:	9300      	str	r3, [sp, #0]
 8022046:	462a      	mov	r2, r5
 8022048:	4b0f      	ldr	r3, [pc, #60]	; (8022088 <_svfiprintf_r+0x1f8>)
 802204a:	a904      	add	r1, sp, #16
 802204c:	4638      	mov	r0, r7
 802204e:	f3af 8000 	nop.w
 8022052:	1c42      	adds	r2, r0, #1
 8022054:	4606      	mov	r6, r0
 8022056:	d1d6      	bne.n	8022006 <_svfiprintf_r+0x176>
 8022058:	89ab      	ldrh	r3, [r5, #12]
 802205a:	065b      	lsls	r3, r3, #25
 802205c:	f53f af2c 	bmi.w	8021eb8 <_svfiprintf_r+0x28>
 8022060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022062:	b01d      	add	sp, #116	; 0x74
 8022064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022068:	ab03      	add	r3, sp, #12
 802206a:	9300      	str	r3, [sp, #0]
 802206c:	462a      	mov	r2, r5
 802206e:	4b06      	ldr	r3, [pc, #24]	; (8022088 <_svfiprintf_r+0x1f8>)
 8022070:	a904      	add	r1, sp, #16
 8022072:	4638      	mov	r0, r7
 8022074:	f000 f9d4 	bl	8022420 <_printf_i>
 8022078:	e7eb      	b.n	8022052 <_svfiprintf_r+0x1c2>
 802207a:	bf00      	nop
 802207c:	08027712 	.word	0x08027712
 8022080:	0802771c 	.word	0x0802771c
 8022084:	00000000 	.word	0x00000000
 8022088:	08021dd9 	.word	0x08021dd9
 802208c:	08027718 	.word	0x08027718

08022090 <__sfputc_r>:
 8022090:	6893      	ldr	r3, [r2, #8]
 8022092:	3b01      	subs	r3, #1
 8022094:	2b00      	cmp	r3, #0
 8022096:	b410      	push	{r4}
 8022098:	6093      	str	r3, [r2, #8]
 802209a:	da08      	bge.n	80220ae <__sfputc_r+0x1e>
 802209c:	6994      	ldr	r4, [r2, #24]
 802209e:	42a3      	cmp	r3, r4
 80220a0:	db01      	blt.n	80220a6 <__sfputc_r+0x16>
 80220a2:	290a      	cmp	r1, #10
 80220a4:	d103      	bne.n	80220ae <__sfputc_r+0x1e>
 80220a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220aa:	f7ff bc2d 	b.w	8021908 <__swbuf_r>
 80220ae:	6813      	ldr	r3, [r2, #0]
 80220b0:	1c58      	adds	r0, r3, #1
 80220b2:	6010      	str	r0, [r2, #0]
 80220b4:	7019      	strb	r1, [r3, #0]
 80220b6:	4608      	mov	r0, r1
 80220b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220bc:	4770      	bx	lr

080220be <__sfputs_r>:
 80220be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220c0:	4606      	mov	r6, r0
 80220c2:	460f      	mov	r7, r1
 80220c4:	4614      	mov	r4, r2
 80220c6:	18d5      	adds	r5, r2, r3
 80220c8:	42ac      	cmp	r4, r5
 80220ca:	d101      	bne.n	80220d0 <__sfputs_r+0x12>
 80220cc:	2000      	movs	r0, #0
 80220ce:	e007      	b.n	80220e0 <__sfputs_r+0x22>
 80220d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80220d4:	463a      	mov	r2, r7
 80220d6:	4630      	mov	r0, r6
 80220d8:	f7ff ffda 	bl	8022090 <__sfputc_r>
 80220dc:	1c43      	adds	r3, r0, #1
 80220de:	d1f3      	bne.n	80220c8 <__sfputs_r+0xa>
 80220e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080220e4 <_vfiprintf_r>:
 80220e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220e8:	460d      	mov	r5, r1
 80220ea:	b09d      	sub	sp, #116	; 0x74
 80220ec:	4614      	mov	r4, r2
 80220ee:	4698      	mov	r8, r3
 80220f0:	4606      	mov	r6, r0
 80220f2:	b118      	cbz	r0, 80220fc <_vfiprintf_r+0x18>
 80220f4:	6983      	ldr	r3, [r0, #24]
 80220f6:	b90b      	cbnz	r3, 80220fc <_vfiprintf_r+0x18>
 80220f8:	f7ff f80a 	bl	8021110 <__sinit>
 80220fc:	4b89      	ldr	r3, [pc, #548]	; (8022324 <_vfiprintf_r+0x240>)
 80220fe:	429d      	cmp	r5, r3
 8022100:	d11b      	bne.n	802213a <_vfiprintf_r+0x56>
 8022102:	6875      	ldr	r5, [r6, #4]
 8022104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022106:	07d9      	lsls	r1, r3, #31
 8022108:	d405      	bmi.n	8022116 <_vfiprintf_r+0x32>
 802210a:	89ab      	ldrh	r3, [r5, #12]
 802210c:	059a      	lsls	r2, r3, #22
 802210e:	d402      	bmi.n	8022116 <_vfiprintf_r+0x32>
 8022110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022112:	f7ff f8c0 	bl	8021296 <__retarget_lock_acquire_recursive>
 8022116:	89ab      	ldrh	r3, [r5, #12]
 8022118:	071b      	lsls	r3, r3, #28
 802211a:	d501      	bpl.n	8022120 <_vfiprintf_r+0x3c>
 802211c:	692b      	ldr	r3, [r5, #16]
 802211e:	b9eb      	cbnz	r3, 802215c <_vfiprintf_r+0x78>
 8022120:	4629      	mov	r1, r5
 8022122:	4630      	mov	r0, r6
 8022124:	f7ff fc54 	bl	80219d0 <__swsetup_r>
 8022128:	b1c0      	cbz	r0, 802215c <_vfiprintf_r+0x78>
 802212a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802212c:	07dc      	lsls	r4, r3, #31
 802212e:	d50e      	bpl.n	802214e <_vfiprintf_r+0x6a>
 8022130:	f04f 30ff 	mov.w	r0, #4294967295
 8022134:	b01d      	add	sp, #116	; 0x74
 8022136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802213a:	4b7b      	ldr	r3, [pc, #492]	; (8022328 <_vfiprintf_r+0x244>)
 802213c:	429d      	cmp	r5, r3
 802213e:	d101      	bne.n	8022144 <_vfiprintf_r+0x60>
 8022140:	68b5      	ldr	r5, [r6, #8]
 8022142:	e7df      	b.n	8022104 <_vfiprintf_r+0x20>
 8022144:	4b79      	ldr	r3, [pc, #484]	; (802232c <_vfiprintf_r+0x248>)
 8022146:	429d      	cmp	r5, r3
 8022148:	bf08      	it	eq
 802214a:	68f5      	ldreq	r5, [r6, #12]
 802214c:	e7da      	b.n	8022104 <_vfiprintf_r+0x20>
 802214e:	89ab      	ldrh	r3, [r5, #12]
 8022150:	0598      	lsls	r0, r3, #22
 8022152:	d4ed      	bmi.n	8022130 <_vfiprintf_r+0x4c>
 8022154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022156:	f7ff f89f 	bl	8021298 <__retarget_lock_release_recursive>
 802215a:	e7e9      	b.n	8022130 <_vfiprintf_r+0x4c>
 802215c:	2300      	movs	r3, #0
 802215e:	9309      	str	r3, [sp, #36]	; 0x24
 8022160:	2320      	movs	r3, #32
 8022162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022166:	f8cd 800c 	str.w	r8, [sp, #12]
 802216a:	2330      	movs	r3, #48	; 0x30
 802216c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022330 <_vfiprintf_r+0x24c>
 8022170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022174:	f04f 0901 	mov.w	r9, #1
 8022178:	4623      	mov	r3, r4
 802217a:	469a      	mov	sl, r3
 802217c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022180:	b10a      	cbz	r2, 8022186 <_vfiprintf_r+0xa2>
 8022182:	2a25      	cmp	r2, #37	; 0x25
 8022184:	d1f9      	bne.n	802217a <_vfiprintf_r+0x96>
 8022186:	ebba 0b04 	subs.w	fp, sl, r4
 802218a:	d00b      	beq.n	80221a4 <_vfiprintf_r+0xc0>
 802218c:	465b      	mov	r3, fp
 802218e:	4622      	mov	r2, r4
 8022190:	4629      	mov	r1, r5
 8022192:	4630      	mov	r0, r6
 8022194:	f7ff ff93 	bl	80220be <__sfputs_r>
 8022198:	3001      	adds	r0, #1
 802219a:	f000 80aa 	beq.w	80222f2 <_vfiprintf_r+0x20e>
 802219e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80221a0:	445a      	add	r2, fp
 80221a2:	9209      	str	r2, [sp, #36]	; 0x24
 80221a4:	f89a 3000 	ldrb.w	r3, [sl]
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	f000 80a2 	beq.w	80222f2 <_vfiprintf_r+0x20e>
 80221ae:	2300      	movs	r3, #0
 80221b0:	f04f 32ff 	mov.w	r2, #4294967295
 80221b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80221b8:	f10a 0a01 	add.w	sl, sl, #1
 80221bc:	9304      	str	r3, [sp, #16]
 80221be:	9307      	str	r3, [sp, #28]
 80221c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80221c4:	931a      	str	r3, [sp, #104]	; 0x68
 80221c6:	4654      	mov	r4, sl
 80221c8:	2205      	movs	r2, #5
 80221ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221ce:	4858      	ldr	r0, [pc, #352]	; (8022330 <_vfiprintf_r+0x24c>)
 80221d0:	f7de f806 	bl	80001e0 <memchr>
 80221d4:	9a04      	ldr	r2, [sp, #16]
 80221d6:	b9d8      	cbnz	r0, 8022210 <_vfiprintf_r+0x12c>
 80221d8:	06d1      	lsls	r1, r2, #27
 80221da:	bf44      	itt	mi
 80221dc:	2320      	movmi	r3, #32
 80221de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221e2:	0713      	lsls	r3, r2, #28
 80221e4:	bf44      	itt	mi
 80221e6:	232b      	movmi	r3, #43	; 0x2b
 80221e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221ec:	f89a 3000 	ldrb.w	r3, [sl]
 80221f0:	2b2a      	cmp	r3, #42	; 0x2a
 80221f2:	d015      	beq.n	8022220 <_vfiprintf_r+0x13c>
 80221f4:	9a07      	ldr	r2, [sp, #28]
 80221f6:	4654      	mov	r4, sl
 80221f8:	2000      	movs	r0, #0
 80221fa:	f04f 0c0a 	mov.w	ip, #10
 80221fe:	4621      	mov	r1, r4
 8022200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022204:	3b30      	subs	r3, #48	; 0x30
 8022206:	2b09      	cmp	r3, #9
 8022208:	d94e      	bls.n	80222a8 <_vfiprintf_r+0x1c4>
 802220a:	b1b0      	cbz	r0, 802223a <_vfiprintf_r+0x156>
 802220c:	9207      	str	r2, [sp, #28]
 802220e:	e014      	b.n	802223a <_vfiprintf_r+0x156>
 8022210:	eba0 0308 	sub.w	r3, r0, r8
 8022214:	fa09 f303 	lsl.w	r3, r9, r3
 8022218:	4313      	orrs	r3, r2
 802221a:	9304      	str	r3, [sp, #16]
 802221c:	46a2      	mov	sl, r4
 802221e:	e7d2      	b.n	80221c6 <_vfiprintf_r+0xe2>
 8022220:	9b03      	ldr	r3, [sp, #12]
 8022222:	1d19      	adds	r1, r3, #4
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	9103      	str	r1, [sp, #12]
 8022228:	2b00      	cmp	r3, #0
 802222a:	bfbb      	ittet	lt
 802222c:	425b      	neglt	r3, r3
 802222e:	f042 0202 	orrlt.w	r2, r2, #2
 8022232:	9307      	strge	r3, [sp, #28]
 8022234:	9307      	strlt	r3, [sp, #28]
 8022236:	bfb8      	it	lt
 8022238:	9204      	strlt	r2, [sp, #16]
 802223a:	7823      	ldrb	r3, [r4, #0]
 802223c:	2b2e      	cmp	r3, #46	; 0x2e
 802223e:	d10c      	bne.n	802225a <_vfiprintf_r+0x176>
 8022240:	7863      	ldrb	r3, [r4, #1]
 8022242:	2b2a      	cmp	r3, #42	; 0x2a
 8022244:	d135      	bne.n	80222b2 <_vfiprintf_r+0x1ce>
 8022246:	9b03      	ldr	r3, [sp, #12]
 8022248:	1d1a      	adds	r2, r3, #4
 802224a:	681b      	ldr	r3, [r3, #0]
 802224c:	9203      	str	r2, [sp, #12]
 802224e:	2b00      	cmp	r3, #0
 8022250:	bfb8      	it	lt
 8022252:	f04f 33ff 	movlt.w	r3, #4294967295
 8022256:	3402      	adds	r4, #2
 8022258:	9305      	str	r3, [sp, #20]
 802225a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022340 <_vfiprintf_r+0x25c>
 802225e:	7821      	ldrb	r1, [r4, #0]
 8022260:	2203      	movs	r2, #3
 8022262:	4650      	mov	r0, sl
 8022264:	f7dd ffbc 	bl	80001e0 <memchr>
 8022268:	b140      	cbz	r0, 802227c <_vfiprintf_r+0x198>
 802226a:	2340      	movs	r3, #64	; 0x40
 802226c:	eba0 000a 	sub.w	r0, r0, sl
 8022270:	fa03 f000 	lsl.w	r0, r3, r0
 8022274:	9b04      	ldr	r3, [sp, #16]
 8022276:	4303      	orrs	r3, r0
 8022278:	3401      	adds	r4, #1
 802227a:	9304      	str	r3, [sp, #16]
 802227c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022280:	482c      	ldr	r0, [pc, #176]	; (8022334 <_vfiprintf_r+0x250>)
 8022282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022286:	2206      	movs	r2, #6
 8022288:	f7dd ffaa 	bl	80001e0 <memchr>
 802228c:	2800      	cmp	r0, #0
 802228e:	d03f      	beq.n	8022310 <_vfiprintf_r+0x22c>
 8022290:	4b29      	ldr	r3, [pc, #164]	; (8022338 <_vfiprintf_r+0x254>)
 8022292:	bb1b      	cbnz	r3, 80222dc <_vfiprintf_r+0x1f8>
 8022294:	9b03      	ldr	r3, [sp, #12]
 8022296:	3307      	adds	r3, #7
 8022298:	f023 0307 	bic.w	r3, r3, #7
 802229c:	3308      	adds	r3, #8
 802229e:	9303      	str	r3, [sp, #12]
 80222a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222a2:	443b      	add	r3, r7
 80222a4:	9309      	str	r3, [sp, #36]	; 0x24
 80222a6:	e767      	b.n	8022178 <_vfiprintf_r+0x94>
 80222a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80222ac:	460c      	mov	r4, r1
 80222ae:	2001      	movs	r0, #1
 80222b0:	e7a5      	b.n	80221fe <_vfiprintf_r+0x11a>
 80222b2:	2300      	movs	r3, #0
 80222b4:	3401      	adds	r4, #1
 80222b6:	9305      	str	r3, [sp, #20]
 80222b8:	4619      	mov	r1, r3
 80222ba:	f04f 0c0a 	mov.w	ip, #10
 80222be:	4620      	mov	r0, r4
 80222c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80222c4:	3a30      	subs	r2, #48	; 0x30
 80222c6:	2a09      	cmp	r2, #9
 80222c8:	d903      	bls.n	80222d2 <_vfiprintf_r+0x1ee>
 80222ca:	2b00      	cmp	r3, #0
 80222cc:	d0c5      	beq.n	802225a <_vfiprintf_r+0x176>
 80222ce:	9105      	str	r1, [sp, #20]
 80222d0:	e7c3      	b.n	802225a <_vfiprintf_r+0x176>
 80222d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80222d6:	4604      	mov	r4, r0
 80222d8:	2301      	movs	r3, #1
 80222da:	e7f0      	b.n	80222be <_vfiprintf_r+0x1da>
 80222dc:	ab03      	add	r3, sp, #12
 80222de:	9300      	str	r3, [sp, #0]
 80222e0:	462a      	mov	r2, r5
 80222e2:	4b16      	ldr	r3, [pc, #88]	; (802233c <_vfiprintf_r+0x258>)
 80222e4:	a904      	add	r1, sp, #16
 80222e6:	4630      	mov	r0, r6
 80222e8:	f3af 8000 	nop.w
 80222ec:	4607      	mov	r7, r0
 80222ee:	1c78      	adds	r0, r7, #1
 80222f0:	d1d6      	bne.n	80222a0 <_vfiprintf_r+0x1bc>
 80222f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80222f4:	07d9      	lsls	r1, r3, #31
 80222f6:	d405      	bmi.n	8022304 <_vfiprintf_r+0x220>
 80222f8:	89ab      	ldrh	r3, [r5, #12]
 80222fa:	059a      	lsls	r2, r3, #22
 80222fc:	d402      	bmi.n	8022304 <_vfiprintf_r+0x220>
 80222fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022300:	f7fe ffca 	bl	8021298 <__retarget_lock_release_recursive>
 8022304:	89ab      	ldrh	r3, [r5, #12]
 8022306:	065b      	lsls	r3, r3, #25
 8022308:	f53f af12 	bmi.w	8022130 <_vfiprintf_r+0x4c>
 802230c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802230e:	e711      	b.n	8022134 <_vfiprintf_r+0x50>
 8022310:	ab03      	add	r3, sp, #12
 8022312:	9300      	str	r3, [sp, #0]
 8022314:	462a      	mov	r2, r5
 8022316:	4b09      	ldr	r3, [pc, #36]	; (802233c <_vfiprintf_r+0x258>)
 8022318:	a904      	add	r1, sp, #16
 802231a:	4630      	mov	r0, r6
 802231c:	f000 f880 	bl	8022420 <_printf_i>
 8022320:	e7e4      	b.n	80222ec <_vfiprintf_r+0x208>
 8022322:	bf00      	nop
 8022324:	0802761c 	.word	0x0802761c
 8022328:	0802763c 	.word	0x0802763c
 802232c:	080275fc 	.word	0x080275fc
 8022330:	08027712 	.word	0x08027712
 8022334:	0802771c 	.word	0x0802771c
 8022338:	00000000 	.word	0x00000000
 802233c:	080220bf 	.word	0x080220bf
 8022340:	08027718 	.word	0x08027718

08022344 <_printf_common>:
 8022344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022348:	4616      	mov	r6, r2
 802234a:	4699      	mov	r9, r3
 802234c:	688a      	ldr	r2, [r1, #8]
 802234e:	690b      	ldr	r3, [r1, #16]
 8022350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022354:	4293      	cmp	r3, r2
 8022356:	bfb8      	it	lt
 8022358:	4613      	movlt	r3, r2
 802235a:	6033      	str	r3, [r6, #0]
 802235c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022360:	4607      	mov	r7, r0
 8022362:	460c      	mov	r4, r1
 8022364:	b10a      	cbz	r2, 802236a <_printf_common+0x26>
 8022366:	3301      	adds	r3, #1
 8022368:	6033      	str	r3, [r6, #0]
 802236a:	6823      	ldr	r3, [r4, #0]
 802236c:	0699      	lsls	r1, r3, #26
 802236e:	bf42      	ittt	mi
 8022370:	6833      	ldrmi	r3, [r6, #0]
 8022372:	3302      	addmi	r3, #2
 8022374:	6033      	strmi	r3, [r6, #0]
 8022376:	6825      	ldr	r5, [r4, #0]
 8022378:	f015 0506 	ands.w	r5, r5, #6
 802237c:	d106      	bne.n	802238c <_printf_common+0x48>
 802237e:	f104 0a19 	add.w	sl, r4, #25
 8022382:	68e3      	ldr	r3, [r4, #12]
 8022384:	6832      	ldr	r2, [r6, #0]
 8022386:	1a9b      	subs	r3, r3, r2
 8022388:	42ab      	cmp	r3, r5
 802238a:	dc26      	bgt.n	80223da <_printf_common+0x96>
 802238c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022390:	1e13      	subs	r3, r2, #0
 8022392:	6822      	ldr	r2, [r4, #0]
 8022394:	bf18      	it	ne
 8022396:	2301      	movne	r3, #1
 8022398:	0692      	lsls	r2, r2, #26
 802239a:	d42b      	bmi.n	80223f4 <_printf_common+0xb0>
 802239c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80223a0:	4649      	mov	r1, r9
 80223a2:	4638      	mov	r0, r7
 80223a4:	47c0      	blx	r8
 80223a6:	3001      	adds	r0, #1
 80223a8:	d01e      	beq.n	80223e8 <_printf_common+0xa4>
 80223aa:	6823      	ldr	r3, [r4, #0]
 80223ac:	68e5      	ldr	r5, [r4, #12]
 80223ae:	6832      	ldr	r2, [r6, #0]
 80223b0:	f003 0306 	and.w	r3, r3, #6
 80223b4:	2b04      	cmp	r3, #4
 80223b6:	bf08      	it	eq
 80223b8:	1aad      	subeq	r5, r5, r2
 80223ba:	68a3      	ldr	r3, [r4, #8]
 80223bc:	6922      	ldr	r2, [r4, #16]
 80223be:	bf0c      	ite	eq
 80223c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80223c4:	2500      	movne	r5, #0
 80223c6:	4293      	cmp	r3, r2
 80223c8:	bfc4      	itt	gt
 80223ca:	1a9b      	subgt	r3, r3, r2
 80223cc:	18ed      	addgt	r5, r5, r3
 80223ce:	2600      	movs	r6, #0
 80223d0:	341a      	adds	r4, #26
 80223d2:	42b5      	cmp	r5, r6
 80223d4:	d11a      	bne.n	802240c <_printf_common+0xc8>
 80223d6:	2000      	movs	r0, #0
 80223d8:	e008      	b.n	80223ec <_printf_common+0xa8>
 80223da:	2301      	movs	r3, #1
 80223dc:	4652      	mov	r2, sl
 80223de:	4649      	mov	r1, r9
 80223e0:	4638      	mov	r0, r7
 80223e2:	47c0      	blx	r8
 80223e4:	3001      	adds	r0, #1
 80223e6:	d103      	bne.n	80223f0 <_printf_common+0xac>
 80223e8:	f04f 30ff 	mov.w	r0, #4294967295
 80223ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223f0:	3501      	adds	r5, #1
 80223f2:	e7c6      	b.n	8022382 <_printf_common+0x3e>
 80223f4:	18e1      	adds	r1, r4, r3
 80223f6:	1c5a      	adds	r2, r3, #1
 80223f8:	2030      	movs	r0, #48	; 0x30
 80223fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80223fe:	4422      	add	r2, r4
 8022400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022408:	3302      	adds	r3, #2
 802240a:	e7c7      	b.n	802239c <_printf_common+0x58>
 802240c:	2301      	movs	r3, #1
 802240e:	4622      	mov	r2, r4
 8022410:	4649      	mov	r1, r9
 8022412:	4638      	mov	r0, r7
 8022414:	47c0      	blx	r8
 8022416:	3001      	adds	r0, #1
 8022418:	d0e6      	beq.n	80223e8 <_printf_common+0xa4>
 802241a:	3601      	adds	r6, #1
 802241c:	e7d9      	b.n	80223d2 <_printf_common+0x8e>
	...

08022420 <_printf_i>:
 8022420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022424:	460c      	mov	r4, r1
 8022426:	4691      	mov	r9, r2
 8022428:	7e27      	ldrb	r7, [r4, #24]
 802242a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802242c:	2f78      	cmp	r7, #120	; 0x78
 802242e:	4680      	mov	r8, r0
 8022430:	469a      	mov	sl, r3
 8022432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022436:	d807      	bhi.n	8022448 <_printf_i+0x28>
 8022438:	2f62      	cmp	r7, #98	; 0x62
 802243a:	d80a      	bhi.n	8022452 <_printf_i+0x32>
 802243c:	2f00      	cmp	r7, #0
 802243e:	f000 80d8 	beq.w	80225f2 <_printf_i+0x1d2>
 8022442:	2f58      	cmp	r7, #88	; 0x58
 8022444:	f000 80a3 	beq.w	802258e <_printf_i+0x16e>
 8022448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802244c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022450:	e03a      	b.n	80224c8 <_printf_i+0xa8>
 8022452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022456:	2b15      	cmp	r3, #21
 8022458:	d8f6      	bhi.n	8022448 <_printf_i+0x28>
 802245a:	a001      	add	r0, pc, #4	; (adr r0, 8022460 <_printf_i+0x40>)
 802245c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022460:	080224b9 	.word	0x080224b9
 8022464:	080224cd 	.word	0x080224cd
 8022468:	08022449 	.word	0x08022449
 802246c:	08022449 	.word	0x08022449
 8022470:	08022449 	.word	0x08022449
 8022474:	08022449 	.word	0x08022449
 8022478:	080224cd 	.word	0x080224cd
 802247c:	08022449 	.word	0x08022449
 8022480:	08022449 	.word	0x08022449
 8022484:	08022449 	.word	0x08022449
 8022488:	08022449 	.word	0x08022449
 802248c:	080225d9 	.word	0x080225d9
 8022490:	080224fd 	.word	0x080224fd
 8022494:	080225bb 	.word	0x080225bb
 8022498:	08022449 	.word	0x08022449
 802249c:	08022449 	.word	0x08022449
 80224a0:	080225fb 	.word	0x080225fb
 80224a4:	08022449 	.word	0x08022449
 80224a8:	080224fd 	.word	0x080224fd
 80224ac:	08022449 	.word	0x08022449
 80224b0:	08022449 	.word	0x08022449
 80224b4:	080225c3 	.word	0x080225c3
 80224b8:	680b      	ldr	r3, [r1, #0]
 80224ba:	1d1a      	adds	r2, r3, #4
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	600a      	str	r2, [r1, #0]
 80224c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80224c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80224c8:	2301      	movs	r3, #1
 80224ca:	e0a3      	b.n	8022614 <_printf_i+0x1f4>
 80224cc:	6825      	ldr	r5, [r4, #0]
 80224ce:	6808      	ldr	r0, [r1, #0]
 80224d0:	062e      	lsls	r6, r5, #24
 80224d2:	f100 0304 	add.w	r3, r0, #4
 80224d6:	d50a      	bpl.n	80224ee <_printf_i+0xce>
 80224d8:	6805      	ldr	r5, [r0, #0]
 80224da:	600b      	str	r3, [r1, #0]
 80224dc:	2d00      	cmp	r5, #0
 80224de:	da03      	bge.n	80224e8 <_printf_i+0xc8>
 80224e0:	232d      	movs	r3, #45	; 0x2d
 80224e2:	426d      	negs	r5, r5
 80224e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80224e8:	485e      	ldr	r0, [pc, #376]	; (8022664 <_printf_i+0x244>)
 80224ea:	230a      	movs	r3, #10
 80224ec:	e019      	b.n	8022522 <_printf_i+0x102>
 80224ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80224f2:	6805      	ldr	r5, [r0, #0]
 80224f4:	600b      	str	r3, [r1, #0]
 80224f6:	bf18      	it	ne
 80224f8:	b22d      	sxthne	r5, r5
 80224fa:	e7ef      	b.n	80224dc <_printf_i+0xbc>
 80224fc:	680b      	ldr	r3, [r1, #0]
 80224fe:	6825      	ldr	r5, [r4, #0]
 8022500:	1d18      	adds	r0, r3, #4
 8022502:	6008      	str	r0, [r1, #0]
 8022504:	0628      	lsls	r0, r5, #24
 8022506:	d501      	bpl.n	802250c <_printf_i+0xec>
 8022508:	681d      	ldr	r5, [r3, #0]
 802250a:	e002      	b.n	8022512 <_printf_i+0xf2>
 802250c:	0669      	lsls	r1, r5, #25
 802250e:	d5fb      	bpl.n	8022508 <_printf_i+0xe8>
 8022510:	881d      	ldrh	r5, [r3, #0]
 8022512:	4854      	ldr	r0, [pc, #336]	; (8022664 <_printf_i+0x244>)
 8022514:	2f6f      	cmp	r7, #111	; 0x6f
 8022516:	bf0c      	ite	eq
 8022518:	2308      	moveq	r3, #8
 802251a:	230a      	movne	r3, #10
 802251c:	2100      	movs	r1, #0
 802251e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022522:	6866      	ldr	r6, [r4, #4]
 8022524:	60a6      	str	r6, [r4, #8]
 8022526:	2e00      	cmp	r6, #0
 8022528:	bfa2      	ittt	ge
 802252a:	6821      	ldrge	r1, [r4, #0]
 802252c:	f021 0104 	bicge.w	r1, r1, #4
 8022530:	6021      	strge	r1, [r4, #0]
 8022532:	b90d      	cbnz	r5, 8022538 <_printf_i+0x118>
 8022534:	2e00      	cmp	r6, #0
 8022536:	d04d      	beq.n	80225d4 <_printf_i+0x1b4>
 8022538:	4616      	mov	r6, r2
 802253a:	fbb5 f1f3 	udiv	r1, r5, r3
 802253e:	fb03 5711 	mls	r7, r3, r1, r5
 8022542:	5dc7      	ldrb	r7, [r0, r7]
 8022544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022548:	462f      	mov	r7, r5
 802254a:	42bb      	cmp	r3, r7
 802254c:	460d      	mov	r5, r1
 802254e:	d9f4      	bls.n	802253a <_printf_i+0x11a>
 8022550:	2b08      	cmp	r3, #8
 8022552:	d10b      	bne.n	802256c <_printf_i+0x14c>
 8022554:	6823      	ldr	r3, [r4, #0]
 8022556:	07df      	lsls	r7, r3, #31
 8022558:	d508      	bpl.n	802256c <_printf_i+0x14c>
 802255a:	6923      	ldr	r3, [r4, #16]
 802255c:	6861      	ldr	r1, [r4, #4]
 802255e:	4299      	cmp	r1, r3
 8022560:	bfde      	ittt	le
 8022562:	2330      	movle	r3, #48	; 0x30
 8022564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022568:	f106 36ff 	addle.w	r6, r6, #4294967295
 802256c:	1b92      	subs	r2, r2, r6
 802256e:	6122      	str	r2, [r4, #16]
 8022570:	f8cd a000 	str.w	sl, [sp]
 8022574:	464b      	mov	r3, r9
 8022576:	aa03      	add	r2, sp, #12
 8022578:	4621      	mov	r1, r4
 802257a:	4640      	mov	r0, r8
 802257c:	f7ff fee2 	bl	8022344 <_printf_common>
 8022580:	3001      	adds	r0, #1
 8022582:	d14c      	bne.n	802261e <_printf_i+0x1fe>
 8022584:	f04f 30ff 	mov.w	r0, #4294967295
 8022588:	b004      	add	sp, #16
 802258a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802258e:	4835      	ldr	r0, [pc, #212]	; (8022664 <_printf_i+0x244>)
 8022590:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022594:	6823      	ldr	r3, [r4, #0]
 8022596:	680e      	ldr	r6, [r1, #0]
 8022598:	061f      	lsls	r7, r3, #24
 802259a:	f856 5b04 	ldr.w	r5, [r6], #4
 802259e:	600e      	str	r6, [r1, #0]
 80225a0:	d514      	bpl.n	80225cc <_printf_i+0x1ac>
 80225a2:	07d9      	lsls	r1, r3, #31
 80225a4:	bf44      	itt	mi
 80225a6:	f043 0320 	orrmi.w	r3, r3, #32
 80225aa:	6023      	strmi	r3, [r4, #0]
 80225ac:	b91d      	cbnz	r5, 80225b6 <_printf_i+0x196>
 80225ae:	6823      	ldr	r3, [r4, #0]
 80225b0:	f023 0320 	bic.w	r3, r3, #32
 80225b4:	6023      	str	r3, [r4, #0]
 80225b6:	2310      	movs	r3, #16
 80225b8:	e7b0      	b.n	802251c <_printf_i+0xfc>
 80225ba:	6823      	ldr	r3, [r4, #0]
 80225bc:	f043 0320 	orr.w	r3, r3, #32
 80225c0:	6023      	str	r3, [r4, #0]
 80225c2:	2378      	movs	r3, #120	; 0x78
 80225c4:	4828      	ldr	r0, [pc, #160]	; (8022668 <_printf_i+0x248>)
 80225c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80225ca:	e7e3      	b.n	8022594 <_printf_i+0x174>
 80225cc:	065e      	lsls	r6, r3, #25
 80225ce:	bf48      	it	mi
 80225d0:	b2ad      	uxthmi	r5, r5
 80225d2:	e7e6      	b.n	80225a2 <_printf_i+0x182>
 80225d4:	4616      	mov	r6, r2
 80225d6:	e7bb      	b.n	8022550 <_printf_i+0x130>
 80225d8:	680b      	ldr	r3, [r1, #0]
 80225da:	6826      	ldr	r6, [r4, #0]
 80225dc:	6960      	ldr	r0, [r4, #20]
 80225de:	1d1d      	adds	r5, r3, #4
 80225e0:	600d      	str	r5, [r1, #0]
 80225e2:	0635      	lsls	r5, r6, #24
 80225e4:	681b      	ldr	r3, [r3, #0]
 80225e6:	d501      	bpl.n	80225ec <_printf_i+0x1cc>
 80225e8:	6018      	str	r0, [r3, #0]
 80225ea:	e002      	b.n	80225f2 <_printf_i+0x1d2>
 80225ec:	0671      	lsls	r1, r6, #25
 80225ee:	d5fb      	bpl.n	80225e8 <_printf_i+0x1c8>
 80225f0:	8018      	strh	r0, [r3, #0]
 80225f2:	2300      	movs	r3, #0
 80225f4:	6123      	str	r3, [r4, #16]
 80225f6:	4616      	mov	r6, r2
 80225f8:	e7ba      	b.n	8022570 <_printf_i+0x150>
 80225fa:	680b      	ldr	r3, [r1, #0]
 80225fc:	1d1a      	adds	r2, r3, #4
 80225fe:	600a      	str	r2, [r1, #0]
 8022600:	681e      	ldr	r6, [r3, #0]
 8022602:	6862      	ldr	r2, [r4, #4]
 8022604:	2100      	movs	r1, #0
 8022606:	4630      	mov	r0, r6
 8022608:	f7dd fdea 	bl	80001e0 <memchr>
 802260c:	b108      	cbz	r0, 8022612 <_printf_i+0x1f2>
 802260e:	1b80      	subs	r0, r0, r6
 8022610:	6060      	str	r0, [r4, #4]
 8022612:	6863      	ldr	r3, [r4, #4]
 8022614:	6123      	str	r3, [r4, #16]
 8022616:	2300      	movs	r3, #0
 8022618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802261c:	e7a8      	b.n	8022570 <_printf_i+0x150>
 802261e:	6923      	ldr	r3, [r4, #16]
 8022620:	4632      	mov	r2, r6
 8022622:	4649      	mov	r1, r9
 8022624:	4640      	mov	r0, r8
 8022626:	47d0      	blx	sl
 8022628:	3001      	adds	r0, #1
 802262a:	d0ab      	beq.n	8022584 <_printf_i+0x164>
 802262c:	6823      	ldr	r3, [r4, #0]
 802262e:	079b      	lsls	r3, r3, #30
 8022630:	d413      	bmi.n	802265a <_printf_i+0x23a>
 8022632:	68e0      	ldr	r0, [r4, #12]
 8022634:	9b03      	ldr	r3, [sp, #12]
 8022636:	4298      	cmp	r0, r3
 8022638:	bfb8      	it	lt
 802263a:	4618      	movlt	r0, r3
 802263c:	e7a4      	b.n	8022588 <_printf_i+0x168>
 802263e:	2301      	movs	r3, #1
 8022640:	4632      	mov	r2, r6
 8022642:	4649      	mov	r1, r9
 8022644:	4640      	mov	r0, r8
 8022646:	47d0      	blx	sl
 8022648:	3001      	adds	r0, #1
 802264a:	d09b      	beq.n	8022584 <_printf_i+0x164>
 802264c:	3501      	adds	r5, #1
 802264e:	68e3      	ldr	r3, [r4, #12]
 8022650:	9903      	ldr	r1, [sp, #12]
 8022652:	1a5b      	subs	r3, r3, r1
 8022654:	42ab      	cmp	r3, r5
 8022656:	dcf2      	bgt.n	802263e <_printf_i+0x21e>
 8022658:	e7eb      	b.n	8022632 <_printf_i+0x212>
 802265a:	2500      	movs	r5, #0
 802265c:	f104 0619 	add.w	r6, r4, #25
 8022660:	e7f5      	b.n	802264e <_printf_i+0x22e>
 8022662:	bf00      	nop
 8022664:	08027723 	.word	0x08027723
 8022668:	08027734 	.word	0x08027734

0802266c <_putc_r>:
 802266c:	b570      	push	{r4, r5, r6, lr}
 802266e:	460d      	mov	r5, r1
 8022670:	4614      	mov	r4, r2
 8022672:	4606      	mov	r6, r0
 8022674:	b118      	cbz	r0, 802267e <_putc_r+0x12>
 8022676:	6983      	ldr	r3, [r0, #24]
 8022678:	b90b      	cbnz	r3, 802267e <_putc_r+0x12>
 802267a:	f7fe fd49 	bl	8021110 <__sinit>
 802267e:	4b1c      	ldr	r3, [pc, #112]	; (80226f0 <_putc_r+0x84>)
 8022680:	429c      	cmp	r4, r3
 8022682:	d124      	bne.n	80226ce <_putc_r+0x62>
 8022684:	6874      	ldr	r4, [r6, #4]
 8022686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022688:	07d8      	lsls	r0, r3, #31
 802268a:	d405      	bmi.n	8022698 <_putc_r+0x2c>
 802268c:	89a3      	ldrh	r3, [r4, #12]
 802268e:	0599      	lsls	r1, r3, #22
 8022690:	d402      	bmi.n	8022698 <_putc_r+0x2c>
 8022692:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022694:	f7fe fdff 	bl	8021296 <__retarget_lock_acquire_recursive>
 8022698:	68a3      	ldr	r3, [r4, #8]
 802269a:	3b01      	subs	r3, #1
 802269c:	2b00      	cmp	r3, #0
 802269e:	60a3      	str	r3, [r4, #8]
 80226a0:	da05      	bge.n	80226ae <_putc_r+0x42>
 80226a2:	69a2      	ldr	r2, [r4, #24]
 80226a4:	4293      	cmp	r3, r2
 80226a6:	db1c      	blt.n	80226e2 <_putc_r+0x76>
 80226a8:	b2eb      	uxtb	r3, r5
 80226aa:	2b0a      	cmp	r3, #10
 80226ac:	d019      	beq.n	80226e2 <_putc_r+0x76>
 80226ae:	6823      	ldr	r3, [r4, #0]
 80226b0:	1c5a      	adds	r2, r3, #1
 80226b2:	6022      	str	r2, [r4, #0]
 80226b4:	701d      	strb	r5, [r3, #0]
 80226b6:	b2ed      	uxtb	r5, r5
 80226b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226ba:	07da      	lsls	r2, r3, #31
 80226bc:	d405      	bmi.n	80226ca <_putc_r+0x5e>
 80226be:	89a3      	ldrh	r3, [r4, #12]
 80226c0:	059b      	lsls	r3, r3, #22
 80226c2:	d402      	bmi.n	80226ca <_putc_r+0x5e>
 80226c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226c6:	f7fe fde7 	bl	8021298 <__retarget_lock_release_recursive>
 80226ca:	4628      	mov	r0, r5
 80226cc:	bd70      	pop	{r4, r5, r6, pc}
 80226ce:	4b09      	ldr	r3, [pc, #36]	; (80226f4 <_putc_r+0x88>)
 80226d0:	429c      	cmp	r4, r3
 80226d2:	d101      	bne.n	80226d8 <_putc_r+0x6c>
 80226d4:	68b4      	ldr	r4, [r6, #8]
 80226d6:	e7d6      	b.n	8022686 <_putc_r+0x1a>
 80226d8:	4b07      	ldr	r3, [pc, #28]	; (80226f8 <_putc_r+0x8c>)
 80226da:	429c      	cmp	r4, r3
 80226dc:	bf08      	it	eq
 80226de:	68f4      	ldreq	r4, [r6, #12]
 80226e0:	e7d1      	b.n	8022686 <_putc_r+0x1a>
 80226e2:	4629      	mov	r1, r5
 80226e4:	4622      	mov	r2, r4
 80226e6:	4630      	mov	r0, r6
 80226e8:	f7ff f90e 	bl	8021908 <__swbuf_r>
 80226ec:	4605      	mov	r5, r0
 80226ee:	e7e3      	b.n	80226b8 <_putc_r+0x4c>
 80226f0:	0802761c 	.word	0x0802761c
 80226f4:	0802763c 	.word	0x0802763c
 80226f8:	080275fc 	.word	0x080275fc

080226fc <_read_r>:
 80226fc:	b538      	push	{r3, r4, r5, lr}
 80226fe:	4d07      	ldr	r5, [pc, #28]	; (802271c <_read_r+0x20>)
 8022700:	4604      	mov	r4, r0
 8022702:	4608      	mov	r0, r1
 8022704:	4611      	mov	r1, r2
 8022706:	2200      	movs	r2, #0
 8022708:	602a      	str	r2, [r5, #0]
 802270a:	461a      	mov	r2, r3
 802270c:	f7df f8ce 	bl	80018ac <_read>
 8022710:	1c43      	adds	r3, r0, #1
 8022712:	d102      	bne.n	802271a <_read_r+0x1e>
 8022714:	682b      	ldr	r3, [r5, #0]
 8022716:	b103      	cbz	r3, 802271a <_read_r+0x1e>
 8022718:	6023      	str	r3, [r4, #0]
 802271a:	bd38      	pop	{r3, r4, r5, pc}
 802271c:	20016c9c 	.word	0x20016c9c

08022720 <abort>:
 8022720:	b508      	push	{r3, lr}
 8022722:	2006      	movs	r0, #6
 8022724:	f000 f874 	bl	8022810 <raise>
 8022728:	2001      	movs	r0, #1
 802272a:	f7df f8b5 	bl	8001898 <_exit>
	...

08022730 <_fstat_r>:
 8022730:	b538      	push	{r3, r4, r5, lr}
 8022732:	4d07      	ldr	r5, [pc, #28]	; (8022750 <_fstat_r+0x20>)
 8022734:	2300      	movs	r3, #0
 8022736:	4604      	mov	r4, r0
 8022738:	4608      	mov	r0, r1
 802273a:	4611      	mov	r1, r2
 802273c:	602b      	str	r3, [r5, #0]
 802273e:	f7df f8de 	bl	80018fe <_fstat>
 8022742:	1c43      	adds	r3, r0, #1
 8022744:	d102      	bne.n	802274c <_fstat_r+0x1c>
 8022746:	682b      	ldr	r3, [r5, #0]
 8022748:	b103      	cbz	r3, 802274c <_fstat_r+0x1c>
 802274a:	6023      	str	r3, [r4, #0]
 802274c:	bd38      	pop	{r3, r4, r5, pc}
 802274e:	bf00      	nop
 8022750:	20016c9c 	.word	0x20016c9c

08022754 <_isatty_r>:
 8022754:	b538      	push	{r3, r4, r5, lr}
 8022756:	4d06      	ldr	r5, [pc, #24]	; (8022770 <_isatty_r+0x1c>)
 8022758:	2300      	movs	r3, #0
 802275a:	4604      	mov	r4, r0
 802275c:	4608      	mov	r0, r1
 802275e:	602b      	str	r3, [r5, #0]
 8022760:	f7df f8dd 	bl	800191e <_isatty>
 8022764:	1c43      	adds	r3, r0, #1
 8022766:	d102      	bne.n	802276e <_isatty_r+0x1a>
 8022768:	682b      	ldr	r3, [r5, #0]
 802276a:	b103      	cbz	r3, 802276e <_isatty_r+0x1a>
 802276c:	6023      	str	r3, [r4, #0]
 802276e:	bd38      	pop	{r3, r4, r5, pc}
 8022770:	20016c9c 	.word	0x20016c9c

08022774 <_realloc_r>:
 8022774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022776:	4607      	mov	r7, r0
 8022778:	4614      	mov	r4, r2
 802277a:	460e      	mov	r6, r1
 802277c:	b921      	cbnz	r1, 8022788 <_realloc_r+0x14>
 802277e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022782:	4611      	mov	r1, r2
 8022784:	f7fe be38 	b.w	80213f8 <_malloc_r>
 8022788:	b922      	cbnz	r2, 8022794 <_realloc_r+0x20>
 802278a:	f7fe fde5 	bl	8021358 <_free_r>
 802278e:	4625      	mov	r5, r4
 8022790:	4628      	mov	r0, r5
 8022792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022794:	f000 f858 	bl	8022848 <_malloc_usable_size_r>
 8022798:	42a0      	cmp	r0, r4
 802279a:	d20f      	bcs.n	80227bc <_realloc_r+0x48>
 802279c:	4621      	mov	r1, r4
 802279e:	4638      	mov	r0, r7
 80227a0:	f7fe fe2a 	bl	80213f8 <_malloc_r>
 80227a4:	4605      	mov	r5, r0
 80227a6:	2800      	cmp	r0, #0
 80227a8:	d0f2      	beq.n	8022790 <_realloc_r+0x1c>
 80227aa:	4631      	mov	r1, r6
 80227ac:	4622      	mov	r2, r4
 80227ae:	f7fe fd93 	bl	80212d8 <memcpy>
 80227b2:	4631      	mov	r1, r6
 80227b4:	4638      	mov	r0, r7
 80227b6:	f7fe fdcf 	bl	8021358 <_free_r>
 80227ba:	e7e9      	b.n	8022790 <_realloc_r+0x1c>
 80227bc:	4635      	mov	r5, r6
 80227be:	e7e7      	b.n	8022790 <_realloc_r+0x1c>

080227c0 <_raise_r>:
 80227c0:	291f      	cmp	r1, #31
 80227c2:	b538      	push	{r3, r4, r5, lr}
 80227c4:	4604      	mov	r4, r0
 80227c6:	460d      	mov	r5, r1
 80227c8:	d904      	bls.n	80227d4 <_raise_r+0x14>
 80227ca:	2316      	movs	r3, #22
 80227cc:	6003      	str	r3, [r0, #0]
 80227ce:	f04f 30ff 	mov.w	r0, #4294967295
 80227d2:	bd38      	pop	{r3, r4, r5, pc}
 80227d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80227d6:	b112      	cbz	r2, 80227de <_raise_r+0x1e>
 80227d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80227dc:	b94b      	cbnz	r3, 80227f2 <_raise_r+0x32>
 80227de:	4620      	mov	r0, r4
 80227e0:	f000 f830 	bl	8022844 <_getpid_r>
 80227e4:	462a      	mov	r2, r5
 80227e6:	4601      	mov	r1, r0
 80227e8:	4620      	mov	r0, r4
 80227ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80227ee:	f000 b817 	b.w	8022820 <_kill_r>
 80227f2:	2b01      	cmp	r3, #1
 80227f4:	d00a      	beq.n	802280c <_raise_r+0x4c>
 80227f6:	1c59      	adds	r1, r3, #1
 80227f8:	d103      	bne.n	8022802 <_raise_r+0x42>
 80227fa:	2316      	movs	r3, #22
 80227fc:	6003      	str	r3, [r0, #0]
 80227fe:	2001      	movs	r0, #1
 8022800:	e7e7      	b.n	80227d2 <_raise_r+0x12>
 8022802:	2400      	movs	r4, #0
 8022804:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022808:	4628      	mov	r0, r5
 802280a:	4798      	blx	r3
 802280c:	2000      	movs	r0, #0
 802280e:	e7e0      	b.n	80227d2 <_raise_r+0x12>

08022810 <raise>:
 8022810:	4b02      	ldr	r3, [pc, #8]	; (802281c <raise+0xc>)
 8022812:	4601      	mov	r1, r0
 8022814:	6818      	ldr	r0, [r3, #0]
 8022816:	f7ff bfd3 	b.w	80227c0 <_raise_r>
 802281a:	bf00      	nop
 802281c:	20000370 	.word	0x20000370

08022820 <_kill_r>:
 8022820:	b538      	push	{r3, r4, r5, lr}
 8022822:	4d07      	ldr	r5, [pc, #28]	; (8022840 <_kill_r+0x20>)
 8022824:	2300      	movs	r3, #0
 8022826:	4604      	mov	r4, r0
 8022828:	4608      	mov	r0, r1
 802282a:	4611      	mov	r1, r2
 802282c:	602b      	str	r3, [r5, #0]
 802282e:	f7df f821 	bl	8001874 <_kill>
 8022832:	1c43      	adds	r3, r0, #1
 8022834:	d102      	bne.n	802283c <_kill_r+0x1c>
 8022836:	682b      	ldr	r3, [r5, #0]
 8022838:	b103      	cbz	r3, 802283c <_kill_r+0x1c>
 802283a:	6023      	str	r3, [r4, #0]
 802283c:	bd38      	pop	{r3, r4, r5, pc}
 802283e:	bf00      	nop
 8022840:	20016c9c 	.word	0x20016c9c

08022844 <_getpid_r>:
 8022844:	f7df b80e 	b.w	8001864 <_getpid>

08022848 <_malloc_usable_size_r>:
 8022848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802284c:	1f18      	subs	r0, r3, #4
 802284e:	2b00      	cmp	r3, #0
 8022850:	bfbc      	itt	lt
 8022852:	580b      	ldrlt	r3, [r1, r0]
 8022854:	18c0      	addlt	r0, r0, r3
 8022856:	4770      	bx	lr

08022858 <_gettimeofday>:
 8022858:	4b02      	ldr	r3, [pc, #8]	; (8022864 <_gettimeofday+0xc>)
 802285a:	2258      	movs	r2, #88	; 0x58
 802285c:	601a      	str	r2, [r3, #0]
 802285e:	f04f 30ff 	mov.w	r0, #4294967295
 8022862:	4770      	bx	lr
 8022864:	20016c9c 	.word	0x20016c9c

08022868 <_init>:
 8022868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802286a:	bf00      	nop
 802286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802286e:	bc08      	pop	{r3}
 8022870:	469e      	mov	lr, r3
 8022872:	4770      	bx	lr

08022874 <_fini>:
 8022874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022876:	bf00      	nop
 8022878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802287a:	bc08      	pop	{r3}
 802287c:	469e      	mov	lr, r3
 802287e:	4770      	bx	lr
